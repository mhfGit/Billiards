
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00010878 memsz 0x00010878 flags r-x
    LOAD off    0x00011898 vaddr 0x10010898 paddr 0x100122f0 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x00013d48 vaddr 0x10013d48 paddr 0x10013d48 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fc34  100001b8  100001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000aac  1000fdec  1000fdec  00010dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  10010898  100122f0  00011898  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  10013d48  10013d48  00013d48  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000132f0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dc0  00000000  00000000  00013318  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00023002  00000000  00000000  000140d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008ff2  00000000  00000000  000370da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a74f  00000000  00000000  000400cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001a54  00000000  00000000  0004a81c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000031c8  00000000  00000000  0004c270  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010fb9  00000000  00000000  0004f438  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  000603f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00060438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00064064  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00064067  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00064073  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00064074  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00064075  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00064079  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006407d  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00064081  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0006408c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00064097  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  000640a2  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000027  00000000  00000000  000640ad  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000e57be  00000000  00000000  000640d4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001b8 l    d  .text	00000000 .text
1000fdec l    d  .rodata	00000000 .rodata
10010898 l    d  .rwdata	00000000 .rwdata
10013d48 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10013d48 l     O .bss	00000002 ctl_reg.3581
10013d4a l     O .bss	00000002 no_device.3582
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
10003ed0 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000496c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000528c l     F .text	00000034 __sprint_r
100106ca l     O .rodata	00000010 blanks.3546
100106da l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100072d4 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10008d44 l     F .text	00000008 __fp_lock
10008d4c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10010898 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
10010710 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10010858 l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
1000d5bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000d6d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000d704 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000d804 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000d8f8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000d9e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000dbc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100122e0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000de64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000dfa4 l     F .text	00000038 alt_dev_reg
10011254 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000e27c l     F .text	00000204 altera_avalon_jtag_uart_irq
1000e480 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000ed68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000f1f4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000f34c l     F .text	00000050 alt_get_errno
1000f39c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
1000b804 g     F .text	00000074 _mprec_log10
1000b8f4 g     F .text	00000084 __any_on
1000c574 g     F .text	00000064 _isatty_r
10010740 g     O .rodata	00000028 __mprec_tinytens
1000db08 g     F .text	00000078 alt_main
100050bc g     F .text	00000044 __ashldi3
10005168 g     F .text	00000084 _puts_r
10013da8 g     O .bss	00000100 alt_irq
1000c5d8 g     F .text	0000006c _lseek_r
100122f0 g       *ABS*	00000000 __flash_rwdata_start
1000d328 g     F .text	0000005c __eqdf2
10014038 g       *ABS*	00000000 __alt_heap_start
1000512c g     F .text	0000003c printf
1000c118 g     F .text	0000005c __sseek
10008de8 g     F .text	0000010c __sinit
10009a80 g     F .text	0000009c _setlocale_r
10008d60 g     F .text	00000078 __sfmoreglue
1000dba0 g     F .text	00000020 __malloc_unlock
10003d50 g     F .text	00000080 UsbGetRetryCnt
1000a6c0 g     F .text	0000018c memmove
100001f4 g     F .text	00000050 IO_init
10008dd8 g     F .text	00000010 _cleanup
1000a928 g     F .text	000000a8 _Balloc
1000d3e0 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000c50c g     F .text	00000068 _fstat_r
10013d64 g     O .bss	00000004 errno
10013d6c g     O .bss	00000004 alt_argv
1001a2b4 g       *ABS*	00000000 _gp
1000de34 g     F .text	00000030 usleep
100110d4 g     O .rwdata	00000180 alt_fd_list
1000f7a0 g     F .text	00000090 alt_find_dev
1000a580 g     F .text	00000140 memcpy
10008d54 g     F .text	0000000c _cleanup_r
100047d4 g     F .text	000000d4 __floatsidf
1000f2d4 g     F .text	00000078 alt_io_redirect
1000d444 g     F .text	0000005c __ltdf2
1000fdec g       *ABS*	00000000 __DTOR_END__
100051ec g     F .text	00000014 puts
1000b760 g     F .text	000000a4 __ratio
1000e680 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10005100 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10004a8c g     F .text	00000008 __udivsi3
1000d854 g     F .text	000000a4 isatty
10010790 g     O .rodata	000000c8 __mprec_tens
10009b1c g     F .text	0000000c __locale_charset
10003e4c g     F .text	00000084 __fixunsdfsi
10013d60 g     O .bss	00000004 __malloc_top_pad
100033f0 g     F .text	00000264 UsbGetConfigDesc2
100122bc g     O .rwdata	00000004 __mb_cur_max
10009b28 g     F .text	0000000c _localeconv_r
1000ad58 g     F .text	0000003c __i2b
1000943c g     F .text	000004e4 __sfvwrite_r
1000bfd8 g     F .text	00000064 _sbrk_r
1000c644 g     F .text	0000006c _read_r
10010c98 g     O .rwdata	0000000c __lc_ctype
100122d8 g     O .rwdata	00000004 alt_max_fd
10004e7c g     F .text	00000104 __unpack_d
1000c3bc g     F .text	0000013c _fclose_r
10008d14 g     F .text	00000030 fflush
10013d5c g     O .bss	00000004 __malloc_max_sbrked_mem
10004224 g     F .text	00000054 __adddf3
1000b4d4 g     F .text	00000148 __b2d
1000cd00 g     F .text	00000628 __umoddi3
1000da34 g     F .text	000000d4 lseek
100122b4 g     O .rwdata	00000004 _global_impure_ptr
1000b978 g     F .text	000005fc _realloc_r
10014038 g       *ABS*	00000000 __bss_end
1000f104 g     F .text	000000f0 alt_iic_isr_register
1000f67c g     F .text	00000104 alt_tick
1000c6b0 g     F .text	00000650 __udivdi3
10010768 g     O .rodata	00000028 __mprec_bigtens
1000ab3c g     F .text	00000104 __s2b
1000d4a0 g     F .text	0000011c __floatunsidf
1000b274 g     F .text	00000058 __mcmp
10002e50 g     F .text	000000fc UsbSetAddress
10009000 g     F .text	00000018 __fp_lock_all
1000f0b8 g     F .text	0000004c alt_ic_irq_enabled
1000f5e4 g     F .text	00000098 alt_alarm_stop
10013d74 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000cc alt_irq_handler
100110ac g     O .rwdata	00000028 alt_dev_null
1000ed4c g     F .text	0000001c alt_dcache_flush_all
1000ac40 g     F .text	00000068 __hi0bits
100002b0 g     F .text	00000068 IO_read
100048a8 g     F .text	000000c4 __fixdfsi
100122f0 g       *ABS*	00000000 __ram_rwdata_end
100122d0 g     O .rwdata	00000008 alt_dev_list
1000deb4 g     F .text	000000f0 write
10010898 g       *ABS*	00000000 __ram_rodata_end
1000d754 g     F .text	000000b0 fstat
10005078 g     F .text	00000044 __lshrdi3
10003dd0 g     F .text	0000007c UsbPrintMem
1000afec g     F .text	0000012c __pow5mult
10013d54 g     O .bss	00000004 __nlocale_changed
10004a94 g     F .text	00000008 __umodsi3
10014038 g       *ABS*	00000000 end
1000e1bc g     F .text	000000c0 altera_avalon_jtag_uart_init
1000fdec g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10004bac g     F .text	000000ac __clzsi2
1000e898 g     F .text	00000220 altera_avalon_jtag_uart_write
10008ff0 g     F .text	00000004 __sfp_lock_acquire
1000a488 g     F .text	000000f8 memchr
100052c0 g     F .text	00001e7c ___vfprintf_internal_r
10003750 g     F .text	000000fc UsbClassRequest
1000916c g     F .text	000002d0 _free_r
1000fc10 g     F .text	000001a0 __call_exitprocs
10013d50 g     O .bss	00000004 __mlocale_changed
100122c0 g     O .rwdata	00000004 __malloc_sbrk_base
100001b8 g     F .text	0000003c _start
10013d78 g     O .bss	00000004 _alt_tick_rate
10000318 g     F .text	00000054 coordConcat
1000b118 g     F .text	0000015c __lshift
10013d7c g     O .bss	00000004 _alt_nticks
1000dc10 g     F .text	000000f4 read
1000e010 g     F .text	00000048 alt_sys_init
1000fae0 g     F .text	00000130 __register_exitproc
1000ad94 g     F .text	00000258 __multiply
1000e524 g     F .text	00000068 altera_avalon_jtag_uart_close
10005050 g     F .text	00000028 __mulsi3
10010898 g       *ABS*	00000000 __ram_rwdata_start
1000fdec g       *ABS*	00000000 __ram_rodata_start
10013d80 g     O .bss	00000028 __malloc_current_mallinfo
1000b61c g     F .text	00000144 __d2b
10002f4c g     F .text	00000144 UsbGetDeviceDesc1
1000e058 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000f944 g     F .text	000000d4 alt_get_fd
1000ebf8 g     F .text	00000154 alt_busy_sleep
10004f80 g     F .text	000000d0 __fpcmp_parts_d
1000c358 g     F .text	00000064 _close_r
1000fa64 g     F .text	0000007c memcmp
1000e118 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10014038 g       *ABS*	00000000 __alt_stack_base
1000e168 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10007160 g     F .text	00000174 __swsetup_r
100045bc g     F .text	000001b4 __divdf3
10008ef4 g     F .text	000000fc __sfp
1000b878 g     F .text	0000007c __copybits
10010ca4 g     O .rwdata	00000408 __malloc_av_
10008ffc g     F .text	00000004 __sinit_lock_release
100042d8 g     F .text	000002e4 __muldf3
1000c03c g     F .text	00000054 __sread
10003ccc g     F .text	00000084 UsbWaitTDListDone
1000f830 g     F .text	00000114 alt_find_file
1000edb8 g     F .text	000000a0 alt_dev_llist_insert
1000db80 g     F .text	00000020 __malloc_lock
1000dd84 g     F .text	000000b0 sbrk
10008b2c g     F .text	000001e8 _fflush_r
1000c28c g     F .text	000000cc _calloc_r
10013d48 g       *ABS*	00000000 __bss_start
1000a84c g     F .text	000000dc memset
1000036c g     F .text	00002980 main
10013d70 g     O .bss	00000004 alt_envp
10013d58 g     O .bss	00000004 __malloc_max_total_mem
1000e0b8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10003654 g     F .text	000000fc UsbSetConfig
1000c174 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000c4f8 g     F .text	00000014 fclose
10013ea8 g     O .bss	00000190 _atexit0
10007510 g     F .text	0000161c _dtoa_r
10009d04 g     F .text	00000784 _malloc_r
100122dc g     O .rwdata	00000004 alt_errno
10009920 g     F .text	000000a8 _fwalk
100049e0 g     F .text	00000050 __divsi3
10010570 g     O .rodata	00000014 __thenan_df
10009030 g     F .text	0000013c _malloc_trim_r
1000384c g     F .text	00000144 UsbGetHidDesc
1000fdec g       *ABS*	00000000 __CTOR_END__
1000c17c g     F .text	000000a4 strcmp
1000fdec g       *ABS*	00000000 __flash_rodata_start
1000fdec g       *ABS*	00000000 __DTOR_LIST__
1000d384 g     F .text	0000005c __nedf2
10002d40 g     F .text	00000060 UsbRead
1000dfdc g     F .text	00000034 alt_irq_init
1000dd04 g     F .text	00000080 alt_release_fd
10010584 g     O .rodata	00000100 __clz_tab
10013d4c g     O .bss	00000004 _PathLocale
1000fa18 g     F .text	00000014 atexit
1000c220 g     F .text	0000006c _write_r
10009b34 g     F .text	0000001c setlocale
100122b8 g     O .rwdata	00000004 _impure_ptr
10013d68 g     O .bss	00000004 alt_argc
1000eeb4 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
1000b474 g     F .text	00000060 __ulp
1000bf74 g     F .text	00000038 __isinfd
10009018 g     F .text	00000018 __fp_unlock_all
100122c8 g     O .rwdata	00000008 alt_fs_list
10003990 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10009b50 g     F .text	0000000c localeconv
1000ef2c g     F .text	00000050 alt_ic_isr_register
100122f0 g       *ABS*	00000000 _edata
10014038 g       *ABS*	00000000 _end
10002cec g     F .text	00000054 UsbWrite
100001b8 g       *ABS*	00000000 __ram_exceptions_end
1000e58c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
1000f018 g     F .text	000000a0 alt_ic_irq_disable
1000c090 g     F .text	00000088 __swrite
100122c4 g     O .rwdata	00000004 __malloc_trim_threshold
1000f780 g     F .text	00000020 altera_nios2_qsys_irq_init
1000fa2c g     F .text	00000038 exit
100099c8 g     F .text	000000b8 _fwalk_reent
1000b2cc g     F .text	000001a8 __mdiff
10004a30 g     F .text	0000005c __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10008ff4 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000244 g     F .text	0000006c IO_write
1000fdb0 g     F .text	0000003c _exit
1000bfac g     F .text	0000002c __isnand
1000eab8 g     F .text	00000140 alt_alarm_start
10004a9c g     F .text	00000110 __muldi3
10009b5c g     F .text	000001a8 __smakebuf_r
10005200 g     F .text	0000008c strlen
1000f48c g     F .text	00000158 open
10004770 g     F .text	00000064 __gedf2
1000ef10 g     F .text	0000001c alt_icache_flush_all
100122e4 g     O .rwdata	00000004 alt_priority_mask
1000ef7c g     F .text	0000009c alt_ic_irq_enable
1000713c g     F .text	00000024 __vfprintf_internal
10004278 g     F .text	00000060 __subdf3
1000aca8 g     F .text	000000b0 __lo0bits
10003264 g     F .text	0000018c UsbGetConfigDesc1
100122e8 g     O .rwdata	00000008 alt_alarm_list
1000ee58 g     F .text	0000005c _do_ctors
10002da0 g     F .text	000000b0 UsbSoftReset
1000d60c g     F .text	000000cc close
10003090 g     F .text	000001d4 UsbGetDeviceDesc2
1000d964 g     F .text	00000080 alt_load
10004c58 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
10008ff8 g     F .text	00000004 __sinit_lock_acquire
1000a9f8 g     F .text	00000144 __multadd
1000a9d0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406e14 	ori	at,at,440
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18cf6a04 	addi	r3,r3,15784
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	210f6a04 	addi	r4,r4,15784
1000014c:	e0bffd17 	ldw	r2,-12(fp)
10000150:	100490fa 	slli	r2,r2,3
10000154:	2085883a 	add	r2,r4,r2
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
100001a4:	e037883a 	mov	sp,fp
100001a8:	dfc00117 	ldw	ra,4(sp)
100001ac:	df000017 	ldw	fp,0(sp)
100001b0:	dec00204 	addi	sp,sp,8
100001b4:	f800283a 	ret

Disassembly of section .text:

100001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001b8:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c0:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c4:	d6a8ad14 	ori	gp,gp,41652
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001c8:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001cc:	108f5214 	ori	r2,r2,15688

    movhi r3, %hi(__bss_end)
100001d0:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d4:	18d00e14 	ori	r3,r3,16440

    beq r2, r3, 1f
100001d8:	10c00326 	beq	r2,r3,100001e8 <_start+0x30>

0:
    stw zero, (r2)
100001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e4:	10fffd36 	bltu	r2,r3,100001dc <__alt_data_end+0xf80001dc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001e8:	000d9640 	call	1000d964 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001ec:	000db080 	call	1000db08 <alt_main>

100001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f0:	003fff06 	br	100001f0 <__alt_data_end+0xf80001f0>

100001f4 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
100001f4:	deffff04 	addi	sp,sp,-4
100001f8:	df000015 	stw	fp,0(sp)
100001fc:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000200:	00806804 	movi	r2,416
10000204:	00c00044 	movi	r3,1
10000208:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
1000020c:	00805c04 	movi	r2,368
10000210:	00c00044 	movi	r3,1
10000214:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000218:	00805804 	movi	r2,352
1000021c:	00c00044 	movi	r3,1
10000220:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000224:	00806404 	movi	r2,400
10000228:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
1000022c:	00806004 	movi	r2,384
10000230:	10000015 	stw	zero,0(r2)
}
10000234:	e037883a 	mov	sp,fp
10000238:	df000017 	ldw	fp,0(sp)
1000023c:	dec00104 	addi	sp,sp,4
10000240:	f800283a 	ret

10000244 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000244:	defffd04 	addi	sp,sp,-12
10000248:	df000215 	stw	fp,8(sp)
1000024c:	df000204 	addi	fp,sp,8
10000250:	2007883a 	mov	r3,r4
10000254:	2805883a 	mov	r2,r5
10000258:	e0fffe05 	stb	r3,-8(fp)
1000025c:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//

	*otg_hpi_address = Address;
10000260:	00806404 	movi	r2,400
10000264:	e0fffe03 	ldbu	r3,-8(fp)
10000268:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
1000026c:	00806804 	movi	r2,416
10000270:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000274:	00805804 	movi	r2,352
10000278:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
1000027c:	00806004 	movi	r2,384
10000280:	e0ffff0b 	ldhu	r3,-4(fp)
10000284:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 1;
10000288:	00806804 	movi	r2,416
1000028c:	00c00044 	movi	r3,1
10000290:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000294:	00805804 	movi	r2,352
10000298:	00c00044 	movi	r3,1
1000029c:	10c00005 	stb	r3,0(r2)

}
100002a0:	e037883a 	mov	sp,fp
100002a4:	df000017 	ldw	fp,0(sp)
100002a8:	dec00104 	addi	sp,sp,4
100002ac:	f800283a 	ret

100002b0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002b0:	defffd04 	addi	sp,sp,-12
100002b4:	df000215 	stw	fp,8(sp)
100002b8:	df000204 	addi	fp,sp,8
100002bc:	2005883a 	mov	r2,r4
100002c0:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address;
100002c4:	00806404 	movi	r2,400
100002c8:	e0ffff03 	ldbu	r3,-4(fp)
100002cc:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
100002d0:	00806804 	movi	r2,416
100002d4:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100002d8:	00805c04 	movi	r2,368
100002dc:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
100002e0:	00806004 	movi	r2,384
100002e4:	10800017 	ldw	r2,0(r2)
100002e8:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
100002ec:	00805c04 	movi	r2,368
100002f0:	00c00044 	movi	r3,1
100002f4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002f8:	00806804 	movi	r2,416
100002fc:	00c00044 	movi	r3,1
10000300:	10c00005 	stb	r3,0(r2)
	return temp;
10000304:	e0bffe0b 	ldhu	r2,-8(fp)
}
10000308:	e037883a 	mov	sp,fp
1000030c:	df000017 	ldw	fp,0(sp)
10000310:	dec00104 	addi	sp,sp,4
10000314:	f800283a 	ret

10000318 <coordConcat>:
#include <math.h>



unsigned int coordConcat(unsigned short x, unsigned short y)
{
10000318:	defffc04 	addi	sp,sp,-16
1000031c:	df000315 	stw	fp,12(sp)
10000320:	df000304 	addi	fp,sp,12
10000324:	2007883a 	mov	r3,r4
10000328:	2805883a 	mov	r2,r5
1000032c:	e0fffe0d 	sth	r3,-8(fp)
10000330:	e0bfff0d 	sth	r2,-4(fp)
	unsigned int concatTotal = x;
10000334:	e0bffe0b 	ldhu	r2,-8(fp)
10000338:	e0bffd15 	stw	r2,-12(fp)
	concatTotal <<= 10;
1000033c:	e0bffd17 	ldw	r2,-12(fp)
10000340:	100492ba 	slli	r2,r2,10
10000344:	e0bffd15 	stw	r2,-12(fp)
	concatTotal |= y;
10000348:	e0bfff0b 	ldhu	r2,-4(fp)
1000034c:	e0fffd17 	ldw	r3,-12(fp)
10000350:	1884b03a 	or	r2,r3,r2
10000354:	e0bffd15 	stw	r2,-12(fp)
	return concatTotal;
10000358:	e0bffd17 	ldw	r2,-12(fp)
}
1000035c:	e037883a 	mov	sp,fp
10000360:	df000017 	ldw	fp,0(sp)
10000364:	dec00104 	addi	sp,sp,4
10000368:	f800283a 	ret

1000036c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
1000036c:	deffc304 	addi	sp,sp,-244
10000370:	dfc03c15 	stw	ra,240(sp)
10000374:	df003b15 	stw	fp,236(sp)
10000378:	dc403a15 	stw	r17,232(sp)
1000037c:	dc003915 	stw	r16,228(sp)
10000380:	df003904 	addi	fp,sp,228
	IO_init();
10000384:	00001f40 	call	100001f4 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10000388:	e03fdf0d 	sth	zero,-132(fp)
	volatile int keycode = 0;
1000038c:	e03fff15 	stw	zero,-4(fp)
	alt_u8 toggle = 0;
10000390:	e03fc785 	stb	zero,-226(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10000394:	01040074 	movhi	r4,4097
10000398:	213f7b04 	addi	r4,r4,-532
1000039c:	00051ec0 	call	100051ec <puts>
100003a0:	00000306 	br	100003b0 <main+0x44>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
			{
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device)
					goto USB_HOT_PLUG;
100003a4:	0001883a 	nop
100003a8:	00000106 	br	100003b0 <main+0x44>
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			usleep(5*1000);

			if(usb_ctl_val & no_device)
				goto USB_HOT_PLUG;
100003ac:	0001883a 	nop

	printf("USB keyboard setup...\n\n");

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100003b0:	0002da00 	call	10002da0 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100003b4:	01005104 	movi	r4,324
100003b8:	000b883a 	mov	r5,zero
100003bc:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100003c0:	01302414 	movui	r4,49296
100003c4:	017fffd4 	movui	r5,65535
100003c8:	0002cec0 	call	10002cec <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
100003cc:	01006d04 	movi	r4,436
100003d0:	01409604 	movi	r5,600
100003d4:	0002cec0 	call	10002cec <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
100003d8:	00811004 	movi	r2,1088
100003dc:	e0bfc70d 	sth	r2,-228(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
100003e0:	e0bfc70b 	ldhu	r2,-228(fp)
100003e4:	01005084 	movi	r4,322
100003e8:	100b883a 	mov	r5,r2
100003ec:	0002cec0 	call	10002cec <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100003f0:	00808404 	movi	r2,528
100003f4:	e0bfdf8d 	sth	r2,-130(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100003f8:	e0bfdf8b 	ldhu	r2,-130(fp)
100003fc:	01302314 	movui	r4,49292
10000400:	100b883a 	mov	r5,r2
10000404:	0002cec0 	call	10002cec <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10000408:	01007104 	movi	r4,452
1000040c:	000b883a 	mov	r5,zero
10000410:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000414:	01007184 	movi	r4,454
10000418:	000b883a 	mov	r5,zero
1000041c:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000420:	01007204 	movi	r4,456
10000424:	000b883a 	mov	r5,zero
10000428:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000042c:	01007284 	movi	r4,458
10000430:	000b883a 	mov	r5,zero
10000434:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000438:	01007304 	movi	r4,460
1000043c:	000b883a 	mov	r5,zero
10000440:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000444:	01007384 	movi	r4,462
10000448:	000b883a 	mov	r5,zero
1000044c:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000450:	01007404 	movi	r4,464
10000454:	000b883a 	mov	r5,zero
10000458:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000045c:	01007484 	movi	r4,466
10000460:	000b883a 	mov	r5,zero
10000464:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000468:	01007504 	movi	r4,468
1000046c:	000b883a 	mov	r5,zero
10000470:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000474:	01007584 	movi	r4,470
10000478:	000b883a 	mov	r5,zero
1000047c:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000480:	01007604 	movi	r4,472
10000484:	000b883a 	mov	r5,zero
10000488:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
1000048c:	01007684 	movi	r4,474
10000490:	000b883a 	mov	r5,zero
10000494:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000498:	01007704 	movi	r4,476
1000049c:	000b883a 	mov	r5,zero
100004a0:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100004a4:	01007784 	movi	r4,478
100004a8:	000b883a 	mov	r5,zero
100004ac:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100004b0:	01007084 	movi	r4,450
100004b4:	01401c84 	movi	r5,114
100004b8:	0002cec0 	call	10002cec <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100004bc:	01000044 	movi	r4,1
100004c0:	01738054 	movui	r5,52737
100004c4:	00002440 	call	10000244 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
100004c8:	0001883a 	nop
100004cc:	010000c4 	movi	r4,3
100004d0:	00002b00 	call	100002b0 <IO_read>
100004d4:	10bfffcc 	andi	r2,r2,65535
100004d8:	103ffc26 	beq	r2,zero,100004cc <__alt_data_end+0xf80004cc>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100004dc:	00000806 	br	10000500 <main+0x194>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100004e0:	01000044 	movi	r4,1
100004e4:	00002b00 	call	100002b0 <IO_read>
100004e8:	10bfffcc 	andi	r2,r2,65535
100004ec:	01040074 	movhi	r4,4097
100004f0:	213f8104 	addi	r4,r4,-508
100004f4:	100b883a 	mov	r5,r2
100004f8:	000512c0 	call	1000512c <printf>
		goto USB_HOT_PLUG;
100004fc:	003fac06 	br	100003b0 <__alt_data_end+0xf80003b0>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000500:	01000044 	movi	r4,1
10000504:	00002b00 	call	100002b0 <IO_read>
10000508:	10bfffcc 	andi	r2,r2,65535
1000050c:	1083fb58 	cmpnei	r2,r2,4077
10000510:	103ff31e 	bne	r2,zero,100004e0 <__alt_data_end+0xf80004e0>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000514:	01040074 	movhi	r4,4097
10000518:	213f8a04 	addi	r4,r4,-472
1000051c:	000512c0 	call	1000512c <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000520:	01007084 	movi	r4,450
10000524:	01401d04 	movi	r5,116
10000528:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
1000052c:	01007104 	movi	r4,452
10000530:	01400f04 	movi	r5,60
10000534:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000538:	01007184 	movi	r4,454
1000053c:	000b883a 	mov	r5,zero
10000540:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000544:	01007204 	movi	r4,456
10000548:	000b883a 	mov	r5,zero
1000054c:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000550:	01007284 	movi	r4,458
10000554:	000b883a 	mov	r5,zero
10000558:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000055c:	01007304 	movi	r4,460
10000560:	000b883a 	mov	r5,zero
10000564:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000568:	01007384 	movi	r4,462
1000056c:	000b883a 	mov	r5,zero
10000570:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000574:	01007404 	movi	r4,464
10000578:	000b883a 	mov	r5,zero
1000057c:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000580:	01007484 	movi	r4,466
10000584:	000b883a 	mov	r5,zero
10000588:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
1000058c:	01007504 	movi	r4,468
10000590:	000b883a 	mov	r5,zero
10000594:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000598:	01007584 	movi	r4,470
1000059c:	000b883a 	mov	r5,zero
100005a0:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100005a4:	01007604 	movi	r4,472
100005a8:	000b883a 	mov	r5,zero
100005ac:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100005b0:	01007684 	movi	r4,474
100005b4:	000b883a 	mov	r5,zero
100005b8:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100005bc:	01007704 	movi	r4,476
100005c0:	000b883a 	mov	r5,zero
100005c4:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100005c8:	01007784 	movi	r4,478
100005cc:	000b883a 	mov	r5,zero
100005d0:	0002cec0 	call	10002cec <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100005d4:	01000044 	movi	r4,1
100005d8:	01738054 	movui	r5,52737
100005dc:	00002440 	call	10000244 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100005e0:	0001883a 	nop
100005e4:	01000044 	movi	r4,1
100005e8:	00002b00 	call	100002b0 <IO_read>
100005ec:	10bfffcc 	andi	r2,r2,65535
100005f0:	1083fb58 	cmpnei	r2,r2,4077
100005f4:	10000826 	beq	r2,zero,10000618 <main+0x2ac>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100005f8:	01000044 	movi	r4,1
100005fc:	00002b00 	call	100002b0 <IO_read>
10000600:	10bfffcc 	andi	r2,r2,65535
10000604:	01040074 	movhi	r4,4097
10000608:	213f8104 	addi	r4,r4,-508
1000060c:	100b883a 	mov	r5,r2
10000610:	000512c0 	call	1000512c <printf>
		goto USB_HOT_PLUG;
10000614:	003f6606 	br	100003b0 <__alt_data_end+0xf80003b0>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10000618:	00b02284 	movi	r2,-16246
1000061c:	d0a6a50d 	sth	r2,-25964(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000620:	008c0004 	movi	r2,12288
10000624:	d0a6a58d 	sth	r2,-25962(gp)
	fs_device = A_DP_STAT;
10000628:	00880004 	movi	r2,8192
1000062c:	e0bfdf0d 	sth	r2,-132(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000630:	d0a6a50b 	ldhu	r2,-25964(gp)
10000634:	10bfffcc 	andi	r2,r2,65535
10000638:	1009883a 	mov	r4,r2
1000063c:	0002d400 	call	10002d40 <UsbRead>
10000640:	e0bfc70d 	sth	r2,-228(fp)

	if (!(usb_ctl_val & no_device))
10000644:	d0a6a58b 	ldhu	r2,-25962(gp)
10000648:	e0ffc70b 	ldhu	r3,-228(fp)
1000064c:	1884703a 	and	r2,r3,r2
10000650:	10bfffcc 	andi	r2,r2,65535
10000654:	1000341e 	bne	r2,zero,10000728 <main+0x3bc>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000658:	e03fc7c5 	stb	zero,-225(fp)
1000065c:	00000f06 	br	1000069c <main+0x330>
		{
			usleep(5*1000);
10000660:	0104e204 	movi	r4,5000
10000664:	000de340 	call	1000de34 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000668:	d0a6a50b 	ldhu	r2,-25964(gp)
1000066c:	10bfffcc 	andi	r2,r2,65535
10000670:	1009883a 	mov	r4,r2
10000674:	0002d400 	call	10002d40 <UsbRead>
10000678:	e0bfc70d 	sth	r2,-228(fp)
			if(usb_ctl_val & no_device) break;
1000067c:	d0a6a58b 	ldhu	r2,-25962(gp)
10000680:	e0ffc70b 	ldhu	r3,-228(fp)
10000684:	1884703a 	and	r2,r3,r2
10000688:	10bfffcc 	andi	r2,r2,65535
1000068c:	1000071e 	bne	r2,zero,100006ac <main+0x340>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000690:	e0bfc7c3 	ldbu	r2,-225(fp)
10000694:	10800044 	addi	r2,r2,1
10000698:	e0bfc7c5 	stb	r2,-225(fp)
1000069c:	e0bfc7c3 	ldbu	r2,-225(fp)
100006a0:	10800170 	cmpltui	r2,r2,5
100006a4:	103fee1e 	bne	r2,zero,10000660 <__alt_data_end+0xf8000660>
100006a8:	00000106 	br	100006b0 <main+0x344>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
100006ac:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
100006b0:	d0a6a58b 	ldhu	r2,-25962(gp)
100006b4:	e0ffc70b 	ldhu	r3,-228(fp)
100006b8:	1884703a 	and	r2,r3,r2
100006bc:	10bfffcc 	andi	r2,r2,65535
100006c0:	1000251e 	bne	r2,zero,10000758 <main+0x3ec>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
100006c4:	01040074 	movhi	r4,4097
100006c8:	213f8e04 	addi	r4,r4,-456
100006cc:	00051ec0 	call	100051ec <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
100006d0:	01040074 	movhi	r4,4097
100006d4:	213f9804 	addi	r4,r4,-416
100006d8:	00051ec0 	call	100051ec <puts>
			while (!(usb_ctl_val & no_device))
100006dc:	00000c06 	br	10000710 <main+0x3a4>
			{
				usb_ctl_val = UsbRead(ctl_reg);
100006e0:	d0a6a50b 	ldhu	r2,-25964(gp)
100006e4:	10bfffcc 	andi	r2,r2,65535
100006e8:	1009883a 	mov	r4,r2
100006ec:	0002d400 	call	10002d40 <UsbRead>
100006f0:	e0bfc70d 	sth	r2,-228(fp)
				if(usb_ctl_val & no_device)
100006f4:	d0a6a58b 	ldhu	r2,-25962(gp)
100006f8:	e0ffc70b 	ldhu	r3,-228(fp)
100006fc:	1884703a 	and	r2,r3,r2
10000700:	10bfffcc 	andi	r2,r2,65535
10000704:	103f271e 	bne	r2,zero,100003a4 <__alt_data_end+0xf80003a4>
					goto USB_HOT_PLUG;

				usleep(2000);
10000708:	0101f404 	movi	r4,2000
1000070c:	000de340 	call	1000de34 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10000710:	d0a6a58b 	ldhu	r2,-25962(gp)
10000714:	e0ffc70b 	ldhu	r3,-228(fp)
10000718:	1884703a 	and	r2,r3,r2
1000071c:	10bfffcc 	andi	r2,r2,65535
10000720:	103fef26 	beq	r2,zero,100006e0 <__alt_data_end+0xf80006e0>
10000724:	00000c06 	br	10000758 <main+0x3ec>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10000728:	e0ffc70b 	ldhu	r3,-228(fp)
1000072c:	e0bfdf0b 	ldhu	r2,-132(fp)
10000730:	1884703a 	and	r2,r3,r2
10000734:	10bfffcc 	andi	r2,r2,65535
10000738:	10000426 	beq	r2,zero,1000074c <main+0x3e0>
		{
			printf("[INFO]: full speed device\n");
1000073c:	01040074 	movhi	r4,4097
10000740:	213fa404 	addi	r4,r4,-368
10000744:	00051ec0 	call	100051ec <puts>
10000748:	00000306 	br	10000758 <main+0x3ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
1000074c:	01040074 	movhi	r4,4097
10000750:	213fab04 	addi	r4,r4,-340
10000754:	00051ec0 	call	100051ec <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000758:	0002e500 	call	10002e50 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000075c:	00000306 	br	1000076c <main+0x400>
	{
		UsbSetAddress();
10000760:	0002e500 	call	10002e50 <UsbSetAddress>
		usleep(10*1000);
10000764:	0109c404 	movi	r4,10000
10000768:	000de340 	call	1000de34 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000076c:	010000c4 	movi	r4,3
10000770:	00002b00 	call	100002b0 <IO_read>
10000774:	10bfffcc 	andi	r2,r2,65535
10000778:	1080040c 	andi	r2,r2,16
1000077c:	103ff826 	beq	r2,zero,10000760 <__alt_data_end+0xf8000760>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000780:	0003ccc0 	call	10003ccc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000784:	01000084 	movi	r4,2
10000788:	01414184 	movi	r5,1286
1000078c:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000790:	0009883a 	mov	r4,zero
10000794:	00002b00 	call	100002b0 <IO_read>
10000798:	10bfffcc 	andi	r2,r2,65535
1000079c:	01040074 	movhi	r4,4097
100007a0:	213fb204 	addi	r4,r4,-312
100007a4:	100b883a 	mov	r5,r2
100007a8:	000512c0 	call	1000512c <printf>

	IO_write(HPI_ADDR,0x0508); // n
100007ac:	01000084 	movi	r4,2
100007b0:	01414204 	movi	r5,1288
100007b4:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100007b8:	0009883a 	mov	r4,zero
100007bc:	00002b00 	call	100002b0 <IO_read>
100007c0:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
100007c4:	e0bfc70b 	ldhu	r2,-228(fp)
100007c8:	01040074 	movhi	r4,4097
100007cc:	213fbd04 	addi	r4,r4,-268
100007d0:	100b883a 	mov	r5,r2
100007d4:	000512c0 	call	1000512c <printf>
	while (usb_ctl_val != 0x03) // retries occurred
100007d8:	e0bfc70b 	ldhu	r2,-228(fp)
100007dc:	108000e0 	cmpeqi	r2,r2,3
100007e0:	1000031e 	bne	r2,zero,100007f0 <main+0x484>
	{
		usb_ctl_val = UsbGetRetryCnt();
100007e4:	0003d500 	call	10003d50 <UsbGetRetryCnt>
100007e8:	e0bfc70d 	sth	r2,-228(fp)

		goto USB_HOT_PLUG;
100007ec:	003ef006 	br	100003b0 <__alt_data_end+0xf80003b0>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100007f0:	01040074 	movhi	r4,4097
100007f4:	213fc904 	addi	r4,r4,-220
100007f8:	00051ec0 	call	100051ec <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100007fc:	0002f4c0 	call	10002f4c <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000800:	00000306 	br	10000810 <main+0x4a4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10000804:	0002f4c0 	call	10002f4c <UsbGetDeviceDesc1>
		usleep(10*1000);
10000808:	0109c404 	movi	r4,10000
1000080c:	000de340 	call	1000de34 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000810:	010000c4 	movi	r4,3
10000814:	00002b00 	call	100002b0 <IO_read>
10000818:	10bfffcc 	andi	r2,r2,65535
1000081c:	1080040c 	andi	r2,r2,16
10000820:	103ff826 	beq	r2,zero,10000804 <__alt_data_end+0xf8000804>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000824:	0003ccc0 	call	10003ccc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000828:	01000084 	movi	r4,2
1000082c:	01414184 	movi	r5,1286
10000830:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000834:	0009883a 	mov	r4,zero
10000838:	00002b00 	call	100002b0 <IO_read>
1000083c:	10bfffcc 	andi	r2,r2,65535
10000840:	01040074 	movhi	r4,4097
10000844:	213fd804 	addi	r4,r4,-160
10000848:	100b883a 	mov	r5,r2
1000084c:	000512c0 	call	1000512c <printf>

	IO_write(HPI_ADDR,0x0508);
10000850:	01000084 	movi	r4,2
10000854:	01414204 	movi	r5,1288
10000858:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000085c:	0009883a 	mov	r4,zero
10000860:	00002b00 	call	100002b0 <IO_read>
10000864:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000868:	e0bfc70b 	ldhu	r2,-228(fp)
1000086c:	01040074 	movhi	r4,4097
10000870:	213fe304 	addi	r4,r4,-116
10000874:	100b883a 	mov	r5,r2
10000878:	000512c0 	call	1000512c <printf>
	while (usb_ctl_val != 0x03)
1000087c:	00000206 	br	10000888 <main+0x51c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000880:	0003d500 	call	10003d50 <UsbGetRetryCnt>
10000884:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000888:	e0bfc70b 	ldhu	r2,-228(fp)
1000088c:	108000d8 	cmpnei	r2,r2,3
10000890:	103ffb1e 	bne	r2,zero,10000880 <__alt_data_end+0xf8000880>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000894:	01040074 	movhi	r4,4097
10000898:	213fef04 	addi	r4,r4,-68
1000089c:	00051ec0 	call	100051ec <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100008a0:	00030900 	call	10003090 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008a4:	00000306 	br	100008b4 <main+0x548>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
100008a8:	00030900 	call	10003090 <UsbGetDeviceDesc2>
		usleep(10*1000);
100008ac:	0109c404 	movi	r4,10000
100008b0:	000de340 	call	1000de34 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008b4:	010000c4 	movi	r4,3
100008b8:	00002b00 	call	100002b0 <IO_read>
100008bc:	10bfffcc 	andi	r2,r2,65535
100008c0:	1080040c 	andi	r2,r2,16
100008c4:	103ff826 	beq	r2,zero,100008a8 <__alt_data_end+0xf80008a8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100008c8:	0003ccc0 	call	10003ccc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100008cc:	01000084 	movi	r4,2
100008d0:	01414184 	movi	r5,1286
100008d4:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100008d8:	0009883a 	mov	r4,zero
100008dc:	00002b00 	call	100002b0 <IO_read>
100008e0:	10bfffcc 	andi	r2,r2,65535
100008e4:	01040074 	movhi	r4,4097
100008e8:	213fd804 	addi	r4,r4,-160
100008ec:	100b883a 	mov	r5,r2
100008f0:	000512c0 	call	1000512c <printf>

	IO_write(HPI_ADDR,0x0508);
100008f4:	01000084 	movi	r4,2
100008f8:	01414204 	movi	r5,1288
100008fc:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000900:	0009883a 	mov	r4,zero
10000904:	00002b00 	call	100002b0 <IO_read>
10000908:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
1000090c:	e0bfc70b 	ldhu	r2,-228(fp)
10000910:	01040074 	movhi	r4,4097
10000914:	213fe304 	addi	r4,r4,-116
10000918:	100b883a 	mov	r5,r2
1000091c:	000512c0 	call	1000512c <printf>
	while (usb_ctl_val != 0x03)
10000920:	00000206 	br	1000092c <main+0x5c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000924:	0003d500 	call	10003d50 <UsbGetRetryCnt>
10000928:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000092c:	e0bfc70b 	ldhu	r2,-228(fp)
10000930:	108000d8 	cmpnei	r2,r2,3
10000934:	103ffb1e 	bne	r2,zero,10000924 <__alt_data_end+0xf8000924>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000938:	01040074 	movhi	r4,4097
1000093c:	21000304 	addi	r4,r4,12
10000940:	00051ec0 	call	100051ec <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000944:	00032640 	call	10003264 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000948:	00000306 	br	10000958 <main+0x5ec>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
1000094c:	00032640 	call	10003264 <UsbGetConfigDesc1>
		usleep(10*1000);
10000950:	0109c404 	movi	r4,10000
10000954:	000de340 	call	1000de34 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000958:	010000c4 	movi	r4,3
1000095c:	00002b00 	call	100002b0 <IO_read>
10000960:	10bfffcc 	andi	r2,r2,65535
10000964:	1080040c 	andi	r2,r2,16
10000968:	103ff826 	beq	r2,zero,1000094c <__alt_data_end+0xf800094c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000096c:	0003ccc0 	call	10003ccc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000970:	01000084 	movi	r4,2
10000974:	01414184 	movi	r5,1286
10000978:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000097c:	0009883a 	mov	r4,zero
10000980:	00002b00 	call	100002b0 <IO_read>
10000984:	10bfffcc 	andi	r2,r2,65535
10000988:	01040074 	movhi	r4,4097
1000098c:	21001504 	addi	r4,r4,84
10000990:	100b883a 	mov	r5,r2
10000994:	000512c0 	call	1000512c <printf>

	IO_write(HPI_ADDR,0x0508);
10000998:	01000084 	movi	r4,2
1000099c:	01414204 	movi	r5,1288
100009a0:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100009a4:	0009883a 	mov	r4,zero
100009a8:	00002b00 	call	100002b0 <IO_read>
100009ac:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
100009b0:	e0bfc70b 	ldhu	r2,-228(fp)
100009b4:	01040074 	movhi	r4,4097
100009b8:	21002004 	addi	r4,r4,128
100009bc:	100b883a 	mov	r5,r2
100009c0:	000512c0 	call	1000512c <printf>
	while (usb_ctl_val != 0x03)
100009c4:	00000206 	br	100009d0 <main+0x664>
	{
		usb_ctl_val = UsbGetRetryCnt();
100009c8:	0003d500 	call	10003d50 <UsbGetRetryCnt>
100009cc:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100009d0:	e0bfc70b 	ldhu	r2,-228(fp)
100009d4:	108000d8 	cmpnei	r2,r2,3
100009d8:	103ffb1e 	bne	r2,zero,100009c8 <__alt_data_end+0xf80009c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
100009dc:	01040074 	movhi	r4,4097
100009e0:	21002c04 	addi	r4,r4,176
100009e4:	00051ec0 	call	100051ec <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
100009e8:	00033f00 	call	100033f0 <UsbGetConfigDesc2>

	usleep(100*1000);
100009ec:	010000b4 	movhi	r4,2
100009f0:	2121a804 	addi	r4,r4,-31072
100009f4:	000de340 	call	1000de34 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009f8:	00000306 	br	10000a08 <main+0x69c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100009fc:	00033f00 	call	100033f0 <UsbGetConfigDesc2>
		usleep(10*1000);
10000a00:	0109c404 	movi	r4,10000
10000a04:	000de340 	call	1000de34 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a08:	010000c4 	movi	r4,3
10000a0c:	00002b00 	call	100002b0 <IO_read>
10000a10:	10bfffcc 	andi	r2,r2,65535
10000a14:	1080040c 	andi	r2,r2,16
10000a18:	103ff826 	beq	r2,zero,100009fc <__alt_data_end+0xf80009fc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a1c:	0003ccc0 	call	10003ccc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a20:	01000084 	movi	r4,2
10000a24:	01414184 	movi	r5,1286
10000a28:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a2c:	0009883a 	mov	r4,zero
10000a30:	00002b00 	call	100002b0 <IO_read>
10000a34:	10bfffcc 	andi	r2,r2,65535
10000a38:	01040074 	movhi	r4,4097
10000a3c:	21003f04 	addi	r4,r4,252
10000a40:	100b883a 	mov	r5,r2
10000a44:	000512c0 	call	1000512c <printf>

	IO_write(HPI_ADDR,0x0508);
10000a48:	01000084 	movi	r4,2
10000a4c:	01414204 	movi	r5,1288
10000a50:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a54:	0009883a 	mov	r4,zero
10000a58:	00002b00 	call	100002b0 <IO_read>
10000a5c:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000a60:	e0bfc70b 	ldhu	r2,-228(fp)
10000a64:	01040074 	movhi	r4,4097
10000a68:	21004a04 	addi	r4,r4,296
10000a6c:	100b883a 	mov	r5,r2
10000a70:	000512c0 	call	1000512c <printf>
	while (usb_ctl_val != 0x03)
10000a74:	00000206 	br	10000a80 <main+0x714>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a78:	0003d500 	call	10003d50 <UsbGetRetryCnt>
10000a7c:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a80:	e0bfc70b 	ldhu	r2,-228(fp)
10000a84:	108000d8 	cmpnei	r2,r2,3
10000a88:	103ffb1e 	bne	r2,zero,10000a78 <__alt_data_end+0xf8000a78>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000a8c:	01040074 	movhi	r4,4097
10000a90:	21005604 	addi	r4,r4,344
10000a94:	00051ec0 	call	100051ec <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000a98:	01000084 	movi	r4,2
10000a9c:	01415b04 	movi	r5,1388
10000aa0:	00002440 	call	10000244 <IO_write>
	code = IO_read(HPI_DATA);
10000aa4:	0009883a 	mov	r4,zero
10000aa8:	00002b00 	call	100002b0 <IO_read>
10000aac:	e0bfe00d 	sth	r2,-128(fp)
	code = code & 0x003;
10000ab0:	e0bfe00b 	ldhu	r2,-128(fp)
10000ab4:	108000cc 	andi	r2,r2,3
10000ab8:	e0bfe00d 	sth	r2,-128(fp)
	printf("\ncode = %x\n", code);
10000abc:	e0bfe00b 	ldhu	r2,-128(fp)
10000ac0:	01040074 	movhi	r4,4097
10000ac4:	21006904 	addi	r4,r4,420
10000ac8:	100b883a 	mov	r5,r2
10000acc:	000512c0 	call	1000512c <printf>

	if (code == 0x01)
10000ad0:	e0bfe00b 	ldhu	r2,-128(fp)
10000ad4:	10800058 	cmpnei	r2,r2,1
10000ad8:	1000041e 	bne	r2,zero,10000aec <main+0x780>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000adc:	01040074 	movhi	r4,4097
10000ae0:	21006c04 	addi	r4,r4,432
10000ae4:	00051ec0 	call	100051ec <puts>
10000ae8:	00000306 	br	10000af8 <main+0x78c>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000aec:	01040074 	movhi	r4,4097
10000af0:	21007b04 	addi	r4,r4,492
10000af4:	00051ec0 	call	100051ec <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000af8:	01000084 	movi	r4,2
10000afc:	01415d84 	movi	r5,1398
10000b00:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000b04:	0009883a 	mov	r4,zero
10000b08:	0141cfc4 	movi	r5,1855
10000b0c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000b10:	0009883a 	mov	r4,zero
10000b14:	01604154 	movui	r5,33029
10000b18:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000b1c:	0009883a 	mov	r4,zero
10000b20:	014000c4 	movi	r5,3
10000b24:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000b28:	0009883a 	mov	r4,zero
10000b2c:	01400204 	movi	r5,8
10000b30:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000b34:	0009883a 	mov	r4,zero
10000b38:	016b0294 	movui	r5,44042
10000b3c:	00002440 	call	10000244 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000b40:	01006c04 	movi	r4,432
10000b44:	01415d84 	movi	r5,1398
10000b48:	0002cec0 	call	10002cec <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000b4c:	01000084 	movi	r4,2
10000b50:	01415f04 	movi	r5,1404
10000b54:	00002440 	call	10000244 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b58:	0009883a 	mov	r4,zero
10000b5c:	00002b00 	call	100002b0 <IO_read>
10000b60:	e0bfe085 	stb	r2,-126(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000b64:	e0bfe083 	ldbu	r2,-126(fp)
10000b68:	01040074 	movhi	r4,4097
10000b6c:	21008404 	addi	r4,r4,528
10000b70:	100b883a 	mov	r5,r2
10000b74:	000512c0 	call	1000512c <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b78:	00036540 	call	10003654 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b7c:	00000306 	br	10000b8c <main+0x820>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000b80:	00036540 	call	10003654 <UsbSetConfig>
		usleep(10*1000);
10000b84:	0109c404 	movi	r4,10000
10000b88:	000de340 	call	1000de34 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b8c:	010000c4 	movi	r4,3
10000b90:	00002b00 	call	100002b0 <IO_read>
10000b94:	10bfffcc 	andi	r2,r2,65535
10000b98:	1080040c 	andi	r2,r2,16
10000b9c:	103ff826 	beq	r2,zero,10000b80 <__alt_data_end+0xf8000b80>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ba0:	0003ccc0 	call	10003ccc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000ba4:	01000084 	movi	r4,2
10000ba8:	01414184 	movi	r5,1286
10000bac:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000bb0:	0009883a 	mov	r4,zero
10000bb4:	00002b00 	call	100002b0 <IO_read>
10000bb8:	10bfffcc 	andi	r2,r2,65535
10000bbc:	01040074 	movhi	r4,4097
10000bc0:	21008e04 	addi	r4,r4,568
10000bc4:	100b883a 	mov	r5,r2
10000bc8:	000512c0 	call	1000512c <printf>

	IO_write(HPI_ADDR,0x0508);
10000bcc:	01000084 	movi	r4,2
10000bd0:	01414204 	movi	r5,1288
10000bd4:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000bd8:	0009883a 	mov	r4,zero
10000bdc:	00002b00 	call	100002b0 <IO_read>
10000be0:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000be4:	e0bfc70b 	ldhu	r2,-228(fp)
10000be8:	01040074 	movhi	r4,4097
10000bec:	21009904 	addi	r4,r4,612
10000bf0:	100b883a 	mov	r5,r2
10000bf4:	000512c0 	call	1000512c <printf>
	while (usb_ctl_val != 0x03)
10000bf8:	00000206 	br	10000c04 <main+0x898>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000bfc:	0003d500 	call	10003d50 <UsbGetRetryCnt>
10000c00:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c04:	e0bfc70b 	ldhu	r2,-228(fp)
10000c08:	108000d8 	cmpnei	r2,r2,3
10000c0c:	103ffb1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000c10:	01040074 	movhi	r4,4097
10000c14:	2100a504 	addi	r4,r4,660
10000c18:	00051ec0 	call	100051ec <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000c1c:	00037500 	call	10003750 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c20:	00000306 	br	10000c30 <main+0x8c4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000c24:	00037500 	call	10003750 <UsbClassRequest>
		usleep(10*1000);
10000c28:	0109c404 	movi	r4,10000
10000c2c:	000de340 	call	1000de34 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c30:	010000c4 	movi	r4,3
10000c34:	00002b00 	call	100002b0 <IO_read>
10000c38:	10bfffcc 	andi	r2,r2,65535
10000c3c:	1080040c 	andi	r2,r2,16
10000c40:	103ff826 	beq	r2,zero,10000c24 <__alt_data_end+0xf8000c24>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c44:	0003ccc0 	call	10003ccc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c48:	01000084 	movi	r4,2
10000c4c:	01414184 	movi	r5,1286
10000c50:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c54:	0009883a 	mov	r4,zero
10000c58:	00002b00 	call	100002b0 <IO_read>
10000c5c:	10bfffcc 	andi	r2,r2,65535
10000c60:	01040074 	movhi	r4,4097
10000c64:	2100b704 	addi	r4,r4,732
10000c68:	100b883a 	mov	r5,r2
10000c6c:	000512c0 	call	1000512c <printf>

	IO_write(HPI_ADDR,0x0508);
10000c70:	01000084 	movi	r4,2
10000c74:	01414204 	movi	r5,1288
10000c78:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c7c:	0009883a 	mov	r4,zero
10000c80:	00002b00 	call	100002b0 <IO_read>
10000c84:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000c88:	e0bfc70b 	ldhu	r2,-228(fp)
10000c8c:	01040074 	movhi	r4,4097
10000c90:	2100c204 	addi	r4,r4,776
10000c94:	100b883a 	mov	r5,r2
10000c98:	000512c0 	call	1000512c <printf>
	while (usb_ctl_val != 0x03)
10000c9c:	00000206 	br	10000ca8 <main+0x93c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ca0:	0003d500 	call	10003d50 <UsbGetRetryCnt>
10000ca4:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ca8:	e0bfc70b 	ldhu	r2,-228(fp)
10000cac:	108000d8 	cmpnei	r2,r2,3
10000cb0:	103ffb1e 	bne	r2,zero,10000ca0 <__alt_data_end+0xf8000ca0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000cb4:	01040074 	movhi	r4,4097
10000cb8:	2100ce04 	addi	r4,r4,824
10000cbc:	00051ec0 	call	100051ec <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000cc0:	000384c0 	call	1000384c <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000cc4:	00000306 	br	10000cd4 <main+0x968>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000cc8:	000384c0 	call	1000384c <UsbGetHidDesc>
		usleep(10*1000);
10000ccc:	0109c404 	movi	r4,10000
10000cd0:	000de340 	call	1000de34 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000cd4:	010000c4 	movi	r4,3
10000cd8:	00002b00 	call	100002b0 <IO_read>
10000cdc:	10bfffcc 	andi	r2,r2,65535
10000ce0:	1080040c 	andi	r2,r2,16
10000ce4:	103ff826 	beq	r2,zero,10000cc8 <__alt_data_end+0xf8000cc8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ce8:	0003ccc0 	call	10003ccc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000cec:	01000084 	movi	r4,2
10000cf0:	01414184 	movi	r5,1286
10000cf4:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cf8:	0009883a 	mov	r4,zero
10000cfc:	00002b00 	call	100002b0 <IO_read>
10000d00:	10bfffcc 	andi	r2,r2,65535
10000d04:	01040074 	movhi	r4,4097
10000d08:	2100b704 	addi	r4,r4,732
10000d0c:	100b883a 	mov	r5,r2
10000d10:	000512c0 	call	1000512c <printf>

	IO_write(HPI_ADDR,0x0508);
10000d14:	01000084 	movi	r4,2
10000d18:	01414204 	movi	r5,1288
10000d1c:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d20:	0009883a 	mov	r4,zero
10000d24:	00002b00 	call	100002b0 <IO_read>
10000d28:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d2c:	e0bfc70b 	ldhu	r2,-228(fp)
10000d30:	01040074 	movhi	r4,4097
10000d34:	2100c204 	addi	r4,r4,776
10000d38:	100b883a 	mov	r5,r2
10000d3c:	000512c0 	call	1000512c <printf>
	while (usb_ctl_val != 0x03)
10000d40:	00000206 	br	10000d4c <main+0x9e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d44:	0003d500 	call	10003d50 <UsbGetRetryCnt>
10000d48:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d4c:	e0bfc70b 	ldhu	r2,-228(fp)
10000d50:	108000d8 	cmpnei	r2,r2,3
10000d54:	103ffb1e 	bne	r2,zero,10000d44 <__alt_data_end+0xf8000d44>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d58:	01040074 	movhi	r4,4097
10000d5c:	2100e004 	addi	r4,r4,896
10000d60:	00051ec0 	call	100051ec <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000d64:	00039900 	call	10003990 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d68:	00000306 	br	10000d78 <main+0xa0c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d6c:	00039900 	call	10003990 <UsbGetReportDesc>
		usleep(10*1000);
10000d70:	0109c404 	movi	r4,10000
10000d74:	000de340 	call	1000de34 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d78:	010000c4 	movi	r4,3
10000d7c:	00002b00 	call	100002b0 <IO_read>
10000d80:	10bfffcc 	andi	r2,r2,65535
10000d84:	1080040c 	andi	r2,r2,16
10000d88:	103ff826 	beq	r2,zero,10000d6c <__alt_data_end+0xf8000d6c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d8c:	0003ccc0 	call	10003ccc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d90:	01000084 	movi	r4,2
10000d94:	01414184 	movi	r5,1286
10000d98:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d9c:	0009883a 	mov	r4,zero
10000da0:	00002b00 	call	100002b0 <IO_read>
10000da4:	10bfffcc 	andi	r2,r2,65535
10000da8:	01040074 	movhi	r4,4097
10000dac:	2100f404 	addi	r4,r4,976
10000db0:	100b883a 	mov	r5,r2
10000db4:	000512c0 	call	1000512c <printf>

	IO_write(HPI_ADDR,0x0508);
10000db8:	01000084 	movi	r4,2
10000dbc:	01414204 	movi	r5,1288
10000dc0:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000dc4:	0009883a 	mov	r4,zero
10000dc8:	00002b00 	call	100002b0 <IO_read>
10000dcc:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000dd0:	e0bfc70b 	ldhu	r2,-228(fp)
10000dd4:	01040074 	movhi	r4,4097
10000dd8:	21010004 	addi	r4,r4,1024
10000ddc:	100b883a 	mov	r5,r2
10000de0:	000512c0 	call	1000512c <printf>
	while (usb_ctl_val != 0x03)
10000de4:	00000206 	br	10000df0 <main+0xa84>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000de8:	0003d500 	call	10003d50 <UsbGetRetryCnt>
10000dec:	e0bfc70d 	sth	r2,-228(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000df0:	e0bfc70b 	ldhu	r2,-228(fp)
10000df4:	108000d8 	cmpnei	r2,r2,3
10000df8:	103ffb1e 	bne	r2,zero,10000de8 <__alt_data_end+0xf8000de8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000dfc:	01040074 	movhi	r4,4097
10000e00:	21010c04 	addi	r4,r4,1072
10000e04:	00051ec0 	call	100051ec <puts>

	unsigned short oneballx = 404;
10000e08:	00806504 	movi	r2,404
10000e0c:	e0bfc80d 	sth	r2,-224(fp)
	unsigned short onebally = 229;
10000e10:	00803944 	movi	r2,229
10000e14:	e0bfc88d 	sth	r2,-222(fp)
	unsigned short twoballx = 419;
10000e18:	008068c4 	movi	r2,419
10000e1c:	e0bfc90d 	sth	r2,-220(fp)
	unsigned short twobally = 237;
10000e20:	00803b44 	movi	r2,237
10000e24:	e0bfc98d 	sth	r2,-218(fp)
	unsigned short threeballx = 434;
10000e28:	00806c84 	movi	r2,434
10000e2c:	e0bfca0d 	sth	r2,-216(fp)
	unsigned short threebally = 213;
10000e30:	00803544 	movi	r2,213
10000e34:	e0bfca8d 	sth	r2,-214(fp)
	unsigned short fourballx = 449;
10000e38:	00807044 	movi	r2,449
10000e3c:	e0bfcb0d 	sth	r2,-212(fp)
	unsigned short fourbally = 253;
10000e40:	00803f44 	movi	r2,253
10000e44:	e0bfcb8d 	sth	r2,-210(fp)
	unsigned short fiveballx = 464;
10000e48:	00807404 	movi	r2,464
10000e4c:	e0bfcc0d 	sth	r2,-208(fp)
	unsigned short fivebally = 197;
10000e50:	00803144 	movi	r2,197
10000e54:	e0bfcc8d 	sth	r2,-206(fp)
	unsigned short sixballx = 464;
10000e58:	00807404 	movi	r2,464
10000e5c:	e0bfcd0d 	sth	r2,-204(fp)
	unsigned short sixbally = 245;
10000e60:	00803d44 	movi	r2,245
10000e64:	e0bfcd8d 	sth	r2,-202(fp)
	unsigned short sevenballx = 449;
10000e68:	00807044 	movi	r2,449
10000e6c:	e0bfce0d 	sth	r2,-200(fp)
	unsigned short sevenbally = 221;
10000e70:	00803744 	movi	r2,221
10000e74:	e0bfce8d 	sth	r2,-198(fp)
	unsigned short eightballx = 434;
10000e78:	00806c84 	movi	r2,434
10000e7c:	e0bfcf0d 	sth	r2,-196(fp)
	unsigned short eightbally = 229;
10000e80:	00803944 	movi	r2,229
10000e84:	e0bfcf8d 	sth	r2,-194(fp)
	unsigned short nineballx = 419;
10000e88:	008068c4 	movi	r2,419
10000e8c:	e0bfd00d 	sth	r2,-192(fp)
	unsigned short ninebally = 221;
10000e90:	00803744 	movi	r2,221
10000e94:	e0bfd08d 	sth	r2,-190(fp)
	unsigned short tenballx = 434;
10000e98:	00806c84 	movi	r2,434
10000e9c:	e0bfd10d 	sth	r2,-188(fp)
	unsigned short tenbally = 245;
10000ea0:	00803d44 	movi	r2,245
10000ea4:	e0bfd18d 	sth	r2,-186(fp)
	unsigned short elevenballx = 449;
10000ea8:	00807044 	movi	r2,449
10000eac:	e0bfd20d 	sth	r2,-184(fp)
	unsigned short elevenbally = 205;
10000eb0:	00803344 	movi	r2,205
10000eb4:	e0bfd28d 	sth	r2,-182(fp)
	unsigned short twelveballx = 464;
10000eb8:	00807404 	movi	r2,464
10000ebc:	e0bfd30d 	sth	r2,-180(fp)
	unsigned short twelvebally = 261;
10000ec0:	00804144 	movi	r2,261
10000ec4:	e0bfd38d 	sth	r2,-178(fp)
	unsigned short thirteenballx = 464;
10000ec8:	00807404 	movi	r2,464
10000ecc:	e0bfd40d 	sth	r2,-176(fp)
	unsigned short thirteenbally = 213;
10000ed0:	00803544 	movi	r2,213
10000ed4:	e0bfd48d 	sth	r2,-174(fp)
	unsigned short fourteenballx = 449;
10000ed8:	00807044 	movi	r2,449
10000edc:	e0bfd50d 	sth	r2,-172(fp)
	unsigned short fourteenbally = 237;
10000ee0:	00803b44 	movi	r2,237
10000ee4:	e0bfd58d 	sth	r2,-170(fp)
	unsigned short fifteenballx = 464;
10000ee8:	00807404 	movi	r2,464
10000eec:	e0bfd60d 	sth	r2,-168(fp)
	unsigned short fifteenbally = 229;
10000ef0:	00803944 	movi	r2,229
10000ef4:	e0bfd68d 	sth	r2,-166(fp)
	unsigned short cueballx = 150;
10000ef8:	00802584 	movi	r2,150
10000efc:	e0bfd70d 	sth	r2,-164(fp)
	unsigned short cuebally = 229;
10000f00:	00803944 	movi	r2,229
10000f04:	e0bfd78d 	sth	r2,-162(fp)
	unsigned short poolstickx = 214;
10000f08:	00803584 	movi	r2,214
10000f0c:	e0bfd80d 	sth	r2,-160(fp)
	unsigned short poolsticky = 163;
10000f10:	008028c4 	movi	r2,163
10000f14:	e0bfd88d 	sth	r2,-158(fp)

	int pressed = 0;
10000f18:	e03fd915 	stw	zero,-156(fp)
	int balldiameter = 15;
10000f1c:	008003c4 	movi	r2,15
10000f20:	e0bfe115 	stw	r2,-124(fp)
	int poolstickAx = 35;
10000f24:	008008c4 	movi	r2,35
10000f28:	e0bfe215 	stw	r2,-120(fp)
	int poolstickAy = 3;
10000f2c:	008000c4 	movi	r2,3
10000f30:	e0bfe315 	stw	r2,-116(fp)
	int poolstickB = 35;
10000f34:	008008c4 	movi	r2,35
10000f38:	e0bfe415 	stw	r2,-112(fp)
	int poolstickCx = 3;
10000f3c:	008000c4 	movi	r2,3
10000f40:	e0bfe515 	stw	r2,-108(fp)
	int poolstickCy = 50;
10000f44:	00800c84 	movi	r2,50
10000f48:	e0bfe615 	stw	r2,-104(fp)
	int diagGap = 6;
10000f4c:	00800184 	movi	r2,6
10000f50:	e0bfe715 	stw	r2,-100(fp)
	int dirConfirm = 0;
10000f54:	e03fda15 	stw	zero,-152(fp)
	int speedConfirm = 0;
10000f58:	e03fdb15 	stw	zero,-148(fp)
	int power = 0;
10000f5c:	e03fdc15 	stw	zero,-144(fp)
	int powerMod = 3;
10000f60:	008000c4 	movi	r2,3
10000f64:	e0bfe815 	stw	r2,-96(fp)

	int frictionCounter = 0;
10000f68:	e03fdd15 	stw	zero,-140(fp)
	int friction = -1;
10000f6c:	00bfffc4 	movi	r2,-1
10000f70:	e0bfe915 	stw	r2,-92(fp)
	int applyFrictionAfterFrames = 20;
10000f74:	00800504 	movi	r2,20
10000f78:	e0bfea15 	stw	r2,-88(fp)
	int gameState = 1; // 0 = GAME START / 1 = BEGIN TURN / 2 = BALL MOVE / 3 = END TURN
10000f7c:	00800044 	movi	r2,1
10000f80:	e0bfde15 	stw	r2,-136(fp)

	volatile unsigned int *ONEBALL_PIO = (unsigned int*)0x150;
10000f84:	00805404 	movi	r2,336
10000f88:	e0bfeb15 	stw	r2,-84(fp)
	volatile unsigned int *TWOBALL_PIO = (unsigned int*)0x140;
10000f8c:	00805004 	movi	r2,320
10000f90:	e0bfec15 	stw	r2,-80(fp)
	volatile unsigned int *THREEBALL_PIO = (unsigned int*)0x130;
10000f94:	00804c04 	movi	r2,304
10000f98:	e0bfed15 	stw	r2,-76(fp)
	volatile unsigned int *FOURBALL_PIO = (unsigned int*)0x120;
10000f9c:	00804804 	movi	r2,288
10000fa0:	e0bfee15 	stw	r2,-72(fp)
	volatile unsigned int *FIVEBALL_PIO = (unsigned int*)0x110;
10000fa4:	00804404 	movi	r2,272
10000fa8:	e0bfef15 	stw	r2,-68(fp)
	volatile unsigned int *SIXBALL_PIO = (unsigned int*)0x100;
10000fac:	00804004 	movi	r2,256
10000fb0:	e0bff015 	stw	r2,-64(fp)
	volatile unsigned int *SEVENBALL_PIO = (unsigned int*)0xf0;
10000fb4:	00803c04 	movi	r2,240
10000fb8:	e0bff115 	stw	r2,-60(fp)
	volatile unsigned int *EIGHTBALL_PIO = (unsigned int*)0xe0;
10000fbc:	00803804 	movi	r2,224
10000fc0:	e0bff215 	stw	r2,-56(fp)
	volatile unsigned int *NINEBALL_PIO = (unsigned int*)0xd0;
10000fc4:	00803404 	movi	r2,208
10000fc8:	e0bff315 	stw	r2,-52(fp)
	volatile unsigned int *TENBALL_PIO = (unsigned int*)0xc0;
10000fcc:	00803004 	movi	r2,192
10000fd0:	e0bff415 	stw	r2,-48(fp)
	volatile unsigned int *ELEVENBALL_PIO = (unsigned int*)0xb0;
10000fd4:	00802c04 	movi	r2,176
10000fd8:	e0bff515 	stw	r2,-44(fp)
	volatile unsigned int *TWELVEBALL_PIO = (unsigned int*)0xa0;
10000fdc:	00802804 	movi	r2,160
10000fe0:	e0bff615 	stw	r2,-40(fp)
	volatile unsigned int *THIRTEENBALL_PIO = (unsigned int*)0x90;
10000fe4:	00802404 	movi	r2,144
10000fe8:	e0bff715 	stw	r2,-36(fp)
	volatile unsigned int *FOURTEENBALL_PIO = (unsigned int*)0x80;
10000fec:	00802004 	movi	r2,128
10000ff0:	e0bff815 	stw	r2,-32(fp)
	volatile unsigned int *FIFTEENBALL_PIO = (unsigned int*)0x70;
10000ff4:	00801c04 	movi	r2,112
10000ff8:	e0bff915 	stw	r2,-28(fp)
	volatile unsigned int *CUEBALL_PIO = (unsigned int*)0x60;
10000ffc:	00801804 	movi	r2,96
10001000:	e0bffa15 	stw	r2,-24(fp)
	volatile unsigned int *POOLSTICK_PIO = (unsigned int*)0x50;
10001004:	00801404 	movi	r2,80
10001008:	e0bffb15 	stw	r2,-20(fp)
	volatile unsigned int *RESET_PIO = (unsigned int*)0x40;
1000100c:	00801004 	movi	r2,64
10001010:	e0bffc15 	stw	r2,-16(fp)
	volatile unsigned int *HW_SIG_PIO = (unsigned int*)0x30;
10001014:	00800c04 	movi	r2,48
10001018:	e0bffd15 	stw	r2,-12(fp)
	volatile unsigned int *STICKDIRECTION_PIO = (unsigned int*)0x20;
1000101c:	00800804 	movi	r2,32
10001020:	e0bffe15 	stw	r2,-8(fp)



	//-----------------------------------get keycode value------------------------------------------------//

	usleep(10000);
10001024:	0109c404 	movi	r4,10000
10001028:	000de340 	call	1000de34 <usleep>
	while(1)
	{
		toggle++;
1000102c:	e0bfc783 	ldbu	r2,-226(fp)
10001030:	10800044 	addi	r2,r2,1
10001034:	e0bfc785 	stb	r2,-226(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10001038:	01000084 	movi	r4,2
1000103c:	01414004 	movi	r5,1280
10001040:	00002440 	call	10000244 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10001044:	0009883a 	mov	r4,zero
10001048:	01414704 	movi	r5,1308
1000104c:	00002440 	call	10000244 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001050:	e0bfe083 	ldbu	r2,-126(fp)
10001054:	108003cc 	andi	r2,r2,15
10001058:	0009883a 	mov	r4,zero
1000105c:	100b883a 	mov	r5,r2
10001060:	00002440 	call	10000244 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10001064:	0009883a 	mov	r4,zero
10001068:	0140a444 	movi	r5,657
1000106c:	00002440 	call	10000244 <IO_write>
		if(toggle%2)
10001070:	e0bfc783 	ldbu	r2,-226(fp)
10001074:	1080004c 	andi	r2,r2,1
10001078:	10803fcc 	andi	r2,r2,255
1000107c:	10000426 	beq	r2,zero,10001090 <main+0xd24>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10001080:	0009883a 	mov	r4,zero
10001084:	01400044 	movi	r5,1
10001088:	00002440 	call	10000244 <IO_write>
1000108c:	00000306 	br	1000109c <main+0xd30>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10001090:	0009883a 	mov	r4,zero
10001094:	01401044 	movi	r5,65
10001098:	00002440 	call	10000244 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
1000109c:	0009883a 	mov	r4,zero
100010a0:	014004c4 	movi	r5,19
100010a4:	00002440 	call	10000244 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
100010a8:	0009883a 	mov	r4,zero
100010ac:	000b883a 	mov	r5,zero
100010b0:	00002440 	call	10000244 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100010b4:	01006c04 	movi	r4,432
100010b8:	01414004 	movi	r5,1280
100010bc:	0002cec0 	call	10002cec <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100010c0:	00002406 	br	10001154 <main+0xde8>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
100010c4:	01000084 	movi	r4,2
100010c8:	01414004 	movi	r5,1280
100010cc:	00002440 	call	10000244 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
100010d0:	0009883a 	mov	r4,zero
100010d4:	01414704 	movi	r5,1308
100010d8:	00002440 	call	10000244 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
100010dc:	e0bfe083 	ldbu	r2,-126(fp)
100010e0:	108003cc 	andi	r2,r2,15
100010e4:	0009883a 	mov	r4,zero
100010e8:	100b883a 	mov	r5,r2
100010ec:	00002440 	call	10000244 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
100010f0:	0009883a 	mov	r4,zero
100010f4:	0140a444 	movi	r5,657
100010f8:	00002440 	call	10000244 <IO_write>
			if(toggle%2)
100010fc:	e0bfc783 	ldbu	r2,-226(fp)
10001100:	1080004c 	andi	r2,r2,1
10001104:	10803fcc 	andi	r2,r2,255
10001108:	10000426 	beq	r2,zero,1000111c <main+0xdb0>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
1000110c:	0009883a 	mov	r4,zero
10001110:	01400044 	movi	r5,1
10001114:	00002440 	call	10000244 <IO_write>
10001118:	00000306 	br	10001128 <main+0xdbc>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
1000111c:	0009883a 	mov	r4,zero
10001120:	01401044 	movi	r5,65
10001124:	00002440 	call	10000244 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10001128:	0009883a 	mov	r4,zero
1000112c:	014004c4 	movi	r5,19
10001130:	00002440 	call	10000244 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10001134:	0009883a 	mov	r4,zero
10001138:	000b883a 	mov	r5,zero
1000113c:	00002440 	call	10000244 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001140:	01006c04 	movi	r4,432
10001144:	01414004 	movi	r5,1280
10001148:	0002cec0 	call	10002cec <UsbWrite>
			usleep(10*1000);
1000114c:	0109c404 	movi	r4,10000
10001150:	000de340 	call	1000de34 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001154:	010000c4 	movi	r4,3
10001158:	00002b00 	call	100002b0 <IO_read>
1000115c:	10bfffcc 	andi	r2,r2,65535
10001160:	1080040c 	andi	r2,r2,16
10001164:	103fd726 	beq	r2,zero,100010c4 <__alt_data_end+0xf80010c4>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
10001168:	0003ccc0 	call	10003ccc <UsbWaitTDListDone>
1000116c:	e0bfc70d 	sth	r2,-228(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10001170:	01000084 	movi	r4,2
10001174:	01414784 	movi	r5,1310
10001178:	00002440 	call	10000244 <IO_write>
		keycode = IO_read(HPI_DATA);
1000117c:	0009883a 	mov	r4,zero
10001180:	00002b00 	call	100002b0 <IO_read>
10001184:	10bfffcc 	andi	r2,r2,65535
10001188:	e0bfff15 	stw	r2,-4(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
1000118c:	e0bfff17 	ldw	r2,-4(fp)
10001190:	01040074 	movhi	r4,4097
10001194:	21012004 	addi	r4,r4,1152
10001198:	100b883a 	mov	r5,r2
1000119c:	000512c0 	call	1000512c <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
100011a0:	e0bfff17 	ldw	r2,-4(fp)
100011a4:	10c03fcc 	andi	r3,r2,255
100011a8:	00806c04 	movi	r2,432
100011ac:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
100011b0:	01003204 	movi	r4,200
100011b4:	000de340 	call	1000de34 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100011b8:	d0a6a50b 	ldhu	r2,-25964(gp)
100011bc:	10bfffcc 	andi	r2,r2,65535
100011c0:	1009883a 	mov	r4,r2
100011c4:	0002d400 	call	10002d40 <UsbRead>
100011c8:	e0bfc70d 	sth	r2,-228(fp)

		if(!(usb_ctl_val & no_device))
100011cc:	d0a6a58b 	ldhu	r2,-25962(gp)
100011d0:	e0ffc70b 	ldhu	r3,-228(fp)
100011d4:	1884703a 	and	r2,r3,r2
100011d8:	10bfffcc 	andi	r2,r2,65535
100011dc:	10003f1e 	bne	r2,zero,100012dc <main+0xf70>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100011e0:	e03fc7c5 	stb	zero,-225(fp)
100011e4:	00000f06 	br	10001224 <main+0xeb8>
			{
				usleep(5*1000);
100011e8:	0104e204 	movi	r4,5000
100011ec:	000de340 	call	1000de34 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
100011f0:	d0a6a50b 	ldhu	r2,-25964(gp)
100011f4:	10bfffcc 	andi	r2,r2,65535
100011f8:	1009883a 	mov	r4,r2
100011fc:	0002d400 	call	10002d40 <UsbRead>
10001200:	e0bfc70d 	sth	r2,-228(fp)
				if(usb_ctl_val & no_device) break;
10001204:	d0a6a58b 	ldhu	r2,-25962(gp)
10001208:	e0ffc70b 	ldhu	r3,-228(fp)
1000120c:	1884703a 	and	r2,r3,r2
10001210:	10bfffcc 	andi	r2,r2,65535
10001214:	1000071e 	bne	r2,zero,10001234 <main+0xec8>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001218:	e0bfc7c3 	ldbu	r2,-225(fp)
1000121c:	10800044 	addi	r2,r2,1
10001220:	e0bfc7c5 	stb	r2,-225(fp)
10001224:	e0bfc7c3 	ldbu	r2,-225(fp)
10001228:	108001f0 	cmpltui	r2,r2,7
1000122c:	103fee1e 	bne	r2,zero,100011e8 <__alt_data_end+0xf80011e8>
10001230:	00000106 	br	10001238 <main+0xecc>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
10001234:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10001238:	d0a6a58b 	ldhu	r2,-25962(gp)
1000123c:	e0ffc70b 	ldhu	r3,-228(fp)
10001240:	1884703a 	and	r2,r3,r2
10001244:	10bfffcc 	andi	r2,r2,65535
10001248:	1000241e 	bne	r2,zero,100012dc <main+0xf70>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
1000124c:	01040074 	movhi	r4,4097
10001250:	21012904 	addi	r4,r4,1188
10001254:	00051ec0 	call	100051ec <puts>
				printf("[INFO]: please insert again!!! \n");
10001258:	01040074 	movhi	r4,4097
1000125c:	21013404 	addi	r4,r4,1232
10001260:	00051ec0 	call	100051ec <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001264:	00001d06 	br	100012dc <main+0xf70>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001268:	d0a6a50b 	ldhu	r2,-25964(gp)
1000126c:	10bfffcc 	andi	r2,r2,65535
10001270:	1009883a 	mov	r4,r2
10001274:	0002d400 	call	10002d40 <UsbRead>
10001278:	e0bfc70d 	sth	r2,-228(fp)
			usleep(5*1000);
1000127c:	0104e204 	movi	r4,5000
10001280:	000de340 	call	1000de34 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001284:	d0a6a50b 	ldhu	r2,-25964(gp)
10001288:	10bfffcc 	andi	r2,r2,65535
1000128c:	1009883a 	mov	r4,r2
10001290:	0002d400 	call	10002d40 <UsbRead>
10001294:	e0bfc70d 	sth	r2,-228(fp)
			usleep(5*1000);
10001298:	0104e204 	movi	r4,5000
1000129c:	000de340 	call	1000de34 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100012a0:	d0a6a50b 	ldhu	r2,-25964(gp)
100012a4:	10bfffcc 	andi	r2,r2,65535
100012a8:	1009883a 	mov	r4,r2
100012ac:	0002d400 	call	10002d40 <UsbRead>
100012b0:	e0bfc70d 	sth	r2,-228(fp)
			usleep(5*1000);
100012b4:	0104e204 	movi	r4,5000
100012b8:	000de340 	call	1000de34 <usleep>

			if(usb_ctl_val & no_device)
100012bc:	d0a6a58b 	ldhu	r2,-25962(gp)
100012c0:	e0ffc70b 	ldhu	r3,-228(fp)
100012c4:	1884703a 	and	r2,r3,r2
100012c8:	10bfffcc 	andi	r2,r2,65535
100012cc:	103c371e 	bne	r2,zero,100003ac <__alt_data_end+0xf80003ac>
				goto USB_HOT_PLUG;

			usleep(200);
100012d0:	01003204 	movi	r4,200
100012d4:	000de340 	call	1000de34 <usleep>
100012d8:	00000106 	br	100012e0 <main+0xf74>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
100012dc:	0001883a 	nop
100012e0:	d0a6a58b 	ldhu	r2,-25962(gp)
100012e4:	e0ffc70b 	ldhu	r3,-228(fp)
100012e8:	1884703a 	and	r2,r3,r2
100012ec:	10bfffcc 	andi	r2,r2,65535
100012f0:	103fdd26 	beq	r2,zero,10001268 <__alt_data_end+0xf8001268>
				goto USB_HOT_PLUG;

			usleep(200);
		}

		if(gameState == 1  && speedConfirm == 1)
100012f4:	e0bfde17 	ldw	r2,-136(fp)
100012f8:	10800058 	cmpnei	r2,r2,1
100012fc:	1000061e 	bne	r2,zero,10001318 <main+0xfac>
10001300:	e0bfdb17 	ldw	r2,-148(fp)
10001304:	10800058 	cmpnei	r2,r2,1
10001308:	1000031e 	bne	r2,zero,10001318 <main+0xfac>
		{
			speedConfirm = 0;
1000130c:	e03fdb15 	stw	zero,-148(fp)
			dirConfirm = 0;
10001310:	e03fda15 	stw	zero,-152(fp)
			frictionCounter = 0;
10001314:	e03fdd15 	stw	zero,-140(fp)
		}

		if(gameState == 3)
10001318:	e0bfde17 	ldw	r2,-136(fp)
1000131c:	108000d8 	cmpnei	r2,r2,3
10001320:	1000021e 	bne	r2,zero,1000132c <main+0xfc0>
			gameState = 1;
10001324:	00800044 	movi	r2,1
10001328:	e0bfde15 	stw	r2,-136(fp)

		if(keycode == 0x002c && pressed == 0)
1000132c:	e0bfff17 	ldw	r2,-4(fp)
10001330:	10800b18 	cmpnei	r2,r2,44
10001334:	1000071e 	bne	r2,zero,10001354 <main+0xfe8>
10001338:	e0bfd917 	ldw	r2,-156(fp)
1000133c:	1000051e 	bne	r2,zero,10001354 <main+0xfe8>
		{
			pressed = 1;
10001340:	00800044 	movi	r2,1
10001344:	e0bfd915 	stw	r2,-156(fp)
			dirConfirm = 1;
10001348:	00800044 	movi	r2,1
1000134c:	e0bfda15 	stw	r2,-152(fp)
10001350:	00000306 	br	10001360 <main+0xff4>
		}
		else if(keycode == 0x0000)
10001354:	e0bfff17 	ldw	r2,-4(fp)
10001358:	1000011e 	bne	r2,zero,10001360 <main+0xff4>
		{
			pressed = 0;
1000135c:	e03fd915 	stw	zero,-156(fp)
		}


		if(keycode == 0x0028 && dirConfirm == 1 && pressed == 0)
10001360:	e0bfff17 	ldw	r2,-4(fp)
10001364:	10800a18 	cmpnei	r2,r2,40
10001368:	10000c1e 	bne	r2,zero,1000139c <main+0x1030>
1000136c:	e0bfda17 	ldw	r2,-152(fp)
10001370:	10800058 	cmpnei	r2,r2,1
10001374:	1000091e 	bne	r2,zero,1000139c <main+0x1030>
10001378:	e0bfd917 	ldw	r2,-156(fp)
1000137c:	1000071e 	bne	r2,zero,1000139c <main+0x1030>
		{
			pressed = 1;
10001380:	00800044 	movi	r2,1
10001384:	e0bfd915 	stw	r2,-156(fp)
			speedConfirm = 1;
10001388:	00800044 	movi	r2,1
1000138c:	e0bfdb15 	stw	r2,-148(fp)
			gameState = 2;
10001390:	00800084 	movi	r2,2
10001394:	e0bfde15 	stw	r2,-136(fp)
10001398:	00000306 	br	100013a8 <main+0x103c>
		}
		else if(keycode == 0x0000)
1000139c:	e0bfff17 	ldw	r2,-4(fp)
100013a0:	1000011e 	bne	r2,zero,100013a8 <main+0x103c>
		{
			pressed = 0;
100013a4:	e03fd915 	stw	zero,-156(fp)
		}

		if(gameState == 2)
100013a8:	e0bfde17 	ldw	r2,-136(fp)
100013ac:	10800098 	cmpnei	r2,r2,2
100013b0:	1001071e 	bne	r2,zero,100017d0 <main+0x1464>
		{
			if(*STICKDIRECTION_PIO == 0)
100013b4:	e0bffe17 	ldw	r2,-8(fp)
100013b8:	10800017 	ldw	r2,0(r2)
100013bc:	1000061e 	bne	r2,zero,100013d8 <main+0x106c>
				cueballx += power;
100013c0:	e0bfdc17 	ldw	r2,-144(fp)
100013c4:	1007883a 	mov	r3,r2
100013c8:	e0bfd70b 	ldhu	r2,-164(fp)
100013cc:	1885883a 	add	r2,r3,r2
100013d0:	e0bfd70d 	sth	r2,-164(fp)
100013d4:	0000fe06 	br	100017d0 <main+0x1464>
			else if(*STICKDIRECTION_PIO == 1)
100013d8:	e0bffe17 	ldw	r2,-8(fp)
100013dc:	10800017 	ldw	r2,0(r2)
100013e0:	10800058 	cmpnei	r2,r2,1
100013e4:	1000271e 	bne	r2,zero,10001484 <main+0x1118>
			{
				cueballx += power;
100013e8:	e0bfdc17 	ldw	r2,-144(fp)
100013ec:	1007883a 	mov	r3,r2
100013f0:	e0bfd70b 	ldhu	r2,-164(fp)
100013f4:	1885883a 	add	r2,r3,r2
100013f8:	e0bfd70d 	sth	r2,-164(fp)
				cuebally += (power * (2.0/3));
100013fc:	e0bfd78b 	ldhu	r2,-162(fp)
10001400:	1009883a 	mov	r4,r2
10001404:	00047d40 	call	100047d4 <__floatsidf>
10001408:	1021883a 	mov	r16,r2
1000140c:	1823883a 	mov	r17,r3
10001410:	e13fdc17 	ldw	r4,-144(fp)
10001414:	00047d40 	call	100047d4 <__floatsidf>
10001418:	100b883a 	mov	r5,r2
1000141c:	180d883a 	mov	r6,r3
10001420:	2809883a 	mov	r4,r5
10001424:	300b883a 	mov	r5,r6
10001428:	01955574 	movhi	r6,21845
1000142c:	31955544 	addi	r6,r6,21845
10001430:	01cff974 	movhi	r7,16357
10001434:	39d55544 	addi	r7,r7,21845
10001438:	00042d80 	call	100042d8 <__muldf3>
1000143c:	1009883a 	mov	r4,r2
10001440:	180b883a 	mov	r5,r3
10001444:	2005883a 	mov	r2,r4
10001448:	2807883a 	mov	r3,r5
1000144c:	8009883a 	mov	r4,r16
10001450:	880b883a 	mov	r5,r17
10001454:	100d883a 	mov	r6,r2
10001458:	180f883a 	mov	r7,r3
1000145c:	00042240 	call	10004224 <__adddf3>
10001460:	1009883a 	mov	r4,r2
10001464:	180b883a 	mov	r5,r3
10001468:	2005883a 	mov	r2,r4
1000146c:	2807883a 	mov	r3,r5
10001470:	1009883a 	mov	r4,r2
10001474:	180b883a 	mov	r5,r3
10001478:	0003e4c0 	call	10003e4c <__fixunsdfsi>
1000147c:	e0bfd78d 	sth	r2,-162(fp)
10001480:	0000d306 	br	100017d0 <main+0x1464>
			}
			else if(*STICKDIRECTION_PIO == 2)
10001484:	e0bffe17 	ldw	r2,-8(fp)
10001488:	10800017 	ldw	r2,0(r2)
1000148c:	10800098 	cmpnei	r2,r2,2
10001490:	1000221e 	bne	r2,zero,1000151c <main+0x11b0>
			{
				cuebally += (power * (2.0/3));
10001494:	e0bfd78b 	ldhu	r2,-162(fp)
10001498:	1009883a 	mov	r4,r2
1000149c:	00047d40 	call	100047d4 <__floatsidf>
100014a0:	1021883a 	mov	r16,r2
100014a4:	1823883a 	mov	r17,r3
100014a8:	e13fdc17 	ldw	r4,-144(fp)
100014ac:	00047d40 	call	100047d4 <__floatsidf>
100014b0:	100b883a 	mov	r5,r2
100014b4:	180d883a 	mov	r6,r3
100014b8:	2809883a 	mov	r4,r5
100014bc:	300b883a 	mov	r5,r6
100014c0:	01955574 	movhi	r6,21845
100014c4:	31955544 	addi	r6,r6,21845
100014c8:	01cff974 	movhi	r7,16357
100014cc:	39d55544 	addi	r7,r7,21845
100014d0:	00042d80 	call	100042d8 <__muldf3>
100014d4:	1009883a 	mov	r4,r2
100014d8:	180b883a 	mov	r5,r3
100014dc:	2005883a 	mov	r2,r4
100014e0:	2807883a 	mov	r3,r5
100014e4:	8009883a 	mov	r4,r16
100014e8:	880b883a 	mov	r5,r17
100014ec:	100d883a 	mov	r6,r2
100014f0:	180f883a 	mov	r7,r3
100014f4:	00042240 	call	10004224 <__adddf3>
100014f8:	1009883a 	mov	r4,r2
100014fc:	180b883a 	mov	r5,r3
10001500:	2005883a 	mov	r2,r4
10001504:	2807883a 	mov	r3,r5
10001508:	1009883a 	mov	r4,r2
1000150c:	180b883a 	mov	r5,r3
10001510:	0003e4c0 	call	10003e4c <__fixunsdfsi>
10001514:	e0bfd78d 	sth	r2,-162(fp)
10001518:	0000ad06 	br	100017d0 <main+0x1464>
			}
			else if(*STICKDIRECTION_PIO == 3)
1000151c:	e0bffe17 	ldw	r2,-8(fp)
10001520:	10800017 	ldw	r2,0(r2)
10001524:	108000d8 	cmpnei	r2,r2,3
10001528:	1000261e 	bne	r2,zero,100015c4 <main+0x1258>
			{
				cueballx -= power;
1000152c:	e0bfdc17 	ldw	r2,-144(fp)
10001530:	e0ffd70b 	ldhu	r3,-164(fp)
10001534:	1885c83a 	sub	r2,r3,r2
10001538:	e0bfd70d 	sth	r2,-164(fp)
				cuebally += (power * (2.0/3));
1000153c:	e0bfd78b 	ldhu	r2,-162(fp)
10001540:	1009883a 	mov	r4,r2
10001544:	00047d40 	call	100047d4 <__floatsidf>
10001548:	1021883a 	mov	r16,r2
1000154c:	1823883a 	mov	r17,r3
10001550:	e13fdc17 	ldw	r4,-144(fp)
10001554:	00047d40 	call	100047d4 <__floatsidf>
10001558:	100b883a 	mov	r5,r2
1000155c:	180d883a 	mov	r6,r3
10001560:	2809883a 	mov	r4,r5
10001564:	300b883a 	mov	r5,r6
10001568:	01955574 	movhi	r6,21845
1000156c:	31955544 	addi	r6,r6,21845
10001570:	01cff974 	movhi	r7,16357
10001574:	39d55544 	addi	r7,r7,21845
10001578:	00042d80 	call	100042d8 <__muldf3>
1000157c:	1009883a 	mov	r4,r2
10001580:	180b883a 	mov	r5,r3
10001584:	2005883a 	mov	r2,r4
10001588:	2807883a 	mov	r3,r5
1000158c:	8009883a 	mov	r4,r16
10001590:	880b883a 	mov	r5,r17
10001594:	100d883a 	mov	r6,r2
10001598:	180f883a 	mov	r7,r3
1000159c:	00042240 	call	10004224 <__adddf3>
100015a0:	1009883a 	mov	r4,r2
100015a4:	180b883a 	mov	r5,r3
100015a8:	2005883a 	mov	r2,r4
100015ac:	2807883a 	mov	r3,r5
100015b0:	1009883a 	mov	r4,r2
100015b4:	180b883a 	mov	r5,r3
100015b8:	0003e4c0 	call	10003e4c <__fixunsdfsi>
100015bc:	e0bfd78d 	sth	r2,-162(fp)
100015c0:	00008306 	br	100017d0 <main+0x1464>
			}
			else if(*STICKDIRECTION_PIO == 4)
100015c4:	e0bffe17 	ldw	r2,-8(fp)
100015c8:	10800017 	ldw	r2,0(r2)
100015cc:	10800118 	cmpnei	r2,r2,4
100015d0:	1000051e 	bne	r2,zero,100015e8 <main+0x127c>
			{
				cueballx -= power;
100015d4:	e0bfdc17 	ldw	r2,-144(fp)
100015d8:	e0ffd70b 	ldhu	r3,-164(fp)
100015dc:	1885c83a 	sub	r2,r3,r2
100015e0:	e0bfd70d 	sth	r2,-164(fp)
100015e4:	00007a06 	br	100017d0 <main+0x1464>
			}
			else if(*STICKDIRECTION_PIO == 5)
100015e8:	e0bffe17 	ldw	r2,-8(fp)
100015ec:	10800017 	ldw	r2,0(r2)
100015f0:	10800158 	cmpnei	r2,r2,5
100015f4:	1000261e 	bne	r2,zero,10001690 <main+0x1324>
			{
				cueballx -= power;
100015f8:	e0bfdc17 	ldw	r2,-144(fp)
100015fc:	e0ffd70b 	ldhu	r3,-164(fp)
10001600:	1885c83a 	sub	r2,r3,r2
10001604:	e0bfd70d 	sth	r2,-164(fp)
				cuebally -= (power * (2.0/3));
10001608:	e0bfd78b 	ldhu	r2,-162(fp)
1000160c:	1009883a 	mov	r4,r2
10001610:	00047d40 	call	100047d4 <__floatsidf>
10001614:	1021883a 	mov	r16,r2
10001618:	1823883a 	mov	r17,r3
1000161c:	e13fdc17 	ldw	r4,-144(fp)
10001620:	00047d40 	call	100047d4 <__floatsidf>
10001624:	100b883a 	mov	r5,r2
10001628:	180d883a 	mov	r6,r3
1000162c:	2809883a 	mov	r4,r5
10001630:	300b883a 	mov	r5,r6
10001634:	01955574 	movhi	r6,21845
10001638:	31955544 	addi	r6,r6,21845
1000163c:	01cff974 	movhi	r7,16357
10001640:	39d55544 	addi	r7,r7,21845
10001644:	00042d80 	call	100042d8 <__muldf3>
10001648:	1009883a 	mov	r4,r2
1000164c:	180b883a 	mov	r5,r3
10001650:	2005883a 	mov	r2,r4
10001654:	2807883a 	mov	r3,r5
10001658:	8009883a 	mov	r4,r16
1000165c:	880b883a 	mov	r5,r17
10001660:	100d883a 	mov	r6,r2
10001664:	180f883a 	mov	r7,r3
10001668:	00042780 	call	10004278 <__subdf3>
1000166c:	1009883a 	mov	r4,r2
10001670:	180b883a 	mov	r5,r3
10001674:	2005883a 	mov	r2,r4
10001678:	2807883a 	mov	r3,r5
1000167c:	1009883a 	mov	r4,r2
10001680:	180b883a 	mov	r5,r3
10001684:	0003e4c0 	call	10003e4c <__fixunsdfsi>
10001688:	e0bfd78d 	sth	r2,-162(fp)
1000168c:	00005006 	br	100017d0 <main+0x1464>
			}
			else if(*STICKDIRECTION_PIO == 6)
10001690:	e0bffe17 	ldw	r2,-8(fp)
10001694:	10800017 	ldw	r2,0(r2)
10001698:	10800198 	cmpnei	r2,r2,6
1000169c:	1000221e 	bne	r2,zero,10001728 <main+0x13bc>
			{
				cuebally -= (power * (2.0/3));
100016a0:	e0bfd78b 	ldhu	r2,-162(fp)
100016a4:	1009883a 	mov	r4,r2
100016a8:	00047d40 	call	100047d4 <__floatsidf>
100016ac:	1021883a 	mov	r16,r2
100016b0:	1823883a 	mov	r17,r3
100016b4:	e13fdc17 	ldw	r4,-144(fp)
100016b8:	00047d40 	call	100047d4 <__floatsidf>
100016bc:	100b883a 	mov	r5,r2
100016c0:	180d883a 	mov	r6,r3
100016c4:	2809883a 	mov	r4,r5
100016c8:	300b883a 	mov	r5,r6
100016cc:	01955574 	movhi	r6,21845
100016d0:	31955544 	addi	r6,r6,21845
100016d4:	01cff974 	movhi	r7,16357
100016d8:	39d55544 	addi	r7,r7,21845
100016dc:	00042d80 	call	100042d8 <__muldf3>
100016e0:	1009883a 	mov	r4,r2
100016e4:	180b883a 	mov	r5,r3
100016e8:	2005883a 	mov	r2,r4
100016ec:	2807883a 	mov	r3,r5
100016f0:	8009883a 	mov	r4,r16
100016f4:	880b883a 	mov	r5,r17
100016f8:	100d883a 	mov	r6,r2
100016fc:	180f883a 	mov	r7,r3
10001700:	00042780 	call	10004278 <__subdf3>
10001704:	1009883a 	mov	r4,r2
10001708:	180b883a 	mov	r5,r3
1000170c:	2005883a 	mov	r2,r4
10001710:	2807883a 	mov	r3,r5
10001714:	1009883a 	mov	r4,r2
10001718:	180b883a 	mov	r5,r3
1000171c:	0003e4c0 	call	10003e4c <__fixunsdfsi>
10001720:	e0bfd78d 	sth	r2,-162(fp)
10001724:	00002a06 	br	100017d0 <main+0x1464>
			}
			else if(*STICKDIRECTION_PIO == 7)
10001728:	e0bffe17 	ldw	r2,-8(fp)
1000172c:	10800017 	ldw	r2,0(r2)
10001730:	108001d8 	cmpnei	r2,r2,7
10001734:	1000261e 	bne	r2,zero,100017d0 <main+0x1464>
			{
				cueballx += power;
10001738:	e0bfdc17 	ldw	r2,-144(fp)
1000173c:	1007883a 	mov	r3,r2
10001740:	e0bfd70b 	ldhu	r2,-164(fp)
10001744:	1885883a 	add	r2,r3,r2
10001748:	e0bfd70d 	sth	r2,-164(fp)
				cuebally -= (power * (2.0/3));
1000174c:	e0bfd78b 	ldhu	r2,-162(fp)
10001750:	1009883a 	mov	r4,r2
10001754:	00047d40 	call	100047d4 <__floatsidf>
10001758:	1021883a 	mov	r16,r2
1000175c:	1823883a 	mov	r17,r3
10001760:	e13fdc17 	ldw	r4,-144(fp)
10001764:	00047d40 	call	100047d4 <__floatsidf>
10001768:	100b883a 	mov	r5,r2
1000176c:	180d883a 	mov	r6,r3
10001770:	2809883a 	mov	r4,r5
10001774:	300b883a 	mov	r5,r6
10001778:	01955574 	movhi	r6,21845
1000177c:	31955544 	addi	r6,r6,21845
10001780:	01cff974 	movhi	r7,16357
10001784:	39d55544 	addi	r7,r7,21845
10001788:	00042d80 	call	100042d8 <__muldf3>
1000178c:	1009883a 	mov	r4,r2
10001790:	180b883a 	mov	r5,r3
10001794:	2005883a 	mov	r2,r4
10001798:	2807883a 	mov	r3,r5
1000179c:	8009883a 	mov	r4,r16
100017a0:	880b883a 	mov	r5,r17
100017a4:	100d883a 	mov	r6,r2
100017a8:	180f883a 	mov	r7,r3
100017ac:	00042780 	call	10004278 <__subdf3>
100017b0:	1009883a 	mov	r4,r2
100017b4:	180b883a 	mov	r5,r3
100017b8:	2005883a 	mov	r2,r4
100017bc:	2807883a 	mov	r3,r5
100017c0:	1009883a 	mov	r4,r2
100017c4:	180b883a 	mov	r5,r3
100017c8:	0003e4c0 	call	10003e4c <__fixunsdfsi>
100017cc:	e0bfd78d 	sth	r2,-162(fp)
			}
		}

		if(gameState == 2)
100017d0:	e0bfde17 	ldw	r2,-136(fp)
100017d4:	10800098 	cmpnei	r2,r2,2
100017d8:	1000101e 	bne	r2,zero,1000181c <main+0x14b0>
		{
			frictionCounter++;
100017dc:	e0bfdd17 	ldw	r2,-140(fp)
100017e0:	10800044 	addi	r2,r2,1
100017e4:	e0bfdd15 	stw	r2,-140(fp)
			if((frictionCounter % applyFrictionAfterFrames) == 0)
100017e8:	e0bfdd17 	ldw	r2,-140(fp)
100017ec:	1009883a 	mov	r4,r2
100017f0:	e17fea17 	ldw	r5,-88(fp)
100017f4:	0004a300 	call	10004a30 <__modsi3>
100017f8:	1000081e 	bne	r2,zero,1000181c <main+0x14b0>
			{
				power += friction;
100017fc:	e0ffdc17 	ldw	r3,-144(fp)
10001800:	e0bfe917 	ldw	r2,-92(fp)
10001804:	1885883a 	add	r2,r3,r2
10001808:	e0bfdc15 	stw	r2,-144(fp)
				if(power <= 0)
1000180c:	e0bfdc17 	ldw	r2,-144(fp)
10001810:	00800216 	blt	zero,r2,1000181c <main+0x14b0>
					gameState = 3;
10001814:	008000c4 	movi	r2,3
10001818:	e0bfde15 	stw	r2,-136(fp)
			}
		}

		if(keycode == 0x004f && pressed == 0 && dirConfirm == 0 && gameState == 1)
1000181c:	e0bfff17 	ldw	r2,-4(fp)
10001820:	108013d8 	cmpnei	r2,r2,79
10001824:	1000b11e 	bne	r2,zero,10001aec <main+0x1780>
10001828:	e0bfd917 	ldw	r2,-156(fp)
1000182c:	1000af1e 	bne	r2,zero,10001aec <main+0x1780>
10001830:	e0bfda17 	ldw	r2,-152(fp)
10001834:	1000ad1e 	bne	r2,zero,10001aec <main+0x1780>
10001838:	e0bfde17 	ldw	r2,-136(fp)
1000183c:	10800058 	cmpnei	r2,r2,1
10001840:	1000aa1e 	bne	r2,zero,10001aec <main+0x1780>
		{
			pressed = 1;
10001844:	00800044 	movi	r2,1
10001848:	e0bfd915 	stw	r2,-156(fp)
			if(*STICKDIRECTION_PIO == 0)
1000184c:	e0bffe17 	ldw	r2,-8(fp)
10001850:	10800017 	ldw	r2,0(r2)
10001854:	1000121e 	bne	r2,zero,100018a0 <main+0x1534>
			{
				*STICKDIRECTION_PIO = 1;
10001858:	e0bffe17 	ldw	r2,-8(fp)
1000185c:	00c00044 	movi	r3,1
10001860:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx - poolstickB + diagGap;
10001864:	e0bfe417 	ldw	r2,-112(fp)
10001868:	e0ffd70b 	ldhu	r3,-164(fp)
1000186c:	1885c83a 	sub	r2,r3,r2
10001870:	1007883a 	mov	r3,r2
10001874:	e0bfe717 	ldw	r2,-100(fp)
10001878:	1885883a 	add	r2,r3,r2
1000187c:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally - poolstickB + diagGap;
10001880:	e0bfe417 	ldw	r2,-112(fp)
10001884:	e0ffd78b 	ldhu	r3,-162(fp)
10001888:	1885c83a 	sub	r2,r3,r2
1000188c:	1007883a 	mov	r3,r2
10001890:	e0bfe717 	ldw	r2,-100(fp)
10001894:	1885883a 	add	r2,r3,r2
10001898:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x004f && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
1000189c:	00014a06 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 1;
				poolstickx = cueballx - poolstickB + diagGap;
				poolsticky = cuebally - poolstickB + diagGap;
			}
			else if(*STICKDIRECTION_PIO == 1)
100018a0:	e0bffe17 	ldw	r2,-8(fp)
100018a4:	10800017 	ldw	r2,0(r2)
100018a8:	10800058 	cmpnei	r2,r2,1
100018ac:	1000101e 	bne	r2,zero,100018f0 <main+0x1584>
			{
				*STICKDIRECTION_PIO = 2;
100018b0:	e0bffe17 	ldw	r2,-8(fp)
100018b4:	00c00084 	movi	r3,2
100018b8:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx + balldiameter / 2;
100018bc:	e0bfe117 	ldw	r2,-124(fp)
100018c0:	1006d7fa 	srli	r3,r2,31
100018c4:	1885883a 	add	r2,r3,r2
100018c8:	1005d07a 	srai	r2,r2,1
100018cc:	1007883a 	mov	r3,r2
100018d0:	e0bfd70b 	ldhu	r2,-164(fp)
100018d4:	1885883a 	add	r2,r3,r2
100018d8:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally - poolstickCy;
100018dc:	e0bfe617 	ldw	r2,-104(fp)
100018e0:	e0ffd78b 	ldhu	r3,-162(fp)
100018e4:	1885c83a 	sub	r2,r3,r2
100018e8:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x004f && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
100018ec:	00013606 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 2;
				poolstickx = cueballx + balldiameter / 2;
				poolsticky = cuebally - poolstickCy;
			}
			else if(*STICKDIRECTION_PIO == 2)
100018f0:	e0bffe17 	ldw	r2,-8(fp)
100018f4:	10800017 	ldw	r2,0(r2)
100018f8:	10800098 	cmpnei	r2,r2,2
100018fc:	1000131e 	bne	r2,zero,1000194c <main+0x15e0>
			{
				*STICKDIRECTION_PIO = 3;
10001900:	e0bffe17 	ldw	r2,-8(fp)
10001904:	00c000c4 	movi	r3,3
10001908:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx + balldiameter - diagGap;
1000190c:	e0bfe117 	ldw	r2,-124(fp)
10001910:	1007883a 	mov	r3,r2
10001914:	e0bfd70b 	ldhu	r2,-164(fp)
10001918:	1885883a 	add	r2,r3,r2
1000191c:	1007883a 	mov	r3,r2
10001920:	e0bfe717 	ldw	r2,-100(fp)
10001924:	1885c83a 	sub	r2,r3,r2
10001928:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally - poolstickB + diagGap;
1000192c:	e0bfe417 	ldw	r2,-112(fp)
10001930:	e0ffd78b 	ldhu	r3,-162(fp)
10001934:	1885c83a 	sub	r2,r3,r2
10001938:	1007883a 	mov	r3,r2
1000193c:	e0bfe717 	ldw	r2,-100(fp)
10001940:	1885883a 	add	r2,r3,r2
10001944:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x004f && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001948:	00011f06 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 3;
				poolstickx = cueballx + balldiameter - diagGap;
				poolsticky = cuebally - poolstickB + diagGap;
			}
			else if(*STICKDIRECTION_PIO == 3)
1000194c:	e0bffe17 	ldw	r2,-8(fp)
10001950:	10800017 	ldw	r2,0(r2)
10001954:	108000d8 	cmpnei	r2,r2,3
10001958:	1000111e 	bne	r2,zero,100019a0 <main+0x1634>
			{
				*STICKDIRECTION_PIO = 4;
1000195c:	e0bffe17 	ldw	r2,-8(fp)
10001960:	00c00104 	movi	r3,4
10001964:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx + balldiameter;
10001968:	e0bfe117 	ldw	r2,-124(fp)
1000196c:	1007883a 	mov	r3,r2
10001970:	e0bfd70b 	ldhu	r2,-164(fp)
10001974:	1885883a 	add	r2,r3,r2
10001978:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally + balldiameter / 2;
1000197c:	e0bfe117 	ldw	r2,-124(fp)
10001980:	1006d7fa 	srli	r3,r2,31
10001984:	1885883a 	add	r2,r3,r2
10001988:	1005d07a 	srai	r2,r2,1
1000198c:	1007883a 	mov	r3,r2
10001990:	e0bfd78b 	ldhu	r2,-162(fp)
10001994:	1885883a 	add	r2,r3,r2
10001998:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x004f && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
1000199c:	00010a06 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 4;
				poolstickx = cueballx + balldiameter;
				poolsticky = cuebally + balldiameter / 2;
			}
			else if(*STICKDIRECTION_PIO == 4)
100019a0:	e0bffe17 	ldw	r2,-8(fp)
100019a4:	10800017 	ldw	r2,0(r2)
100019a8:	10800118 	cmpnei	r2,r2,4
100019ac:	1000141e 	bne	r2,zero,10001a00 <main+0x1694>
			{
				*STICKDIRECTION_PIO = 5;
100019b0:	e0bffe17 	ldw	r2,-8(fp)
100019b4:	00c00144 	movi	r3,5
100019b8:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx + balldiameter - diagGap;
100019bc:	e0bfe117 	ldw	r2,-124(fp)
100019c0:	1007883a 	mov	r3,r2
100019c4:	e0bfd70b 	ldhu	r2,-164(fp)
100019c8:	1885883a 	add	r2,r3,r2
100019cc:	1007883a 	mov	r3,r2
100019d0:	e0bfe717 	ldw	r2,-100(fp)
100019d4:	1885c83a 	sub	r2,r3,r2
100019d8:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally + balldiameter - diagGap;
100019dc:	e0bfe117 	ldw	r2,-124(fp)
100019e0:	1007883a 	mov	r3,r2
100019e4:	e0bfd78b 	ldhu	r2,-162(fp)
100019e8:	1885883a 	add	r2,r3,r2
100019ec:	1007883a 	mov	r3,r2
100019f0:	e0bfe717 	ldw	r2,-100(fp)
100019f4:	1885c83a 	sub	r2,r3,r2
100019f8:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x004f && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
100019fc:	0000f206 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 5;
				poolstickx = cueballx + balldiameter - diagGap;
				poolsticky = cuebally + balldiameter - diagGap;
			}
			else if(*STICKDIRECTION_PIO == 5)
10001a00:	e0bffe17 	ldw	r2,-8(fp)
10001a04:	10800017 	ldw	r2,0(r2)
10001a08:	10800158 	cmpnei	r2,r2,5
10001a0c:	1000111e 	bne	r2,zero,10001a54 <main+0x16e8>
			{
				*STICKDIRECTION_PIO = 6;
10001a10:	e0bffe17 	ldw	r2,-8(fp)
10001a14:	00c00184 	movi	r3,6
10001a18:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx + balldiameter / 2;
10001a1c:	e0bfe117 	ldw	r2,-124(fp)
10001a20:	1006d7fa 	srli	r3,r2,31
10001a24:	1885883a 	add	r2,r3,r2
10001a28:	1005d07a 	srai	r2,r2,1
10001a2c:	1007883a 	mov	r3,r2
10001a30:	e0bfd70b 	ldhu	r2,-164(fp)
10001a34:	1885883a 	add	r2,r3,r2
10001a38:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally + balldiameter;
10001a3c:	e0bfe117 	ldw	r2,-124(fp)
10001a40:	1007883a 	mov	r3,r2
10001a44:	e0bfd78b 	ldhu	r2,-162(fp)
10001a48:	1885883a 	add	r2,r3,r2
10001a4c:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x004f && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001a50:	0000dd06 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 6;
				poolstickx = cueballx + balldiameter / 2;
				poolsticky = cuebally + balldiameter;
			}
			else if(*STICKDIRECTION_PIO == 6)
10001a54:	e0bffe17 	ldw	r2,-8(fp)
10001a58:	10800017 	ldw	r2,0(r2)
10001a5c:	10800198 	cmpnei	r2,r2,6
10001a60:	1000131e 	bne	r2,zero,10001ab0 <main+0x1744>
			{
				*STICKDIRECTION_PIO = 7;
10001a64:	e0bffe17 	ldw	r2,-8(fp)
10001a68:	00c001c4 	movi	r3,7
10001a6c:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx - poolstickB + diagGap;
10001a70:	e0bfe417 	ldw	r2,-112(fp)
10001a74:	e0ffd70b 	ldhu	r3,-164(fp)
10001a78:	1885c83a 	sub	r2,r3,r2
10001a7c:	1007883a 	mov	r3,r2
10001a80:	e0bfe717 	ldw	r2,-100(fp)
10001a84:	1885883a 	add	r2,r3,r2
10001a88:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally + balldiameter - diagGap;
10001a8c:	e0bfe117 	ldw	r2,-124(fp)
10001a90:	1007883a 	mov	r3,r2
10001a94:	e0bfd78b 	ldhu	r2,-162(fp)
10001a98:	1885883a 	add	r2,r3,r2
10001a9c:	1007883a 	mov	r3,r2
10001aa0:	e0bfe717 	ldw	r2,-100(fp)
10001aa4:	1885c83a 	sub	r2,r3,r2
10001aa8:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x004f && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001aac:	0000c606 	br	10001dc8 <main+0x1a5c>
				poolstickx = cueballx - poolstickB + diagGap;
				poolsticky = cuebally + balldiameter - diagGap;
			}
			else
			{
				*STICKDIRECTION_PIO = 0;
10001ab0:	e0bffe17 	ldw	r2,-8(fp)
10001ab4:	10000015 	stw	zero,0(r2)
				poolstickx = cueballx - poolstickAx;
10001ab8:	e0bfe217 	ldw	r2,-120(fp)
10001abc:	e0ffd70b 	ldhu	r3,-164(fp)
10001ac0:	1885c83a 	sub	r2,r3,r2
10001ac4:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally + balldiameter / 2;
10001ac8:	e0bfe117 	ldw	r2,-124(fp)
10001acc:	1006d7fa 	srli	r3,r2,31
10001ad0:	1885883a 	add	r2,r3,r2
10001ad4:	1005d07a 	srai	r2,r2,1
10001ad8:	1007883a 	mov	r3,r2
10001adc:	e0bfd78b 	ldhu	r2,-162(fp)
10001ae0:	1885883a 	add	r2,r3,r2
10001ae4:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x004f && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001ae8:	0000b706 	br	10001dc8 <main+0x1a5c>
				*STICKDIRECTION_PIO = 0;
				poolstickx = cueballx - poolstickAx;
				poolsticky = cuebally + balldiameter / 2;
			}
		}
		else if(keycode == 0x0050 && pressed == 0 && dirConfirm == 0 && gameState == 1)
10001aec:	e0bfff17 	ldw	r2,-4(fp)
10001af0:	10801418 	cmpnei	r2,r2,80
10001af4:	1000b11e 	bne	r2,zero,10001dbc <main+0x1a50>
10001af8:	e0bfd917 	ldw	r2,-156(fp)
10001afc:	1000af1e 	bne	r2,zero,10001dbc <main+0x1a50>
10001b00:	e0bfda17 	ldw	r2,-152(fp)
10001b04:	1000ad1e 	bne	r2,zero,10001dbc <main+0x1a50>
10001b08:	e0bfde17 	ldw	r2,-136(fp)
10001b0c:	10800058 	cmpnei	r2,r2,1
10001b10:	1000aa1e 	bne	r2,zero,10001dbc <main+0x1a50>
		{
			pressed = 1;
10001b14:	00800044 	movi	r2,1
10001b18:	e0bfd915 	stw	r2,-156(fp)
			if(*STICKDIRECTION_PIO == 0)
10001b1c:	e0bffe17 	ldw	r2,-8(fp)
10001b20:	10800017 	ldw	r2,0(r2)
10001b24:	1000131e 	bne	r2,zero,10001b74 <main+0x1808>
			{
				*STICKDIRECTION_PIO = 7;
10001b28:	e0bffe17 	ldw	r2,-8(fp)
10001b2c:	00c001c4 	movi	r3,7
10001b30:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx - poolstickB + diagGap;
10001b34:	e0bfe417 	ldw	r2,-112(fp)
10001b38:	e0ffd70b 	ldhu	r3,-164(fp)
10001b3c:	1885c83a 	sub	r2,r3,r2
10001b40:	1007883a 	mov	r3,r2
10001b44:	e0bfe717 	ldw	r2,-100(fp)
10001b48:	1885883a 	add	r2,r3,r2
10001b4c:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally + balldiameter - diagGap;
10001b50:	e0bfe117 	ldw	r2,-124(fp)
10001b54:	1007883a 	mov	r3,r2
10001b58:	e0bfd78b 	ldhu	r2,-162(fp)
10001b5c:	1885883a 	add	r2,r3,r2
10001b60:	1007883a 	mov	r3,r2
10001b64:	e0bfe717 	ldw	r2,-100(fp)
10001b68:	1885c83a 	sub	r2,r3,r2
10001b6c:	e0bfd88d 	sth	r2,-158(fp)
			}
		}
		else if(keycode == 0x0050 && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001b70:	00009506 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 7;
				poolstickx = cueballx - poolstickB + diagGap;
				poolsticky = cuebally + balldiameter - diagGap;
			}
			else if(*STICKDIRECTION_PIO == 1)
10001b74:	e0bffe17 	ldw	r2,-8(fp)
10001b78:	10800017 	ldw	r2,0(r2)
10001b7c:	10800058 	cmpnei	r2,r2,1
10001b80:	10000f1e 	bne	r2,zero,10001bc0 <main+0x1854>
			{
				*STICKDIRECTION_PIO = 0;
10001b84:	e0bffe17 	ldw	r2,-8(fp)
10001b88:	10000015 	stw	zero,0(r2)
				poolstickx = cueballx - poolstickAx;
10001b8c:	e0bfe217 	ldw	r2,-120(fp)
10001b90:	e0ffd70b 	ldhu	r3,-164(fp)
10001b94:	1885c83a 	sub	r2,r3,r2
10001b98:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally + balldiameter / 2;
10001b9c:	e0bfe117 	ldw	r2,-124(fp)
10001ba0:	1006d7fa 	srli	r3,r2,31
10001ba4:	1885883a 	add	r2,r3,r2
10001ba8:	1005d07a 	srai	r2,r2,1
10001bac:	1007883a 	mov	r3,r2
10001bb0:	e0bfd78b 	ldhu	r2,-162(fp)
10001bb4:	1885883a 	add	r2,r3,r2
10001bb8:	e0bfd88d 	sth	r2,-158(fp)
			}
		}
		else if(keycode == 0x0050 && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001bbc:	00008206 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 0;
				poolstickx = cueballx - poolstickAx;
				poolsticky = cuebally + balldiameter / 2;
			}
			else if(*STICKDIRECTION_PIO == 2)
10001bc0:	e0bffe17 	ldw	r2,-8(fp)
10001bc4:	10800017 	ldw	r2,0(r2)
10001bc8:	10800098 	cmpnei	r2,r2,2
10001bcc:	1000121e 	bne	r2,zero,10001c18 <main+0x18ac>
			{
				*STICKDIRECTION_PIO = 1;
10001bd0:	e0bffe17 	ldw	r2,-8(fp)
10001bd4:	00c00044 	movi	r3,1
10001bd8:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx - poolstickB + diagGap;
10001bdc:	e0bfe417 	ldw	r2,-112(fp)
10001be0:	e0ffd70b 	ldhu	r3,-164(fp)
10001be4:	1885c83a 	sub	r2,r3,r2
10001be8:	1007883a 	mov	r3,r2
10001bec:	e0bfe717 	ldw	r2,-100(fp)
10001bf0:	1885883a 	add	r2,r3,r2
10001bf4:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally - poolstickB + diagGap;
10001bf8:	e0bfe417 	ldw	r2,-112(fp)
10001bfc:	e0ffd78b 	ldhu	r3,-162(fp)
10001c00:	1885c83a 	sub	r2,r3,r2
10001c04:	1007883a 	mov	r3,r2
10001c08:	e0bfe717 	ldw	r2,-100(fp)
10001c0c:	1885883a 	add	r2,r3,r2
10001c10:	e0bfd88d 	sth	r2,-158(fp)
			}
		}
		else if(keycode == 0x0050 && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001c14:	00006c06 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 1;
				poolstickx = cueballx - poolstickB + diagGap;
				poolsticky = cuebally - poolstickB + diagGap;
			}
			else if(*STICKDIRECTION_PIO == 3)
10001c18:	e0bffe17 	ldw	r2,-8(fp)
10001c1c:	10800017 	ldw	r2,0(r2)
10001c20:	108000d8 	cmpnei	r2,r2,3
10001c24:	1000101e 	bne	r2,zero,10001c68 <main+0x18fc>
			{
				*STICKDIRECTION_PIO = 2;
10001c28:	e0bffe17 	ldw	r2,-8(fp)
10001c2c:	00c00084 	movi	r3,2
10001c30:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx + balldiameter / 2;
10001c34:	e0bfe117 	ldw	r2,-124(fp)
10001c38:	1006d7fa 	srli	r3,r2,31
10001c3c:	1885883a 	add	r2,r3,r2
10001c40:	1005d07a 	srai	r2,r2,1
10001c44:	1007883a 	mov	r3,r2
10001c48:	e0bfd70b 	ldhu	r2,-164(fp)
10001c4c:	1885883a 	add	r2,r3,r2
10001c50:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally - poolstickCy;
10001c54:	e0bfe617 	ldw	r2,-104(fp)
10001c58:	e0ffd78b 	ldhu	r3,-162(fp)
10001c5c:	1885c83a 	sub	r2,r3,r2
10001c60:	e0bfd88d 	sth	r2,-158(fp)
			}
		}
		else if(keycode == 0x0050 && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001c64:	00005806 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 2;
				poolstickx = cueballx + balldiameter / 2;
				poolsticky = cuebally - poolstickCy;
			}
			else if(*STICKDIRECTION_PIO == 4)
10001c68:	e0bffe17 	ldw	r2,-8(fp)
10001c6c:	10800017 	ldw	r2,0(r2)
10001c70:	10800118 	cmpnei	r2,r2,4
10001c74:	1000131e 	bne	r2,zero,10001cc4 <main+0x1958>
			{
				*STICKDIRECTION_PIO = 3;
10001c78:	e0bffe17 	ldw	r2,-8(fp)
10001c7c:	00c000c4 	movi	r3,3
10001c80:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx + balldiameter - diagGap;
10001c84:	e0bfe117 	ldw	r2,-124(fp)
10001c88:	1007883a 	mov	r3,r2
10001c8c:	e0bfd70b 	ldhu	r2,-164(fp)
10001c90:	1885883a 	add	r2,r3,r2
10001c94:	1007883a 	mov	r3,r2
10001c98:	e0bfe717 	ldw	r2,-100(fp)
10001c9c:	1885c83a 	sub	r2,r3,r2
10001ca0:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally - poolstickB + diagGap;
10001ca4:	e0bfe417 	ldw	r2,-112(fp)
10001ca8:	e0ffd78b 	ldhu	r3,-162(fp)
10001cac:	1885c83a 	sub	r2,r3,r2
10001cb0:	1007883a 	mov	r3,r2
10001cb4:	e0bfe717 	ldw	r2,-100(fp)
10001cb8:	1885883a 	add	r2,r3,r2
10001cbc:	e0bfd88d 	sth	r2,-158(fp)
			}
		}
		else if(keycode == 0x0050 && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001cc0:	00004106 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 3;
				poolstickx = cueballx + balldiameter - diagGap;
				poolsticky = cuebally - poolstickB + diagGap;
			}
			else if(*STICKDIRECTION_PIO == 5)
10001cc4:	e0bffe17 	ldw	r2,-8(fp)
10001cc8:	10800017 	ldw	r2,0(r2)
10001ccc:	10800158 	cmpnei	r2,r2,5
10001cd0:	1000111e 	bne	r2,zero,10001d18 <main+0x19ac>
			{
				*STICKDIRECTION_PIO = 4;
10001cd4:	e0bffe17 	ldw	r2,-8(fp)
10001cd8:	00c00104 	movi	r3,4
10001cdc:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx + balldiameter;
10001ce0:	e0bfe117 	ldw	r2,-124(fp)
10001ce4:	1007883a 	mov	r3,r2
10001ce8:	e0bfd70b 	ldhu	r2,-164(fp)
10001cec:	1885883a 	add	r2,r3,r2
10001cf0:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally + balldiameter / 2;
10001cf4:	e0bfe117 	ldw	r2,-124(fp)
10001cf8:	1006d7fa 	srli	r3,r2,31
10001cfc:	1885883a 	add	r2,r3,r2
10001d00:	1005d07a 	srai	r2,r2,1
10001d04:	1007883a 	mov	r3,r2
10001d08:	e0bfd78b 	ldhu	r2,-162(fp)
10001d0c:	1885883a 	add	r2,r3,r2
10001d10:	e0bfd88d 	sth	r2,-158(fp)
			}
		}
		else if(keycode == 0x0050 && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001d14:	00002c06 	br	10001dc8 <main+0x1a5c>
			{
				*STICKDIRECTION_PIO = 4;
				poolstickx = cueballx + balldiameter;
				poolsticky = cuebally + balldiameter / 2;
			}
			else if(*STICKDIRECTION_PIO == 6)
10001d18:	e0bffe17 	ldw	r2,-8(fp)
10001d1c:	10800017 	ldw	r2,0(r2)
10001d20:	10800198 	cmpnei	r2,r2,6
10001d24:	1000141e 	bne	r2,zero,10001d78 <main+0x1a0c>
			{
				*STICKDIRECTION_PIO = 5;
10001d28:	e0bffe17 	ldw	r2,-8(fp)
10001d2c:	00c00144 	movi	r3,5
10001d30:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx + balldiameter - diagGap;
10001d34:	e0bfe117 	ldw	r2,-124(fp)
10001d38:	1007883a 	mov	r3,r2
10001d3c:	e0bfd70b 	ldhu	r2,-164(fp)
10001d40:	1885883a 	add	r2,r3,r2
10001d44:	1007883a 	mov	r3,r2
10001d48:	e0bfe717 	ldw	r2,-100(fp)
10001d4c:	1885c83a 	sub	r2,r3,r2
10001d50:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally + balldiameter - diagGap;
10001d54:	e0bfe117 	ldw	r2,-124(fp)
10001d58:	1007883a 	mov	r3,r2
10001d5c:	e0bfd78b 	ldhu	r2,-162(fp)
10001d60:	1885883a 	add	r2,r3,r2
10001d64:	1007883a 	mov	r3,r2
10001d68:	e0bfe717 	ldw	r2,-100(fp)
10001d6c:	1885c83a 	sub	r2,r3,r2
10001d70:	e0bfd88d 	sth	r2,-158(fp)
			}
		}
		else if(keycode == 0x0050 && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001d74:	00001406 	br	10001dc8 <main+0x1a5c>
				poolstickx = cueballx + balldiameter - diagGap;
				poolsticky = cuebally + balldiameter - diagGap;
			}
			else
			{
				*STICKDIRECTION_PIO = 6;
10001d78:	e0bffe17 	ldw	r2,-8(fp)
10001d7c:	00c00184 	movi	r3,6
10001d80:	10c00015 	stw	r3,0(r2)
				poolstickx = cueballx + balldiameter / 2;
10001d84:	e0bfe117 	ldw	r2,-124(fp)
10001d88:	1006d7fa 	srli	r3,r2,31
10001d8c:	1885883a 	add	r2,r3,r2
10001d90:	1005d07a 	srai	r2,r2,1
10001d94:	1007883a 	mov	r3,r2
10001d98:	e0bfd70b 	ldhu	r2,-164(fp)
10001d9c:	1885883a 	add	r2,r3,r2
10001da0:	e0bfd80d 	sth	r2,-160(fp)
				poolsticky = cuebally + balldiameter;
10001da4:	e0bfe117 	ldw	r2,-124(fp)
10001da8:	1007883a 	mov	r3,r2
10001dac:	e0bfd78b 	ldhu	r2,-162(fp)
10001db0:	1885883a 	add	r2,r3,r2
10001db4:	e0bfd88d 	sth	r2,-158(fp)
			}
		}
		else if(keycode == 0x0050 && pressed == 0 && dirConfirm == 0 && gameState == 1)
		{
			pressed = 1;
			if(*STICKDIRECTION_PIO == 0)
10001db8:	00000306 	br	10001dc8 <main+0x1a5c>
				*STICKDIRECTION_PIO = 6;
				poolstickx = cueballx + balldiameter / 2;
				poolsticky = cuebally + balldiameter;
			}
		}
		else if(keycode == 0x0000)
10001dbc:	e0bfff17 	ldw	r2,-4(fp)
10001dc0:	1000011e 	bne	r2,zero,10001dc8 <main+0x1a5c>
		{
			pressed = 0;
10001dc4:	e03fd915 	stw	zero,-156(fp)
		}

		if(keycode == 0x001d && pressed == 0 && dirConfirm == 1 && gameState == 1)
10001dc8:	e0bfff17 	ldw	r2,-4(fp)
10001dcc:	10800758 	cmpnei	r2,r2,29
10001dd0:	1001791e 	bne	r2,zero,100023b8 <main+0x204c>
10001dd4:	e0bfd917 	ldw	r2,-156(fp)
10001dd8:	1001771e 	bne	r2,zero,100023b8 <main+0x204c>
10001ddc:	e0bfda17 	ldw	r2,-152(fp)
10001de0:	10800058 	cmpnei	r2,r2,1
10001de4:	1001741e 	bne	r2,zero,100023b8 <main+0x204c>
10001de8:	e0bfde17 	ldw	r2,-136(fp)
10001dec:	10800058 	cmpnei	r2,r2,1
10001df0:	1001711e 	bne	r2,zero,100023b8 <main+0x204c>
		{
			pressed = 1;
10001df4:	00800044 	movi	r2,1
10001df8:	e0bfd915 	stw	r2,-156(fp)
			if(power == 5)
10001dfc:	e0bfdc17 	ldw	r2,-144(fp)
10001e00:	10800158 	cmpnei	r2,r2,5
10001e04:	1003b526 	beq	r2,zero,10002cdc <main+0x2970>
				continue;
			else
			{
				power++;
10001e08:	e0bfdc17 	ldw	r2,-144(fp)
10001e0c:	10800044 	addi	r2,r2,1
10001e10:	e0bfdc15 	stw	r2,-144(fp)
				if(*STICKDIRECTION_PIO == 0)
10001e14:	e0bffe17 	ldw	r2,-8(fp)
10001e18:	10800017 	ldw	r2,0(r2)
10001e1c:	1000051e 	bne	r2,zero,10001e34 <main+0x1ac8>
				{
					poolstickx -= powerMod;
10001e20:	e0bfe817 	ldw	r2,-96(fp)
10001e24:	e0ffd80b 	ldhu	r3,-160(fp)
10001e28:	1885c83a 	sub	r2,r3,r2
10001e2c:	e0bfd80d 	sth	r2,-160(fp)
		}

		if(keycode == 0x001d && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 5)
10001e30:	00016406 	br	100023c4 <main+0x2058>
				power++;
				if(*STICKDIRECTION_PIO == 0)
				{
					poolstickx -= powerMod;
				}
				else if(*STICKDIRECTION_PIO == 1)
10001e34:	e0bffe17 	ldw	r2,-8(fp)
10001e38:	10800017 	ldw	r2,0(r2)
10001e3c:	10800058 	cmpnei	r2,r2,1
10001e40:	10004e1e 	bne	r2,zero,10001f7c <main+0x1c10>
				{
					poolstickx -= powerMod / sqrt(2.0);
10001e44:	e0bfd80b 	ldhu	r2,-160(fp)
10001e48:	1009883a 	mov	r4,r2
10001e4c:	00047d40 	call	100047d4 <__floatsidf>
10001e50:	1021883a 	mov	r16,r2
10001e54:	1823883a 	mov	r17,r3
10001e58:	e13fe817 	ldw	r4,-96(fp)
10001e5c:	00047d40 	call	100047d4 <__floatsidf>
10001e60:	100b883a 	mov	r5,r2
10001e64:	180d883a 	mov	r6,r3
10001e68:	2809883a 	mov	r4,r5
10001e6c:	300b883a 	mov	r5,r6
10001e70:	01999ff4 	movhi	r6,26239
10001e74:	318ef344 	addi	r6,r6,15309
10001e78:	01cffdf4 	movhi	r7,16375
10001e7c:	39e82784 	addi	r7,r7,-24418
10001e80:	00045bc0 	call	100045bc <__divdf3>
10001e84:	1009883a 	mov	r4,r2
10001e88:	180b883a 	mov	r5,r3
10001e8c:	2005883a 	mov	r2,r4
10001e90:	2807883a 	mov	r3,r5
10001e94:	8009883a 	mov	r4,r16
10001e98:	880b883a 	mov	r5,r17
10001e9c:	100d883a 	mov	r6,r2
10001ea0:	180f883a 	mov	r7,r3
10001ea4:	00042780 	call	10004278 <__subdf3>
10001ea8:	1009883a 	mov	r4,r2
10001eac:	180b883a 	mov	r5,r3
10001eb0:	2005883a 	mov	r2,r4
10001eb4:	2807883a 	mov	r3,r5
10001eb8:	1009883a 	mov	r4,r2
10001ebc:	180b883a 	mov	r5,r3
10001ec0:	0003e4c0 	call	10003e4c <__fixunsdfsi>
10001ec4:	e0bfd80d 	sth	r2,-160(fp)
					poolsticky -= (powerMod / sqrt(2.0)) * (2.0/3);
10001ec8:	e0bfd88b 	ldhu	r2,-158(fp)
10001ecc:	1009883a 	mov	r4,r2
10001ed0:	00047d40 	call	100047d4 <__floatsidf>
10001ed4:	1021883a 	mov	r16,r2
10001ed8:	1823883a 	mov	r17,r3
10001edc:	e13fe817 	ldw	r4,-96(fp)
10001ee0:	00047d40 	call	100047d4 <__floatsidf>
10001ee4:	100b883a 	mov	r5,r2
10001ee8:	180d883a 	mov	r6,r3
10001eec:	2809883a 	mov	r4,r5
10001ef0:	300b883a 	mov	r5,r6
10001ef4:	01999ff4 	movhi	r6,26239
10001ef8:	318ef344 	addi	r6,r6,15309
10001efc:	01cffdf4 	movhi	r7,16375
10001f00:	39e82784 	addi	r7,r7,-24418
10001f04:	00045bc0 	call	100045bc <__divdf3>
10001f08:	1009883a 	mov	r4,r2
10001f0c:	180b883a 	mov	r5,r3
10001f10:	2005883a 	mov	r2,r4
10001f14:	2807883a 	mov	r3,r5
10001f18:	1009883a 	mov	r4,r2
10001f1c:	180b883a 	mov	r5,r3
10001f20:	01955574 	movhi	r6,21845
10001f24:	31955544 	addi	r6,r6,21845
10001f28:	01cff974 	movhi	r7,16357
10001f2c:	39d55544 	addi	r7,r7,21845
10001f30:	00042d80 	call	100042d8 <__muldf3>
10001f34:	1009883a 	mov	r4,r2
10001f38:	180b883a 	mov	r5,r3
10001f3c:	2005883a 	mov	r2,r4
10001f40:	2807883a 	mov	r3,r5
10001f44:	8009883a 	mov	r4,r16
10001f48:	880b883a 	mov	r5,r17
10001f4c:	100d883a 	mov	r6,r2
10001f50:	180f883a 	mov	r7,r3
10001f54:	00042780 	call	10004278 <__subdf3>
10001f58:	1009883a 	mov	r4,r2
10001f5c:	180b883a 	mov	r5,r3
10001f60:	2005883a 	mov	r2,r4
10001f64:	2807883a 	mov	r3,r5
10001f68:	1009883a 	mov	r4,r2
10001f6c:	180b883a 	mov	r5,r3
10001f70:	0003e4c0 	call	10003e4c <__fixunsdfsi>
10001f74:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x001d && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 5)
10001f78:	00011206 	br	100023c4 <main+0x2058>
				else if(*STICKDIRECTION_PIO == 1)
				{
					poolstickx -= powerMod / sqrt(2.0);
					poolsticky -= (powerMod / sqrt(2.0)) * (2.0/3);
				}
				else if(*STICKDIRECTION_PIO == 2)
10001f7c:	e0bffe17 	ldw	r2,-8(fp)
10001f80:	10800017 	ldw	r2,0(r2)
10001f84:	10800098 	cmpnei	r2,r2,2
10001f88:	1000051e 	bne	r2,zero,10001fa0 <main+0x1c34>
				{
					poolsticky -= powerMod;
10001f8c:	e0bfe817 	ldw	r2,-96(fp)
10001f90:	e0ffd88b 	ldhu	r3,-158(fp)
10001f94:	1885c83a 	sub	r2,r3,r2
10001f98:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x001d && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 5)
10001f9c:	00010906 	br	100023c4 <main+0x2058>
				}
				else if(*STICKDIRECTION_PIO == 2)
				{
					poolsticky -= powerMod;
				}
				else if(*STICKDIRECTION_PIO == 3)
10001fa0:	e0bffe17 	ldw	r2,-8(fp)
10001fa4:	10800017 	ldw	r2,0(r2)
10001fa8:	108000d8 	cmpnei	r2,r2,3
10001fac:	10004e1e 	bne	r2,zero,100020e8 <main+0x1d7c>
				{
					poolstickx += powerMod / sqrt(2.0);
10001fb0:	e0bfd80b 	ldhu	r2,-160(fp)
10001fb4:	1009883a 	mov	r4,r2
10001fb8:	00047d40 	call	100047d4 <__floatsidf>
10001fbc:	1021883a 	mov	r16,r2
10001fc0:	1823883a 	mov	r17,r3
10001fc4:	e13fe817 	ldw	r4,-96(fp)
10001fc8:	00047d40 	call	100047d4 <__floatsidf>
10001fcc:	100b883a 	mov	r5,r2
10001fd0:	180d883a 	mov	r6,r3
10001fd4:	2809883a 	mov	r4,r5
10001fd8:	300b883a 	mov	r5,r6
10001fdc:	01999ff4 	movhi	r6,26239
10001fe0:	318ef344 	addi	r6,r6,15309
10001fe4:	01cffdf4 	movhi	r7,16375
10001fe8:	39e82784 	addi	r7,r7,-24418
10001fec:	00045bc0 	call	100045bc <__divdf3>
10001ff0:	1009883a 	mov	r4,r2
10001ff4:	180b883a 	mov	r5,r3
10001ff8:	2005883a 	mov	r2,r4
10001ffc:	2807883a 	mov	r3,r5
10002000:	8009883a 	mov	r4,r16
10002004:	880b883a 	mov	r5,r17
10002008:	100d883a 	mov	r6,r2
1000200c:	180f883a 	mov	r7,r3
10002010:	00042240 	call	10004224 <__adddf3>
10002014:	1009883a 	mov	r4,r2
10002018:	180b883a 	mov	r5,r3
1000201c:	2005883a 	mov	r2,r4
10002020:	2807883a 	mov	r3,r5
10002024:	1009883a 	mov	r4,r2
10002028:	180b883a 	mov	r5,r3
1000202c:	0003e4c0 	call	10003e4c <__fixunsdfsi>
10002030:	e0bfd80d 	sth	r2,-160(fp)
					poolsticky -= (powerMod / sqrt(2.0)) * (2.0/3);
10002034:	e0bfd88b 	ldhu	r2,-158(fp)
10002038:	1009883a 	mov	r4,r2
1000203c:	00047d40 	call	100047d4 <__floatsidf>
10002040:	1021883a 	mov	r16,r2
10002044:	1823883a 	mov	r17,r3
10002048:	e13fe817 	ldw	r4,-96(fp)
1000204c:	00047d40 	call	100047d4 <__floatsidf>
10002050:	100b883a 	mov	r5,r2
10002054:	180d883a 	mov	r6,r3
10002058:	2809883a 	mov	r4,r5
1000205c:	300b883a 	mov	r5,r6
10002060:	01999ff4 	movhi	r6,26239
10002064:	318ef344 	addi	r6,r6,15309
10002068:	01cffdf4 	movhi	r7,16375
1000206c:	39e82784 	addi	r7,r7,-24418
10002070:	00045bc0 	call	100045bc <__divdf3>
10002074:	1009883a 	mov	r4,r2
10002078:	180b883a 	mov	r5,r3
1000207c:	2005883a 	mov	r2,r4
10002080:	2807883a 	mov	r3,r5
10002084:	1009883a 	mov	r4,r2
10002088:	180b883a 	mov	r5,r3
1000208c:	01955574 	movhi	r6,21845
10002090:	31955544 	addi	r6,r6,21845
10002094:	01cff974 	movhi	r7,16357
10002098:	39d55544 	addi	r7,r7,21845
1000209c:	00042d80 	call	100042d8 <__muldf3>
100020a0:	1009883a 	mov	r4,r2
100020a4:	180b883a 	mov	r5,r3
100020a8:	2005883a 	mov	r2,r4
100020ac:	2807883a 	mov	r3,r5
100020b0:	8009883a 	mov	r4,r16
100020b4:	880b883a 	mov	r5,r17
100020b8:	100d883a 	mov	r6,r2
100020bc:	180f883a 	mov	r7,r3
100020c0:	00042780 	call	10004278 <__subdf3>
100020c4:	1009883a 	mov	r4,r2
100020c8:	180b883a 	mov	r5,r3
100020cc:	2005883a 	mov	r2,r4
100020d0:	2807883a 	mov	r3,r5
100020d4:	1009883a 	mov	r4,r2
100020d8:	180b883a 	mov	r5,r3
100020dc:	0003e4c0 	call	10003e4c <__fixunsdfsi>
100020e0:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x001d && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 5)
100020e4:	0000b706 	br	100023c4 <main+0x2058>
				else if(*STICKDIRECTION_PIO == 3)
				{
					poolstickx += powerMod / sqrt(2.0);
					poolsticky -= (powerMod / sqrt(2.0)) * (2.0/3);
				}
				else if(*STICKDIRECTION_PIO == 4)
100020e8:	e0bffe17 	ldw	r2,-8(fp)
100020ec:	10800017 	ldw	r2,0(r2)
100020f0:	10800118 	cmpnei	r2,r2,4
100020f4:	1000061e 	bne	r2,zero,10002110 <main+0x1da4>
				{
					poolstickx += powerMod;
100020f8:	e0bfe817 	ldw	r2,-96(fp)
100020fc:	1007883a 	mov	r3,r2
10002100:	e0bfd80b 	ldhu	r2,-160(fp)
10002104:	1885883a 	add	r2,r3,r2
10002108:	e0bfd80d 	sth	r2,-160(fp)
		}

		if(keycode == 0x001d && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 5)
1000210c:	0000ad06 	br	100023c4 <main+0x2058>
				}
				else if(*STICKDIRECTION_PIO == 4)
				{
					poolstickx += powerMod;
				}
				else if(*STICKDIRECTION_PIO == 5)
10002110:	e0bffe17 	ldw	r2,-8(fp)
10002114:	10800017 	ldw	r2,0(r2)
10002118:	10800158 	cmpnei	r2,r2,5
1000211c:	10004e1e 	bne	r2,zero,10002258 <main+0x1eec>
				{
					poolstickx += powerMod / sqrt(2.0);
10002120:	e0bfd80b 	ldhu	r2,-160(fp)
10002124:	1009883a 	mov	r4,r2
10002128:	00047d40 	call	100047d4 <__floatsidf>
1000212c:	1021883a 	mov	r16,r2
10002130:	1823883a 	mov	r17,r3
10002134:	e13fe817 	ldw	r4,-96(fp)
10002138:	00047d40 	call	100047d4 <__floatsidf>
1000213c:	100b883a 	mov	r5,r2
10002140:	180d883a 	mov	r6,r3
10002144:	2809883a 	mov	r4,r5
10002148:	300b883a 	mov	r5,r6
1000214c:	01999ff4 	movhi	r6,26239
10002150:	318ef344 	addi	r6,r6,15309
10002154:	01cffdf4 	movhi	r7,16375
10002158:	39e82784 	addi	r7,r7,-24418
1000215c:	00045bc0 	call	100045bc <__divdf3>
10002160:	1009883a 	mov	r4,r2
10002164:	180b883a 	mov	r5,r3
10002168:	2005883a 	mov	r2,r4
1000216c:	2807883a 	mov	r3,r5
10002170:	8009883a 	mov	r4,r16
10002174:	880b883a 	mov	r5,r17
10002178:	100d883a 	mov	r6,r2
1000217c:	180f883a 	mov	r7,r3
10002180:	00042240 	call	10004224 <__adddf3>
10002184:	1009883a 	mov	r4,r2
10002188:	180b883a 	mov	r5,r3
1000218c:	2005883a 	mov	r2,r4
10002190:	2807883a 	mov	r3,r5
10002194:	1009883a 	mov	r4,r2
10002198:	180b883a 	mov	r5,r3
1000219c:	0003e4c0 	call	10003e4c <__fixunsdfsi>
100021a0:	e0bfd80d 	sth	r2,-160(fp)
					poolsticky += (powerMod / sqrt(2.0)) * (2.0/3);
100021a4:	e0bfd88b 	ldhu	r2,-158(fp)
100021a8:	1009883a 	mov	r4,r2
100021ac:	00047d40 	call	100047d4 <__floatsidf>
100021b0:	1021883a 	mov	r16,r2
100021b4:	1823883a 	mov	r17,r3
100021b8:	e13fe817 	ldw	r4,-96(fp)
100021bc:	00047d40 	call	100047d4 <__floatsidf>
100021c0:	100b883a 	mov	r5,r2
100021c4:	180d883a 	mov	r6,r3
100021c8:	2809883a 	mov	r4,r5
100021cc:	300b883a 	mov	r5,r6
100021d0:	01999ff4 	movhi	r6,26239
100021d4:	318ef344 	addi	r6,r6,15309
100021d8:	01cffdf4 	movhi	r7,16375
100021dc:	39e82784 	addi	r7,r7,-24418
100021e0:	00045bc0 	call	100045bc <__divdf3>
100021e4:	1009883a 	mov	r4,r2
100021e8:	180b883a 	mov	r5,r3
100021ec:	2005883a 	mov	r2,r4
100021f0:	2807883a 	mov	r3,r5
100021f4:	1009883a 	mov	r4,r2
100021f8:	180b883a 	mov	r5,r3
100021fc:	01955574 	movhi	r6,21845
10002200:	31955544 	addi	r6,r6,21845
10002204:	01cff974 	movhi	r7,16357
10002208:	39d55544 	addi	r7,r7,21845
1000220c:	00042d80 	call	100042d8 <__muldf3>
10002210:	1009883a 	mov	r4,r2
10002214:	180b883a 	mov	r5,r3
10002218:	2005883a 	mov	r2,r4
1000221c:	2807883a 	mov	r3,r5
10002220:	8009883a 	mov	r4,r16
10002224:	880b883a 	mov	r5,r17
10002228:	100d883a 	mov	r6,r2
1000222c:	180f883a 	mov	r7,r3
10002230:	00042240 	call	10004224 <__adddf3>
10002234:	1009883a 	mov	r4,r2
10002238:	180b883a 	mov	r5,r3
1000223c:	2005883a 	mov	r2,r4
10002240:	2807883a 	mov	r3,r5
10002244:	1009883a 	mov	r4,r2
10002248:	180b883a 	mov	r5,r3
1000224c:	0003e4c0 	call	10003e4c <__fixunsdfsi>
10002250:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x001d && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 5)
10002254:	00005b06 	br	100023c4 <main+0x2058>
				else if(*STICKDIRECTION_PIO == 5)
				{
					poolstickx += powerMod / sqrt(2.0);
					poolsticky += (powerMod / sqrt(2.0)) * (2.0/3);
				}
				else if(*STICKDIRECTION_PIO == 6)
10002258:	e0bffe17 	ldw	r2,-8(fp)
1000225c:	10800017 	ldw	r2,0(r2)
10002260:	10800198 	cmpnei	r2,r2,6
10002264:	1000061e 	bne	r2,zero,10002280 <main+0x1f14>
				{
					poolsticky += powerMod;
10002268:	e0bfe817 	ldw	r2,-96(fp)
1000226c:	1007883a 	mov	r3,r2
10002270:	e0bfd88b 	ldhu	r2,-158(fp)
10002274:	1885883a 	add	r2,r3,r2
10002278:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x001d && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 5)
1000227c:	00005106 	br	100023c4 <main+0x2058>
				{
					poolsticky += powerMod;
				}
				else
				{
					poolstickx -= powerMod / sqrt(2.0);
10002280:	e0bfd80b 	ldhu	r2,-160(fp)
10002284:	1009883a 	mov	r4,r2
10002288:	00047d40 	call	100047d4 <__floatsidf>
1000228c:	1021883a 	mov	r16,r2
10002290:	1823883a 	mov	r17,r3
10002294:	e13fe817 	ldw	r4,-96(fp)
10002298:	00047d40 	call	100047d4 <__floatsidf>
1000229c:	100b883a 	mov	r5,r2
100022a0:	180d883a 	mov	r6,r3
100022a4:	2809883a 	mov	r4,r5
100022a8:	300b883a 	mov	r5,r6
100022ac:	01999ff4 	movhi	r6,26239
100022b0:	318ef344 	addi	r6,r6,15309
100022b4:	01cffdf4 	movhi	r7,16375
100022b8:	39e82784 	addi	r7,r7,-24418
100022bc:	00045bc0 	call	100045bc <__divdf3>
100022c0:	1009883a 	mov	r4,r2
100022c4:	180b883a 	mov	r5,r3
100022c8:	2005883a 	mov	r2,r4
100022cc:	2807883a 	mov	r3,r5
100022d0:	8009883a 	mov	r4,r16
100022d4:	880b883a 	mov	r5,r17
100022d8:	100d883a 	mov	r6,r2
100022dc:	180f883a 	mov	r7,r3
100022e0:	00042780 	call	10004278 <__subdf3>
100022e4:	1009883a 	mov	r4,r2
100022e8:	180b883a 	mov	r5,r3
100022ec:	2005883a 	mov	r2,r4
100022f0:	2807883a 	mov	r3,r5
100022f4:	1009883a 	mov	r4,r2
100022f8:	180b883a 	mov	r5,r3
100022fc:	0003e4c0 	call	10003e4c <__fixunsdfsi>
10002300:	e0bfd80d 	sth	r2,-160(fp)
					poolsticky += (powerMod / sqrt(2.0)) * (2.0/3);
10002304:	e0bfd88b 	ldhu	r2,-158(fp)
10002308:	1009883a 	mov	r4,r2
1000230c:	00047d40 	call	100047d4 <__floatsidf>
10002310:	1021883a 	mov	r16,r2
10002314:	1823883a 	mov	r17,r3
10002318:	e13fe817 	ldw	r4,-96(fp)
1000231c:	00047d40 	call	100047d4 <__floatsidf>
10002320:	100b883a 	mov	r5,r2
10002324:	180d883a 	mov	r6,r3
10002328:	2809883a 	mov	r4,r5
1000232c:	300b883a 	mov	r5,r6
10002330:	01999ff4 	movhi	r6,26239
10002334:	318ef344 	addi	r6,r6,15309
10002338:	01cffdf4 	movhi	r7,16375
1000233c:	39e82784 	addi	r7,r7,-24418
10002340:	00045bc0 	call	100045bc <__divdf3>
10002344:	1009883a 	mov	r4,r2
10002348:	180b883a 	mov	r5,r3
1000234c:	2005883a 	mov	r2,r4
10002350:	2807883a 	mov	r3,r5
10002354:	1009883a 	mov	r4,r2
10002358:	180b883a 	mov	r5,r3
1000235c:	01955574 	movhi	r6,21845
10002360:	31955544 	addi	r6,r6,21845
10002364:	01cff974 	movhi	r7,16357
10002368:	39d55544 	addi	r7,r7,21845
1000236c:	00042d80 	call	100042d8 <__muldf3>
10002370:	1009883a 	mov	r4,r2
10002374:	180b883a 	mov	r5,r3
10002378:	2005883a 	mov	r2,r4
1000237c:	2807883a 	mov	r3,r5
10002380:	8009883a 	mov	r4,r16
10002384:	880b883a 	mov	r5,r17
10002388:	100d883a 	mov	r6,r2
1000238c:	180f883a 	mov	r7,r3
10002390:	00042240 	call	10004224 <__adddf3>
10002394:	1009883a 	mov	r4,r2
10002398:	180b883a 	mov	r5,r3
1000239c:	2005883a 	mov	r2,r4
100023a0:	2807883a 	mov	r3,r5
100023a4:	1009883a 	mov	r4,r2
100023a8:	180b883a 	mov	r5,r3
100023ac:	0003e4c0 	call	10003e4c <__fixunsdfsi>
100023b0:	e0bfd88d 	sth	r2,-158(fp)
		}

		if(keycode == 0x001d && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 5)
100023b4:	00000306 	br	100023c4 <main+0x2058>
					poolstickx -= powerMod / sqrt(2.0);
					poolsticky += (powerMod / sqrt(2.0)) * (2.0/3);
				}
			}
		}
		else if(keycode == 0x0000)
100023b8:	e0bfff17 	ldw	r2,-4(fp)
100023bc:	1000011e 	bne	r2,zero,100023c4 <main+0x2058>
		{
			pressed = 0;
100023c0:	e03fd915 	stw	zero,-156(fp)
		}


		if(keycode == 0x001b && pressed == 0 && dirConfirm == 1 && gameState == 1)
100023c4:	e0bfff17 	ldw	r2,-4(fp)
100023c8:	108006d8 	cmpnei	r2,r2,27
100023cc:	1001781e 	bne	r2,zero,100029b0 <main+0x2644>
100023d0:	e0bfd917 	ldw	r2,-156(fp)
100023d4:	1001761e 	bne	r2,zero,100029b0 <main+0x2644>
100023d8:	e0bfda17 	ldw	r2,-152(fp)
100023dc:	10800058 	cmpnei	r2,r2,1
100023e0:	1001731e 	bne	r2,zero,100029b0 <main+0x2644>
100023e4:	e0bfde17 	ldw	r2,-136(fp)
100023e8:	10800058 	cmpnei	r2,r2,1
100023ec:	1001701e 	bne	r2,zero,100029b0 <main+0x2644>
		{
			pressed = 1;
100023f0:	00800044 	movi	r2,1
100023f4:	e0bfd915 	stw	r2,-156(fp)
			if(power == 0)
100023f8:	e0bfdc17 	ldw	r2,-144(fp)
100023fc:	10023926 	beq	r2,zero,10002ce4 <main+0x2978>
				continue;
			else
			{
				power--;
10002400:	e0bfdc17 	ldw	r2,-144(fp)
10002404:	10bfffc4 	addi	r2,r2,-1
10002408:	e0bfdc15 	stw	r2,-144(fp)
				if(*STICKDIRECTION_PIO == 0)
1000240c:	e0bffe17 	ldw	r2,-8(fp)
10002410:	10800017 	ldw	r2,0(r2)
10002414:	1000061e 	bne	r2,zero,10002430 <main+0x20c4>
				{
					poolstickx += powerMod;
10002418:	e0bfe817 	ldw	r2,-96(fp)
1000241c:	1007883a 	mov	r3,r2
10002420:	e0bfd80b 	ldhu	r2,-160(fp)
10002424:	1885883a 	add	r2,r3,r2
10002428:	e0bfd80d 	sth	r2,-160(fp)


		if(keycode == 0x001b && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 0)
1000242c:	00016306 	br	100029bc <main+0x2650>
				power--;
				if(*STICKDIRECTION_PIO == 0)
				{
					poolstickx += powerMod;
				}
				else if(*STICKDIRECTION_PIO == 1)
10002430:	e0bffe17 	ldw	r2,-8(fp)
10002434:	10800017 	ldw	r2,0(r2)
10002438:	10800058 	cmpnei	r2,r2,1
1000243c:	10004e1e 	bne	r2,zero,10002578 <main+0x220c>
				{
					poolstickx += powerMod / sqrt(2.0);
10002440:	e0bfd80b 	ldhu	r2,-160(fp)
10002444:	1009883a 	mov	r4,r2
10002448:	00047d40 	call	100047d4 <__floatsidf>
1000244c:	1021883a 	mov	r16,r2
10002450:	1823883a 	mov	r17,r3
10002454:	e13fe817 	ldw	r4,-96(fp)
10002458:	00047d40 	call	100047d4 <__floatsidf>
1000245c:	100b883a 	mov	r5,r2
10002460:	180d883a 	mov	r6,r3
10002464:	2809883a 	mov	r4,r5
10002468:	300b883a 	mov	r5,r6
1000246c:	01999ff4 	movhi	r6,26239
10002470:	318ef344 	addi	r6,r6,15309
10002474:	01cffdf4 	movhi	r7,16375
10002478:	39e82784 	addi	r7,r7,-24418
1000247c:	00045bc0 	call	100045bc <__divdf3>
10002480:	1009883a 	mov	r4,r2
10002484:	180b883a 	mov	r5,r3
10002488:	2005883a 	mov	r2,r4
1000248c:	2807883a 	mov	r3,r5
10002490:	8009883a 	mov	r4,r16
10002494:	880b883a 	mov	r5,r17
10002498:	100d883a 	mov	r6,r2
1000249c:	180f883a 	mov	r7,r3
100024a0:	00042240 	call	10004224 <__adddf3>
100024a4:	1009883a 	mov	r4,r2
100024a8:	180b883a 	mov	r5,r3
100024ac:	2005883a 	mov	r2,r4
100024b0:	2807883a 	mov	r3,r5
100024b4:	1009883a 	mov	r4,r2
100024b8:	180b883a 	mov	r5,r3
100024bc:	0003e4c0 	call	10003e4c <__fixunsdfsi>
100024c0:	e0bfd80d 	sth	r2,-160(fp)
					poolsticky += (powerMod / sqrt(2.0)) * (2.0/3);
100024c4:	e0bfd88b 	ldhu	r2,-158(fp)
100024c8:	1009883a 	mov	r4,r2
100024cc:	00047d40 	call	100047d4 <__floatsidf>
100024d0:	1021883a 	mov	r16,r2
100024d4:	1823883a 	mov	r17,r3
100024d8:	e13fe817 	ldw	r4,-96(fp)
100024dc:	00047d40 	call	100047d4 <__floatsidf>
100024e0:	100b883a 	mov	r5,r2
100024e4:	180d883a 	mov	r6,r3
100024e8:	2809883a 	mov	r4,r5
100024ec:	300b883a 	mov	r5,r6
100024f0:	01999ff4 	movhi	r6,26239
100024f4:	318ef344 	addi	r6,r6,15309
100024f8:	01cffdf4 	movhi	r7,16375
100024fc:	39e82784 	addi	r7,r7,-24418
10002500:	00045bc0 	call	100045bc <__divdf3>
10002504:	1009883a 	mov	r4,r2
10002508:	180b883a 	mov	r5,r3
1000250c:	2005883a 	mov	r2,r4
10002510:	2807883a 	mov	r3,r5
10002514:	1009883a 	mov	r4,r2
10002518:	180b883a 	mov	r5,r3
1000251c:	01955574 	movhi	r6,21845
10002520:	31955544 	addi	r6,r6,21845
10002524:	01cff974 	movhi	r7,16357
10002528:	39d55544 	addi	r7,r7,21845
1000252c:	00042d80 	call	100042d8 <__muldf3>
10002530:	1009883a 	mov	r4,r2
10002534:	180b883a 	mov	r5,r3
10002538:	2005883a 	mov	r2,r4
1000253c:	2807883a 	mov	r3,r5
10002540:	8009883a 	mov	r4,r16
10002544:	880b883a 	mov	r5,r17
10002548:	100d883a 	mov	r6,r2
1000254c:	180f883a 	mov	r7,r3
10002550:	00042240 	call	10004224 <__adddf3>
10002554:	1009883a 	mov	r4,r2
10002558:	180b883a 	mov	r5,r3
1000255c:	2005883a 	mov	r2,r4
10002560:	2807883a 	mov	r3,r5
10002564:	1009883a 	mov	r4,r2
10002568:	180b883a 	mov	r5,r3
1000256c:	0003e4c0 	call	10003e4c <__fixunsdfsi>
10002570:	e0bfd88d 	sth	r2,-158(fp)


		if(keycode == 0x001b && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 0)
10002574:	00011106 	br	100029bc <main+0x2650>
				else if(*STICKDIRECTION_PIO == 1)
				{
					poolstickx += powerMod / sqrt(2.0);
					poolsticky += (powerMod / sqrt(2.0)) * (2.0/3);
				}
				else if(*STICKDIRECTION_PIO == 2)
10002578:	e0bffe17 	ldw	r2,-8(fp)
1000257c:	10800017 	ldw	r2,0(r2)
10002580:	10800098 	cmpnei	r2,r2,2
10002584:	1000061e 	bne	r2,zero,100025a0 <main+0x2234>
				{
					poolsticky += powerMod;
10002588:	e0bfe817 	ldw	r2,-96(fp)
1000258c:	1007883a 	mov	r3,r2
10002590:	e0bfd88b 	ldhu	r2,-158(fp)
10002594:	1885883a 	add	r2,r3,r2
10002598:	e0bfd88d 	sth	r2,-158(fp)


		if(keycode == 0x001b && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 0)
1000259c:	00010706 	br	100029bc <main+0x2650>
				}
				else if(*STICKDIRECTION_PIO == 2)
				{
					poolsticky += powerMod;
				}
				else if(*STICKDIRECTION_PIO == 3)
100025a0:	e0bffe17 	ldw	r2,-8(fp)
100025a4:	10800017 	ldw	r2,0(r2)
100025a8:	108000d8 	cmpnei	r2,r2,3
100025ac:	10004e1e 	bne	r2,zero,100026e8 <main+0x237c>
				{
					poolstickx -= powerMod / sqrt(2.0);
100025b0:	e0bfd80b 	ldhu	r2,-160(fp)
100025b4:	1009883a 	mov	r4,r2
100025b8:	00047d40 	call	100047d4 <__floatsidf>
100025bc:	1021883a 	mov	r16,r2
100025c0:	1823883a 	mov	r17,r3
100025c4:	e13fe817 	ldw	r4,-96(fp)
100025c8:	00047d40 	call	100047d4 <__floatsidf>
100025cc:	100b883a 	mov	r5,r2
100025d0:	180d883a 	mov	r6,r3
100025d4:	2809883a 	mov	r4,r5
100025d8:	300b883a 	mov	r5,r6
100025dc:	01999ff4 	movhi	r6,26239
100025e0:	318ef344 	addi	r6,r6,15309
100025e4:	01cffdf4 	movhi	r7,16375
100025e8:	39e82784 	addi	r7,r7,-24418
100025ec:	00045bc0 	call	100045bc <__divdf3>
100025f0:	1009883a 	mov	r4,r2
100025f4:	180b883a 	mov	r5,r3
100025f8:	2005883a 	mov	r2,r4
100025fc:	2807883a 	mov	r3,r5
10002600:	8009883a 	mov	r4,r16
10002604:	880b883a 	mov	r5,r17
10002608:	100d883a 	mov	r6,r2
1000260c:	180f883a 	mov	r7,r3
10002610:	00042780 	call	10004278 <__subdf3>
10002614:	1009883a 	mov	r4,r2
10002618:	180b883a 	mov	r5,r3
1000261c:	2005883a 	mov	r2,r4
10002620:	2807883a 	mov	r3,r5
10002624:	1009883a 	mov	r4,r2
10002628:	180b883a 	mov	r5,r3
1000262c:	0003e4c0 	call	10003e4c <__fixunsdfsi>
10002630:	e0bfd80d 	sth	r2,-160(fp)
					poolsticky += (powerMod / sqrt(2.0)) * (2.0/3);
10002634:	e0bfd88b 	ldhu	r2,-158(fp)
10002638:	1009883a 	mov	r4,r2
1000263c:	00047d40 	call	100047d4 <__floatsidf>
10002640:	1021883a 	mov	r16,r2
10002644:	1823883a 	mov	r17,r3
10002648:	e13fe817 	ldw	r4,-96(fp)
1000264c:	00047d40 	call	100047d4 <__floatsidf>
10002650:	100b883a 	mov	r5,r2
10002654:	180d883a 	mov	r6,r3
10002658:	2809883a 	mov	r4,r5
1000265c:	300b883a 	mov	r5,r6
10002660:	01999ff4 	movhi	r6,26239
10002664:	318ef344 	addi	r6,r6,15309
10002668:	01cffdf4 	movhi	r7,16375
1000266c:	39e82784 	addi	r7,r7,-24418
10002670:	00045bc0 	call	100045bc <__divdf3>
10002674:	1009883a 	mov	r4,r2
10002678:	180b883a 	mov	r5,r3
1000267c:	2005883a 	mov	r2,r4
10002680:	2807883a 	mov	r3,r5
10002684:	1009883a 	mov	r4,r2
10002688:	180b883a 	mov	r5,r3
1000268c:	01955574 	movhi	r6,21845
10002690:	31955544 	addi	r6,r6,21845
10002694:	01cff974 	movhi	r7,16357
10002698:	39d55544 	addi	r7,r7,21845
1000269c:	00042d80 	call	100042d8 <__muldf3>
100026a0:	1009883a 	mov	r4,r2
100026a4:	180b883a 	mov	r5,r3
100026a8:	2005883a 	mov	r2,r4
100026ac:	2807883a 	mov	r3,r5
100026b0:	8009883a 	mov	r4,r16
100026b4:	880b883a 	mov	r5,r17
100026b8:	100d883a 	mov	r6,r2
100026bc:	180f883a 	mov	r7,r3
100026c0:	00042240 	call	10004224 <__adddf3>
100026c4:	1009883a 	mov	r4,r2
100026c8:	180b883a 	mov	r5,r3
100026cc:	2005883a 	mov	r2,r4
100026d0:	2807883a 	mov	r3,r5
100026d4:	1009883a 	mov	r4,r2
100026d8:	180b883a 	mov	r5,r3
100026dc:	0003e4c0 	call	10003e4c <__fixunsdfsi>
100026e0:	e0bfd88d 	sth	r2,-158(fp)


		if(keycode == 0x001b && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 0)
100026e4:	0000b506 	br	100029bc <main+0x2650>
				else if(*STICKDIRECTION_PIO == 3)
				{
					poolstickx -= powerMod / sqrt(2.0);
					poolsticky += (powerMod / sqrt(2.0)) * (2.0/3);
				}
				else if(*STICKDIRECTION_PIO == 4)
100026e8:	e0bffe17 	ldw	r2,-8(fp)
100026ec:	10800017 	ldw	r2,0(r2)
100026f0:	10800118 	cmpnei	r2,r2,4
100026f4:	1000051e 	bne	r2,zero,1000270c <main+0x23a0>
				{
					poolstickx -= powerMod;
100026f8:	e0bfe817 	ldw	r2,-96(fp)
100026fc:	e0ffd80b 	ldhu	r3,-160(fp)
10002700:	1885c83a 	sub	r2,r3,r2
10002704:	e0bfd80d 	sth	r2,-160(fp)


		if(keycode == 0x001b && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 0)
10002708:	0000ac06 	br	100029bc <main+0x2650>
				}
				else if(*STICKDIRECTION_PIO == 4)
				{
					poolstickx -= powerMod;
				}
				else if(*STICKDIRECTION_PIO == 5)
1000270c:	e0bffe17 	ldw	r2,-8(fp)
10002710:	10800017 	ldw	r2,0(r2)
10002714:	10800158 	cmpnei	r2,r2,5
10002718:	10004e1e 	bne	r2,zero,10002854 <main+0x24e8>
				{
					poolstickx -= powerMod / sqrt(2.0);
1000271c:	e0bfd80b 	ldhu	r2,-160(fp)
10002720:	1009883a 	mov	r4,r2
10002724:	00047d40 	call	100047d4 <__floatsidf>
10002728:	1021883a 	mov	r16,r2
1000272c:	1823883a 	mov	r17,r3
10002730:	e13fe817 	ldw	r4,-96(fp)
10002734:	00047d40 	call	100047d4 <__floatsidf>
10002738:	100b883a 	mov	r5,r2
1000273c:	180d883a 	mov	r6,r3
10002740:	2809883a 	mov	r4,r5
10002744:	300b883a 	mov	r5,r6
10002748:	01999ff4 	movhi	r6,26239
1000274c:	318ef344 	addi	r6,r6,15309
10002750:	01cffdf4 	movhi	r7,16375
10002754:	39e82784 	addi	r7,r7,-24418
10002758:	00045bc0 	call	100045bc <__divdf3>
1000275c:	1009883a 	mov	r4,r2
10002760:	180b883a 	mov	r5,r3
10002764:	2005883a 	mov	r2,r4
10002768:	2807883a 	mov	r3,r5
1000276c:	8009883a 	mov	r4,r16
10002770:	880b883a 	mov	r5,r17
10002774:	100d883a 	mov	r6,r2
10002778:	180f883a 	mov	r7,r3
1000277c:	00042780 	call	10004278 <__subdf3>
10002780:	1009883a 	mov	r4,r2
10002784:	180b883a 	mov	r5,r3
10002788:	2005883a 	mov	r2,r4
1000278c:	2807883a 	mov	r3,r5
10002790:	1009883a 	mov	r4,r2
10002794:	180b883a 	mov	r5,r3
10002798:	0003e4c0 	call	10003e4c <__fixunsdfsi>
1000279c:	e0bfd80d 	sth	r2,-160(fp)
					poolsticky -= (powerMod / sqrt(2.0)) * (2.0/3);
100027a0:	e0bfd88b 	ldhu	r2,-158(fp)
100027a4:	1009883a 	mov	r4,r2
100027a8:	00047d40 	call	100047d4 <__floatsidf>
100027ac:	1021883a 	mov	r16,r2
100027b0:	1823883a 	mov	r17,r3
100027b4:	e13fe817 	ldw	r4,-96(fp)
100027b8:	00047d40 	call	100047d4 <__floatsidf>
100027bc:	100b883a 	mov	r5,r2
100027c0:	180d883a 	mov	r6,r3
100027c4:	2809883a 	mov	r4,r5
100027c8:	300b883a 	mov	r5,r6
100027cc:	01999ff4 	movhi	r6,26239
100027d0:	318ef344 	addi	r6,r6,15309
100027d4:	01cffdf4 	movhi	r7,16375
100027d8:	39e82784 	addi	r7,r7,-24418
100027dc:	00045bc0 	call	100045bc <__divdf3>
100027e0:	1009883a 	mov	r4,r2
100027e4:	180b883a 	mov	r5,r3
100027e8:	2005883a 	mov	r2,r4
100027ec:	2807883a 	mov	r3,r5
100027f0:	1009883a 	mov	r4,r2
100027f4:	180b883a 	mov	r5,r3
100027f8:	01955574 	movhi	r6,21845
100027fc:	31955544 	addi	r6,r6,21845
10002800:	01cff974 	movhi	r7,16357
10002804:	39d55544 	addi	r7,r7,21845
10002808:	00042d80 	call	100042d8 <__muldf3>
1000280c:	1009883a 	mov	r4,r2
10002810:	180b883a 	mov	r5,r3
10002814:	2005883a 	mov	r2,r4
10002818:	2807883a 	mov	r3,r5
1000281c:	8009883a 	mov	r4,r16
10002820:	880b883a 	mov	r5,r17
10002824:	100d883a 	mov	r6,r2
10002828:	180f883a 	mov	r7,r3
1000282c:	00042780 	call	10004278 <__subdf3>
10002830:	1009883a 	mov	r4,r2
10002834:	180b883a 	mov	r5,r3
10002838:	2005883a 	mov	r2,r4
1000283c:	2807883a 	mov	r3,r5
10002840:	1009883a 	mov	r4,r2
10002844:	180b883a 	mov	r5,r3
10002848:	0003e4c0 	call	10003e4c <__fixunsdfsi>
1000284c:	e0bfd88d 	sth	r2,-158(fp)


		if(keycode == 0x001b && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 0)
10002850:	00005a06 	br	100029bc <main+0x2650>
				else if(*STICKDIRECTION_PIO == 5)
				{
					poolstickx -= powerMod / sqrt(2.0);
					poolsticky -= (powerMod / sqrt(2.0)) * (2.0/3);
				}
				else if(*STICKDIRECTION_PIO == 6)
10002854:	e0bffe17 	ldw	r2,-8(fp)
10002858:	10800017 	ldw	r2,0(r2)
1000285c:	10800198 	cmpnei	r2,r2,6
10002860:	1000051e 	bne	r2,zero,10002878 <main+0x250c>
				{
					poolsticky -= powerMod;
10002864:	e0bfe817 	ldw	r2,-96(fp)
10002868:	e0ffd88b 	ldhu	r3,-158(fp)
1000286c:	1885c83a 	sub	r2,r3,r2
10002870:	e0bfd88d 	sth	r2,-158(fp)


		if(keycode == 0x001b && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 0)
10002874:	00005106 	br	100029bc <main+0x2650>
				{
					poolsticky -= powerMod;
				}
				else
				{
					poolstickx += powerMod / sqrt(2.0);
10002878:	e0bfd80b 	ldhu	r2,-160(fp)
1000287c:	1009883a 	mov	r4,r2
10002880:	00047d40 	call	100047d4 <__floatsidf>
10002884:	1021883a 	mov	r16,r2
10002888:	1823883a 	mov	r17,r3
1000288c:	e13fe817 	ldw	r4,-96(fp)
10002890:	00047d40 	call	100047d4 <__floatsidf>
10002894:	100b883a 	mov	r5,r2
10002898:	180d883a 	mov	r6,r3
1000289c:	2809883a 	mov	r4,r5
100028a0:	300b883a 	mov	r5,r6
100028a4:	01999ff4 	movhi	r6,26239
100028a8:	318ef344 	addi	r6,r6,15309
100028ac:	01cffdf4 	movhi	r7,16375
100028b0:	39e82784 	addi	r7,r7,-24418
100028b4:	00045bc0 	call	100045bc <__divdf3>
100028b8:	1009883a 	mov	r4,r2
100028bc:	180b883a 	mov	r5,r3
100028c0:	2005883a 	mov	r2,r4
100028c4:	2807883a 	mov	r3,r5
100028c8:	8009883a 	mov	r4,r16
100028cc:	880b883a 	mov	r5,r17
100028d0:	100d883a 	mov	r6,r2
100028d4:	180f883a 	mov	r7,r3
100028d8:	00042240 	call	10004224 <__adddf3>
100028dc:	1009883a 	mov	r4,r2
100028e0:	180b883a 	mov	r5,r3
100028e4:	2005883a 	mov	r2,r4
100028e8:	2807883a 	mov	r3,r5
100028ec:	1009883a 	mov	r4,r2
100028f0:	180b883a 	mov	r5,r3
100028f4:	0003e4c0 	call	10003e4c <__fixunsdfsi>
100028f8:	e0bfd80d 	sth	r2,-160(fp)
					poolsticky -= (powerMod / sqrt(2.0)) * (2.0/3);
100028fc:	e0bfd88b 	ldhu	r2,-158(fp)
10002900:	1009883a 	mov	r4,r2
10002904:	00047d40 	call	100047d4 <__floatsidf>
10002908:	1021883a 	mov	r16,r2
1000290c:	1823883a 	mov	r17,r3
10002910:	e13fe817 	ldw	r4,-96(fp)
10002914:	00047d40 	call	100047d4 <__floatsidf>
10002918:	100b883a 	mov	r5,r2
1000291c:	180d883a 	mov	r6,r3
10002920:	2809883a 	mov	r4,r5
10002924:	300b883a 	mov	r5,r6
10002928:	01999ff4 	movhi	r6,26239
1000292c:	318ef344 	addi	r6,r6,15309
10002930:	01cffdf4 	movhi	r7,16375
10002934:	39e82784 	addi	r7,r7,-24418
10002938:	00045bc0 	call	100045bc <__divdf3>
1000293c:	1009883a 	mov	r4,r2
10002940:	180b883a 	mov	r5,r3
10002944:	2005883a 	mov	r2,r4
10002948:	2807883a 	mov	r3,r5
1000294c:	1009883a 	mov	r4,r2
10002950:	180b883a 	mov	r5,r3
10002954:	01955574 	movhi	r6,21845
10002958:	31955544 	addi	r6,r6,21845
1000295c:	01cff974 	movhi	r7,16357
10002960:	39d55544 	addi	r7,r7,21845
10002964:	00042d80 	call	100042d8 <__muldf3>
10002968:	1009883a 	mov	r4,r2
1000296c:	180b883a 	mov	r5,r3
10002970:	2005883a 	mov	r2,r4
10002974:	2807883a 	mov	r3,r5
10002978:	8009883a 	mov	r4,r16
1000297c:	880b883a 	mov	r5,r17
10002980:	100d883a 	mov	r6,r2
10002984:	180f883a 	mov	r7,r3
10002988:	00042780 	call	10004278 <__subdf3>
1000298c:	1009883a 	mov	r4,r2
10002990:	180b883a 	mov	r5,r3
10002994:	2005883a 	mov	r2,r4
10002998:	2807883a 	mov	r3,r5
1000299c:	1009883a 	mov	r4,r2
100029a0:	180b883a 	mov	r5,r3
100029a4:	0003e4c0 	call	10003e4c <__fixunsdfsi>
100029a8:	e0bfd88d 	sth	r2,-158(fp)


		if(keycode == 0x001b && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 0)
100029ac:	00000306 	br	100029bc <main+0x2650>
					poolstickx += powerMod / sqrt(2.0);
					poolsticky -= (powerMod / sqrt(2.0)) * (2.0/3);
				}
			}
		}
		else if(keycode == 0x0000)
100029b0:	e0bfff17 	ldw	r2,-4(fp)
100029b4:	1000011e 	bne	r2,zero,100029bc <main+0x2650>
		{
			pressed = 0;
100029b8:	e03fd915 	stw	zero,-156(fp)
		}


		if(keycode == 0x0015)
100029bc:	e0bfff17 	ldw	r2,-4(fp)
100029c0:	10800558 	cmpnei	r2,r2,21
100029c4:	1000491e 	bne	r2,zero,10002aec <main+0x2780>
		{
			power = 0;
100029c8:	e03fdc15 	stw	zero,-144(fp)
			gameState = 1;
100029cc:	00800044 	movi	r2,1
100029d0:	e0bfde15 	stw	r2,-136(fp)
			*STICKDIRECTION_PIO = 0;
100029d4:	e0bffe17 	ldw	r2,-8(fp)
100029d8:	10000015 	stw	zero,0(r2)
			oneballx = 404;
100029dc:	00806504 	movi	r2,404
100029e0:	e0bfc80d 	sth	r2,-224(fp)
			onebally = 229;
100029e4:	00803944 	movi	r2,229
100029e8:	e0bfc88d 	sth	r2,-222(fp)
			twoballx = 419;
100029ec:	008068c4 	movi	r2,419
100029f0:	e0bfc90d 	sth	r2,-220(fp)
			twobally = 237;
100029f4:	00803b44 	movi	r2,237
100029f8:	e0bfc98d 	sth	r2,-218(fp)
			threeballx = 434;
100029fc:	00806c84 	movi	r2,434
10002a00:	e0bfca0d 	sth	r2,-216(fp)
			threebally = 213;
10002a04:	00803544 	movi	r2,213
10002a08:	e0bfca8d 	sth	r2,-214(fp)
			fourballx = 449;
10002a0c:	00807044 	movi	r2,449
10002a10:	e0bfcb0d 	sth	r2,-212(fp)
			fourbally = 253;
10002a14:	00803f44 	movi	r2,253
10002a18:	e0bfcb8d 	sth	r2,-210(fp)
			fiveballx = 464;
10002a1c:	00807404 	movi	r2,464
10002a20:	e0bfcc0d 	sth	r2,-208(fp)
			fivebally = 197;
10002a24:	00803144 	movi	r2,197
10002a28:	e0bfcc8d 	sth	r2,-206(fp)
			sixballx = 464;
10002a2c:	00807404 	movi	r2,464
10002a30:	e0bfcd0d 	sth	r2,-204(fp)
			sixbally = 245;
10002a34:	00803d44 	movi	r2,245
10002a38:	e0bfcd8d 	sth	r2,-202(fp)
			sevenballx = 449;
10002a3c:	00807044 	movi	r2,449
10002a40:	e0bfce0d 	sth	r2,-200(fp)
			sevenbally = 221;
10002a44:	00803744 	movi	r2,221
10002a48:	e0bfce8d 	sth	r2,-198(fp)
			eightballx = 434;
10002a4c:	00806c84 	movi	r2,434
10002a50:	e0bfcf0d 	sth	r2,-196(fp)
			eightbally = 229;
10002a54:	00803944 	movi	r2,229
10002a58:	e0bfcf8d 	sth	r2,-194(fp)
			nineballx = 419;
10002a5c:	008068c4 	movi	r2,419
10002a60:	e0bfd00d 	sth	r2,-192(fp)
			ninebally = 221;
10002a64:	00803744 	movi	r2,221
10002a68:	e0bfd08d 	sth	r2,-190(fp)
			tenballx = 434;
10002a6c:	00806c84 	movi	r2,434
10002a70:	e0bfd10d 	sth	r2,-188(fp)
			tenbally = 245;
10002a74:	00803d44 	movi	r2,245
10002a78:	e0bfd18d 	sth	r2,-186(fp)
			elevenballx = 449;
10002a7c:	00807044 	movi	r2,449
10002a80:	e0bfd20d 	sth	r2,-184(fp)
			elevenbally = 205;
10002a84:	00803344 	movi	r2,205
10002a88:	e0bfd28d 	sth	r2,-182(fp)
			twelveballx = 464;
10002a8c:	00807404 	movi	r2,464
10002a90:	e0bfd30d 	sth	r2,-180(fp)
			twelvebally = 261;
10002a94:	00804144 	movi	r2,261
10002a98:	e0bfd38d 	sth	r2,-178(fp)
			thirteenballx = 464;
10002a9c:	00807404 	movi	r2,464
10002aa0:	e0bfd40d 	sth	r2,-176(fp)
			thirteenbally = 213;
10002aa4:	00803544 	movi	r2,213
10002aa8:	e0bfd48d 	sth	r2,-174(fp)
			fourteenballx = 449;
10002aac:	00807044 	movi	r2,449
10002ab0:	e0bfd50d 	sth	r2,-172(fp)
			fourteenbally = 237;
10002ab4:	00803b44 	movi	r2,237
10002ab8:	e0bfd58d 	sth	r2,-170(fp)
			fifteenballx = 464;
10002abc:	00807404 	movi	r2,464
10002ac0:	e0bfd60d 	sth	r2,-168(fp)
			fifteenbally = 229;
10002ac4:	00803944 	movi	r2,229
10002ac8:	e0bfd68d 	sth	r2,-166(fp)
			cueballx = 150;
10002acc:	00802584 	movi	r2,150
10002ad0:	e0bfd70d 	sth	r2,-164(fp)
			cuebally = 229;
10002ad4:	00803944 	movi	r2,229
10002ad8:	e0bfd78d 	sth	r2,-162(fp)
			poolstickx = 214;
10002adc:	00803584 	movi	r2,214
10002ae0:	e0bfd80d 	sth	r2,-160(fp)
			poolsticky = 163;
10002ae4:	008028c4 	movi	r2,163
10002ae8:	e0bfd88d 	sth	r2,-158(fp)
		}

		*ONEBALL_PIO = coordConcat(oneballx, onebally);
10002aec:	e0ffc80b 	ldhu	r3,-224(fp)
10002af0:	e0bfc88b 	ldhu	r2,-222(fp)
10002af4:	1809883a 	mov	r4,r3
10002af8:	100b883a 	mov	r5,r2
10002afc:	00003180 	call	10000318 <coordConcat>
10002b00:	e0ffeb17 	ldw	r3,-84(fp)
10002b04:	18800015 	stw	r2,0(r3)
		*TWOBALL_PIO = coordConcat(twoballx, twobally);
10002b08:	e0ffc90b 	ldhu	r3,-220(fp)
10002b0c:	e0bfc98b 	ldhu	r2,-218(fp)
10002b10:	1809883a 	mov	r4,r3
10002b14:	100b883a 	mov	r5,r2
10002b18:	00003180 	call	10000318 <coordConcat>
10002b1c:	e0ffec17 	ldw	r3,-80(fp)
10002b20:	18800015 	stw	r2,0(r3)
		*THREEBALL_PIO = coordConcat(threeballx, threebally);
10002b24:	e0ffca0b 	ldhu	r3,-216(fp)
10002b28:	e0bfca8b 	ldhu	r2,-214(fp)
10002b2c:	1809883a 	mov	r4,r3
10002b30:	100b883a 	mov	r5,r2
10002b34:	00003180 	call	10000318 <coordConcat>
10002b38:	e0ffed17 	ldw	r3,-76(fp)
10002b3c:	18800015 	stw	r2,0(r3)
		*FOURBALL_PIO = coordConcat(fourballx, fourbally);
10002b40:	e0ffcb0b 	ldhu	r3,-212(fp)
10002b44:	e0bfcb8b 	ldhu	r2,-210(fp)
10002b48:	1809883a 	mov	r4,r3
10002b4c:	100b883a 	mov	r5,r2
10002b50:	00003180 	call	10000318 <coordConcat>
10002b54:	e0ffee17 	ldw	r3,-72(fp)
10002b58:	18800015 	stw	r2,0(r3)
		*FIVEBALL_PIO = coordConcat(fiveballx, fivebally);
10002b5c:	e0ffcc0b 	ldhu	r3,-208(fp)
10002b60:	e0bfcc8b 	ldhu	r2,-206(fp)
10002b64:	1809883a 	mov	r4,r3
10002b68:	100b883a 	mov	r5,r2
10002b6c:	00003180 	call	10000318 <coordConcat>
10002b70:	e0ffef17 	ldw	r3,-68(fp)
10002b74:	18800015 	stw	r2,0(r3)
		*SIXBALL_PIO = coordConcat(sixballx, sixbally);
10002b78:	e0ffcd0b 	ldhu	r3,-204(fp)
10002b7c:	e0bfcd8b 	ldhu	r2,-202(fp)
10002b80:	1809883a 	mov	r4,r3
10002b84:	100b883a 	mov	r5,r2
10002b88:	00003180 	call	10000318 <coordConcat>
10002b8c:	e0fff017 	ldw	r3,-64(fp)
10002b90:	18800015 	stw	r2,0(r3)
		*SEVENBALL_PIO = coordConcat(sevenballx, sevenbally);
10002b94:	e0ffce0b 	ldhu	r3,-200(fp)
10002b98:	e0bfce8b 	ldhu	r2,-198(fp)
10002b9c:	1809883a 	mov	r4,r3
10002ba0:	100b883a 	mov	r5,r2
10002ba4:	00003180 	call	10000318 <coordConcat>
10002ba8:	e0fff117 	ldw	r3,-60(fp)
10002bac:	18800015 	stw	r2,0(r3)
		*EIGHTBALL_PIO = coordConcat(eightballx, eightbally);
10002bb0:	e0ffcf0b 	ldhu	r3,-196(fp)
10002bb4:	e0bfcf8b 	ldhu	r2,-194(fp)
10002bb8:	1809883a 	mov	r4,r3
10002bbc:	100b883a 	mov	r5,r2
10002bc0:	00003180 	call	10000318 <coordConcat>
10002bc4:	e0fff217 	ldw	r3,-56(fp)
10002bc8:	18800015 	stw	r2,0(r3)
		*NINEBALL_PIO = coordConcat(nineballx, ninebally);
10002bcc:	e0ffd00b 	ldhu	r3,-192(fp)
10002bd0:	e0bfd08b 	ldhu	r2,-190(fp)
10002bd4:	1809883a 	mov	r4,r3
10002bd8:	100b883a 	mov	r5,r2
10002bdc:	00003180 	call	10000318 <coordConcat>
10002be0:	e0fff317 	ldw	r3,-52(fp)
10002be4:	18800015 	stw	r2,0(r3)
		*TENBALL_PIO = coordConcat(tenballx, tenbally);
10002be8:	e0ffd10b 	ldhu	r3,-188(fp)
10002bec:	e0bfd18b 	ldhu	r2,-186(fp)
10002bf0:	1809883a 	mov	r4,r3
10002bf4:	100b883a 	mov	r5,r2
10002bf8:	00003180 	call	10000318 <coordConcat>
10002bfc:	e0fff417 	ldw	r3,-48(fp)
10002c00:	18800015 	stw	r2,0(r3)
		*ELEVENBALL_PIO = coordConcat(elevenballx, elevenbally);
10002c04:	e0ffd20b 	ldhu	r3,-184(fp)
10002c08:	e0bfd28b 	ldhu	r2,-182(fp)
10002c0c:	1809883a 	mov	r4,r3
10002c10:	100b883a 	mov	r5,r2
10002c14:	00003180 	call	10000318 <coordConcat>
10002c18:	e0fff517 	ldw	r3,-44(fp)
10002c1c:	18800015 	stw	r2,0(r3)
		*TWELVEBALL_PIO = coordConcat(twelveballx, twelvebally);
10002c20:	e0ffd30b 	ldhu	r3,-180(fp)
10002c24:	e0bfd38b 	ldhu	r2,-178(fp)
10002c28:	1809883a 	mov	r4,r3
10002c2c:	100b883a 	mov	r5,r2
10002c30:	00003180 	call	10000318 <coordConcat>
10002c34:	e0fff617 	ldw	r3,-40(fp)
10002c38:	18800015 	stw	r2,0(r3)
		*THIRTEENBALL_PIO = coordConcat(thirteenballx, thirteenbally);
10002c3c:	e0ffd40b 	ldhu	r3,-176(fp)
10002c40:	e0bfd48b 	ldhu	r2,-174(fp)
10002c44:	1809883a 	mov	r4,r3
10002c48:	100b883a 	mov	r5,r2
10002c4c:	00003180 	call	10000318 <coordConcat>
10002c50:	e0fff717 	ldw	r3,-36(fp)
10002c54:	18800015 	stw	r2,0(r3)
		*FOURTEENBALL_PIO = coordConcat(fourteenballx, fourteenbally);
10002c58:	e0ffd50b 	ldhu	r3,-172(fp)
10002c5c:	e0bfd58b 	ldhu	r2,-170(fp)
10002c60:	1809883a 	mov	r4,r3
10002c64:	100b883a 	mov	r5,r2
10002c68:	00003180 	call	10000318 <coordConcat>
10002c6c:	e0fff817 	ldw	r3,-32(fp)
10002c70:	18800015 	stw	r2,0(r3)
		*FIFTEENBALL_PIO = coordConcat(fifteenballx, fifteenbally);
10002c74:	e0ffd60b 	ldhu	r3,-168(fp)
10002c78:	e0bfd68b 	ldhu	r2,-166(fp)
10002c7c:	1809883a 	mov	r4,r3
10002c80:	100b883a 	mov	r5,r2
10002c84:	00003180 	call	10000318 <coordConcat>
10002c88:	e0fff917 	ldw	r3,-28(fp)
10002c8c:	18800015 	stw	r2,0(r3)
		*CUEBALL_PIO = coordConcat(cueballx, cuebally);
10002c90:	e0ffd70b 	ldhu	r3,-164(fp)
10002c94:	e0bfd78b 	ldhu	r2,-162(fp)
10002c98:	1809883a 	mov	r4,r3
10002c9c:	100b883a 	mov	r5,r2
10002ca0:	00003180 	call	10000318 <coordConcat>
10002ca4:	e0fffa17 	ldw	r3,-24(fp)
10002ca8:	18800015 	stw	r2,0(r3)
		*POOLSTICK_PIO = coordConcat(poolstickx, poolsticky);
10002cac:	e0ffd80b 	ldhu	r3,-160(fp)
10002cb0:	e0bfd88b 	ldhu	r2,-158(fp)
10002cb4:	1809883a 	mov	r4,r3
10002cb8:	100b883a 	mov	r5,r2
10002cbc:	00003180 	call	10000318 <coordConcat>
10002cc0:	e0fffb17 	ldw	r3,-20(fp)
10002cc4:	18800015 	stw	r2,0(r3)



		while(*HW_SIG_PIO == 0);
10002cc8:	0001883a 	nop
10002ccc:	e0bffd17 	ldw	r2,-12(fp)
10002cd0:	10800017 	ldw	r2,0(r2)
10002cd4:	103ffd26 	beq	r2,zero,10002ccc <__alt_data_end+0xf8002ccc>


	}//end while
10002cd8:	0038d406 	br	1000102c <__alt_data_end+0xf800102c>

		if(keycode == 0x001d && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 5)
				continue;
10002cdc:	0001883a 	nop
10002ce0:	00000106 	br	10002ce8 <main+0x297c>

		if(keycode == 0x001b && pressed == 0 && dirConfirm == 1 && gameState == 1)
		{
			pressed = 1;
			if(power == 0)
				continue;
10002ce4:	0001883a 	nop


		while(*HW_SIG_PIO == 0);


	}//end while
10002ce8:	0038d006 	br	1000102c <__alt_data_end+0xf800102c>

10002cec <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10002cec:	defffc04 	addi	sp,sp,-16
10002cf0:	dfc00315 	stw	ra,12(sp)
10002cf4:	df000215 	stw	fp,8(sp)
10002cf8:	df000204 	addi	fp,sp,8
10002cfc:	2007883a 	mov	r3,r4
10002d00:	2805883a 	mov	r2,r5
10002d04:	e0fffe0d 	sth	r3,-8(fp)
10002d08:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10002d0c:	e0bffe0b 	ldhu	r2,-8(fp)
10002d10:	01000084 	movi	r4,2
10002d14:	100b883a 	mov	r5,r2
10002d18:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA, Data);
10002d1c:	e0bfff0b 	ldhu	r2,-4(fp)
10002d20:	0009883a 	mov	r4,zero
10002d24:	100b883a 	mov	r5,r2
10002d28:	00002440 	call	10000244 <IO_write>

}
10002d2c:	e037883a 	mov	sp,fp
10002d30:	dfc00117 	ldw	ra,4(sp)
10002d34:	df000017 	ldw	fp,0(sp)
10002d38:	dec00204 	addi	sp,sp,8
10002d3c:	f800283a 	ret

10002d40 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10002d40:	defffc04 	addi	sp,sp,-16
10002d44:	dfc00315 	stw	ra,12(sp)
10002d48:	df000215 	stw	fp,8(sp)
10002d4c:	df000204 	addi	fp,sp,8
10002d50:	2005883a 	mov	r2,r4
10002d54:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10002d58:	e0bfff0b 	ldhu	r2,-4(fp)
10002d5c:	01000084 	movi	r4,2
10002d60:	100b883a 	mov	r5,r2
10002d64:	00002440 	call	10000244 <IO_write>
	alt_u16 temp = IO_read(HPI_DATA);
10002d68:	0009883a 	mov	r4,zero
10002d6c:	00002b00 	call	100002b0 <IO_read>
10002d70:	e0bffe0d 	sth	r2,-8(fp)
	printf("key = %x\n", temp);
10002d74:	e0bffe0b 	ldhu	r2,-8(fp)
10002d78:	01040074 	movhi	r4,4097
10002d7c:	21013c04 	addi	r4,r4,1264
10002d80:	100b883a 	mov	r5,r2
10002d84:	000512c0 	call	1000512c <printf>
	return temp;
10002d88:	e0bffe0b 	ldhu	r2,-8(fp)
}
10002d8c:	e037883a 	mov	sp,fp
10002d90:	dfc00117 	ldw	ra,4(sp)
10002d94:	df000017 	ldw	fp,0(sp)
10002d98:	dec00204 	addi	sp,sp,8
10002d9c:	f800283a 	ret

10002da0 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10002da0:	defffe04 	addi	sp,sp,-8
10002da4:	dfc00115 	stw	ra,4(sp)
10002da8:	df000015 	stw	fp,0(sp)
10002dac:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10002db0:	01000044 	movi	r4,1
10002db4:	017e9414 	movui	r5,64080
10002db8:	00002440 	call	10000244 <IO_write>
	usleep(100000);
10002dbc:	010000b4 	movhi	r4,2
10002dc0:	2121a804 	addi	r4,r4,-31072
10002dc4:	000de340 	call	1000de34 <usleep>
	printf("[USB INIT]:reset finished!\n");
10002dc8:	01040074 	movhi	r4,4097
10002dcc:	21013f04 	addi	r4,r4,1276
10002dd0:	00051ec0 	call	100051ec <puts>

	usleep(500000);
10002dd4:	01000234 	movhi	r4,8
10002dd8:	21284804 	addi	r4,r4,-24288
10002ddc:	000de340 	call	1000de34 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10002de0:	01040074 	movhi	r4,4097
10002de4:	21014604 	addi	r4,r4,1304
10002de8:	00051ec0 	call	100051ec <puts>
	IO_read(HPI_MAILBOX);
10002dec:	01000044 	movi	r4,1
10002df0:	00002b00 	call	100002b0 <IO_read>
	IO_read(HPI_STATUS);
10002df4:	010000c4 	movi	r4,3
10002df8:	00002b00 	call	100002b0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10002dfc:	01005104 	movi	r4,324
10002e00:	0002d400 	call	10002d40 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10002e04:	01005104 	movi	r4,324
10002e08:	000b883a 	mov	r5,zero
10002e0c:	0002cec0 	call	10002cec <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10002e10:	01005204 	movi	r4,328
10002e14:	0002d400 	call	10002d40 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10002e18:	01005204 	movi	r4,328
10002e1c:	000b883a 	mov	r5,zero
10002e20:	0002cec0 	call	10002cec <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10002e24:	01302414 	movui	r4,49296
10002e28:	017fffd4 	movui	r5,65535
10002e2c:	0002cec0 	call	10002cec <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10002e30:	01302c14 	movui	r4,49328
10002e34:	017fffd4 	movui	r5,65535
10002e38:	0002cec0 	call	10002cec <UsbWrite>
}
10002e3c:	e037883a 	mov	sp,fp
10002e40:	dfc00117 	ldw	ra,4(sp)
10002e44:	df000017 	ldw	fp,0(sp)
10002e48:	dec00204 	addi	sp,sp,8
10002e4c:	f800283a 	ret

10002e50 <UsbSetAddress>:


void UsbSetAddress()
{
10002e50:	defffe04 	addi	sp,sp,-8
10002e54:	dfc00115 	stw	ra,4(sp)
10002e58:	df000015 	stw	fp,0(sp)
10002e5c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002e60:	01000084 	movi	r4,2
10002e64:	01414004 	movi	r5,1280
10002e68:	00002440 	call	10000244 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10002e6c:	0009883a 	mov	r4,zero
10002e70:	01414304 	movi	r5,1292
10002e74:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002e78:	0009883a 	mov	r4,zero
10002e7c:	01400204 	movi	r5,8
10002e80:	00002440 	call	10000244 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10002e84:	0009883a 	mov	r4,zero
10002e88:	01403404 	movi	r5,208
10002e8c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002e90:	0009883a 	mov	r4,zero
10002e94:	01400044 	movi	r5,1
10002e98:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002e9c:	0009883a 	mov	r4,zero
10002ea0:	014004c4 	movi	r5,19
10002ea4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002ea8:	0009883a 	mov	r4,zero
10002eac:	01414504 	movi	r5,1300
10002eb0:	00002440 	call	10000244 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10002eb4:	0009883a 	mov	r4,zero
10002eb8:	01414004 	movi	r5,1280
10002ebc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0002);
10002ec0:	0009883a 	mov	r4,zero
10002ec4:	01400084 	movi	r5,2
10002ec8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002ecc:	0009883a 	mov	r4,zero
10002ed0:	000b883a 	mov	r5,zero
10002ed4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002ed8:	0009883a 	mov	r4,zero
10002edc:	000b883a 	mov	r5,zero
10002ee0:	00002440 	call	10000244 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10002ee4:	0009883a 	mov	r4,zero
10002ee8:	000b883a 	mov	r5,zero
10002eec:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10002ef0:	0009883a 	mov	r4,zero
10002ef4:	000b883a 	mov	r5,zero
10002ef8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10002efc:	0009883a 	mov	r4,zero
10002f00:	01402404 	movi	r5,144
10002f04:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002f08:	0009883a 	mov	r4,zero
10002f0c:	01401044 	movi	r5,65
10002f10:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002f14:	0009883a 	mov	r4,zero
10002f18:	014004c4 	movi	r5,19
10002f1c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002f20:	0009883a 	mov	r4,zero
10002f24:	000b883a 	mov	r5,zero
10002f28:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002f2c:	01006c04 	movi	r4,432
10002f30:	01414004 	movi	r5,1280
10002f34:	0002cec0 	call	10002cec <UsbWrite>
}
10002f38:	e037883a 	mov	sp,fp
10002f3c:	dfc00117 	ldw	ra,4(sp)
10002f40:	df000017 	ldw	fp,0(sp)
10002f44:	dec00204 	addi	sp,sp,8
10002f48:	f800283a 	ret

10002f4c <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10002f4c:	defffe04 	addi	sp,sp,-8
10002f50:	dfc00115 	stw	ra,4(sp)
10002f54:	df000015 	stw	fp,0(sp)
10002f58:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002f5c:	01000084 	movi	r4,2
10002f60:	01414004 	movi	r5,1280
10002f64:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002f68:	0009883a 	mov	r4,zero
10002f6c:	01414304 	movi	r5,1292
10002f70:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002f74:	0009883a 	mov	r4,zero
10002f78:	01400204 	movi	r5,8
10002f7c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002f80:	0009883a 	mov	r4,zero
10002f84:	0140b404 	movi	r5,720
10002f88:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002f8c:	0009883a 	mov	r4,zero
10002f90:	01400044 	movi	r5,1
10002f94:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002f98:	0009883a 	mov	r4,zero
10002f9c:	014004c4 	movi	r5,19
10002fa0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002fa4:	0009883a 	mov	r4,zero
10002fa8:	01414504 	movi	r5,1300
10002fac:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002fb0:	0009883a 	mov	r4,zero
10002fb4:	0141a004 	movi	r5,1664
10002fb8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10002fbc:	0009883a 	mov	r4,zero
10002fc0:	01404004 	movi	r5,256
10002fc4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002fc8:	0009883a 	mov	r4,zero
10002fcc:	000b883a 	mov	r5,zero
10002fd0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);
10002fd4:	0009883a 	mov	r4,zero
10002fd8:	01400204 	movi	r5,8
10002fdc:	00002440 	call	10000244 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10002fe0:	0009883a 	mov	r4,zero
10002fe4:	01414b04 	movi	r5,1324
10002fe8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10002fec:	0009883a 	mov	r4,zero
10002ff0:	01400204 	movi	r5,8
10002ff4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10002ff8:	0009883a 	mov	r4,zero
10002ffc:	0140a404 	movi	r5,656
10003000:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);
10003004:	0009883a 	mov	r4,zero
10003008:	01401044 	movi	r5,65
1000300c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003010:	0009883a 	mov	r4,zero
10003014:	014004c4 	movi	r5,19
10003018:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);
1000301c:	0009883a 	mov	r4,zero
10003020:	01414804 	movi	r5,1312
10003024:	00002440 	call	10000244 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10003028:	0009883a 	mov	r4,zero
1000302c:	000b883a 	mov	r5,zero
10003030:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10003034:	0009883a 	mov	r4,zero
10003038:	000b883a 	mov	r5,zero
1000303c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10003040:	0009883a 	mov	r4,zero
10003044:	01408404 	movi	r5,528
10003048:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000304c:	0009883a 	mov	r4,zero
10003050:	01401044 	movi	r5,65
10003054:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003058:	0009883a 	mov	r4,zero
1000305c:	014004c4 	movi	r5,19
10003060:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003064:	0009883a 	mov	r4,zero
10003068:	000b883a 	mov	r5,zero
1000306c:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003070:	01006c04 	movi	r4,432
10003074:	01414004 	movi	r5,1280
10003078:	0002cec0 	call	10002cec <UsbWrite>
}
1000307c:	e037883a 	mov	sp,fp
10003080:	dfc00117 	ldw	ra,4(sp)
10003084:	df000017 	ldw	fp,0(sp)
10003088:	dec00204 	addi	sp,sp,8
1000308c:	f800283a 	ret

10003090 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10003090:	defffe04 	addi	sp,sp,-8
10003094:	dfc00115 	stw	ra,4(sp)
10003098:	df000015 	stw	fp,0(sp)
1000309c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100030a0:	01000084 	movi	r4,2
100030a4:	01414004 	movi	r5,1280
100030a8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
100030ac:	0009883a 	mov	r4,zero
100030b0:	01414304 	movi	r5,1292
100030b4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100030b8:	0009883a 	mov	r4,zero
100030bc:	01400204 	movi	r5,8
100030c0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100030c4:	0009883a 	mov	r4,zero
100030c8:	0140b404 	movi	r5,720
100030cc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
100030d0:	0009883a 	mov	r4,zero
100030d4:	01400044 	movi	r5,1
100030d8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
100030dc:	0009883a 	mov	r4,zero
100030e0:	014004c4 	movi	r5,19
100030e4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
100030e8:	0009883a 	mov	r4,zero
100030ec:	01414504 	movi	r5,1300
100030f0:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100030f4:	0009883a 	mov	r4,zero
100030f8:	0141a004 	movi	r5,1664
100030fc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10003100:	0009883a 	mov	r4,zero
10003104:	01404004 	movi	r5,256
10003108:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000310c:	0009883a 	mov	r4,zero
10003110:	000b883a 	mov	r5,zero
10003114:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10003118:	0009883a 	mov	r4,zero
1000311c:	01400484 	movi	r5,18
10003120:	00002440 	call	10000244 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10003124:	0009883a 	mov	r4,zero
10003128:	01415104 	movi	r5,1348
1000312c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003130:	0009883a 	mov	r4,zero
10003134:	01400204 	movi	r5,8
10003138:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000313c:	0009883a 	mov	r4,zero
10003140:	0140a404 	movi	r5,656
10003144:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003148:	0009883a 	mov	r4,zero
1000314c:	01401044 	movi	r5,65
10003150:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003154:	0009883a 	mov	r4,zero
10003158:	014004c4 	movi	r5,19
1000315c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003160:	0009883a 	mov	r4,zero
10003164:	01414804 	movi	r5,1312
10003168:	00002440 	call	10000244 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
1000316c:	0009883a 	mov	r4,zero
10003170:	01415304 	movi	r5,1356
10003174:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003178:	0009883a 	mov	r4,zero
1000317c:	01400204 	movi	r5,8
10003180:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003184:	0009883a 	mov	r4,zero
10003188:	0140a404 	movi	r5,656
1000318c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10003190:	0009883a 	mov	r4,zero
10003194:	01400044 	movi	r5,1
10003198:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000319c:	0009883a 	mov	r4,zero
100031a0:	014004c4 	movi	r5,19
100031a4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100031a8:	0009883a 	mov	r4,zero
100031ac:	01414b04 	movi	r5,1324
100031b0:	00002440 	call	10000244 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100031b4:	0009883a 	mov	r4,zero
100031b8:	01415504 	movi	r5,1364
100031bc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
100031c0:	0009883a 	mov	r4,zero
100031c4:	01400084 	movi	r5,2
100031c8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100031cc:	0009883a 	mov	r4,zero
100031d0:	0140a404 	movi	r5,656
100031d4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100031d8:	0009883a 	mov	r4,zero
100031dc:	01401044 	movi	r5,65
100031e0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100031e4:	0009883a 	mov	r4,zero
100031e8:	014004c4 	movi	r5,19
100031ec:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100031f0:	0009883a 	mov	r4,zero
100031f4:	01414e04 	movi	r5,1336
100031f8:	00002440 	call	10000244 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
100031fc:	0009883a 	mov	r4,zero
10003200:	000b883a 	mov	r5,zero
10003204:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10003208:	0009883a 	mov	r4,zero
1000320c:	000b883a 	mov	r5,zero
10003210:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10003214:	0009883a 	mov	r4,zero
10003218:	01408404 	movi	r5,528
1000321c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10003220:	0009883a 	mov	r4,zero
10003224:	01401044 	movi	r5,65
10003228:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000322c:	0009883a 	mov	r4,zero
10003230:	014004c4 	movi	r5,19
10003234:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10003238:	0009883a 	mov	r4,zero
1000323c:	000b883a 	mov	r5,zero
10003240:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003244:	01006c04 	movi	r4,432
10003248:	01414004 	movi	r5,1280
1000324c:	0002cec0 	call	10002cec <UsbWrite>
}
10003250:	e037883a 	mov	sp,fp
10003254:	dfc00117 	ldw	ra,4(sp)
10003258:	df000017 	ldw	fp,0(sp)
1000325c:	dec00204 	addi	sp,sp,8
10003260:	f800283a 	ret

10003264 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10003264:	defffe04 	addi	sp,sp,-8
10003268:	dfc00115 	stw	ra,4(sp)
1000326c:	df000015 	stw	fp,0(sp)
10003270:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003274:	01000084 	movi	r4,2
10003278:	01414004 	movi	r5,1280
1000327c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003280:	0009883a 	mov	r4,zero
10003284:	01414304 	movi	r5,1292
10003288:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000328c:	0009883a 	mov	r4,zero
10003290:	01400204 	movi	r5,8
10003294:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003298:	0009883a 	mov	r4,zero
1000329c:	0140b404 	movi	r5,720
100032a0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
100032a4:	0009883a 	mov	r4,zero
100032a8:	01400044 	movi	r5,1
100032ac:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
100032b0:	0009883a 	mov	r4,zero
100032b4:	014004c4 	movi	r5,19
100032b8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
100032bc:	0009883a 	mov	r4,zero
100032c0:	01414504 	movi	r5,1300
100032c4:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100032c8:	0009883a 	mov	r4,zero
100032cc:	0141a004 	movi	r5,1664
100032d0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100032d4:	0009883a 	mov	r4,zero
100032d8:	01408004 	movi	r5,512
100032dc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100032e0:	0009883a 	mov	r4,zero
100032e4:	000b883a 	mov	r5,zero
100032e8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
100032ec:	0009883a 	mov	r4,zero
100032f0:	01400244 	movi	r5,9
100032f4:	00002440 	call	10000244 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100032f8:	0009883a 	mov	r4,zero
100032fc:	01415104 	movi	r5,1348
10003300:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003304:	0009883a 	mov	r4,zero
10003308:	01400204 	movi	r5,8
1000330c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003310:	0009883a 	mov	r4,zero
10003314:	0140a404 	movi	r5,656
10003318:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000331c:	0009883a 	mov	r4,zero
10003320:	01401044 	movi	r5,65
10003324:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003328:	0009883a 	mov	r4,zero
1000332c:	014004c4 	movi	r5,19
10003330:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003334:	0009883a 	mov	r4,zero
10003338:	01414804 	movi	r5,1312
1000333c:	00002440 	call	10000244 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10003340:	0009883a 	mov	r4,zero
10003344:	01415304 	movi	r5,1356
10003348:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
1000334c:	0009883a 	mov	r4,zero
10003350:	01400044 	movi	r5,1
10003354:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003358:	0009883a 	mov	r4,zero
1000335c:	0140a404 	movi	r5,656
10003360:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003364:	0009883a 	mov	r4,zero
10003368:	01400044 	movi	r5,1
1000336c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003370:	0009883a 	mov	r4,zero
10003374:	014004c4 	movi	r5,19
10003378:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000337c:	0009883a 	mov	r4,zero
10003380:	01414b04 	movi	r5,1324
10003384:	00002440 	call	10000244 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10003388:	0009883a 	mov	r4,zero
1000338c:	000b883a 	mov	r5,zero
10003390:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003394:	0009883a 	mov	r4,zero
10003398:	000b883a 	mov	r5,zero
1000339c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100033a0:	0009883a 	mov	r4,zero
100033a4:	01408404 	movi	r5,528
100033a8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100033ac:	0009883a 	mov	r4,zero
100033b0:	01401044 	movi	r5,65
100033b4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100033b8:	0009883a 	mov	r4,zero
100033bc:	014004c4 	movi	r5,19
100033c0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100033c4:	0009883a 	mov	r4,zero
100033c8:	000b883a 	mov	r5,zero
100033cc:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100033d0:	01006c04 	movi	r4,432
100033d4:	01414004 	movi	r5,1280
100033d8:	0002cec0 	call	10002cec <UsbWrite>
}
100033dc:	e037883a 	mov	sp,fp
100033e0:	dfc00117 	ldw	ra,4(sp)
100033e4:	df000017 	ldw	fp,0(sp)
100033e8:	dec00204 	addi	sp,sp,8
100033ec:	f800283a 	ret

100033f0 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
100033f0:	defffe04 	addi	sp,sp,-8
100033f4:	dfc00115 	stw	ra,4(sp)
100033f8:	df000015 	stw	fp,0(sp)
100033fc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003400:	01000084 	movi	r4,2
10003404:	01414004 	movi	r5,1280
10003408:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000340c:	0009883a 	mov	r4,zero
10003410:	01414304 	movi	r5,1292
10003414:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003418:	0009883a 	mov	r4,zero
1000341c:	01400204 	movi	r5,8
10003420:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003424:	0009883a 	mov	r4,zero
10003428:	0140b404 	movi	r5,720
1000342c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003430:	0009883a 	mov	r4,zero
10003434:	01400044 	movi	r5,1
10003438:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000343c:	0009883a 	mov	r4,zero
10003440:	014004c4 	movi	r5,19
10003444:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003448:	0009883a 	mov	r4,zero
1000344c:	01414504 	movi	r5,1300
10003450:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10003454:	0009883a 	mov	r4,zero
10003458:	0141a004 	movi	r5,1664
1000345c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10003460:	0009883a 	mov	r4,zero
10003464:	01408004 	movi	r5,512
10003468:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000346c:	0009883a 	mov	r4,zero
10003470:	000b883a 	mov	r5,zero
10003474:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10003478:	0009883a 	mov	r4,zero
1000347c:	01403fc4 	movi	r5,255
10003480:	00002440 	call	10000244 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10003484:	0009883a 	mov	r4,zero
10003488:	01415704 	movi	r5,1372
1000348c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003490:	0009883a 	mov	r4,zero
10003494:	01400204 	movi	r5,8
10003498:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000349c:	0009883a 	mov	r4,zero
100034a0:	0140a404 	movi	r5,656
100034a4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100034a8:	0009883a 	mov	r4,zero
100034ac:	01401044 	movi	r5,65
100034b0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100034b4:	0009883a 	mov	r4,zero
100034b8:	014004c4 	movi	r5,19
100034bc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100034c0:	0009883a 	mov	r4,zero
100034c4:	01414804 	movi	r5,1312
100034c8:	00002440 	call	10000244 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
100034cc:	0009883a 	mov	r4,zero
100034d0:	01415904 	movi	r5,1380
100034d4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100034d8:	0009883a 	mov	r4,zero
100034dc:	01400204 	movi	r5,8
100034e0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100034e4:	0009883a 	mov	r4,zero
100034e8:	0140a404 	movi	r5,656
100034ec:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100034f0:	0009883a 	mov	r4,zero
100034f4:	01400044 	movi	r5,1
100034f8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100034fc:	0009883a 	mov	r4,zero
10003500:	014004c4 	movi	r5,19
10003504:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10003508:	0009883a 	mov	r4,zero
1000350c:	01414b04 	movi	r5,1324
10003510:	00002440 	call	10000244 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10003514:	0009883a 	mov	r4,zero
10003518:	01415b04 	movi	r5,1388
1000351c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003520:	0009883a 	mov	r4,zero
10003524:	01400204 	movi	r5,8
10003528:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
1000352c:	0009883a 	mov	r4,zero
10003530:	0140a404 	movi	r5,656
10003534:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003538:	0009883a 	mov	r4,zero
1000353c:	01401044 	movi	r5,65
10003540:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003544:	0009883a 	mov	r4,zero
10003548:	014004c4 	movi	r5,19
1000354c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10003550:	0009883a 	mov	r4,zero
10003554:	01414e04 	movi	r5,1336
10003558:	00002440 	call	10000244 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
1000355c:	0009883a 	mov	r4,zero
10003560:	01415d04 	movi	r5,1396
10003564:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10003568:	0009883a 	mov	r4,zero
1000356c:	01400204 	movi	r5,8
10003570:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003574:	0009883a 	mov	r4,zero
10003578:	0140a404 	movi	r5,656
1000357c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003580:	0009883a 	mov	r4,zero
10003584:	01400044 	movi	r5,1
10003588:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000358c:	0009883a 	mov	r4,zero
10003590:	014004c4 	movi	r5,19
10003594:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10003598:	0009883a 	mov	r4,zero
1000359c:	01415104 	movi	r5,1348
100035a0:	00002440 	call	10000244 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
100035a4:	0009883a 	mov	r4,zero
100035a8:	01415f04 	movi	r5,1404
100035ac:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
100035b0:	0009883a 	mov	r4,zero
100035b4:	01400084 	movi	r5,2
100035b8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100035bc:	0009883a 	mov	r4,zero
100035c0:	0140a404 	movi	r5,656
100035c4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100035c8:	0009883a 	mov	r4,zero
100035cc:	01401044 	movi	r5,65
100035d0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100035d4:	0009883a 	mov	r4,zero
100035d8:	014004c4 	movi	r5,19
100035dc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100035e0:	0009883a 	mov	r4,zero
100035e4:	01415404 	movi	r5,1360
100035e8:	00002440 	call	10000244 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
100035ec:	0009883a 	mov	r4,zero
100035f0:	000b883a 	mov	r5,zero
100035f4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100035f8:	0009883a 	mov	r4,zero
100035fc:	000b883a 	mov	r5,zero
10003600:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10003604:	0009883a 	mov	r4,zero
10003608:	01408404 	movi	r5,528
1000360c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10003610:	0009883a 	mov	r4,zero
10003614:	01401044 	movi	r5,65
10003618:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000361c:	0009883a 	mov	r4,zero
10003620:	014004c4 	movi	r5,19
10003624:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10003628:	0009883a 	mov	r4,zero
1000362c:	000b883a 	mov	r5,zero
10003630:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003634:	01006c04 	movi	r4,432
10003638:	01414004 	movi	r5,1280
1000363c:	0002cec0 	call	10002cec <UsbWrite>
}
10003640:	e037883a 	mov	sp,fp
10003644:	dfc00117 	ldw	ra,4(sp)
10003648:	df000017 	ldw	fp,0(sp)
1000364c:	dec00204 	addi	sp,sp,8
10003650:	f800283a 	ret

10003654 <UsbSetConfig>:

void UsbSetConfig()
{
10003654:	defffe04 	addi	sp,sp,-8
10003658:	dfc00115 	stw	ra,4(sp)
1000365c:	df000015 	stw	fp,0(sp)
10003660:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003664:	01000084 	movi	r4,2
10003668:	01414004 	movi	r5,1280
1000366c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003670:	0009883a 	mov	r4,zero
10003674:	01414304 	movi	r5,1292
10003678:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000367c:	0009883a 	mov	r4,zero
10003680:	01400204 	movi	r5,8
10003684:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003688:	0009883a 	mov	r4,zero
1000368c:	0140b404 	movi	r5,720
10003690:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003694:	0009883a 	mov	r4,zero
10003698:	01400044 	movi	r5,1
1000369c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
100036a0:	0009883a 	mov	r4,zero
100036a4:	014004c4 	movi	r5,19
100036a8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
100036ac:	0009883a 	mov	r4,zero
100036b0:	01414504 	movi	r5,1300
100036b4:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
100036b8:	0009883a 	mov	r4,zero
100036bc:	01424004 	movi	r5,2304
100036c0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
100036c4:	0009883a 	mov	r4,zero
100036c8:	01400044 	movi	r5,1
100036cc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
100036d0:	0009883a 	mov	r4,zero
100036d4:	000b883a 	mov	r5,zero
100036d8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
100036dc:	0009883a 	mov	r4,zero
100036e0:	000b883a 	mov	r5,zero
100036e4:	00002440 	call	10000244 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100036e8:	0009883a 	mov	r4,zero
100036ec:	000b883a 	mov	r5,zero
100036f0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100036f4:	0009883a 	mov	r4,zero
100036f8:	000b883a 	mov	r5,zero
100036fc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10003700:	0009883a 	mov	r4,zero
10003704:	0140a404 	movi	r5,656
10003708:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
1000370c:	0009883a 	mov	r4,zero
10003710:	01401044 	movi	r5,65
10003714:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003718:	0009883a 	mov	r4,zero
1000371c:	014004c4 	movi	r5,19
10003720:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003724:	0009883a 	mov	r4,zero
10003728:	000b883a 	mov	r5,zero
1000372c:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003730:	01006c04 	movi	r4,432
10003734:	01414004 	movi	r5,1280
10003738:	0002cec0 	call	10002cec <UsbWrite>

}
1000373c:	e037883a 	mov	sp,fp
10003740:	dfc00117 	ldw	ra,4(sp)
10003744:	df000017 	ldw	fp,0(sp)
10003748:	dec00204 	addi	sp,sp,8
1000374c:	f800283a 	ret

10003750 <UsbClassRequest>:

void UsbClassRequest()
{
10003750:	defffe04 	addi	sp,sp,-8
10003754:	dfc00115 	stw	ra,4(sp)
10003758:	df000015 	stw	fp,0(sp)
1000375c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003760:	01000084 	movi	r4,2
10003764:	01414004 	movi	r5,1280
10003768:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000376c:	0009883a 	mov	r4,zero
10003770:	01414304 	movi	r5,1292
10003774:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003778:	0009883a 	mov	r4,zero
1000377c:	01400204 	movi	r5,8
10003780:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003784:	0009883a 	mov	r4,zero
10003788:	0140b404 	movi	r5,720
1000378c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003790:	0009883a 	mov	r4,zero
10003794:	01400044 	movi	r5,1
10003798:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000379c:	0009883a 	mov	r4,zero
100037a0:	014004c4 	movi	r5,19
100037a4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
100037a8:	0009883a 	mov	r4,zero
100037ac:	01414504 	movi	r5,1300
100037b0:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
100037b4:	0009883a 	mov	r4,zero
100037b8:	01428844 	movi	r5,2593
100037bc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
100037c0:	0009883a 	mov	r4,zero
100037c4:	000b883a 	mov	r5,zero
100037c8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
100037cc:	0009883a 	mov	r4,zero
100037d0:	000b883a 	mov	r5,zero
100037d4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
100037d8:	0009883a 	mov	r4,zero
100037dc:	000b883a 	mov	r5,zero
100037e0:	00002440 	call	10000244 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100037e4:	0009883a 	mov	r4,zero
100037e8:	000b883a 	mov	r5,zero
100037ec:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
100037f0:	0009883a 	mov	r4,zero
100037f4:	000b883a 	mov	r5,zero
100037f8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
100037fc:	0009883a 	mov	r4,zero
10003800:	0140a404 	movi	r5,656
10003804:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10003808:	0009883a 	mov	r4,zero
1000380c:	01401044 	movi	r5,65
10003810:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003814:	0009883a 	mov	r4,zero
10003818:	014004c4 	movi	r5,19
1000381c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003820:	0009883a 	mov	r4,zero
10003824:	000b883a 	mov	r5,zero
10003828:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000382c:	01006c04 	movi	r4,432
10003830:	01414004 	movi	r5,1280
10003834:	0002cec0 	call	10002cec <UsbWrite>
}
10003838:	e037883a 	mov	sp,fp
1000383c:	dfc00117 	ldw	ra,4(sp)
10003840:	df000017 	ldw	fp,0(sp)
10003844:	dec00204 	addi	sp,sp,8
10003848:	f800283a 	ret

1000384c <UsbGetHidDesc>:


void UsbGetHidDesc()
{
1000384c:	defffe04 	addi	sp,sp,-8
10003850:	dfc00115 	stw	ra,4(sp)
10003854:	df000015 	stw	fp,0(sp)
10003858:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000385c:	01000084 	movi	r4,2
10003860:	01414004 	movi	r5,1280
10003864:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003868:	0009883a 	mov	r4,zero
1000386c:	01414304 	movi	r5,1292
10003870:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003874:	0009883a 	mov	r4,zero
10003878:	01400204 	movi	r5,8
1000387c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003880:	0009883a 	mov	r4,zero
10003884:	0140b404 	movi	r5,720
10003888:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000388c:	0009883a 	mov	r4,zero
10003890:	01400044 	movi	r5,1
10003894:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003898:	0009883a 	mov	r4,zero
1000389c:	014004c4 	movi	r5,19
100038a0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
100038a4:	0009883a 	mov	r4,zero
100038a8:	01414504 	movi	r5,1300
100038ac:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100038b0:	0009883a 	mov	r4,zero
100038b4:	0141a044 	movi	r5,1665
100038b8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
100038bc:	0009883a 	mov	r4,zero
100038c0:	01484004 	movi	r5,8448
100038c4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100038c8:	0009883a 	mov	r4,zero
100038cc:	000b883a 	mov	r5,zero
100038d0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100038d4:	0009883a 	mov	r4,zero
100038d8:	01401ec4 	movi	r5,123
100038dc:	00002440 	call	10000244 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100038e0:	0009883a 	mov	r4,zero
100038e4:	01415104 	movi	r5,1348
100038e8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100038ec:	0009883a 	mov	r4,zero
100038f0:	01400204 	movi	r5,8
100038f4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100038f8:	0009883a 	mov	r4,zero
100038fc:	0140a404 	movi	r5,656
10003900:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003904:	0009883a 	mov	r4,zero
10003908:	01401044 	movi	r5,65
1000390c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003910:	0009883a 	mov	r4,zero
10003914:	014004c4 	movi	r5,19
10003918:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000391c:	0009883a 	mov	r4,zero
10003920:	01414804 	movi	r5,1312
10003924:	00002440 	call	10000244 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10003928:	0009883a 	mov	r4,zero
1000392c:	000b883a 	mov	r5,zero
10003930:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003934:	0009883a 	mov	r4,zero
10003938:	000b883a 	mov	r5,zero
1000393c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10003940:	0009883a 	mov	r4,zero
10003944:	01408404 	movi	r5,528
10003948:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000394c:	0009883a 	mov	r4,zero
10003950:	01401044 	movi	r5,65
10003954:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003958:	0009883a 	mov	r4,zero
1000395c:	014004c4 	movi	r5,19
10003960:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003964:	0009883a 	mov	r4,zero
10003968:	000b883a 	mov	r5,zero
1000396c:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003970:	01006c04 	movi	r4,432
10003974:	01414004 	movi	r5,1280
10003978:	0002cec0 	call	10002cec <UsbWrite>

}
1000397c:	e037883a 	mov	sp,fp
10003980:	dfc00117 	ldw	ra,4(sp)
10003984:	df000017 	ldw	fp,0(sp)
10003988:	dec00204 	addi	sp,sp,8
1000398c:	f800283a 	ret

10003990 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10003990:	defffe04 	addi	sp,sp,-8
10003994:	dfc00115 	stw	ra,4(sp)
10003998:	df000015 	stw	fp,0(sp)
1000399c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100039a0:	01000084 	movi	r4,2
100039a4:	01414004 	movi	r5,1280
100039a8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
100039ac:	0009883a 	mov	r4,zero
100039b0:	01414304 	movi	r5,1292
100039b4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100039b8:	0009883a 	mov	r4,zero
100039bc:	01400204 	movi	r5,8
100039c0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100039c4:	0009883a 	mov	r4,zero
100039c8:	0140b404 	movi	r5,720
100039cc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
100039d0:	0009883a 	mov	r4,zero
100039d4:	01400044 	movi	r5,1
100039d8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
100039dc:	0009883a 	mov	r4,zero
100039e0:	014004c4 	movi	r5,19
100039e4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
100039e8:	0009883a 	mov	r4,zero
100039ec:	01414504 	movi	r5,1300
100039f0:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100039f4:	0009883a 	mov	r4,zero
100039f8:	0141a044 	movi	r5,1665
100039fc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10003a00:	0009883a 	mov	r4,zero
10003a04:	01488004 	movi	r5,8704
10003a08:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003a0c:	0009883a 	mov	r4,zero
10003a10:	000b883a 	mov	r5,zero
10003a14:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10003a18:	0009883a 	mov	r4,zero
10003a1c:	01401ec4 	movi	r5,123
10003a20:	00002440 	call	10000244 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10003a24:	0009883a 	mov	r4,zero
10003a28:	01416004 	movi	r5,1408
10003a2c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003a30:	0009883a 	mov	r4,zero
10003a34:	01400204 	movi	r5,8
10003a38:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003a3c:	0009883a 	mov	r4,zero
10003a40:	0140a404 	movi	r5,656
10003a44:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003a48:	0009883a 	mov	r4,zero
10003a4c:	01401044 	movi	r5,65
10003a50:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003a54:	0009883a 	mov	r4,zero
10003a58:	014004c4 	movi	r5,19
10003a5c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003a60:	0009883a 	mov	r4,zero
10003a64:	01414804 	movi	r5,1312
10003a68:	00002440 	call	10000244 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10003a6c:	0009883a 	mov	r4,zero
10003a70:	01416204 	movi	r5,1416
10003a74:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003a78:	0009883a 	mov	r4,zero
10003a7c:	01400204 	movi	r5,8
10003a80:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003a84:	0009883a 	mov	r4,zero
10003a88:	0140a404 	movi	r5,656
10003a8c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003a90:	0009883a 	mov	r4,zero
10003a94:	01400044 	movi	r5,1
10003a98:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003a9c:	0009883a 	mov	r4,zero
10003aa0:	014004c4 	movi	r5,19
10003aa4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10003aa8:	0009883a 	mov	r4,zero
10003aac:	01414b04 	movi	r5,1324
10003ab0:	00002440 	call	10000244 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10003ab4:	0009883a 	mov	r4,zero
10003ab8:	01416404 	movi	r5,1424
10003abc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003ac0:	0009883a 	mov	r4,zero
10003ac4:	01400204 	movi	r5,8
10003ac8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10003acc:	0009883a 	mov	r4,zero
10003ad0:	0140a404 	movi	r5,656
10003ad4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003ad8:	0009883a 	mov	r4,zero
10003adc:	01401044 	movi	r5,65
10003ae0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003ae4:	0009883a 	mov	r4,zero
10003ae8:	014004c4 	movi	r5,19
10003aec:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10003af0:	0009883a 	mov	r4,zero
10003af4:	01414e04 	movi	r5,1336
10003af8:	00002440 	call	10000244 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10003afc:	0009883a 	mov	r4,zero
10003b00:	01416604 	movi	r5,1432
10003b04:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10003b08:	0009883a 	mov	r4,zero
10003b0c:	01400204 	movi	r5,8
10003b10:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003b14:	0009883a 	mov	r4,zero
10003b18:	0140a404 	movi	r5,656
10003b1c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003b20:	0009883a 	mov	r4,zero
10003b24:	01400044 	movi	r5,1
10003b28:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10003b2c:	0009883a 	mov	r4,zero
10003b30:	014004c4 	movi	r5,19
10003b34:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10003b38:	0009883a 	mov	r4,zero
10003b3c:	01415104 	movi	r5,1348
10003b40:	00002440 	call	10000244 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10003b44:	0009883a 	mov	r4,zero
10003b48:	01416804 	movi	r5,1440
10003b4c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003b50:	0009883a 	mov	r4,zero
10003b54:	01400204 	movi	r5,8
10003b58:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003b5c:	0009883a 	mov	r4,zero
10003b60:	0140a404 	movi	r5,656
10003b64:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10003b68:	0009883a 	mov	r4,zero
10003b6c:	01401044 	movi	r5,65
10003b70:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003b74:	0009883a 	mov	r4,zero
10003b78:	014004c4 	movi	r5,19
10003b7c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10003b80:	0009883a 	mov	r4,zero
10003b84:	01415404 	movi	r5,1360
10003b88:	00002440 	call	10000244 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10003b8c:	0009883a 	mov	r4,zero
10003b90:	01416a04 	movi	r5,1448
10003b94:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003b98:	0009883a 	mov	r4,zero
10003b9c:	01400204 	movi	r5,8
10003ba0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003ba4:	0009883a 	mov	r4,zero
10003ba8:	0140a404 	movi	r5,656
10003bac:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003bb0:	0009883a 	mov	r4,zero
10003bb4:	01400044 	movi	r5,1
10003bb8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003bbc:	0009883a 	mov	r4,zero
10003bc0:	014004c4 	movi	r5,19
10003bc4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10003bc8:	0009883a 	mov	r4,zero
10003bcc:	01415704 	movi	r5,1372
10003bd0:	00002440 	call	10000244 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10003bd4:	0009883a 	mov	r4,zero
10003bd8:	01416c04 	movi	r5,1456
10003bdc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003be0:	0009883a 	mov	r4,zero
10003be4:	01400204 	movi	r5,8
10003be8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10003bec:	0009883a 	mov	r4,zero
10003bf0:	0140a404 	movi	r5,656
10003bf4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10003bf8:	0009883a 	mov	r4,zero
10003bfc:	01401044 	movi	r5,65
10003c00:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003c04:	0009883a 	mov	r4,zero
10003c08:	014004c4 	movi	r5,19
10003c0c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10003c10:	0009883a 	mov	r4,zero
10003c14:	01415a04 	movi	r5,1384
10003c18:	00002440 	call	10000244 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10003c1c:	0009883a 	mov	r4,zero
10003c20:	01416e04 	movi	r5,1464
10003c24:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10003c28:	0009883a 	mov	r4,zero
10003c2c:	014000c4 	movi	r5,3
10003c30:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003c34:	0009883a 	mov	r4,zero
10003c38:	0140a404 	movi	r5,656
10003c3c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003c40:	0009883a 	mov	r4,zero
10003c44:	01400044 	movi	r5,1
10003c48:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10003c4c:	0009883a 	mov	r4,zero
10003c50:	014004c4 	movi	r5,19
10003c54:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10003c58:	0009883a 	mov	r4,zero
10003c5c:	01415d04 	movi	r5,1396
10003c60:	00002440 	call	10000244 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10003c64:	0009883a 	mov	r4,zero
10003c68:	000b883a 	mov	r5,zero
10003c6c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003c70:	0009883a 	mov	r4,zero
10003c74:	000b883a 	mov	r5,zero
10003c78:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10003c7c:	0009883a 	mov	r4,zero
10003c80:	01408404 	movi	r5,528
10003c84:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003c88:	0009883a 	mov	r4,zero
10003c8c:	01401044 	movi	r5,65
10003c90:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003c94:	0009883a 	mov	r4,zero
10003c98:	014004c4 	movi	r5,19
10003c9c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003ca0:	0009883a 	mov	r4,zero
10003ca4:	000b883a 	mov	r5,zero
10003ca8:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003cac:	01006c04 	movi	r4,432
10003cb0:	01414004 	movi	r5,1280
10003cb4:	0002cec0 	call	10002cec <UsbWrite>

}
10003cb8:	e037883a 	mov	sp,fp
10003cbc:	dfc00117 	ldw	ra,4(sp)
10003cc0:	df000017 	ldw	fp,0(sp)
10003cc4:	dec00204 	addi	sp,sp,8
10003cc8:	f800283a 	ret

10003ccc <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10003ccc:	defffd04 	addi	sp,sp,-12
10003cd0:	dfc00215 	stw	ra,8(sp)
10003cd4:	df000115 	stw	fp,4(sp)
10003cd8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10003cdc:	01005104 	movi	r4,324
10003ce0:	0002d400 	call	10002d40 <UsbRead>
10003ce4:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003ce8:	01005104 	movi	r4,324
10003cec:	000b883a 	mov	r5,zero
10003cf0:	0002cec0 	call	10002cec <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10003cf4:	00000d06 	br	10003d2c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10003cf8:	e0bfff0b 	ldhu	r2,-4(fp)
10003cfc:	10000526 	beq	r2,zero,10003d14 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10003d00:	e0bfff0b 	ldhu	r2,-4(fp)
10003d04:	01040074 	movhi	r4,4097
10003d08:	21014f04 	addi	r4,r4,1340
10003d0c:	100b883a 	mov	r5,r2
10003d10:	000512c0 	call	1000512c <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10003d14:	01005104 	movi	r4,324
10003d18:	0002d400 	call	10002d40 <UsbRead>
10003d1c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003d20:	01005104 	movi	r4,324
10003d24:	000b883a 	mov	r5,zero
10003d28:	0002cec0 	call	10002cec <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10003d2c:	e0bfff0b 	ldhu	r2,-4(fp)
10003d30:	10840018 	cmpnei	r2,r2,4096
10003d34:	103ff01e 	bne	r2,zero,10003cf8 <__alt_data_end+0xf8003cf8>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10003d38:	e0bfff0b 	ldhu	r2,-4(fp)
}
10003d3c:	e037883a 	mov	sp,fp
10003d40:	dfc00117 	ldw	ra,4(sp)
10003d44:	df000017 	ldw	fp,0(sp)
10003d48:	dec00204 	addi	sp,sp,8
10003d4c:	f800283a 	ret

10003d50 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10003d50:	defffd04 	addi	sp,sp,-12
10003d54:	dfc00215 	stw	ra,8(sp)
10003d58:	df000115 	stw	fp,4(sp)
10003d5c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10003d60:	010000c4 	movi	r4,3
10003d64:	00002b00 	call	100002b0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10003d68:	01005104 	movi	r4,324
10003d6c:	0002d400 	call	10002d40 <UsbRead>
10003d70:	10bfffcc 	andi	r2,r2,65535
10003d74:	10840018 	cmpnei	r2,r2,4096
10003d78:	1000091e 	bne	r2,zero,10003da0 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003d7c:	01005104 	movi	r4,324
10003d80:	000b883a 	mov	r5,zero
10003d84:	0002cec0 	call	10002cec <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003d88:	0001883a 	nop
10003d8c:	010000c4 	movi	r4,3
10003d90:	00002b00 	call	100002b0 <IO_read>
10003d94:	10bfffcc 	andi	r2,r2,65535
10003d98:	1080040c 	andi	r2,r2,16
10003d9c:	103ffb26 	beq	r2,zero,10003d8c <__alt_data_end+0xf8003d8c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10003da0:	01000084 	movi	r4,2
10003da4:	01414204 	movi	r5,1288
10003da8:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003dac:	0009883a 	mov	r4,zero
10003db0:	00002b00 	call	100002b0 <IO_read>
10003db4:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10003db8:	e0bfff0b 	ldhu	r2,-4(fp)
}
10003dbc:	e037883a 	mov	sp,fp
10003dc0:	dfc00117 	ldw	ra,4(sp)
10003dc4:	df000017 	ldw	fp,0(sp)
10003dc8:	dec00204 	addi	sp,sp,8
10003dcc:	f800283a 	ret

10003dd0 <UsbPrintMem>:


void UsbPrintMem()
{
10003dd0:	defffc04 	addi	sp,sp,-16
10003dd4:	dfc00315 	stw	ra,12(sp)
10003dd8:	df000215 	stw	fp,8(sp)
10003ddc:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10003de0:	01000084 	movi	r4,2
10003de4:	01414004 	movi	r5,1280
10003de8:	00002440 	call	10000244 <IO_write>
	for (i = 0; i <= 200; i += 2)
10003dec:	e03ffe15 	stw	zero,-8(fp)
10003df0:	00000e06 	br	10003e2c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10003df4:	0009883a 	mov	r4,zero
10003df8:	00002b00 	call	100002b0 <IO_read>
10003dfc:	10bfffcc 	andi	r2,r2,65535
10003e00:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10003e04:	e0bffe17 	ldw	r2,-8(fp)
10003e08:	10814004 	addi	r2,r2,1280
10003e0c:	01040074 	movhi	r4,4097
10003e10:	21015704 	addi	r4,r4,1372
10003e14:	100b883a 	mov	r5,r2
10003e18:	e1bfff17 	ldw	r6,-4(fp)
10003e1c:	000512c0 	call	1000512c <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10003e20:	e0bffe17 	ldw	r2,-8(fp)
10003e24:	10800084 	addi	r2,r2,2
10003e28:	e0bffe15 	stw	r2,-8(fp)
10003e2c:	e0bffe17 	ldw	r2,-8(fp)
10003e30:	10803250 	cmplti	r2,r2,201
10003e34:	103fef1e 	bne	r2,zero,10003df4 <__alt_data_end+0xf8003df4>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10003e38:	e037883a 	mov	sp,fp
10003e3c:	dfc00117 	ldw	ra,4(sp)
10003e40:	df000017 	ldw	fp,0(sp)
10003e44:	dec00204 	addi	sp,sp,8
10003e48:	f800283a 	ret

10003e4c <__fixunsdfsi>:
10003e4c:	defffd04 	addi	sp,sp,-12
10003e50:	000d883a 	mov	r6,zero
10003e54:	01d07834 	movhi	r7,16864
10003e58:	dc400115 	stw	r17,4(sp)
10003e5c:	dc000015 	stw	r16,0(sp)
10003e60:	dfc00215 	stw	ra,8(sp)
10003e64:	2023883a 	mov	r17,r4
10003e68:	2821883a 	mov	r16,r5
10003e6c:	00047700 	call	10004770 <__gedf2>
10003e70:	1000080e 	bge	r2,zero,10003e94 <__fixunsdfsi+0x48>
10003e74:	8809883a 	mov	r4,r17
10003e78:	800b883a 	mov	r5,r16
10003e7c:	00048a80 	call	100048a8 <__fixdfsi>
10003e80:	dfc00217 	ldw	ra,8(sp)
10003e84:	dc400117 	ldw	r17,4(sp)
10003e88:	dc000017 	ldw	r16,0(sp)
10003e8c:	dec00304 	addi	sp,sp,12
10003e90:	f800283a 	ret
10003e94:	000d883a 	mov	r6,zero
10003e98:	01d07834 	movhi	r7,16864
10003e9c:	8809883a 	mov	r4,r17
10003ea0:	800b883a 	mov	r5,r16
10003ea4:	00042780 	call	10004278 <__subdf3>
10003ea8:	180b883a 	mov	r5,r3
10003eac:	1009883a 	mov	r4,r2
10003eb0:	00048a80 	call	100048a8 <__fixdfsi>
10003eb4:	00e00034 	movhi	r3,32768
10003eb8:	10c5883a 	add	r2,r2,r3
10003ebc:	dfc00217 	ldw	ra,8(sp)
10003ec0:	dc400117 	ldw	r17,4(sp)
10003ec4:	dc000017 	ldw	r16,0(sp)
10003ec8:	dec00304 	addi	sp,sp,12
10003ecc:	f800283a 	ret

10003ed0 <_fpadd_parts>:
10003ed0:	2005883a 	mov	r2,r4
10003ed4:	21000017 	ldw	r4,0(r4)
10003ed8:	01c00044 	movi	r7,1
10003edc:	3900622e 	bgeu	r7,r4,10004068 <_fpadd_parts+0x198>
10003ee0:	28c00017 	ldw	r3,0(r5)
10003ee4:	38c05f2e 	bgeu	r7,r3,10004064 <_fpadd_parts+0x194>
10003ee8:	01c00104 	movi	r7,4
10003eec:	21c0c626 	beq	r4,r7,10004208 <_fpadd_parts+0x338>
10003ef0:	19c05c26 	beq	r3,r7,10004064 <_fpadd_parts+0x194>
10003ef4:	01c00084 	movi	r7,2
10003ef8:	19c06b26 	beq	r3,r7,100040a8 <_fpadd_parts+0x1d8>
10003efc:	21c05926 	beq	r4,r7,10004064 <_fpadd_parts+0x194>
10003f00:	11c00217 	ldw	r7,8(r2)
10003f04:	2ac00217 	ldw	r11,8(r5)
10003f08:	13000317 	ldw	r12,12(r2)
10003f0c:	13400417 	ldw	r13,16(r2)
10003f10:	3ac9c83a 	sub	r4,r7,r11
10003f14:	2a000317 	ldw	r8,12(r5)
10003f18:	2a400417 	ldw	r9,16(r5)
10003f1c:	2015883a 	mov	r10,r4
10003f20:	20007516 	blt	r4,zero,100040f8 <_fpadd_parts+0x228>
10003f24:	00c00fc4 	movi	r3,63
10003f28:	1a805016 	blt	r3,r10,1000406c <_fpadd_parts+0x19c>
10003f2c:	0100870e 	bge	zero,r4,1000414c <_fpadd_parts+0x27c>
10003f30:	50fff804 	addi	r3,r10,-32
10003f34:	18009916 	blt	r3,zero,1000419c <_fpadd_parts+0x2cc>
10003f38:	48d6d83a 	srl	r11,r9,r3
10003f3c:	001d883a 	mov	r14,zero
10003f40:	18009e16 	blt	r3,zero,100041bc <_fpadd_parts+0x2ec>
10003f44:	01000044 	movi	r4,1
10003f48:	20c6983a 	sll	r3,r4,r3
10003f4c:	0015883a 	mov	r10,zero
10003f50:	513fffc4 	addi	r4,r10,-1
10003f54:	2295403a 	cmpgeu	r10,r4,r10
10003f58:	1a87c83a 	sub	r3,r3,r10
10003f5c:	1a52703a 	and	r9,r3,r9
10003f60:	2210703a 	and	r8,r4,r8
10003f64:	4250b03a 	or	r8,r8,r9
10003f68:	4010c03a 	cmpne	r8,r8,zero
10003f6c:	42d0b03a 	or	r8,r8,r11
10003f70:	7013883a 	mov	r9,r14
10003f74:	11000117 	ldw	r4,4(r2)
10003f78:	28800117 	ldw	r2,4(r5)
10003f7c:	20804126 	beq	r4,r2,10004084 <_fpadd_parts+0x1b4>
10003f80:	20006326 	beq	r4,zero,10004110 <_fpadd_parts+0x240>
10003f84:	4305c83a 	sub	r2,r8,r12
10003f88:	4091803a 	cmpltu	r8,r8,r2
10003f8c:	4b47c83a 	sub	r3,r9,r13
10003f90:	1a07c83a 	sub	r3,r3,r8
10003f94:	18006316 	blt	r3,zero,10004124 <_fpadd_parts+0x254>
10003f98:	30000115 	stw	zero,4(r6)
10003f9c:	31c00215 	stw	r7,8(r6)
10003fa0:	30800315 	stw	r2,12(r6)
10003fa4:	30c00415 	stw	r3,16(r6)
10003fa8:	11ffffc4 	addi	r7,r2,-1
10003fac:	388b403a 	cmpgeu	r5,r7,r2
10003fb0:	194bc83a 	sub	r5,r3,r5
10003fb4:	01040034 	movhi	r4,4096
10003fb8:	213fffc4 	addi	r4,r4,-1
10003fbc:	21401736 	bltu	r4,r5,1000401c <_fpadd_parts+0x14c>
10003fc0:	29008226 	beq	r5,r4,100041cc <_fpadd_parts+0x2fc>
10003fc4:	31400217 	ldw	r5,8(r6)
10003fc8:	02840034 	movhi	r10,4096
10003fcc:	52bfffc4 	addi	r10,r10,-1
10003fd0:	033fff84 	movi	r12,-2
10003fd4:	297fffc4 	addi	r5,r5,-1
10003fd8:	00000106 	br	10003fe0 <_fpadd_parts+0x110>
10003fdc:	3a804a26 	beq	r7,r10,10004108 <_fpadd_parts+0x238>
10003fe0:	1089883a 	add	r4,r2,r2
10003fe4:	2091803a 	cmpltu	r8,r4,r2
10003fe8:	18c7883a 	add	r3,r3,r3
10003fec:	227fffc4 	addi	r9,r4,-1
10003ff0:	40d1883a 	add	r8,r8,r3
10003ff4:	490f403a 	cmpgeu	r7,r9,r4
10003ff8:	41cfc83a 	sub	r7,r8,r7
10003ffc:	2817883a 	mov	r11,r5
10004000:	2005883a 	mov	r2,r4
10004004:	4007883a 	mov	r3,r8
10004008:	297fffc4 	addi	r5,r5,-1
1000400c:	51fff32e 	bgeu	r10,r7,10003fdc <__alt_data_end+0xf8003fdc>
10004010:	31000315 	stw	r4,12(r6)
10004014:	32000415 	stw	r8,16(r6)
10004018:	32c00215 	stw	r11,8(r6)
1000401c:	010000c4 	movi	r4,3
10004020:	31000015 	stw	r4,0(r6)
10004024:	01080034 	movhi	r4,8192
10004028:	213fffc4 	addi	r4,r4,-1
1000402c:	20c00b2e 	bgeu	r4,r3,1000405c <_fpadd_parts+0x18c>
10004030:	180e97fa 	slli	r7,r3,31
10004034:	1008d07a 	srli	r4,r2,1
10004038:	31400217 	ldw	r5,8(r6)
1000403c:	1806d07a 	srli	r3,r3,1
10004040:	1080004c 	andi	r2,r2,1
10004044:	3908b03a 	or	r4,r7,r4
10004048:	1108b03a 	or	r4,r2,r4
1000404c:	29400044 	addi	r5,r5,1
10004050:	31000315 	stw	r4,12(r6)
10004054:	30c00415 	stw	r3,16(r6)
10004058:	31400215 	stw	r5,8(r6)
1000405c:	3005883a 	mov	r2,r6
10004060:	f800283a 	ret
10004064:	2805883a 	mov	r2,r5
10004068:	f800283a 	ret
1000406c:	59c01e0e 	bge	r11,r7,100040e8 <_fpadd_parts+0x218>
10004070:	11000117 	ldw	r4,4(r2)
10004074:	28800117 	ldw	r2,4(r5)
10004078:	0011883a 	mov	r8,zero
1000407c:	0013883a 	mov	r9,zero
10004080:	20bfbf1e 	bne	r4,r2,10003f80 <__alt_data_end+0xf8003f80>
10004084:	4305883a 	add	r2,r8,r12
10004088:	1207803a 	cmpltu	r3,r2,r8
1000408c:	4b53883a 	add	r9,r9,r13
10004090:	1a47883a 	add	r3,r3,r9
10004094:	31000115 	stw	r4,4(r6)
10004098:	31c00215 	stw	r7,8(r6)
1000409c:	30800315 	stw	r2,12(r6)
100040a0:	30c00415 	stw	r3,16(r6)
100040a4:	003fdd06 	br	1000401c <__alt_data_end+0xf800401c>
100040a8:	20ffef1e 	bne	r4,r3,10004068 <__alt_data_end+0xf8004068>
100040ac:	31000015 	stw	r4,0(r6)
100040b0:	10c00117 	ldw	r3,4(r2)
100040b4:	30c00115 	stw	r3,4(r6)
100040b8:	10c00217 	ldw	r3,8(r2)
100040bc:	11000117 	ldw	r4,4(r2)
100040c0:	29400117 	ldw	r5,4(r5)
100040c4:	30c00215 	stw	r3,8(r6)
100040c8:	10c00317 	ldw	r3,12(r2)
100040cc:	2908703a 	and	r4,r5,r4
100040d0:	30c00315 	stw	r3,12(r6)
100040d4:	10c00417 	ldw	r3,16(r2)
100040d8:	31000115 	stw	r4,4(r6)
100040dc:	3005883a 	mov	r2,r6
100040e0:	30c00415 	stw	r3,16(r6)
100040e4:	f800283a 	ret
100040e8:	580f883a 	mov	r7,r11
100040ec:	0019883a 	mov	r12,zero
100040f0:	001b883a 	mov	r13,zero
100040f4:	003f9f06 	br	10003f74 <__alt_data_end+0xf8003f74>
100040f8:	0115c83a 	sub	r10,zero,r4
100040fc:	00c00fc4 	movi	r3,63
10004100:	1abfda16 	blt	r3,r10,1000406c <__alt_data_end+0xf800406c>
10004104:	003f8906 	br	10003f2c <__alt_data_end+0xf8003f2c>
10004108:	627fb52e 	bgeu	r12,r9,10003fe0 <__alt_data_end+0xf8003fe0>
1000410c:	003fc006 	br	10004010 <__alt_data_end+0xf8004010>
10004110:	6205c83a 	sub	r2,r12,r8
10004114:	6099803a 	cmpltu	r12,r12,r2
10004118:	6a47c83a 	sub	r3,r13,r9
1000411c:	1b07c83a 	sub	r3,r3,r12
10004120:	183f9d0e 	bge	r3,zero,10003f98 <__alt_data_end+0xf8003f98>
10004124:	0085c83a 	sub	r2,zero,r2
10004128:	1008c03a 	cmpne	r4,r2,zero
1000412c:	00c7c83a 	sub	r3,zero,r3
10004130:	1907c83a 	sub	r3,r3,r4
10004134:	01000044 	movi	r4,1
10004138:	31000115 	stw	r4,4(r6)
1000413c:	31c00215 	stw	r7,8(r6)
10004140:	30800315 	stw	r2,12(r6)
10004144:	30c00415 	stw	r3,16(r6)
10004148:	003f9706 	br	10003fa8 <__alt_data_end+0xf8003fa8>
1000414c:	203f8926 	beq	r4,zero,10003f74 <__alt_data_end+0xf8003f74>
10004150:	50fff804 	addi	r3,r10,-32
10004154:	3a8f883a 	add	r7,r7,r10
10004158:	18002316 	blt	r3,zero,100041e8 <_fpadd_parts+0x318>
1000415c:	68d6d83a 	srl	r11,r13,r3
10004160:	001d883a 	mov	r14,zero
10004164:	18001c16 	blt	r3,zero,100041d8 <_fpadd_parts+0x308>
10004168:	01000044 	movi	r4,1
1000416c:	20c6983a 	sll	r3,r4,r3
10004170:	0015883a 	mov	r10,zero
10004174:	513fffc4 	addi	r4,r10,-1
10004178:	2295403a 	cmpgeu	r10,r4,r10
1000417c:	1a87c83a 	sub	r3,r3,r10
10004180:	1b5a703a 	and	r13,r3,r13
10004184:	2318703a 	and	r12,r4,r12
10004188:	6358b03a 	or	r12,r12,r13
1000418c:	6018c03a 	cmpne	r12,r12,zero
10004190:	62d8b03a 	or	r12,r12,r11
10004194:	701b883a 	mov	r13,r14
10004198:	003f7606 	br	10003f74 <__alt_data_end+0xf8003f74>
1000419c:	4808907a 	slli	r4,r9,1
100041a0:	02c007c4 	movi	r11,31
100041a4:	5a97c83a 	sub	r11,r11,r10
100041a8:	22c8983a 	sll	r4,r4,r11
100041ac:	4296d83a 	srl	r11,r8,r10
100041b0:	4a9cd83a 	srl	r14,r9,r10
100041b4:	22d6b03a 	or	r11,r4,r11
100041b8:	003f6106 	br	10003f40 <__alt_data_end+0xf8003f40>
100041bc:	00c00044 	movi	r3,1
100041c0:	1a94983a 	sll	r10,r3,r10
100041c4:	0007883a 	mov	r3,zero
100041c8:	003f6106 	br	10003f50 <__alt_data_end+0xf8003f50>
100041cc:	013fff84 	movi	r4,-2
100041d0:	21ff7c2e 	bgeu	r4,r7,10003fc4 <__alt_data_end+0xf8003fc4>
100041d4:	003f9106 	br	1000401c <__alt_data_end+0xf800401c>
100041d8:	00c00044 	movi	r3,1
100041dc:	1a94983a 	sll	r10,r3,r10
100041e0:	0007883a 	mov	r3,zero
100041e4:	003fe306 	br	10004174 <__alt_data_end+0xf8004174>
100041e8:	6816907a 	slli	r11,r13,1
100041ec:	010007c4 	movi	r4,31
100041f0:	2289c83a 	sub	r4,r4,r10
100041f4:	5908983a 	sll	r4,r11,r4
100041f8:	6296d83a 	srl	r11,r12,r10
100041fc:	6a9cd83a 	srl	r14,r13,r10
10004200:	22d6b03a 	or	r11,r4,r11
10004204:	003fd706 	br	10004164 <__alt_data_end+0xf8004164>
10004208:	193f971e 	bne	r3,r4,10004068 <__alt_data_end+0xf8004068>
1000420c:	11000117 	ldw	r4,4(r2)
10004210:	28c00117 	ldw	r3,4(r5)
10004214:	20ff9426 	beq	r4,r3,10004068 <__alt_data_end+0xf8004068>
10004218:	00840074 	movhi	r2,4097
1000421c:	10815c04 	addi	r2,r2,1392
10004220:	f800283a 	ret

10004224 <__adddf3>:
10004224:	deffec04 	addi	sp,sp,-80
10004228:	d9001115 	stw	r4,68(sp)
1000422c:	d9401215 	stw	r5,72(sp)
10004230:	d9001104 	addi	r4,sp,68
10004234:	d9400a04 	addi	r5,sp,40
10004238:	dfc01315 	stw	ra,76(sp)
1000423c:	d9c01015 	stw	r7,64(sp)
10004240:	d9800f15 	stw	r6,60(sp)
10004244:	0004e7c0 	call	10004e7c <__unpack_d>
10004248:	d9000f04 	addi	r4,sp,60
1000424c:	d9400504 	addi	r5,sp,20
10004250:	0004e7c0 	call	10004e7c <__unpack_d>
10004254:	d9000a04 	addi	r4,sp,40
10004258:	d9400504 	addi	r5,sp,20
1000425c:	d80d883a 	mov	r6,sp
10004260:	0003ed00 	call	10003ed0 <_fpadd_parts>
10004264:	1009883a 	mov	r4,r2
10004268:	0004c580 	call	10004c58 <__pack_d>
1000426c:	dfc01317 	ldw	ra,76(sp)
10004270:	dec01404 	addi	sp,sp,80
10004274:	f800283a 	ret

10004278 <__subdf3>:
10004278:	deffec04 	addi	sp,sp,-80
1000427c:	d9001115 	stw	r4,68(sp)
10004280:	d9401215 	stw	r5,72(sp)
10004284:	d9001104 	addi	r4,sp,68
10004288:	d9400a04 	addi	r5,sp,40
1000428c:	dfc01315 	stw	ra,76(sp)
10004290:	d9c01015 	stw	r7,64(sp)
10004294:	d9800f15 	stw	r6,60(sp)
10004298:	0004e7c0 	call	10004e7c <__unpack_d>
1000429c:	d9000f04 	addi	r4,sp,60
100042a0:	d9400504 	addi	r5,sp,20
100042a4:	0004e7c0 	call	10004e7c <__unpack_d>
100042a8:	d8800617 	ldw	r2,24(sp)
100042ac:	d9000a04 	addi	r4,sp,40
100042b0:	d9400504 	addi	r5,sp,20
100042b4:	d80d883a 	mov	r6,sp
100042b8:	1080005c 	xori	r2,r2,1
100042bc:	d8800615 	stw	r2,24(sp)
100042c0:	0003ed00 	call	10003ed0 <_fpadd_parts>
100042c4:	1009883a 	mov	r4,r2
100042c8:	0004c580 	call	10004c58 <__pack_d>
100042cc:	dfc01317 	ldw	ra,76(sp)
100042d0:	dec01404 	addi	sp,sp,80
100042d4:	f800283a 	ret

100042d8 <__muldf3>:
100042d8:	deffe404 	addi	sp,sp,-112
100042dc:	d9001115 	stw	r4,68(sp)
100042e0:	d9401215 	stw	r5,72(sp)
100042e4:	d9001104 	addi	r4,sp,68
100042e8:	d9400a04 	addi	r5,sp,40
100042ec:	dfc01b15 	stw	ra,108(sp)
100042f0:	d9800f15 	stw	r6,60(sp)
100042f4:	d9c01015 	stw	r7,64(sp)
100042f8:	ddc01a15 	stw	r23,104(sp)
100042fc:	dd801915 	stw	r22,100(sp)
10004300:	dd401815 	stw	r21,96(sp)
10004304:	dd001715 	stw	r20,92(sp)
10004308:	dcc01615 	stw	r19,88(sp)
1000430c:	dc801515 	stw	r18,84(sp)
10004310:	dc401415 	stw	r17,80(sp)
10004314:	dc001315 	stw	r16,76(sp)
10004318:	0004e7c0 	call	10004e7c <__unpack_d>
1000431c:	d9000f04 	addi	r4,sp,60
10004320:	d9400504 	addi	r5,sp,20
10004324:	0004e7c0 	call	10004e7c <__unpack_d>
10004328:	d8c00a17 	ldw	r3,40(sp)
1000432c:	00800044 	movi	r2,1
10004330:	10c01136 	bltu	r2,r3,10004378 <__muldf3+0xa0>
10004334:	d8c00b17 	ldw	r3,44(sp)
10004338:	d8800617 	ldw	r2,24(sp)
1000433c:	d9000a04 	addi	r4,sp,40
10004340:	1884c03a 	cmpne	r2,r3,r2
10004344:	d8800b15 	stw	r2,44(sp)
10004348:	0004c580 	call	10004c58 <__pack_d>
1000434c:	dfc01b17 	ldw	ra,108(sp)
10004350:	ddc01a17 	ldw	r23,104(sp)
10004354:	dd801917 	ldw	r22,100(sp)
10004358:	dd401817 	ldw	r21,96(sp)
1000435c:	dd001717 	ldw	r20,92(sp)
10004360:	dcc01617 	ldw	r19,88(sp)
10004364:	dc801517 	ldw	r18,84(sp)
10004368:	dc401417 	ldw	r17,80(sp)
1000436c:	dc001317 	ldw	r16,76(sp)
10004370:	dec01c04 	addi	sp,sp,112
10004374:	f800283a 	ret
10004378:	d9000517 	ldw	r4,20(sp)
1000437c:	11000636 	bltu	r2,r4,10004398 <__muldf3+0xc0>
10004380:	d8800617 	ldw	r2,24(sp)
10004384:	d8c00b17 	ldw	r3,44(sp)
10004388:	d9000504 	addi	r4,sp,20
1000438c:	1884c03a 	cmpne	r2,r3,r2
10004390:	d8800615 	stw	r2,24(sp)
10004394:	003fec06 	br	10004348 <__alt_data_end+0xf8004348>
10004398:	00800104 	movi	r2,4
1000439c:	1880051e 	bne	r3,r2,100043b4 <__muldf3+0xdc>
100043a0:	00800084 	movi	r2,2
100043a4:	20bfe31e 	bne	r4,r2,10004334 <__alt_data_end+0xf8004334>
100043a8:	01040074 	movhi	r4,4097
100043ac:	21015c04 	addi	r4,r4,1392
100043b0:	003fe506 	br	10004348 <__alt_data_end+0xf8004348>
100043b4:	2080031e 	bne	r4,r2,100043c4 <__muldf3+0xec>
100043b8:	00800084 	movi	r2,2
100043bc:	18bffa26 	beq	r3,r2,100043a8 <__alt_data_end+0xf80043a8>
100043c0:	003fef06 	br	10004380 <__alt_data_end+0xf8004380>
100043c4:	00800084 	movi	r2,2
100043c8:	18bfda26 	beq	r3,r2,10004334 <__alt_data_end+0xf8004334>
100043cc:	20bfec26 	beq	r4,r2,10004380 <__alt_data_end+0xf8004380>
100043d0:	dc000d17 	ldw	r16,52(sp)
100043d4:	dd000817 	ldw	r20,32(sp)
100043d8:	dc800917 	ldw	r18,36(sp)
100043dc:	8009883a 	mov	r4,r16
100043e0:	000b883a 	mov	r5,zero
100043e4:	a00d883a 	mov	r6,r20
100043e8:	000f883a 	mov	r7,zero
100043ec:	0004a9c0 	call	10004a9c <__muldi3>
100043f0:	dc400e17 	ldw	r17,56(sp)
100043f4:	9009883a 	mov	r4,r18
100043f8:	800d883a 	mov	r6,r16
100043fc:	000b883a 	mov	r5,zero
10004400:	000f883a 	mov	r7,zero
10004404:	102f883a 	mov	r23,r2
10004408:	1827883a 	mov	r19,r3
1000440c:	0004a9c0 	call	10004a9c <__muldi3>
10004410:	900d883a 	mov	r6,r18
10004414:	8809883a 	mov	r4,r17
10004418:	000b883a 	mov	r5,zero
1000441c:	000f883a 	mov	r7,zero
10004420:	102b883a 	mov	r21,r2
10004424:	1821883a 	mov	r16,r3
10004428:	0004a9c0 	call	10004a9c <__muldi3>
1000442c:	8809883a 	mov	r4,r17
10004430:	000b883a 	mov	r5,zero
10004434:	a00d883a 	mov	r6,r20
10004438:	000f883a 	mov	r7,zero
1000443c:	102d883a 	mov	r22,r2
10004440:	1825883a 	mov	r18,r3
10004444:	0004a9c0 	call	10004a9c <__muldi3>
10004448:	154b883a 	add	r5,r2,r21
1000444c:	2889803a 	cmpltu	r4,r5,r2
10004450:	1c07883a 	add	r3,r3,r16
10004454:	20c9883a 	add	r4,r4,r3
10004458:	24004b36 	bltu	r4,r16,10004588 <__muldf3+0x2b0>
1000445c:	8100011e 	bne	r16,r4,10004464 <__muldf3+0x18c>
10004460:	2d404936 	bltu	r5,r21,10004588 <__muldf3+0x2b0>
10004464:	0011883a 	mov	r8,zero
10004468:	0007883a 	mov	r3,zero
1000446c:	2ccb883a 	add	r5,r5,r19
10004470:	b80d883a 	mov	r6,r23
10004474:	2cc0012e 	bgeu	r5,r19,1000447c <__muldf3+0x1a4>
10004478:	02000044 	movi	r8,1
1000447c:	258f883a 	add	r7,r4,r22
10004480:	3909803a 	cmpltu	r4,r7,r4
10004484:	da400c17 	ldw	r9,48(sp)
10004488:	2489883a 	add	r4,r4,r18
1000448c:	d8800717 	ldw	r2,28(sp)
10004490:	20c9883a 	add	r4,r4,r3
10004494:	da800b17 	ldw	r10,44(sp)
10004498:	d8c00617 	ldw	r3,24(sp)
1000449c:	3a11883a 	add	r8,r7,r8
100044a0:	4885883a 	add	r2,r9,r2
100044a4:	50c6c03a 	cmpne	r3,r10,r3
100044a8:	41cf803a 	cmpltu	r7,r8,r7
100044ac:	12400104 	addi	r9,r2,4
100044b0:	d8c00115 	stw	r3,4(sp)
100044b4:	3909883a 	add	r4,r7,r4
100044b8:	da400215 	stw	r9,8(sp)
100044bc:	03480034 	movhi	r13,8192
100044c0:	6b7fffc4 	addi	r13,r13,-1
100044c4:	4007883a 	mov	r3,r8
100044c8:	6900102e 	bgeu	r13,r4,1000450c <__muldf3+0x234>
100044cc:	10800144 	addi	r2,r2,5
100044d0:	180ed07a 	srli	r7,r3,1
100044d4:	18c0004c 	andi	r3,r3,1
100044d8:	201097fa 	slli	r8,r4,31
100044dc:	281697fa 	slli	r11,r5,31
100044e0:	2008d07a 	srli	r4,r4,1
100044e4:	3014d07a 	srli	r10,r6,1
100044e8:	2812d07a 	srli	r9,r5,1
100044ec:	1019883a 	mov	r12,r2
100044f0:	18000226 	beq	r3,zero,100044fc <__muldf3+0x224>
100044f4:	5a8cb03a 	or	r6,r11,r10
100044f8:	49600034 	orhi	r5,r9,32768
100044fc:	41c6b03a 	or	r3,r8,r7
10004500:	10800044 	addi	r2,r2,1
10004504:	693ff236 	bltu	r13,r4,100044d0 <__alt_data_end+0xf80044d0>
10004508:	db000215 	stw	r12,8(sp)
1000450c:	03440034 	movhi	r13,4096
10004510:	6b7fffc4 	addi	r13,r13,-1
10004514:	69001336 	bltu	r13,r4,10004564 <__muldf3+0x28c>
10004518:	d8800217 	ldw	r2,8(sp)
1000451c:	10bfffc4 	addi	r2,r2,-1
10004520:	18d3883a 	add	r9,r3,r3
10004524:	48c7803a 	cmpltu	r3,r9,r3
10004528:	2109883a 	add	r4,r4,r4
1000452c:	190f883a 	add	r7,r3,r4
10004530:	3191883a 	add	r8,r6,r6
10004534:	4197803a 	cmpltu	r11,r8,r6
10004538:	2955883a 	add	r10,r5,r5
1000453c:	1019883a 	mov	r12,r2
10004540:	4807883a 	mov	r3,r9
10004544:	3809883a 	mov	r4,r7
10004548:	2800010e 	bge	r5,zero,10004550 <__muldf3+0x278>
1000454c:	48c00054 	ori	r3,r9,1
10004550:	400d883a 	mov	r6,r8
10004554:	5a8b883a 	add	r5,r11,r10
10004558:	10bfffc4 	addi	r2,r2,-1
1000455c:	69fff02e 	bgeu	r13,r7,10004520 <__alt_data_end+0xf8004520>
10004560:	db000215 	stw	r12,8(sp)
10004564:	18803fcc 	andi	r2,r3,255
10004568:	01c02004 	movi	r7,128
1000456c:	11c00926 	beq	r2,r7,10004594 <__muldf3+0x2bc>
10004570:	008000c4 	movi	r2,3
10004574:	d9000415 	stw	r4,16(sp)
10004578:	d8c00315 	stw	r3,12(sp)
1000457c:	d8800015 	stw	r2,0(sp)
10004580:	d809883a 	mov	r4,sp
10004584:	003f7006 	br	10004348 <__alt_data_end+0xf8004348>
10004588:	0011883a 	mov	r8,zero
1000458c:	00c00044 	movi	r3,1
10004590:	003fb606 	br	1000446c <__alt_data_end+0xf800446c>
10004594:	19c0400c 	andi	r7,r3,256
10004598:	383ff51e 	bne	r7,zero,10004570 <__alt_data_end+0xf8004570>
1000459c:	314ab03a 	or	r5,r6,r5
100045a0:	283ff326 	beq	r5,zero,10004570 <__alt_data_end+0xf8004570>
100045a4:	1885883a 	add	r2,r3,r2
100045a8:	10cb803a 	cmpltu	r5,r2,r3
100045ac:	00ffc004 	movi	r3,-256
100045b0:	10c6703a 	and	r3,r2,r3
100045b4:	2909883a 	add	r4,r5,r4
100045b8:	003fed06 	br	10004570 <__alt_data_end+0xf8004570>

100045bc <__divdf3>:
100045bc:	defff104 	addi	sp,sp,-60
100045c0:	d9000c15 	stw	r4,48(sp)
100045c4:	d9400d15 	stw	r5,52(sp)
100045c8:	d9000c04 	addi	r4,sp,48
100045cc:	d9400504 	addi	r5,sp,20
100045d0:	dfc00e15 	stw	ra,56(sp)
100045d4:	d9800a15 	stw	r6,40(sp)
100045d8:	d9c00b15 	stw	r7,44(sp)
100045dc:	0004e7c0 	call	10004e7c <__unpack_d>
100045e0:	d9000a04 	addi	r4,sp,40
100045e4:	d80b883a 	mov	r5,sp
100045e8:	0004e7c0 	call	10004e7c <__unpack_d>
100045ec:	d8c00517 	ldw	r3,20(sp)
100045f0:	00800044 	movi	r2,1
100045f4:	10c00536 	bltu	r2,r3,1000460c <__divdf3+0x50>
100045f8:	d9000504 	addi	r4,sp,20
100045fc:	0004c580 	call	10004c58 <__pack_d>
10004600:	dfc00e17 	ldw	ra,56(sp)
10004604:	dec00f04 	addi	sp,sp,60
10004608:	f800283a 	ret
1000460c:	d9000017 	ldw	r4,0(sp)
10004610:	11000536 	bltu	r2,r4,10004628 <__divdf3+0x6c>
10004614:	d809883a 	mov	r4,sp
10004618:	0004c580 	call	10004c58 <__pack_d>
1000461c:	dfc00e17 	ldw	ra,56(sp)
10004620:	dec00f04 	addi	sp,sp,60
10004624:	f800283a 	ret
10004628:	d9800617 	ldw	r6,24(sp)
1000462c:	d9400117 	ldw	r5,4(sp)
10004630:	00800104 	movi	r2,4
10004634:	314af03a 	xor	r5,r6,r5
10004638:	d9400615 	stw	r5,24(sp)
1000463c:	18800226 	beq	r3,r2,10004648 <__divdf3+0x8c>
10004640:	01400084 	movi	r5,2
10004644:	1940041e 	bne	r3,r5,10004658 <__divdf3+0x9c>
10004648:	193feb1e 	bne	r3,r4,100045f8 <__alt_data_end+0xf80045f8>
1000464c:	01040074 	movhi	r4,4097
10004650:	21015c04 	addi	r4,r4,1392
10004654:	003fe906 	br	100045fc <__alt_data_end+0xf80045fc>
10004658:	20803326 	beq	r4,r2,10004728 <__divdf3+0x16c>
1000465c:	21403726 	beq	r4,r5,1000473c <__divdf3+0x180>
10004660:	d8800217 	ldw	r2,8(sp)
10004664:	d9000717 	ldw	r4,28(sp)
10004668:	d8c00917 	ldw	r3,36(sp)
1000466c:	da000417 	ldw	r8,16(sp)
10004670:	2089c83a 	sub	r4,r4,r2
10004674:	d9000715 	stw	r4,28(sp)
10004678:	d8800817 	ldw	r2,32(sp)
1000467c:	dbc00317 	ldw	r15,12(sp)
10004680:	1a000236 	bltu	r3,r8,1000468c <__divdf3+0xd0>
10004684:	40c0081e 	bne	r8,r3,100046a8 <__divdf3+0xec>
10004688:	13c0072e 	bgeu	r2,r15,100046a8 <__divdf3+0xec>
1000468c:	108b883a 	add	r5,r2,r2
10004690:	288d803a 	cmpltu	r6,r5,r2
10004694:	18c7883a 	add	r3,r3,r3
10004698:	213fffc4 	addi	r4,r4,-1
1000469c:	2805883a 	mov	r2,r5
100046a0:	30c7883a 	add	r3,r6,r3
100046a4:	d9000715 	stw	r4,28(sp)
100046a8:	01400f44 	movi	r5,61
100046ac:	000f883a 	mov	r7,zero
100046b0:	01040034 	movhi	r4,4096
100046b4:	0019883a 	mov	r12,zero
100046b8:	001b883a 	mov	r13,zero
100046bc:	201697fa 	slli	r11,r4,31
100046c0:	3814d07a 	srli	r10,r7,1
100046c4:	297fffc4 	addi	r5,r5,-1
100046c8:	1a000936 	bltu	r3,r8,100046f0 <__divdf3+0x134>
100046cc:	13cdc83a 	sub	r6,r2,r15
100046d0:	1193803a 	cmpltu	r9,r2,r6
100046d4:	1a1dc83a 	sub	r14,r3,r8
100046d8:	40c0011e 	bne	r8,r3,100046e0 <__divdf3+0x124>
100046dc:	13c00436 	bltu	r2,r15,100046f0 <__divdf3+0x134>
100046e0:	3005883a 	mov	r2,r6
100046e4:	7247c83a 	sub	r3,r14,r9
100046e8:	61d8b03a 	or	r12,r12,r7
100046ec:	691ab03a 	or	r13,r13,r4
100046f0:	108d883a 	add	r6,r2,r2
100046f4:	3093803a 	cmpltu	r9,r6,r2
100046f8:	18c7883a 	add	r3,r3,r3
100046fc:	5a8eb03a 	or	r7,r11,r10
10004700:	2008d07a 	srli	r4,r4,1
10004704:	3005883a 	mov	r2,r6
10004708:	48c7883a 	add	r3,r9,r3
1000470c:	283feb1e 	bne	r5,zero,100046bc <__alt_data_end+0xf80046bc>
10004710:	61003fcc 	andi	r4,r12,255
10004714:	01402004 	movi	r5,128
10004718:	21400b26 	beq	r4,r5,10004748 <__divdf3+0x18c>
1000471c:	db000815 	stw	r12,32(sp)
10004720:	db400915 	stw	r13,36(sp)
10004724:	003fb406 	br	100045f8 <__alt_data_end+0xf80045f8>
10004728:	d8000815 	stw	zero,32(sp)
1000472c:	d8000915 	stw	zero,36(sp)
10004730:	d8000715 	stw	zero,28(sp)
10004734:	d9000504 	addi	r4,sp,20
10004738:	003fb006 	br	100045fc <__alt_data_end+0xf80045fc>
1000473c:	d8800515 	stw	r2,20(sp)
10004740:	d9000504 	addi	r4,sp,20
10004744:	003fad06 	br	100045fc <__alt_data_end+0xf80045fc>
10004748:	6140400c 	andi	r5,r12,256
1000474c:	283ff31e 	bne	r5,zero,1000471c <__alt_data_end+0xf800471c>
10004750:	30c4b03a 	or	r2,r6,r3
10004754:	103ff126 	beq	r2,zero,1000471c <__alt_data_end+0xf800471c>
10004758:	6109883a 	add	r4,r12,r4
1000475c:	2305803a 	cmpltu	r2,r4,r12
10004760:	033fc004 	movi	r12,-256
10004764:	2318703a 	and	r12,r4,r12
10004768:	135b883a 	add	r13,r2,r13
1000476c:	003feb06 	br	1000471c <__alt_data_end+0xf800471c>

10004770 <__gedf2>:
10004770:	defff104 	addi	sp,sp,-60
10004774:	d9000c15 	stw	r4,48(sp)
10004778:	d9400d15 	stw	r5,52(sp)
1000477c:	d9000c04 	addi	r4,sp,48
10004780:	d9400504 	addi	r5,sp,20
10004784:	dfc00e15 	stw	ra,56(sp)
10004788:	d9800a15 	stw	r6,40(sp)
1000478c:	d9c00b15 	stw	r7,44(sp)
10004790:	0004e7c0 	call	10004e7c <__unpack_d>
10004794:	d9000a04 	addi	r4,sp,40
10004798:	d80b883a 	mov	r5,sp
1000479c:	0004e7c0 	call	10004e7c <__unpack_d>
100047a0:	d8c00517 	ldw	r3,20(sp)
100047a4:	00800044 	movi	r2,1
100047a8:	10c0082e 	bgeu	r2,r3,100047cc <__gedf2+0x5c>
100047ac:	d8c00017 	ldw	r3,0(sp)
100047b0:	10c0062e 	bgeu	r2,r3,100047cc <__gedf2+0x5c>
100047b4:	d9000504 	addi	r4,sp,20
100047b8:	d80b883a 	mov	r5,sp
100047bc:	0004f800 	call	10004f80 <__fpcmp_parts_d>
100047c0:	dfc00e17 	ldw	ra,56(sp)
100047c4:	dec00f04 	addi	sp,sp,60
100047c8:	f800283a 	ret
100047cc:	00bfffc4 	movi	r2,-1
100047d0:	003ffb06 	br	100047c0 <__alt_data_end+0xf80047c0>

100047d4 <__floatsidf>:
100047d4:	2004d7fa 	srli	r2,r4,31
100047d8:	defff904 	addi	sp,sp,-28
100047dc:	00c000c4 	movi	r3,3
100047e0:	dfc00615 	stw	ra,24(sp)
100047e4:	dc000515 	stw	r16,20(sp)
100047e8:	d8c00015 	stw	r3,0(sp)
100047ec:	d8800115 	stw	r2,4(sp)
100047f0:	2000081e 	bne	r4,zero,10004814 <__floatsidf+0x40>
100047f4:	00800084 	movi	r2,2
100047f8:	d8800015 	stw	r2,0(sp)
100047fc:	d809883a 	mov	r4,sp
10004800:	0004c580 	call	10004c58 <__pack_d>
10004804:	dfc00617 	ldw	ra,24(sp)
10004808:	dc000517 	ldw	r16,20(sp)
1000480c:	dec00704 	addi	sp,sp,28
10004810:	f800283a 	ret
10004814:	00c00f04 	movi	r3,60
10004818:	d8c00215 	stw	r3,8(sp)
1000481c:	10000f1e 	bne	r2,zero,1000485c <__floatsidf+0x88>
10004820:	2021883a 	mov	r16,r4
10004824:	8009883a 	mov	r4,r16
10004828:	0004bac0 	call	10004bac <__clzsi2>
1000482c:	11000744 	addi	r4,r2,29
10004830:	0100110e 	bge	zero,r4,10004878 <__floatsidf+0xa4>
10004834:	10ffff44 	addi	r3,r2,-3
10004838:	18001216 	blt	r3,zero,10004884 <__floatsidf+0xb0>
1000483c:	80c6983a 	sll	r3,r16,r3
10004840:	0009883a 	mov	r4,zero
10004844:	014007c4 	movi	r5,31
10004848:	2885c83a 	sub	r2,r5,r2
1000484c:	d9000315 	stw	r4,12(sp)
10004850:	d8c00415 	stw	r3,16(sp)
10004854:	d8800215 	stw	r2,8(sp)
10004858:	003fe806 	br	100047fc <__alt_data_end+0xf80047fc>
1000485c:	00a00034 	movhi	r2,32768
10004860:	20800e26 	beq	r4,r2,1000489c <__floatsidf+0xc8>
10004864:	0121c83a 	sub	r16,zero,r4
10004868:	8009883a 	mov	r4,r16
1000486c:	0004bac0 	call	10004bac <__clzsi2>
10004870:	11000744 	addi	r4,r2,29
10004874:	013fef16 	blt	zero,r4,10004834 <__alt_data_end+0xf8004834>
10004878:	dc000315 	stw	r16,12(sp)
1000487c:	d8000415 	stw	zero,16(sp)
10004880:	003fde06 	br	100047fc <__alt_data_end+0xf80047fc>
10004884:	800ad07a 	srli	r5,r16,1
10004888:	00c007c4 	movi	r3,31
1000488c:	1907c83a 	sub	r3,r3,r4
10004890:	28c6d83a 	srl	r3,r5,r3
10004894:	8108983a 	sll	r4,r16,r4
10004898:	003fea06 	br	10004844 <__alt_data_end+0xf8004844>
1000489c:	0005883a 	mov	r2,zero
100048a0:	00f07834 	movhi	r3,49632
100048a4:	003fd706 	br	10004804 <__alt_data_end+0xf8004804>

100048a8 <__fixdfsi>:
100048a8:	defff804 	addi	sp,sp,-32
100048ac:	d9000515 	stw	r4,20(sp)
100048b0:	d9400615 	stw	r5,24(sp)
100048b4:	d9000504 	addi	r4,sp,20
100048b8:	d80b883a 	mov	r5,sp
100048bc:	dfc00715 	stw	ra,28(sp)
100048c0:	0004e7c0 	call	10004e7c <__unpack_d>
100048c4:	d8800017 	ldw	r2,0(sp)
100048c8:	00c00084 	movi	r3,2
100048cc:	10c01c26 	beq	r2,r3,10004940 <__fixdfsi+0x98>
100048d0:	00c00044 	movi	r3,1
100048d4:	18801a2e 	bgeu	r3,r2,10004940 <__fixdfsi+0x98>
100048d8:	00c00104 	movi	r3,4
100048dc:	10c01126 	beq	r2,r3,10004924 <__fixdfsi+0x7c>
100048e0:	d8800217 	ldw	r2,8(sp)
100048e4:	10001616 	blt	r2,zero,10004940 <__fixdfsi+0x98>
100048e8:	00c00784 	movi	r3,30
100048ec:	18800d16 	blt	r3,r2,10004924 <__fixdfsi+0x7c>
100048f0:	00c00f04 	movi	r3,60
100048f4:	1885c83a 	sub	r2,r3,r2
100048f8:	10fff804 	addi	r3,r2,-32
100048fc:	d9400317 	ldw	r5,12(sp)
10004900:	d9000417 	ldw	r4,16(sp)
10004904:	18001216 	blt	r3,zero,10004950 <__fixdfsi+0xa8>
10004908:	20c4d83a 	srl	r2,r4,r3
1000490c:	d8c00117 	ldw	r3,4(sp)
10004910:	18000826 	beq	r3,zero,10004934 <__fixdfsi+0x8c>
10004914:	0085c83a 	sub	r2,zero,r2
10004918:	dfc00717 	ldw	ra,28(sp)
1000491c:	dec00804 	addi	sp,sp,32
10004920:	f800283a 	ret
10004924:	d8800117 	ldw	r2,4(sp)
10004928:	00e00034 	movhi	r3,32768
1000492c:	1005003a 	cmpeq	r2,r2,zero
10004930:	1885c83a 	sub	r2,r3,r2
10004934:	dfc00717 	ldw	ra,28(sp)
10004938:	dec00804 	addi	sp,sp,32
1000493c:	f800283a 	ret
10004940:	0005883a 	mov	r2,zero
10004944:	dfc00717 	ldw	ra,28(sp)
10004948:	dec00804 	addi	sp,sp,32
1000494c:	f800283a 	ret
10004950:	2008907a 	slli	r4,r4,1
10004954:	018007c4 	movi	r6,31
10004958:	308dc83a 	sub	r6,r6,r2
1000495c:	2188983a 	sll	r4,r4,r6
10004960:	2884d83a 	srl	r2,r5,r2
10004964:	2084b03a 	or	r2,r4,r2
10004968:	003fe806 	br	1000490c <__alt_data_end+0xf800490c>

1000496c <udivmodsi4>:
1000496c:	2005883a 	mov	r2,r4
10004970:	2900182e 	bgeu	r5,r4,100049d4 <udivmodsi4+0x68>
10004974:	28001716 	blt	r5,zero,100049d4 <udivmodsi4+0x68>
10004978:	01000804 	movi	r4,32
1000497c:	00c00044 	movi	r3,1
10004980:	00000206 	br	1000498c <udivmodsi4+0x20>
10004984:	20001126 	beq	r4,zero,100049cc <udivmodsi4+0x60>
10004988:	28000516 	blt	r5,zero,100049a0 <udivmodsi4+0x34>
1000498c:	294b883a 	add	r5,r5,r5
10004990:	213fffc4 	addi	r4,r4,-1
10004994:	18c7883a 	add	r3,r3,r3
10004998:	28bffa36 	bltu	r5,r2,10004984 <__alt_data_end+0xf8004984>
1000499c:	18000b26 	beq	r3,zero,100049cc <udivmodsi4+0x60>
100049a0:	0009883a 	mov	r4,zero
100049a4:	11400236 	bltu	r2,r5,100049b0 <udivmodsi4+0x44>
100049a8:	1145c83a 	sub	r2,r2,r5
100049ac:	20c8b03a 	or	r4,r4,r3
100049b0:	1806d07a 	srli	r3,r3,1
100049b4:	280ad07a 	srli	r5,r5,1
100049b8:	183ffa1e 	bne	r3,zero,100049a4 <__alt_data_end+0xf80049a4>
100049bc:	3000021e 	bne	r6,zero,100049c8 <udivmodsi4+0x5c>
100049c0:	2005883a 	mov	r2,r4
100049c4:	f800283a 	ret
100049c8:	f800283a 	ret
100049cc:	0009883a 	mov	r4,zero
100049d0:	003ffa06 	br	100049bc <__alt_data_end+0xf80049bc>
100049d4:	00c00044 	movi	r3,1
100049d8:	0009883a 	mov	r4,zero
100049dc:	003ff106 	br	100049a4 <__alt_data_end+0xf80049a4>

100049e0 <__divsi3>:
100049e0:	defffe04 	addi	sp,sp,-8
100049e4:	dfc00115 	stw	ra,4(sp)
100049e8:	dc000015 	stw	r16,0(sp)
100049ec:	20000a16 	blt	r4,zero,10004a18 <__divsi3+0x38>
100049f0:	0021883a 	mov	r16,zero
100049f4:	28000b16 	blt	r5,zero,10004a24 <__divsi3+0x44>
100049f8:	000d883a 	mov	r6,zero
100049fc:	000496c0 	call	1000496c <udivmodsi4>
10004a00:	80000126 	beq	r16,zero,10004a08 <__divsi3+0x28>
10004a04:	0085c83a 	sub	r2,zero,r2
10004a08:	dfc00117 	ldw	ra,4(sp)
10004a0c:	dc000017 	ldw	r16,0(sp)
10004a10:	dec00204 	addi	sp,sp,8
10004a14:	f800283a 	ret
10004a18:	0109c83a 	sub	r4,zero,r4
10004a1c:	04000044 	movi	r16,1
10004a20:	283ff50e 	bge	r5,zero,100049f8 <__alt_data_end+0xf80049f8>
10004a24:	014bc83a 	sub	r5,zero,r5
10004a28:	8400005c 	xori	r16,r16,1
10004a2c:	003ff206 	br	100049f8 <__alt_data_end+0xf80049f8>

10004a30 <__modsi3>:
10004a30:	deffff04 	addi	sp,sp,-4
10004a34:	dfc00015 	stw	ra,0(sp)
10004a38:	20000516 	blt	r4,zero,10004a50 <__modsi3+0x20>
10004a3c:	28000c16 	blt	r5,zero,10004a70 <__modsi3+0x40>
10004a40:	01800044 	movi	r6,1
10004a44:	dfc00017 	ldw	ra,0(sp)
10004a48:	dec00104 	addi	sp,sp,4
10004a4c:	000496c1 	jmpi	1000496c <udivmodsi4>
10004a50:	0109c83a 	sub	r4,zero,r4
10004a54:	28000b16 	blt	r5,zero,10004a84 <__modsi3+0x54>
10004a58:	01800044 	movi	r6,1
10004a5c:	000496c0 	call	1000496c <udivmodsi4>
10004a60:	0085c83a 	sub	r2,zero,r2
10004a64:	dfc00017 	ldw	ra,0(sp)
10004a68:	dec00104 	addi	sp,sp,4
10004a6c:	f800283a 	ret
10004a70:	014bc83a 	sub	r5,zero,r5
10004a74:	01800044 	movi	r6,1
10004a78:	dfc00017 	ldw	ra,0(sp)
10004a7c:	dec00104 	addi	sp,sp,4
10004a80:	000496c1 	jmpi	1000496c <udivmodsi4>
10004a84:	014bc83a 	sub	r5,zero,r5
10004a88:	003ff306 	br	10004a58 <__alt_data_end+0xf8004a58>

10004a8c <__udivsi3>:
10004a8c:	000d883a 	mov	r6,zero
10004a90:	000496c1 	jmpi	1000496c <udivmodsi4>

10004a94 <__umodsi3>:
10004a94:	01800044 	movi	r6,1
10004a98:	000496c1 	jmpi	1000496c <udivmodsi4>

10004a9c <__muldi3>:
10004a9c:	defff604 	addi	sp,sp,-40
10004aa0:	dd400515 	stw	r21,20(sp)
10004aa4:	dd000415 	stw	r20,16(sp)
10004aa8:	257fffcc 	andi	r21,r4,65535
10004aac:	353fffcc 	andi	r20,r6,65535
10004ab0:	dcc00315 	stw	r19,12(sp)
10004ab4:	3026d43a 	srli	r19,r6,16
10004ab8:	dd800615 	stw	r22,24(sp)
10004abc:	dc800215 	stw	r18,8(sp)
10004ac0:	dc400115 	stw	r17,4(sp)
10004ac4:	2024d43a 	srli	r18,r4,16
10004ac8:	2023883a 	mov	r17,r4
10004acc:	282d883a 	mov	r22,r5
10004ad0:	a009883a 	mov	r4,r20
10004ad4:	a80b883a 	mov	r5,r21
10004ad8:	dfc00915 	stw	ra,36(sp)
10004adc:	df000815 	stw	fp,32(sp)
10004ae0:	ddc00715 	stw	r23,28(sp)
10004ae4:	3839883a 	mov	fp,r7
10004ae8:	dc000015 	stw	r16,0(sp)
10004aec:	3021883a 	mov	r16,r6
10004af0:	00050500 	call	10005050 <__mulsi3>
10004af4:	a80b883a 	mov	r5,r21
10004af8:	9809883a 	mov	r4,r19
10004afc:	102f883a 	mov	r23,r2
10004b00:	00050500 	call	10005050 <__mulsi3>
10004b04:	a009883a 	mov	r4,r20
10004b08:	900b883a 	mov	r5,r18
10004b0c:	102b883a 	mov	r21,r2
10004b10:	00050500 	call	10005050 <__mulsi3>
10004b14:	9809883a 	mov	r4,r19
10004b18:	900b883a 	mov	r5,r18
10004b1c:	1029883a 	mov	r20,r2
10004b20:	00050500 	call	10005050 <__mulsi3>
10004b24:	1007883a 	mov	r3,r2
10004b28:	b804d43a 	srli	r2,r23,16
10004b2c:	a549883a 	add	r4,r20,r21
10004b30:	2089883a 	add	r4,r4,r2
10004b34:	2500022e 	bgeu	r4,r20,10004b40 <__muldi3+0xa4>
10004b38:	00800074 	movhi	r2,1
10004b3c:	1887883a 	add	r3,r3,r2
10004b40:	200cd43a 	srli	r6,r4,16
10004b44:	2004943a 	slli	r2,r4,16
10004b48:	e00b883a 	mov	r5,fp
10004b4c:	8809883a 	mov	r4,r17
10004b50:	bdffffcc 	andi	r23,r23,65535
10004b54:	19a3883a 	add	r17,r3,r6
10004b58:	15ef883a 	add	r23,r2,r23
10004b5c:	00050500 	call	10005050 <__mulsi3>
10004b60:	8009883a 	mov	r4,r16
10004b64:	b00b883a 	mov	r5,r22
10004b68:	1025883a 	mov	r18,r2
10004b6c:	00050500 	call	10005050 <__mulsi3>
10004b70:	9085883a 	add	r2,r18,r2
10004b74:	1447883a 	add	r3,r2,r17
10004b78:	b805883a 	mov	r2,r23
10004b7c:	dfc00917 	ldw	ra,36(sp)
10004b80:	df000817 	ldw	fp,32(sp)
10004b84:	ddc00717 	ldw	r23,28(sp)
10004b88:	dd800617 	ldw	r22,24(sp)
10004b8c:	dd400517 	ldw	r21,20(sp)
10004b90:	dd000417 	ldw	r20,16(sp)
10004b94:	dcc00317 	ldw	r19,12(sp)
10004b98:	dc800217 	ldw	r18,8(sp)
10004b9c:	dc400117 	ldw	r17,4(sp)
10004ba0:	dc000017 	ldw	r16,0(sp)
10004ba4:	dec00a04 	addi	sp,sp,40
10004ba8:	f800283a 	ret

10004bac <__clzsi2>:
10004bac:	00bfffd4 	movui	r2,65535
10004bb0:	11000b36 	bltu	r2,r4,10004be0 <__clzsi2+0x34>
10004bb4:	00803fc4 	movi	r2,255
10004bb8:	11001e2e 	bgeu	r2,r4,10004c34 <__clzsi2+0x88>
10004bbc:	00c00204 	movi	r3,8
10004bc0:	20c8d83a 	srl	r4,r4,r3
10004bc4:	00c40074 	movhi	r3,4097
10004bc8:	18c16104 	addi	r3,r3,1412
10004bcc:	00800604 	movi	r2,24
10004bd0:	1909883a 	add	r4,r3,r4
10004bd4:	20c00003 	ldbu	r3,0(r4)
10004bd8:	10c5c83a 	sub	r2,r2,r3
10004bdc:	f800283a 	ret
10004be0:	00804034 	movhi	r2,256
10004be4:	10bfffc4 	addi	r2,r2,-1
10004be8:	11000936 	bltu	r2,r4,10004c10 <__clzsi2+0x64>
10004bec:	00800404 	movi	r2,16
10004bf0:	1007883a 	mov	r3,r2
10004bf4:	20c8d83a 	srl	r4,r4,r3
10004bf8:	00c40074 	movhi	r3,4097
10004bfc:	18c16104 	addi	r3,r3,1412
10004c00:	1909883a 	add	r4,r3,r4
10004c04:	20c00003 	ldbu	r3,0(r4)
10004c08:	10c5c83a 	sub	r2,r2,r3
10004c0c:	f800283a 	ret
10004c10:	00c00604 	movi	r3,24
10004c14:	20c8d83a 	srl	r4,r4,r3
10004c18:	00c40074 	movhi	r3,4097
10004c1c:	18c16104 	addi	r3,r3,1412
10004c20:	00800204 	movi	r2,8
10004c24:	1909883a 	add	r4,r3,r4
10004c28:	20c00003 	ldbu	r3,0(r4)
10004c2c:	10c5c83a 	sub	r2,r2,r3
10004c30:	f800283a 	ret
10004c34:	0007883a 	mov	r3,zero
10004c38:	20c8d83a 	srl	r4,r4,r3
10004c3c:	00c40074 	movhi	r3,4097
10004c40:	18c16104 	addi	r3,r3,1412
10004c44:	00800804 	movi	r2,32
10004c48:	1909883a 	add	r4,r3,r4
10004c4c:	20c00003 	ldbu	r3,0(r4)
10004c50:	10c5c83a 	sub	r2,r2,r3
10004c54:	f800283a 	ret

10004c58 <__pack_d>:
10004c58:	20800017 	ldw	r2,0(r4)
10004c5c:	defff804 	addi	sp,sp,-32
10004c60:	dcc00315 	stw	r19,12(sp)
10004c64:	dc800215 	stw	r18,8(sp)
10004c68:	dfc00715 	stw	ra,28(sp)
10004c6c:	dd800615 	stw	r22,24(sp)
10004c70:	dd400515 	stw	r21,20(sp)
10004c74:	dd000415 	stw	r20,16(sp)
10004c78:	dc400115 	stw	r17,4(sp)
10004c7c:	dc000015 	stw	r16,0(sp)
10004c80:	04800044 	movi	r18,1
10004c84:	24400317 	ldw	r17,12(r4)
10004c88:	24000417 	ldw	r16,16(r4)
10004c8c:	24c00117 	ldw	r19,4(r4)
10004c90:	9080422e 	bgeu	r18,r2,10004d9c <__pack_d+0x144>
10004c94:	00c00104 	movi	r3,4
10004c98:	10c03c26 	beq	r2,r3,10004d8c <__pack_d+0x134>
10004c9c:	00c00084 	movi	r3,2
10004ca0:	10c01926 	beq	r2,r3,10004d08 <__pack_d+0xb0>
10004ca4:	8c04b03a 	or	r2,r17,r16
10004ca8:	10001726 	beq	r2,zero,10004d08 <__pack_d+0xb0>
10004cac:	21000217 	ldw	r4,8(r4)
10004cb0:	00bf0084 	movi	r2,-1022
10004cb4:	20804016 	blt	r4,r2,10004db8 <__pack_d+0x160>
10004cb8:	0080ffc4 	movi	r2,1023
10004cbc:	11003316 	blt	r2,r4,10004d8c <__pack_d+0x134>
10004cc0:	88803fcc 	andi	r2,r17,255
10004cc4:	00c02004 	movi	r3,128
10004cc8:	10c02926 	beq	r2,r3,10004d70 <__pack_d+0x118>
10004ccc:	88801fc4 	addi	r2,r17,127
10004cd0:	1463803a 	cmpltu	r17,r2,r17
10004cd4:	8c21883a 	add	r16,r17,r16
10004cd8:	1023883a 	mov	r17,r2
10004cdc:	00880034 	movhi	r2,8192
10004ce0:	10bfffc4 	addi	r2,r2,-1
10004ce4:	14001c36 	bltu	r2,r16,10004d58 <__pack_d+0x100>
10004ce8:	2100ffc4 	addi	r4,r4,1023
10004cec:	8006963a 	slli	r3,r16,24
10004cf0:	8804d23a 	srli	r2,r17,8
10004cf4:	8020913a 	slli	r16,r16,4
10004cf8:	2101ffcc 	andi	r4,r4,2047
10004cfc:	1884b03a 	or	r2,r3,r2
10004d00:	8020d33a 	srli	r16,r16,12
10004d04:	00000306 	br	10004d14 <__pack_d+0xbc>
10004d08:	0009883a 	mov	r4,zero
10004d0c:	0005883a 	mov	r2,zero
10004d10:	0021883a 	mov	r16,zero
10004d14:	2008953a 	slli	r4,r4,20
10004d18:	982697fa 	slli	r19,r19,31
10004d1c:	00c00434 	movhi	r3,16
10004d20:	18ffffc4 	addi	r3,r3,-1
10004d24:	80e0703a 	and	r16,r16,r3
10004d28:	8106b03a 	or	r3,r16,r4
10004d2c:	1cc6b03a 	or	r3,r3,r19
10004d30:	dfc00717 	ldw	ra,28(sp)
10004d34:	dd800617 	ldw	r22,24(sp)
10004d38:	dd400517 	ldw	r21,20(sp)
10004d3c:	dd000417 	ldw	r20,16(sp)
10004d40:	dcc00317 	ldw	r19,12(sp)
10004d44:	dc800217 	ldw	r18,8(sp)
10004d48:	dc400117 	ldw	r17,4(sp)
10004d4c:	dc000017 	ldw	r16,0(sp)
10004d50:	dec00804 	addi	sp,sp,32
10004d54:	f800283a 	ret
10004d58:	800697fa 	slli	r3,r16,31
10004d5c:	8804d07a 	srli	r2,r17,1
10004d60:	21010004 	addi	r4,r4,1024
10004d64:	8020d07a 	srli	r16,r16,1
10004d68:	18a2b03a 	or	r17,r3,r2
10004d6c:	003fdf06 	br	10004cec <__alt_data_end+0xf8004cec>
10004d70:	88c0400c 	andi	r3,r17,256
10004d74:	183fd926 	beq	r3,zero,10004cdc <__alt_data_end+0xf8004cdc>
10004d78:	8885883a 	add	r2,r17,r2
10004d7c:	1463803a 	cmpltu	r17,r2,r17
10004d80:	8c21883a 	add	r16,r17,r16
10004d84:	1023883a 	mov	r17,r2
10004d88:	003fd406 	br	10004cdc <__alt_data_end+0xf8004cdc>
10004d8c:	0101ffc4 	movi	r4,2047
10004d90:	0005883a 	mov	r2,zero
10004d94:	0021883a 	mov	r16,zero
10004d98:	003fde06 	br	10004d14 <__alt_data_end+0xf8004d14>
10004d9c:	84000234 	orhi	r16,r16,8
10004da0:	00c00434 	movhi	r3,16
10004da4:	18ffffc4 	addi	r3,r3,-1
10004da8:	8805883a 	mov	r2,r17
10004dac:	80e0703a 	and	r16,r16,r3
10004db0:	0101ffc4 	movi	r4,2047
10004db4:	003fd706 	br	10004d14 <__alt_data_end+0xf8004d14>
10004db8:	1129c83a 	sub	r20,r2,r4
10004dbc:	00800e04 	movi	r2,56
10004dc0:	15002716 	blt	r2,r20,10004e60 <__pack_d+0x208>
10004dc4:	800b883a 	mov	r5,r16
10004dc8:	a00d883a 	mov	r6,r20
10004dcc:	8809883a 	mov	r4,r17
10004dd0:	00050780 	call	10005078 <__lshrdi3>
10004dd4:	9009883a 	mov	r4,r18
10004dd8:	000b883a 	mov	r5,zero
10004ddc:	a00d883a 	mov	r6,r20
10004de0:	102d883a 	mov	r22,r2
10004de4:	182b883a 	mov	r21,r3
10004de8:	00050bc0 	call	100050bc <__ashldi3>
10004dec:	1009003a 	cmpeq	r4,r2,zero
10004df0:	1907c83a 	sub	r3,r3,r4
10004df4:	10bfffc4 	addi	r2,r2,-1
10004df8:	1c20703a 	and	r16,r3,r16
10004dfc:	1444703a 	and	r2,r2,r17
10004e00:	1404b03a 	or	r2,r2,r16
10004e04:	1004c03a 	cmpne	r2,r2,zero
10004e08:	1584b03a 	or	r2,r2,r22
10004e0c:	11003fcc 	andi	r4,r2,255
10004e10:	01402004 	movi	r5,128
10004e14:	a807883a 	mov	r3,r21
10004e18:	2140131e 	bne	r4,r5,10004e68 <__pack_d+0x210>
10004e1c:	1140400c 	andi	r5,r2,256
10004e20:	28000426 	beq	r5,zero,10004e34 <__pack_d+0x1dc>
10004e24:	1109883a 	add	r4,r2,r4
10004e28:	2085803a 	cmpltu	r2,r4,r2
10004e2c:	1547883a 	add	r3,r2,r21
10004e30:	2005883a 	mov	r2,r4
10004e34:	1808963a 	slli	r4,r3,24
10004e38:	1004d23a 	srli	r2,r2,8
10004e3c:	1820913a 	slli	r16,r3,4
10004e40:	01440034 	movhi	r5,4096
10004e44:	297fffc4 	addi	r5,r5,-1
10004e48:	2084b03a 	or	r2,r4,r2
10004e4c:	8020d33a 	srli	r16,r16,12
10004e50:	01000044 	movi	r4,1
10004e54:	28ffaf36 	bltu	r5,r3,10004d14 <__alt_data_end+0xf8004d14>
10004e58:	0009883a 	mov	r4,zero
10004e5c:	003fad06 	br	10004d14 <__alt_data_end+0xf8004d14>
10004e60:	0005883a 	mov	r2,zero
10004e64:	0007883a 	mov	r3,zero
10004e68:	11001fc4 	addi	r4,r2,127
10004e6c:	2085803a 	cmpltu	r2,r4,r2
10004e70:	10c7883a 	add	r3,r2,r3
10004e74:	2005883a 	mov	r2,r4
10004e78:	003fee06 	br	10004e34 <__alt_data_end+0xf8004e34>

10004e7c <__unpack_d>:
10004e7c:	21800117 	ldw	r6,4(r4)
10004e80:	20c00017 	ldw	r3,0(r4)
10004e84:	3004d7fa 	srli	r2,r6,31
10004e88:	3008d53a 	srli	r4,r6,20
10004e8c:	28800115 	stw	r2,4(r5)
10004e90:	2101ffcc 	andi	r4,r4,2047
10004e94:	00800434 	movhi	r2,16
10004e98:	10bfffc4 	addi	r2,r2,-1
10004e9c:	3084703a 	and	r2,r6,r2
10004ea0:	20001a1e 	bne	r4,zero,10004f0c <__unpack_d+0x90>
10004ea4:	1888b03a 	or	r4,r3,r2
10004ea8:	20002626 	beq	r4,zero,10004f44 <__unpack_d+0xc8>
10004eac:	1808d63a 	srli	r4,r3,24
10004eb0:	1004923a 	slli	r2,r2,8
10004eb4:	01bf0084 	movi	r6,-1022
10004eb8:	29800215 	stw	r6,8(r5)
10004ebc:	2084b03a 	or	r2,r4,r2
10004ec0:	010000c4 	movi	r4,3
10004ec4:	29000015 	stw	r4,0(r5)
10004ec8:	02040034 	movhi	r8,4096
10004ecc:	423fffc4 	addi	r8,r8,-1
10004ed0:	1806923a 	slli	r3,r3,8
10004ed4:	40801836 	bltu	r8,r2,10004f38 <__unpack_d+0xbc>
10004ed8:	013f0044 	movi	r4,-1023
10004edc:	18cd883a 	add	r6,r3,r3
10004ee0:	30c7803a 	cmpltu	r3,r6,r3
10004ee4:	1085883a 	add	r2,r2,r2
10004ee8:	1885883a 	add	r2,r3,r2
10004eec:	200f883a 	mov	r7,r4
10004ef0:	3007883a 	mov	r3,r6
10004ef4:	213fffc4 	addi	r4,r4,-1
10004ef8:	40bff82e 	bgeu	r8,r2,10004edc <__alt_data_end+0xf8004edc>
10004efc:	29c00215 	stw	r7,8(r5)
10004f00:	28c00315 	stw	r3,12(r5)
10004f04:	28800415 	stw	r2,16(r5)
10004f08:	f800283a 	ret
10004f0c:	01c1ffc4 	movi	r7,2047
10004f10:	21c00f26 	beq	r4,r7,10004f50 <__unpack_d+0xd4>
10004f14:	180cd63a 	srli	r6,r3,24
10004f18:	1004923a 	slli	r2,r2,8
10004f1c:	213f0044 	addi	r4,r4,-1023
10004f20:	1806923a 	slli	r3,r3,8
10004f24:	3084b03a 	or	r2,r6,r2
10004f28:	29000215 	stw	r4,8(r5)
10004f2c:	010000c4 	movi	r4,3
10004f30:	10840034 	orhi	r2,r2,4096
10004f34:	29000015 	stw	r4,0(r5)
10004f38:	28c00315 	stw	r3,12(r5)
10004f3c:	28800415 	stw	r2,16(r5)
10004f40:	f800283a 	ret
10004f44:	00800084 	movi	r2,2
10004f48:	28800015 	stw	r2,0(r5)
10004f4c:	f800283a 	ret
10004f50:	1888b03a 	or	r4,r3,r2
10004f54:	20000526 	beq	r4,zero,10004f6c <__unpack_d+0xf0>
10004f58:	3180022c 	andhi	r6,r6,8
10004f5c:	30000626 	beq	r6,zero,10004f78 <__unpack_d+0xfc>
10004f60:	01000044 	movi	r4,1
10004f64:	29000015 	stw	r4,0(r5)
10004f68:	003ff306 	br	10004f38 <__alt_data_end+0xf8004f38>
10004f6c:	00800104 	movi	r2,4
10004f70:	28800015 	stw	r2,0(r5)
10004f74:	f800283a 	ret
10004f78:	28000015 	stw	zero,0(r5)
10004f7c:	003fee06 	br	10004f38 <__alt_data_end+0xf8004f38>

10004f80 <__fpcmp_parts_d>:
10004f80:	20c00017 	ldw	r3,0(r4)
10004f84:	00800044 	movi	r2,1
10004f88:	10c0142e 	bgeu	r2,r3,10004fdc <__fpcmp_parts_d+0x5c>
10004f8c:	29800017 	ldw	r6,0(r5)
10004f90:	1180122e 	bgeu	r2,r6,10004fdc <__fpcmp_parts_d+0x5c>
10004f94:	01c00104 	movi	r7,4
10004f98:	19c02826 	beq	r3,r7,1000503c <__fpcmp_parts_d+0xbc>
10004f9c:	31c00926 	beq	r6,r7,10004fc4 <__fpcmp_parts_d+0x44>
10004fa0:	01c00084 	movi	r7,2
10004fa4:	19c00626 	beq	r3,r7,10004fc0 <__fpcmp_parts_d+0x40>
10004fa8:	31c00a26 	beq	r6,r7,10004fd4 <__fpcmp_parts_d+0x54>
10004fac:	20c00117 	ldw	r3,4(r4)
10004fb0:	29800117 	ldw	r6,4(r5)
10004fb4:	19800b26 	beq	r3,r6,10004fe4 <__fpcmp_parts_d+0x64>
10004fb8:	1800041e 	bne	r3,zero,10004fcc <__fpcmp_parts_d+0x4c>
10004fbc:	f800283a 	ret
10004fc0:	30c01a26 	beq	r6,r3,1000502c <__fpcmp_parts_d+0xac>
10004fc4:	28800117 	ldw	r2,4(r5)
10004fc8:	1000041e 	bne	r2,zero,10004fdc <__fpcmp_parts_d+0x5c>
10004fcc:	00bfffc4 	movi	r2,-1
10004fd0:	f800283a 	ret
10004fd4:	20800117 	ldw	r2,4(r4)
10004fd8:	103ffc1e 	bne	r2,zero,10004fcc <__alt_data_end+0xf8004fcc>
10004fdc:	00800044 	movi	r2,1
10004fe0:	f800283a 	ret
10004fe4:	21c00217 	ldw	r7,8(r4)
10004fe8:	29800217 	ldw	r6,8(r5)
10004fec:	31c0020e 	bge	r6,r7,10004ff8 <__fpcmp_parts_d+0x78>
10004ff0:	183ff61e 	bne	r3,zero,10004fcc <__alt_data_end+0xf8004fcc>
10004ff4:	f800283a 	ret
10004ff8:	39800a16 	blt	r7,r6,10005024 <__fpcmp_parts_d+0xa4>
10004ffc:	20800417 	ldw	r2,16(r4)
10005000:	29800417 	ldw	r6,16(r5)
10005004:	21c00317 	ldw	r7,12(r4)
10005008:	29000317 	ldw	r4,12(r5)
1000500c:	30800936 	bltu	r6,r2,10005034 <__fpcmp_parts_d+0xb4>
10005010:	1180011e 	bne	r2,r6,10005018 <__fpcmp_parts_d+0x98>
10005014:	21c00736 	bltu	r4,r7,10005034 <__fpcmp_parts_d+0xb4>
10005018:	11800236 	bltu	r2,r6,10005024 <__fpcmp_parts_d+0xa4>
1000501c:	3080031e 	bne	r6,r2,1000502c <__fpcmp_parts_d+0xac>
10005020:	3900022e 	bgeu	r7,r4,1000502c <__fpcmp_parts_d+0xac>
10005024:	183fe926 	beq	r3,zero,10004fcc <__alt_data_end+0xf8004fcc>
10005028:	003fec06 	br	10004fdc <__alt_data_end+0xf8004fdc>
1000502c:	0005883a 	mov	r2,zero
10005030:	f800283a 	ret
10005034:	183fe926 	beq	r3,zero,10004fdc <__alt_data_end+0xf8004fdc>
10005038:	003fe406 	br	10004fcc <__alt_data_end+0xf8004fcc>
1000503c:	30ffe51e 	bne	r6,r3,10004fd4 <__alt_data_end+0xf8004fd4>
10005040:	28c00117 	ldw	r3,4(r5)
10005044:	20800117 	ldw	r2,4(r4)
10005048:	1885c83a 	sub	r2,r3,r2
1000504c:	f800283a 	ret

10005050 <__mulsi3>:
10005050:	0005883a 	mov	r2,zero
10005054:	20000726 	beq	r4,zero,10005074 <__mulsi3+0x24>
10005058:	20c0004c 	andi	r3,r4,1
1000505c:	2008d07a 	srli	r4,r4,1
10005060:	18000126 	beq	r3,zero,10005068 <__mulsi3+0x18>
10005064:	1145883a 	add	r2,r2,r5
10005068:	294b883a 	add	r5,r5,r5
1000506c:	203ffa1e 	bne	r4,zero,10005058 <__alt_data_end+0xf8005058>
10005070:	f800283a 	ret
10005074:	f800283a 	ret

10005078 <__lshrdi3>:
10005078:	2005883a 	mov	r2,r4
1000507c:	2807883a 	mov	r3,r5
10005080:	30000826 	beq	r6,zero,100050a4 <__lshrdi3+0x2c>
10005084:	01000804 	movi	r4,32
10005088:	2189c83a 	sub	r4,r4,r6
1000508c:	0100060e 	bge	zero,r4,100050a8 <__lshrdi3+0x30>
10005090:	1184d83a 	srl	r2,r2,r6
10005094:	2908983a 	sll	r4,r5,r4
10005098:	298cd83a 	srl	r6,r5,r6
1000509c:	2084b03a 	or	r2,r4,r2
100050a0:	3007883a 	mov	r3,r6
100050a4:	f800283a 	ret
100050a8:	0105c83a 	sub	r2,zero,r4
100050ac:	000d883a 	mov	r6,zero
100050b0:	2884d83a 	srl	r2,r5,r2
100050b4:	3007883a 	mov	r3,r6
100050b8:	003ffa06 	br	100050a4 <__alt_data_end+0xf80050a4>

100050bc <__ashldi3>:
100050bc:	2005883a 	mov	r2,r4
100050c0:	2807883a 	mov	r3,r5
100050c4:	30000826 	beq	r6,zero,100050e8 <__ashldi3+0x2c>
100050c8:	01000804 	movi	r4,32
100050cc:	2189c83a 	sub	r4,r4,r6
100050d0:	0100060e 	bge	zero,r4,100050ec <__ashldi3+0x30>
100050d4:	1108d83a 	srl	r4,r2,r4
100050d8:	2986983a 	sll	r3,r5,r6
100050dc:	118c983a 	sll	r6,r2,r6
100050e0:	20c6b03a 	or	r3,r4,r3
100050e4:	3005883a 	mov	r2,r6
100050e8:	f800283a 	ret
100050ec:	0107c83a 	sub	r3,zero,r4
100050f0:	000d883a 	mov	r6,zero
100050f4:	10c6983a 	sll	r3,r2,r3
100050f8:	3005883a 	mov	r2,r6
100050fc:	003ffa06 	br	100050e8 <__alt_data_end+0xf80050e8>

10005100 <_printf_r>:
10005100:	defffd04 	addi	sp,sp,-12
10005104:	dfc00015 	stw	ra,0(sp)
10005108:	d9800115 	stw	r6,4(sp)
1000510c:	d9c00215 	stw	r7,8(sp)
10005110:	280d883a 	mov	r6,r5
10005114:	21400217 	ldw	r5,8(r4)
10005118:	d9c00104 	addi	r7,sp,4
1000511c:	00052c00 	call	100052c0 <___vfprintf_internal_r>
10005120:	dfc00017 	ldw	ra,0(sp)
10005124:	dec00304 	addi	sp,sp,12
10005128:	f800283a 	ret

1000512c <printf>:
1000512c:	defffc04 	addi	sp,sp,-16
10005130:	dfc00015 	stw	ra,0(sp)
10005134:	d9400115 	stw	r5,4(sp)
10005138:	d9800215 	stw	r6,8(sp)
1000513c:	d9c00315 	stw	r7,12(sp)
10005140:	00840074 	movhi	r2,4097
10005144:	1088ae04 	addi	r2,r2,8888
10005148:	10800017 	ldw	r2,0(r2)
1000514c:	200b883a 	mov	r5,r4
10005150:	d9800104 	addi	r6,sp,4
10005154:	11000217 	ldw	r4,8(r2)
10005158:	000713c0 	call	1000713c <__vfprintf_internal>
1000515c:	dfc00017 	ldw	ra,0(sp)
10005160:	dec00404 	addi	sp,sp,16
10005164:	f800283a 	ret

10005168 <_puts_r>:
10005168:	defff604 	addi	sp,sp,-40
1000516c:	dc400815 	stw	r17,32(sp)
10005170:	2023883a 	mov	r17,r4
10005174:	2809883a 	mov	r4,r5
10005178:	dc000715 	stw	r16,28(sp)
1000517c:	dfc00915 	stw	ra,36(sp)
10005180:	2821883a 	mov	r16,r5
10005184:	00052000 	call	10005200 <strlen>
10005188:	10c00044 	addi	r3,r2,1
1000518c:	d8800115 	stw	r2,4(sp)
10005190:	89400217 	ldw	r5,8(r17)
10005194:	00840074 	movhi	r2,4097
10005198:	1081a104 	addi	r2,r2,1668
1000519c:	d8800215 	stw	r2,8(sp)
100051a0:	00800044 	movi	r2,1
100051a4:	d8800315 	stw	r2,12(sp)
100051a8:	8809883a 	mov	r4,r17
100051ac:	00800084 	movi	r2,2
100051b0:	d9800404 	addi	r6,sp,16
100051b4:	dc000015 	stw	r16,0(sp)
100051b8:	d8c00615 	stw	r3,24(sp)
100051bc:	dec00415 	stw	sp,16(sp)
100051c0:	d8800515 	stw	r2,20(sp)
100051c4:	000943c0 	call	1000943c <__sfvwrite_r>
100051c8:	1000061e 	bne	r2,zero,100051e4 <_puts_r+0x7c>
100051cc:	00800284 	movi	r2,10
100051d0:	dfc00917 	ldw	ra,36(sp)
100051d4:	dc400817 	ldw	r17,32(sp)
100051d8:	dc000717 	ldw	r16,28(sp)
100051dc:	dec00a04 	addi	sp,sp,40
100051e0:	f800283a 	ret
100051e4:	00bfffc4 	movi	r2,-1
100051e8:	003ff906 	br	100051d0 <__alt_data_end+0xf80051d0>

100051ec <puts>:
100051ec:	00840074 	movhi	r2,4097
100051f0:	1088ae04 	addi	r2,r2,8888
100051f4:	200b883a 	mov	r5,r4
100051f8:	11000017 	ldw	r4,0(r2)
100051fc:	00051681 	jmpi	10005168 <_puts_r>

10005200 <strlen>:
10005200:	208000cc 	andi	r2,r4,3
10005204:	10001f1e 	bne	r2,zero,10005284 <strlen+0x84>
10005208:	20800017 	ldw	r2,0(r4)
1000520c:	01ffbff4 	movhi	r7,65279
10005210:	39ffbfc4 	addi	r7,r7,-257
10005214:	01a02074 	movhi	r6,32897
10005218:	31a02004 	addi	r6,r6,-32640
1000521c:	11c7883a 	add	r3,r2,r7
10005220:	0084303a 	nor	r2,zero,r2
10005224:	1886703a 	and	r3,r3,r2
10005228:	1986703a 	and	r3,r3,r6
1000522c:	2005883a 	mov	r2,r4
10005230:	1800101e 	bne	r3,zero,10005274 <strlen+0x74>
10005234:	10800104 	addi	r2,r2,4
10005238:	10c00017 	ldw	r3,0(r2)
1000523c:	19cb883a 	add	r5,r3,r7
10005240:	00c6303a 	nor	r3,zero,r3
10005244:	28c6703a 	and	r3,r5,r3
10005248:	1986703a 	and	r3,r3,r6
1000524c:	1800091e 	bne	r3,zero,10005274 <strlen+0x74>
10005250:	10800104 	addi	r2,r2,4
10005254:	10c00017 	ldw	r3,0(r2)
10005258:	19cb883a 	add	r5,r3,r7
1000525c:	00c6303a 	nor	r3,zero,r3
10005260:	28c6703a 	and	r3,r5,r3
10005264:	1986703a 	and	r3,r3,r6
10005268:	183ff226 	beq	r3,zero,10005234 <__alt_data_end+0xf8005234>
1000526c:	00000106 	br	10005274 <strlen+0x74>
10005270:	10800044 	addi	r2,r2,1
10005274:	10c00007 	ldb	r3,0(r2)
10005278:	183ffd1e 	bne	r3,zero,10005270 <__alt_data_end+0xf8005270>
1000527c:	1105c83a 	sub	r2,r2,r4
10005280:	f800283a 	ret
10005284:	2005883a 	mov	r2,r4
10005288:	003ffa06 	br	10005274 <__alt_data_end+0xf8005274>

1000528c <__sprint_r>:
1000528c:	30800217 	ldw	r2,8(r6)
10005290:	defffe04 	addi	sp,sp,-8
10005294:	dc000015 	stw	r16,0(sp)
10005298:	dfc00115 	stw	ra,4(sp)
1000529c:	3021883a 	mov	r16,r6
100052a0:	10000226 	beq	r2,zero,100052ac <__sprint_r+0x20>
100052a4:	000943c0 	call	1000943c <__sfvwrite_r>
100052a8:	80000215 	stw	zero,8(r16)
100052ac:	80000115 	stw	zero,4(r16)
100052b0:	dfc00117 	ldw	ra,4(sp)
100052b4:	dc000017 	ldw	r16,0(sp)
100052b8:	dec00204 	addi	sp,sp,8
100052bc:	f800283a 	ret

100052c0 <___vfprintf_internal_r>:
100052c0:	defeb904 	addi	sp,sp,-1308
100052c4:	dc013d15 	stw	r16,1268(sp)
100052c8:	d9013015 	stw	r4,1216(sp)
100052cc:	dfc14615 	stw	ra,1304(sp)
100052d0:	df014515 	stw	fp,1300(sp)
100052d4:	ddc14415 	stw	r23,1296(sp)
100052d8:	dd814315 	stw	r22,1292(sp)
100052dc:	dd414215 	stw	r21,1288(sp)
100052e0:	dd014115 	stw	r20,1284(sp)
100052e4:	dcc14015 	stw	r19,1280(sp)
100052e8:	dc813f15 	stw	r18,1276(sp)
100052ec:	dc413e15 	stw	r17,1272(sp)
100052f0:	d9412915 	stw	r5,1188(sp)
100052f4:	3021883a 	mov	r16,r6
100052f8:	d9c12d15 	stw	r7,1204(sp)
100052fc:	0009b280 	call	10009b28 <_localeconv_r>
10005300:	10800017 	ldw	r2,0(r2)
10005304:	d9013017 	ldw	r4,1216(sp)
10005308:	d8013315 	stw	zero,1228(sp)
1000530c:	d8813715 	stw	r2,1244(sp)
10005310:	d8013415 	stw	zero,1232(sp)
10005314:	20000226 	beq	r4,zero,10005320 <___vfprintf_internal_r+0x60>
10005318:	20800e17 	ldw	r2,56(r4)
1000531c:	10014b26 	beq	r2,zero,1000584c <___vfprintf_internal_r+0x58c>
10005320:	d8c12917 	ldw	r3,1188(sp)
10005324:	1880030b 	ldhu	r2,12(r3)
10005328:	10c0020c 	andi	r3,r2,8
1000532c:	18ffffcc 	andi	r3,r3,65535
10005330:	18e0001c 	xori	r3,r3,32768
10005334:	18e00004 	addi	r3,r3,-32768
10005338:	1800ed26 	beq	r3,zero,100056f0 <___vfprintf_internal_r+0x430>
1000533c:	d9012917 	ldw	r4,1188(sp)
10005340:	20c00417 	ldw	r3,16(r4)
10005344:	1800ea26 	beq	r3,zero,100056f0 <___vfprintf_internal_r+0x430>
10005348:	1100068c 	andi	r4,r2,26
1000534c:	00c00284 	movi	r3,10
10005350:	20c0f026 	beq	r4,r3,10005714 <___vfprintf_internal_r+0x454>
10005354:	d9010dc4 	addi	r4,sp,1079
10005358:	d8810e04 	addi	r2,sp,1080
1000535c:	dc413017 	ldw	r17,1216(sp)
10005360:	d8c00404 	addi	r3,sp,16
10005364:	d9012615 	stw	r4,1176(sp)
10005368:	1109c83a 	sub	r4,r2,r4
1000536c:	d8812715 	stw	r2,1180(sp)
10005370:	d8c11b15 	stw	r3,1132(sp)
10005374:	d8011d15 	stw	zero,1140(sp)
10005378:	d8011c15 	stw	zero,1136(sp)
1000537c:	802b883a 	mov	r21,r16
10005380:	d8013215 	stw	zero,1224(sp)
10005384:	d8013615 	stw	zero,1240(sp)
10005388:	d8013515 	stw	zero,1236(sp)
1000538c:	d8012c15 	stw	zero,1200(sp)
10005390:	1813883a 	mov	r9,r3
10005394:	d9013915 	stw	r4,1252(sp)
10005398:	a8800007 	ldb	r2,0(r21)
1000539c:	1002f326 	beq	r2,zero,10005f6c <___vfprintf_internal_r+0xcac>
100053a0:	00c00944 	movi	r3,37
100053a4:	a825883a 	mov	r18,r21
100053a8:	10c0021e 	bne	r2,r3,100053b4 <___vfprintf_internal_r+0xf4>
100053ac:	00001406 	br	10005400 <___vfprintf_internal_r+0x140>
100053b0:	10c00326 	beq	r2,r3,100053c0 <___vfprintf_internal_r+0x100>
100053b4:	94800044 	addi	r18,r18,1
100053b8:	90800007 	ldb	r2,0(r18)
100053bc:	103ffc1e 	bne	r2,zero,100053b0 <__alt_data_end+0xf80053b0>
100053c0:	9561c83a 	sub	r16,r18,r21
100053c4:	80000e26 	beq	r16,zero,10005400 <___vfprintf_internal_r+0x140>
100053c8:	da011d17 	ldw	r8,1140(sp)
100053cc:	d8c11c17 	ldw	r3,1136(sp)
100053d0:	4d400015 	stw	r21,0(r9)
100053d4:	4c000115 	stw	r16,4(r9)
100053d8:	4411883a 	add	r8,r8,r16
100053dc:	18c00044 	addi	r3,r3,1
100053e0:	da011d15 	stw	r8,1140(sp)
100053e4:	d8c11c15 	stw	r3,1136(sp)
100053e8:	008001c4 	movi	r2,7
100053ec:	10c11016 	blt	r2,r3,10005830 <___vfprintf_internal_r+0x570>
100053f0:	4a400204 	addi	r9,r9,8
100053f4:	d8812c17 	ldw	r2,1200(sp)
100053f8:	1405883a 	add	r2,r2,r16
100053fc:	d8812c15 	stw	r2,1200(sp)
10005400:	90800007 	ldb	r2,0(r18)
10005404:	1000ee26 	beq	r2,zero,100057c0 <___vfprintf_internal_r+0x500>
10005408:	95400044 	addi	r21,r18,1
1000540c:	94800047 	ldb	r18,1(r18)
10005410:	073fffc4 	movi	fp,-1
10005414:	e007883a 	mov	r3,fp
10005418:	d8012585 	stb	zero,1174(sp)
1000541c:	d8012e15 	stw	zero,1208(sp)
10005420:	0021883a 	mov	r16,zero
10005424:	05001604 	movi	r20,88
10005428:	04c00244 	movi	r19,9
1000542c:	4839883a 	mov	fp,r9
10005430:	ad400044 	addi	r21,r21,1
10005434:	90bff804 	addi	r2,r18,-32
10005438:	a080462e 	bgeu	r20,r2,10005554 <___vfprintf_internal_r+0x294>
1000543c:	e013883a 	mov	r9,fp
10005440:	9000df26 	beq	r18,zero,100057c0 <___vfprintf_internal_r+0x500>
10005444:	00c00044 	movi	r3,1
10005448:	d8c12815 	stw	r3,1184(sp)
1000544c:	dc810405 	stb	r18,1040(sp)
10005450:	d8012585 	stb	zero,1174(sp)
10005454:	d8c12b15 	stw	r3,1196(sp)
10005458:	dcc10404 	addi	r19,sp,1040
1000545c:	d8013115 	stw	zero,1220(sp)
10005460:	80c0008c 	andi	r3,r16,2
10005464:	d8c12a15 	stw	r3,1192(sp)
10005468:	18000326 	beq	r3,zero,10005478 <___vfprintf_internal_r+0x1b8>
1000546c:	d8c12817 	ldw	r3,1184(sp)
10005470:	18c00084 	addi	r3,r3,2
10005474:	d8c12815 	stw	r3,1184(sp)
10005478:	80c0210c 	andi	r3,r16,132
1000547c:	d8c12f15 	stw	r3,1212(sp)
10005480:	1802251e 	bne	r3,zero,10005d18 <___vfprintf_internal_r+0xa58>
10005484:	d9012e17 	ldw	r4,1208(sp)
10005488:	d8c12817 	ldw	r3,1184(sp)
1000548c:	20edc83a 	sub	r22,r4,r3
10005490:	0582210e 	bge	zero,r22,10005d18 <___vfprintf_internal_r+0xa58>
10005494:	02800404 	movi	r10,16
10005498:	da011d17 	ldw	r8,1140(sp)
1000549c:	d8c11c17 	ldw	r3,1136(sp)
100054a0:	05c40074 	movhi	r23,4097
100054a4:	bdc1b284 	addi	r23,r23,1738
100054a8:	5580200e 	bge	r10,r22,1000552c <___vfprintf_internal_r+0x26c>
100054ac:	dc813815 	stw	r18,1248(sp)
100054b0:	5039883a 	mov	fp,r10
100054b4:	b825883a 	mov	r18,r23
100054b8:	050001c4 	movi	r20,7
100054bc:	b02f883a 	mov	r23,r22
100054c0:	802d883a 	mov	r22,r16
100054c4:	dc012917 	ldw	r16,1188(sp)
100054c8:	00000306 	br	100054d8 <___vfprintf_internal_r+0x218>
100054cc:	bdfffc04 	addi	r23,r23,-16
100054d0:	4a400204 	addi	r9,r9,8
100054d4:	e5c0110e 	bge	fp,r23,1000551c <___vfprintf_internal_r+0x25c>
100054d8:	4c800015 	stw	r18,0(r9)
100054dc:	4f000115 	stw	fp,4(r9)
100054e0:	42000404 	addi	r8,r8,16
100054e4:	18c00044 	addi	r3,r3,1
100054e8:	da011d15 	stw	r8,1140(sp)
100054ec:	d8c11c15 	stw	r3,1136(sp)
100054f0:	a0fff60e 	bge	r20,r3,100054cc <__alt_data_end+0xf80054cc>
100054f4:	8809883a 	mov	r4,r17
100054f8:	800b883a 	mov	r5,r16
100054fc:	d9811b04 	addi	r6,sp,1132
10005500:	000528c0 	call	1000528c <__sprint_r>
10005504:	1000b41e 	bne	r2,zero,100057d8 <___vfprintf_internal_r+0x518>
10005508:	bdfffc04 	addi	r23,r23,-16
1000550c:	da011d17 	ldw	r8,1140(sp)
10005510:	d8c11c17 	ldw	r3,1136(sp)
10005514:	da400404 	addi	r9,sp,16
10005518:	e5ffef16 	blt	fp,r23,100054d8 <__alt_data_end+0xf80054d8>
1000551c:	b021883a 	mov	r16,r22
10005520:	b82d883a 	mov	r22,r23
10005524:	902f883a 	mov	r23,r18
10005528:	dc813817 	ldw	r18,1248(sp)
1000552c:	4dc00015 	stw	r23,0(r9)
10005530:	4d800115 	stw	r22,4(r9)
10005534:	4591883a 	add	r8,r8,r22
10005538:	18c00044 	addi	r3,r3,1
1000553c:	da011d15 	stw	r8,1140(sp)
10005540:	d8c11c15 	stw	r3,1136(sp)
10005544:	008001c4 	movi	r2,7
10005548:	10c3fe16 	blt	r2,r3,10006544 <___vfprintf_internal_r+0x1284>
1000554c:	4a400204 	addi	r9,r9,8
10005550:	0001f306 	br	10005d20 <___vfprintf_internal_r+0xa60>
10005554:	1085883a 	add	r2,r2,r2
10005558:	1085883a 	add	r2,r2,r2
1000555c:	01040034 	movhi	r4,4096
10005560:	21155c04 	addi	r4,r4,21872
10005564:	1105883a 	add	r2,r2,r4
10005568:	10800017 	ldw	r2,0(r2)
1000556c:	1000683a 	jmp	r2
10005570:	10005c4c 	andi	zero,r2,369
10005574:	1000543c 	xorhi	zero,r2,336
10005578:	1000543c 	xorhi	zero,r2,336
1000557c:	10005c64 	muli	zero,r2,369
10005580:	1000543c 	xorhi	zero,r2,336
10005584:	1000543c 	xorhi	zero,r2,336
10005588:	1000543c 	xorhi	zero,r2,336
1000558c:	1000543c 	xorhi	zero,r2,336
10005590:	1000543c 	xorhi	zero,r2,336
10005594:	1000543c 	xorhi	zero,r2,336
10005598:	10005b1c 	xori	zero,r2,364
1000559c:	10005cb0 	cmpltui	zero,r2,370
100055a0:	1000543c 	xorhi	zero,r2,336
100055a4:	100056e4 	muli	zero,r2,347
100055a8:	10005a84 	addi	zero,r2,362
100055ac:	1000543c 	xorhi	zero,r2,336
100055b0:	10005c70 	cmpltui	zero,r2,369
100055b4:	10005c7c 	xorhi	zero,r2,369
100055b8:	10005c7c 	xorhi	zero,r2,369
100055bc:	10005c7c 	xorhi	zero,r2,369
100055c0:	10005c7c 	xorhi	zero,r2,369
100055c4:	10005c7c 	xorhi	zero,r2,369
100055c8:	10005c7c 	xorhi	zero,r2,369
100055cc:	10005c7c 	xorhi	zero,r2,369
100055d0:	10005c7c 	xorhi	zero,r2,369
100055d4:	10005c7c 	xorhi	zero,r2,369
100055d8:	1000543c 	xorhi	zero,r2,336
100055dc:	1000543c 	xorhi	zero,r2,336
100055e0:	1000543c 	xorhi	zero,r2,336
100055e4:	1000543c 	xorhi	zero,r2,336
100055e8:	1000543c 	xorhi	zero,r2,336
100055ec:	1000543c 	xorhi	zero,r2,336
100055f0:	1000543c 	xorhi	zero,r2,336
100055f4:	1000543c 	xorhi	zero,r2,336
100055f8:	1000543c 	xorhi	zero,r2,336
100055fc:	1000543c 	xorhi	zero,r2,336
10005600:	10005854 	ori	zero,r2,353
10005604:	10005914 	ori	zero,r2,356
10005608:	1000543c 	xorhi	zero,r2,336
1000560c:	10005914 	ori	zero,r2,356
10005610:	1000543c 	xorhi	zero,r2,336
10005614:	1000543c 	xorhi	zero,r2,336
10005618:	1000543c 	xorhi	zero,r2,336
1000561c:	1000543c 	xorhi	zero,r2,336
10005620:	100059a8 	cmpgeui	zero,r2,358
10005624:	1000543c 	xorhi	zero,r2,336
10005628:	1000543c 	xorhi	zero,r2,336
1000562c:	100059b4 	orhi	zero,r2,358
10005630:	1000543c 	xorhi	zero,r2,336
10005634:	1000543c 	xorhi	zero,r2,336
10005638:	1000543c 	xorhi	zero,r2,336
1000563c:	1000543c 	xorhi	zero,r2,336
10005640:	1000543c 	xorhi	zero,r2,336
10005644:	100059ec 	andhi	zero,r2,359
10005648:	1000543c 	xorhi	zero,r2,336
1000564c:	1000543c 	xorhi	zero,r2,336
10005650:	10005a28 	cmpgeui	zero,r2,360
10005654:	1000543c 	xorhi	zero,r2,336
10005658:	1000543c 	xorhi	zero,r2,336
1000565c:	1000543c 	xorhi	zero,r2,336
10005660:	1000543c 	xorhi	zero,r2,336
10005664:	1000543c 	xorhi	zero,r2,336
10005668:	1000543c 	xorhi	zero,r2,336
1000566c:	1000543c 	xorhi	zero,r2,336
10005670:	1000543c 	xorhi	zero,r2,336
10005674:	1000543c 	xorhi	zero,r2,336
10005678:	1000543c 	xorhi	zero,r2,336
1000567c:	10005cc0 	call	110005cc <_gp+0xfe6318>
10005680:	10005cf4 	orhi	zero,r2,371
10005684:	10005914 	ori	zero,r2,356
10005688:	10005914 	ori	zero,r2,356
1000568c:	10005914 	ori	zero,r2,356
10005690:	10005c40 	call	110005c4 <_gp+0xfe6310>
10005694:	10005cf4 	orhi	zero,r2,371
10005698:	1000543c 	xorhi	zero,r2,336
1000569c:	1000543c 	xorhi	zero,r2,336
100056a0:	10005acc 	andi	zero,r2,363
100056a4:	1000543c 	xorhi	zero,r2,336
100056a8:	10005ae4 	muli	zero,r2,363
100056ac:	10005d00 	call	110005d0 <_gp+0xfe631c>
100056b0:	10005b44 	addi	zero,r2,365
100056b4:	10005b94 	ori	zero,r2,366
100056b8:	1000543c 	xorhi	zero,r2,336
100056bc:	10005ba0 	cmpeqi	zero,r2,366
100056c0:	1000543c 	xorhi	zero,r2,336
100056c4:	10005d0c 	andi	zero,r2,372
100056c8:	1000543c 	xorhi	zero,r2,336
100056cc:	1000543c 	xorhi	zero,r2,336
100056d0:	10005c04 	addi	zero,r2,368
100056d4:	d9012e17 	ldw	r4,1208(sp)
100056d8:	d8812d15 	stw	r2,1204(sp)
100056dc:	0109c83a 	sub	r4,zero,r4
100056e0:	d9012e15 	stw	r4,1208(sp)
100056e4:	84000114 	ori	r16,r16,4
100056e8:	ac800007 	ldb	r18,0(r21)
100056ec:	003f5006 	br	10005430 <__alt_data_end+0xf8005430>
100056f0:	d9013017 	ldw	r4,1216(sp)
100056f4:	d9412917 	ldw	r5,1188(sp)
100056f8:	00071600 	call	10007160 <__swsetup_r>
100056fc:	10003d1e 	bne	r2,zero,100057f4 <___vfprintf_internal_r+0x534>
10005700:	d8c12917 	ldw	r3,1188(sp)
10005704:	1880030b 	ldhu	r2,12(r3)
10005708:	00c00284 	movi	r3,10
1000570c:	1100068c 	andi	r4,r2,26
10005710:	20ff101e 	bne	r4,r3,10005354 <__alt_data_end+0xf8005354>
10005714:	d9012917 	ldw	r4,1188(sp)
10005718:	20c0038b 	ldhu	r3,14(r4)
1000571c:	193fffcc 	andi	r4,r3,65535
10005720:	2120001c 	xori	r4,r4,32768
10005724:	21200004 	addi	r4,r4,-32768
10005728:	203f0a16 	blt	r4,zero,10005354 <__alt_data_end+0xf8005354>
1000572c:	d9012917 	ldw	r4,1188(sp)
10005730:	d9c12d17 	ldw	r7,1204(sp)
10005734:	10bfff4c 	andi	r2,r2,65533
10005738:	22800717 	ldw	r10,28(r4)
1000573c:	22400917 	ldw	r9,36(r4)
10005740:	d9013017 	ldw	r4,1216(sp)
10005744:	02010004 	movi	r8,1024
10005748:	d881070d 	sth	r2,1052(sp)
1000574c:	d9410404 	addi	r5,sp,1040
10005750:	d8800404 	addi	r2,sp,16
10005754:	800d883a 	mov	r6,r16
10005758:	d8c1078d 	sth	r3,1054(sp)
1000575c:	da810b15 	stw	r10,1068(sp)
10005760:	da410d15 	stw	r9,1076(sp)
10005764:	d8810415 	stw	r2,1040(sp)
10005768:	d8810815 	stw	r2,1056(sp)
1000576c:	da010615 	stw	r8,1048(sp)
10005770:	da010915 	stw	r8,1060(sp)
10005774:	d8010a15 	stw	zero,1064(sp)
10005778:	00052c00 	call	100052c0 <___vfprintf_internal_r>
1000577c:	d8812c15 	stw	r2,1200(sp)
10005780:	10000416 	blt	r2,zero,10005794 <___vfprintf_internal_r+0x4d4>
10005784:	d9013017 	ldw	r4,1216(sp)
10005788:	d9410404 	addi	r5,sp,1040
1000578c:	0008b2c0 	call	10008b2c <_fflush_r>
10005790:	1006501e 	bne	r2,zero,100070d4 <___vfprintf_internal_r+0x1e14>
10005794:	d881070b 	ldhu	r2,1052(sp)
10005798:	1080100c 	andi	r2,r2,64
1000579c:	10bfffcc 	andi	r2,r2,65535
100057a0:	10a0001c 	xori	r2,r2,32768
100057a4:	10a00004 	addi	r2,r2,-32768
100057a8:	10001426 	beq	r2,zero,100057fc <___vfprintf_internal_r+0x53c>
100057ac:	d8c12917 	ldw	r3,1188(sp)
100057b0:	1880030b 	ldhu	r2,12(r3)
100057b4:	10801014 	ori	r2,r2,64
100057b8:	1880030d 	sth	r2,12(r3)
100057bc:	00000f06 	br	100057fc <___vfprintf_internal_r+0x53c>
100057c0:	d8811d17 	ldw	r2,1140(sp)
100057c4:	10000426 	beq	r2,zero,100057d8 <___vfprintf_internal_r+0x518>
100057c8:	d9013017 	ldw	r4,1216(sp)
100057cc:	d9412917 	ldw	r5,1188(sp)
100057d0:	d9811b04 	addi	r6,sp,1132
100057d4:	000528c0 	call	1000528c <__sprint_r>
100057d8:	d8c12917 	ldw	r3,1188(sp)
100057dc:	1880030b 	ldhu	r2,12(r3)
100057e0:	1080100c 	andi	r2,r2,64
100057e4:	10bfffcc 	andi	r2,r2,65535
100057e8:	10a0001c 	xori	r2,r2,32768
100057ec:	10a00004 	addi	r2,r2,-32768
100057f0:	10000226 	beq	r2,zero,100057fc <___vfprintf_internal_r+0x53c>
100057f4:	00bfffc4 	movi	r2,-1
100057f8:	d8812c15 	stw	r2,1200(sp)
100057fc:	d8812c17 	ldw	r2,1200(sp)
10005800:	dfc14617 	ldw	ra,1304(sp)
10005804:	df014517 	ldw	fp,1300(sp)
10005808:	ddc14417 	ldw	r23,1296(sp)
1000580c:	dd814317 	ldw	r22,1292(sp)
10005810:	dd414217 	ldw	r21,1288(sp)
10005814:	dd014117 	ldw	r20,1284(sp)
10005818:	dcc14017 	ldw	r19,1280(sp)
1000581c:	dc813f17 	ldw	r18,1276(sp)
10005820:	dc413e17 	ldw	r17,1272(sp)
10005824:	dc013d17 	ldw	r16,1268(sp)
10005828:	dec14704 	addi	sp,sp,1308
1000582c:	f800283a 	ret
10005830:	d9412917 	ldw	r5,1188(sp)
10005834:	8809883a 	mov	r4,r17
10005838:	d9811b04 	addi	r6,sp,1132
1000583c:	000528c0 	call	1000528c <__sprint_r>
10005840:	103fe51e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10005844:	da400404 	addi	r9,sp,16
10005848:	003eea06 	br	100053f4 <__alt_data_end+0xf80053f4>
1000584c:	0008de80 	call	10008de8 <__sinit>
10005850:	003eb306 	br	10005320 <__alt_data_end+0xf8005320>
10005854:	e013883a 	mov	r9,fp
10005858:	84000414 	ori	r16,r16,16
1000585c:	1839883a 	mov	fp,r3
10005860:	8080080c 	andi	r2,r16,32
10005864:	10034426 	beq	r2,zero,10006578 <___vfprintf_internal_r+0x12b8>
10005868:	d8c12d17 	ldw	r3,1204(sp)
1000586c:	18800117 	ldw	r2,4(r3)
10005870:	1dc00017 	ldw	r23,0(r3)
10005874:	18c00204 	addi	r3,r3,8
10005878:	d8c12d15 	stw	r3,1204(sp)
1000587c:	102d883a 	mov	r22,r2
10005880:	1003020e 	bge	r2,zero,1000648c <___vfprintf_internal_r+0x11cc>
10005884:	05efc83a 	sub	r23,zero,r23
10005888:	b804c03a 	cmpne	r2,r23,zero
1000588c:	05adc83a 	sub	r22,zero,r22
10005890:	b0adc83a 	sub	r22,r22,r2
10005894:	00800b44 	movi	r2,45
10005898:	d8812585 	stb	r2,1174(sp)
1000589c:	00c00044 	movi	r3,1
100058a0:	bd84b03a 	or	r2,r23,r22
100058a4:	e0000216 	blt	fp,zero,100058b0 <___vfprintf_internal_r+0x5f0>
100058a8:	013fdfc4 	movi	r4,-129
100058ac:	8120703a 	and	r16,r16,r4
100058b0:	1001cc1e 	bne	r2,zero,10005fe4 <___vfprintf_internal_r+0xd24>
100058b4:	e001cb1e 	bne	fp,zero,10005fe4 <___vfprintf_internal_r+0xd24>
100058b8:	18c03fcc 	andi	r3,r3,255
100058bc:	1802ca1e 	bne	r3,zero,100063e8 <___vfprintf_internal_r+0x1128>
100058c0:	8080004c 	andi	r2,r16,1
100058c4:	1002c826 	beq	r2,zero,100063e8 <___vfprintf_internal_r+0x1128>
100058c8:	d8c13917 	ldw	r3,1252(sp)
100058cc:	00800c04 	movi	r2,48
100058d0:	d8810dc5 	stb	r2,1079(sp)
100058d4:	d8c12b15 	stw	r3,1196(sp)
100058d8:	dcc10dc4 	addi	r19,sp,1079
100058dc:	d8812b17 	ldw	r2,1196(sp)
100058e0:	d8812815 	stw	r2,1184(sp)
100058e4:	1700010e 	bge	r2,fp,100058ec <___vfprintf_internal_r+0x62c>
100058e8:	df012815 	stw	fp,1184(sp)
100058ec:	d8812583 	ldbu	r2,1174(sp)
100058f0:	df013115 	stw	fp,1220(sp)
100058f4:	10803fcc 	andi	r2,r2,255
100058f8:	1080201c 	xori	r2,r2,128
100058fc:	10bfe004 	addi	r2,r2,-128
10005900:	103ed726 	beq	r2,zero,10005460 <__alt_data_end+0xf8005460>
10005904:	d8c12817 	ldw	r3,1184(sp)
10005908:	18c00044 	addi	r3,r3,1
1000590c:	d8c12815 	stw	r3,1184(sp)
10005910:	003ed306 	br	10005460 <__alt_data_end+0xf8005460>
10005914:	8080020c 	andi	r2,r16,8
10005918:	e013883a 	mov	r9,fp
1000591c:	1839883a 	mov	fp,r3
10005920:	1003a626 	beq	r2,zero,100067bc <___vfprintf_internal_r+0x14fc>
10005924:	d9012d17 	ldw	r4,1204(sp)
10005928:	25800017 	ldw	r22,0(r4)
1000592c:	25000117 	ldw	r20,4(r4)
10005930:	21000204 	addi	r4,r4,8
10005934:	d9012d15 	stw	r4,1204(sp)
10005938:	dd813315 	stw	r22,1228(sp)
1000593c:	dd013415 	stw	r20,1232(sp)
10005940:	b009883a 	mov	r4,r22
10005944:	a00b883a 	mov	r5,r20
10005948:	da413c15 	stw	r9,1264(sp)
1000594c:	000bf740 	call	1000bf74 <__isinfd>
10005950:	da413c17 	ldw	r9,1264(sp)
10005954:	b009883a 	mov	r4,r22
10005958:	a00b883a 	mov	r5,r20
1000595c:	10041d26 	beq	r2,zero,100069d4 <___vfprintf_internal_r+0x1714>
10005960:	000d883a 	mov	r6,zero
10005964:	000f883a 	mov	r7,zero
10005968:	000d4440 	call	1000d444 <__ltdf2>
1000596c:	da413c17 	ldw	r9,1264(sp)
10005970:	1004da16 	blt	r2,zero,10006cdc <___vfprintf_internal_r+0x1a1c>
10005974:	d8812583 	ldbu	r2,1174(sp)
10005978:	00c011c4 	movi	r3,71
1000597c:	1c83d116 	blt	r3,r18,100068c4 <___vfprintf_internal_r+0x1604>
10005980:	04c40074 	movhi	r19,4097
10005984:	9cc1a204 	addi	r19,r19,1672
10005988:	00c000c4 	movi	r3,3
1000598c:	d8c12815 	stw	r3,1184(sp)
10005990:	00ffdfc4 	movi	r3,-129
10005994:	80e0703a 	and	r16,r16,r3
10005998:	d8c12817 	ldw	r3,1184(sp)
1000599c:	d8013115 	stw	zero,1220(sp)
100059a0:	d8c12b15 	stw	r3,1196(sp)
100059a4:	003fd306 	br	100058f4 <__alt_data_end+0xf80058f4>
100059a8:	84000214 	ori	r16,r16,8
100059ac:	ac800007 	ldb	r18,0(r21)
100059b0:	003e9f06 	br	10005430 <__alt_data_end+0xf8005430>
100059b4:	e013883a 	mov	r9,fp
100059b8:	84000414 	ori	r16,r16,16
100059bc:	1839883a 	mov	fp,r3
100059c0:	8080080c 	andi	r2,r16,32
100059c4:	10031d26 	beq	r2,zero,1000663c <___vfprintf_internal_r+0x137c>
100059c8:	d8812d17 	ldw	r2,1204(sp)
100059cc:	0007883a 	mov	r3,zero
100059d0:	15c00017 	ldw	r23,0(r2)
100059d4:	15800117 	ldw	r22,4(r2)
100059d8:	10800204 	addi	r2,r2,8
100059dc:	d8812d15 	stw	r2,1204(sp)
100059e0:	d8012585 	stb	zero,1174(sp)
100059e4:	bd84b03a 	or	r2,r23,r22
100059e8:	003fae06 	br	100058a4 <__alt_data_end+0xf80058a4>
100059ec:	e013883a 	mov	r9,fp
100059f0:	84000414 	ori	r16,r16,16
100059f4:	1839883a 	mov	fp,r3
100059f8:	8080080c 	andi	r2,r16,32
100059fc:	1002e726 	beq	r2,zero,1000659c <___vfprintf_internal_r+0x12dc>
10005a00:	d8c12d17 	ldw	r3,1204(sp)
10005a04:	d9012d17 	ldw	r4,1204(sp)
10005a08:	1dc00017 	ldw	r23,0(r3)
10005a0c:	1d800117 	ldw	r22,4(r3)
10005a10:	21000204 	addi	r4,r4,8
10005a14:	00c00044 	movi	r3,1
10005a18:	d9012d15 	stw	r4,1204(sp)
10005a1c:	bd84b03a 	or	r2,r23,r22
10005a20:	d8012585 	stb	zero,1174(sp)
10005a24:	003f9f06 	br	100058a4 <__alt_data_end+0xf80058a4>
10005a28:	e013883a 	mov	r9,fp
10005a2c:	1839883a 	mov	fp,r3
10005a30:	00c40074 	movhi	r3,4097
10005a34:	18c1a604 	addi	r3,r3,1688
10005a38:	d8c13615 	stw	r3,1240(sp)
10005a3c:	8080080c 	andi	r2,r16,32
10005a40:	10007726 	beq	r2,zero,10005c20 <___vfprintf_internal_r+0x960>
10005a44:	d9012d17 	ldw	r4,1204(sp)
10005a48:	25c00017 	ldw	r23,0(r4)
10005a4c:	25800117 	ldw	r22,4(r4)
10005a50:	21000204 	addi	r4,r4,8
10005a54:	d9012d15 	stw	r4,1204(sp)
10005a58:	8080004c 	andi	r2,r16,1
10005a5c:	1002c226 	beq	r2,zero,10006568 <___vfprintf_internal_r+0x12a8>
10005a60:	bd84b03a 	or	r2,r23,r22
10005a64:	10035d26 	beq	r2,zero,100067dc <___vfprintf_internal_r+0x151c>
10005a68:	00c00c04 	movi	r3,48
10005a6c:	d8c12505 	stb	r3,1172(sp)
10005a70:	dc812545 	stb	r18,1173(sp)
10005a74:	84000094 	ori	r16,r16,2
10005a78:	00c00084 	movi	r3,2
10005a7c:	d8012585 	stb	zero,1174(sp)
10005a80:	003f8806 	br	100058a4 <__alt_data_end+0xf80058a4>
10005a84:	ac800007 	ldb	r18,0(r21)
10005a88:	00c00a84 	movi	r3,42
10005a8c:	adc00044 	addi	r23,r21,1
10005a90:	90c57526 	beq	r18,r3,10007068 <___vfprintf_internal_r+0x1da8>
10005a94:	95bff404 	addi	r22,r18,-48
10005a98:	0009883a 	mov	r4,zero
10005a9c:	9d84ff36 	bltu	r19,r22,10006e9c <___vfprintf_internal_r+0x1bdc>
10005aa0:	01400284 	movi	r5,10
10005aa4:	00050500 	call	10005050 <__mulsi3>
10005aa8:	bc800007 	ldb	r18,0(r23)
10005aac:	b089883a 	add	r4,r22,r2
10005ab0:	bdc00044 	addi	r23,r23,1
10005ab4:	95bff404 	addi	r22,r18,-48
10005ab8:	9dbff92e 	bgeu	r19,r22,10005aa0 <__alt_data_end+0xf8005aa0>
10005abc:	2007883a 	mov	r3,r4
10005ac0:	20044316 	blt	r4,zero,10006bd0 <___vfprintf_internal_r+0x1910>
10005ac4:	b82b883a 	mov	r21,r23
10005ac8:	003e5a06 	br	10005434 <__alt_data_end+0xf8005434>
10005acc:	ac800007 	ldb	r18,0(r21)
10005ad0:	01001b04 	movi	r4,108
10005ad4:	a805883a 	mov	r2,r21
10005ad8:	91045526 	beq	r18,r4,10006c30 <___vfprintf_internal_r+0x1970>
10005adc:	84000414 	ori	r16,r16,16
10005ae0:	003e5306 	br	10005430 <__alt_data_end+0xf8005430>
10005ae4:	8080080c 	andi	r2,r16,32
10005ae8:	e013883a 	mov	r9,fp
10005aec:	10034026 	beq	r2,zero,100067f0 <___vfprintf_internal_r+0x1530>
10005af0:	d9012d17 	ldw	r4,1204(sp)
10005af4:	20800017 	ldw	r2,0(r4)
10005af8:	d9012c17 	ldw	r4,1200(sp)
10005afc:	2007d7fa 	srai	r3,r4,31
10005b00:	d9012d17 	ldw	r4,1204(sp)
10005b04:	10c00115 	stw	r3,4(r2)
10005b08:	21000104 	addi	r4,r4,4
10005b0c:	d9012d15 	stw	r4,1204(sp)
10005b10:	d9012c17 	ldw	r4,1200(sp)
10005b14:	11000015 	stw	r4,0(r2)
10005b18:	003e1f06 	br	10005398 <__alt_data_end+0xf8005398>
10005b1c:	d9012d17 	ldw	r4,1204(sp)
10005b20:	21000017 	ldw	r4,0(r4)
10005b24:	d9012e15 	stw	r4,1208(sp)
10005b28:	d9012d17 	ldw	r4,1204(sp)
10005b2c:	20800104 	addi	r2,r4,4
10005b30:	d9012e17 	ldw	r4,1208(sp)
10005b34:	203ee716 	blt	r4,zero,100056d4 <__alt_data_end+0xf80056d4>
10005b38:	d8812d15 	stw	r2,1204(sp)
10005b3c:	ac800007 	ldb	r18,0(r21)
10005b40:	003e3b06 	br	10005430 <__alt_data_end+0xf8005430>
10005b44:	e013883a 	mov	r9,fp
10005b48:	1839883a 	mov	fp,r3
10005b4c:	d8c12d17 	ldw	r3,1204(sp)
10005b50:	00800c04 	movi	r2,48
10005b54:	01040074 	movhi	r4,4097
10005b58:	2101ab04 	addi	r4,r4,1708
10005b5c:	1dc00017 	ldw	r23,0(r3)
10005b60:	18c00104 	addi	r3,r3,4
10005b64:	d8812505 	stb	r2,1172(sp)
10005b68:	00801e04 	movi	r2,120
10005b6c:	d8812545 	stb	r2,1173(sp)
10005b70:	d8c12d15 	stw	r3,1204(sp)
10005b74:	002d883a 	mov	r22,zero
10005b78:	84000094 	ori	r16,r16,2
10005b7c:	d9013615 	stw	r4,1240(sp)
10005b80:	00c00084 	movi	r3,2
10005b84:	04801e04 	movi	r18,120
10005b88:	b805883a 	mov	r2,r23
10005b8c:	d8012585 	stb	zero,1174(sp)
10005b90:	003f4406 	br	100058a4 <__alt_data_end+0xf80058a4>
10005b94:	84000814 	ori	r16,r16,32
10005b98:	ac800007 	ldb	r18,0(r21)
10005b9c:	003e2406 	br	10005430 <__alt_data_end+0xf8005430>
10005ba0:	d8812d17 	ldw	r2,1204(sp)
10005ba4:	d8012585 	stb	zero,1174(sp)
10005ba8:	e013883a 	mov	r9,fp
10005bac:	14c00017 	ldw	r19,0(r2)
10005bb0:	1839883a 	mov	fp,r3
10005bb4:	15c00104 	addi	r23,r2,4
10005bb8:	98045526 	beq	r19,zero,10006d10 <___vfprintf_internal_r+0x1a50>
10005bbc:	9809883a 	mov	r4,r19
10005bc0:	18043116 	blt	r3,zero,10006c88 <___vfprintf_internal_r+0x19c8>
10005bc4:	000b883a 	mov	r5,zero
10005bc8:	180d883a 	mov	r6,r3
10005bcc:	da413c15 	stw	r9,1264(sp)
10005bd0:	000a4880 	call	1000a488 <memchr>
10005bd4:	da413c17 	ldw	r9,1264(sp)
10005bd8:	10047a26 	beq	r2,zero,10006dc4 <___vfprintf_internal_r+0x1b04>
10005bdc:	14c5c83a 	sub	r2,r2,r19
10005be0:	d8812b15 	stw	r2,1196(sp)
10005be4:	e083d40e 	bge	fp,r2,10006b38 <___vfprintf_internal_r+0x1878>
10005be8:	df012815 	stw	fp,1184(sp)
10005bec:	e004e416 	blt	fp,zero,10006f80 <___vfprintf_internal_r+0x1cc0>
10005bf0:	d8812583 	ldbu	r2,1174(sp)
10005bf4:	df012b15 	stw	fp,1196(sp)
10005bf8:	ddc12d15 	stw	r23,1204(sp)
10005bfc:	d8013115 	stw	zero,1220(sp)
10005c00:	003f3c06 	br	100058f4 <__alt_data_end+0xf80058f4>
10005c04:	00840074 	movhi	r2,4097
10005c08:	1081ab04 	addi	r2,r2,1708
10005c0c:	d8813615 	stw	r2,1240(sp)
10005c10:	8080080c 	andi	r2,r16,32
10005c14:	e013883a 	mov	r9,fp
10005c18:	1839883a 	mov	fp,r3
10005c1c:	103f891e 	bne	r2,zero,10005a44 <__alt_data_end+0xf8005a44>
10005c20:	8080040c 	andi	r2,r16,16
10005c24:	1002c326 	beq	r2,zero,10006734 <___vfprintf_internal_r+0x1474>
10005c28:	d8812d17 	ldw	r2,1204(sp)
10005c2c:	002d883a 	mov	r22,zero
10005c30:	15c00017 	ldw	r23,0(r2)
10005c34:	10800104 	addi	r2,r2,4
10005c38:	d8812d15 	stw	r2,1204(sp)
10005c3c:	003f8606 	br	10005a58 <__alt_data_end+0xf8005a58>
10005c40:	84001014 	ori	r16,r16,64
10005c44:	ac800007 	ldb	r18,0(r21)
10005c48:	003df906 	br	10005430 <__alt_data_end+0xf8005430>
10005c4c:	d8812587 	ldb	r2,1174(sp)
10005c50:	1002e51e 	bne	r2,zero,100067e8 <___vfprintf_internal_r+0x1528>
10005c54:	00800804 	movi	r2,32
10005c58:	d8812585 	stb	r2,1174(sp)
10005c5c:	ac800007 	ldb	r18,0(r21)
10005c60:	003df306 	br	10005430 <__alt_data_end+0xf8005430>
10005c64:	84000054 	ori	r16,r16,1
10005c68:	ac800007 	ldb	r18,0(r21)
10005c6c:	003df006 	br	10005430 <__alt_data_end+0xf8005430>
10005c70:	84002014 	ori	r16,r16,128
10005c74:	ac800007 	ldb	r18,0(r21)
10005c78:	003ded06 	br	10005430 <__alt_data_end+0xf8005430>
10005c7c:	0009883a 	mov	r4,zero
10005c80:	95bff404 	addi	r22,r18,-48
10005c84:	182f883a 	mov	r23,r3
10005c88:	01400284 	movi	r5,10
10005c8c:	00050500 	call	10005050 <__mulsi3>
10005c90:	ac800007 	ldb	r18,0(r21)
10005c94:	1589883a 	add	r4,r2,r22
10005c98:	ad400044 	addi	r21,r21,1
10005c9c:	95bff404 	addi	r22,r18,-48
10005ca0:	9dbff92e 	bgeu	r19,r22,10005c88 <__alt_data_end+0xf8005c88>
10005ca4:	b807883a 	mov	r3,r23
10005ca8:	d9012e15 	stw	r4,1208(sp)
10005cac:	003de106 	br	10005434 <__alt_data_end+0xf8005434>
10005cb0:	00800ac4 	movi	r2,43
10005cb4:	d8812585 	stb	r2,1174(sp)
10005cb8:	ac800007 	ldb	r18,0(r21)
10005cbc:	003ddc06 	br	10005430 <__alt_data_end+0xf8005430>
10005cc0:	d8c12d17 	ldw	r3,1204(sp)
10005cc4:	d9012d17 	ldw	r4,1204(sp)
10005cc8:	e013883a 	mov	r9,fp
10005ccc:	18800017 	ldw	r2,0(r3)
10005cd0:	21000104 	addi	r4,r4,4
10005cd4:	00c00044 	movi	r3,1
10005cd8:	d8c12815 	stw	r3,1184(sp)
10005cdc:	d8012585 	stb	zero,1174(sp)
10005ce0:	d8810405 	stb	r2,1040(sp)
10005ce4:	d9012d15 	stw	r4,1204(sp)
10005ce8:	d8c12b15 	stw	r3,1196(sp)
10005cec:	dcc10404 	addi	r19,sp,1040
10005cf0:	003dda06 	br	1000545c <__alt_data_end+0xf800545c>
10005cf4:	e013883a 	mov	r9,fp
10005cf8:	1839883a 	mov	fp,r3
10005cfc:	003ed806 	br	10005860 <__alt_data_end+0xf8005860>
10005d00:	e013883a 	mov	r9,fp
10005d04:	1839883a 	mov	fp,r3
10005d08:	003f2d06 	br	100059c0 <__alt_data_end+0xf80059c0>
10005d0c:	e013883a 	mov	r9,fp
10005d10:	1839883a 	mov	fp,r3
10005d14:	003f3806 	br	100059f8 <__alt_data_end+0xf80059f8>
10005d18:	da011d17 	ldw	r8,1140(sp)
10005d1c:	d8c11c17 	ldw	r3,1136(sp)
10005d20:	d8812587 	ldb	r2,1174(sp)
10005d24:	10000b26 	beq	r2,zero,10005d54 <___vfprintf_internal_r+0xa94>
10005d28:	d8812584 	addi	r2,sp,1174
10005d2c:	48800015 	stw	r2,0(r9)
10005d30:	00800044 	movi	r2,1
10005d34:	48800115 	stw	r2,4(r9)
10005d38:	4091883a 	add	r8,r8,r2
10005d3c:	1887883a 	add	r3,r3,r2
10005d40:	da011d15 	stw	r8,1140(sp)
10005d44:	d8c11c15 	stw	r3,1136(sp)
10005d48:	008001c4 	movi	r2,7
10005d4c:	10c18e16 	blt	r2,r3,10006388 <___vfprintf_internal_r+0x10c8>
10005d50:	4a400204 	addi	r9,r9,8
10005d54:	d9012a17 	ldw	r4,1192(sp)
10005d58:	20000b26 	beq	r4,zero,10005d88 <___vfprintf_internal_r+0xac8>
10005d5c:	d8812504 	addi	r2,sp,1172
10005d60:	48800015 	stw	r2,0(r9)
10005d64:	00800084 	movi	r2,2
10005d68:	48800115 	stw	r2,4(r9)
10005d6c:	4091883a 	add	r8,r8,r2
10005d70:	18c00044 	addi	r3,r3,1
10005d74:	da011d15 	stw	r8,1140(sp)
10005d78:	d8c11c15 	stw	r3,1136(sp)
10005d7c:	008001c4 	movi	r2,7
10005d80:	10c17816 	blt	r2,r3,10006364 <___vfprintf_internal_r+0x10a4>
10005d84:	4a400204 	addi	r9,r9,8
10005d88:	d9012f17 	ldw	r4,1212(sp)
10005d8c:	00802004 	movi	r2,128
10005d90:	2080fc26 	beq	r4,r2,10006184 <___vfprintf_internal_r+0xec4>
10005d94:	d8813117 	ldw	r2,1220(sp)
10005d98:	d9012b17 	ldw	r4,1196(sp)
10005d9c:	112fc83a 	sub	r23,r2,r4
10005da0:	05c02a0e 	bge	zero,r23,10005e4c <___vfprintf_internal_r+0xb8c>
10005da4:	07000404 	movi	fp,16
10005da8:	05040074 	movhi	r20,4097
10005dac:	a501b684 	addi	r20,r20,1754
10005db0:	e5c01d0e 	bge	fp,r23,10005e28 <___vfprintf_internal_r+0xb68>
10005db4:	dc812a15 	stw	r18,1192(sp)
10005db8:	058001c4 	movi	r22,7
10005dbc:	a025883a 	mov	r18,r20
10005dc0:	8029883a 	mov	r20,r16
10005dc4:	dc012917 	ldw	r16,1188(sp)
10005dc8:	00000306 	br	10005dd8 <___vfprintf_internal_r+0xb18>
10005dcc:	bdfffc04 	addi	r23,r23,-16
10005dd0:	4a400204 	addi	r9,r9,8
10005dd4:	e5c0110e 	bge	fp,r23,10005e1c <___vfprintf_internal_r+0xb5c>
10005dd8:	4c800015 	stw	r18,0(r9)
10005ddc:	4f000115 	stw	fp,4(r9)
10005de0:	42000404 	addi	r8,r8,16
10005de4:	18c00044 	addi	r3,r3,1
10005de8:	da011d15 	stw	r8,1140(sp)
10005dec:	d8c11c15 	stw	r3,1136(sp)
10005df0:	b0fff60e 	bge	r22,r3,10005dcc <__alt_data_end+0xf8005dcc>
10005df4:	8809883a 	mov	r4,r17
10005df8:	800b883a 	mov	r5,r16
10005dfc:	d9811b04 	addi	r6,sp,1132
10005e00:	000528c0 	call	1000528c <__sprint_r>
10005e04:	103e741e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10005e08:	bdfffc04 	addi	r23,r23,-16
10005e0c:	da011d17 	ldw	r8,1140(sp)
10005e10:	d8c11c17 	ldw	r3,1136(sp)
10005e14:	da400404 	addi	r9,sp,16
10005e18:	e5ffef16 	blt	fp,r23,10005dd8 <__alt_data_end+0xf8005dd8>
10005e1c:	a021883a 	mov	r16,r20
10005e20:	9029883a 	mov	r20,r18
10005e24:	dc812a17 	ldw	r18,1192(sp)
10005e28:	4d000015 	stw	r20,0(r9)
10005e2c:	4dc00115 	stw	r23,4(r9)
10005e30:	45d1883a 	add	r8,r8,r23
10005e34:	18c00044 	addi	r3,r3,1
10005e38:	da011d15 	stw	r8,1140(sp)
10005e3c:	d8c11c15 	stw	r3,1136(sp)
10005e40:	008001c4 	movi	r2,7
10005e44:	10c13e16 	blt	r2,r3,10006340 <___vfprintf_internal_r+0x1080>
10005e48:	4a400204 	addi	r9,r9,8
10005e4c:	8080400c 	andi	r2,r16,256
10005e50:	1000831e 	bne	r2,zero,10006060 <___vfprintf_internal_r+0xda0>
10005e54:	d8812b17 	ldw	r2,1196(sp)
10005e58:	4cc00015 	stw	r19,0(r9)
10005e5c:	48800115 	stw	r2,4(r9)
10005e60:	4091883a 	add	r8,r8,r2
10005e64:	18c00044 	addi	r3,r3,1
10005e68:	da011d15 	stw	r8,1140(sp)
10005e6c:	d8c11c15 	stw	r3,1136(sp)
10005e70:	008001c4 	movi	r2,7
10005e74:	10c05316 	blt	r2,r3,10005fc4 <___vfprintf_internal_r+0xd04>
10005e78:	4a400204 	addi	r9,r9,8
10005e7c:	8400010c 	andi	r16,r16,4
10005e80:	80002e26 	beq	r16,zero,10005f3c <___vfprintf_internal_r+0xc7c>
10005e84:	d8812e17 	ldw	r2,1208(sp)
10005e88:	d8c12817 	ldw	r3,1184(sp)
10005e8c:	10e1c83a 	sub	r16,r2,r3
10005e90:	04002a0e 	bge	zero,r16,10005f3c <___vfprintf_internal_r+0xc7c>
10005e94:	04800404 	movi	r18,16
10005e98:	d8c11c17 	ldw	r3,1136(sp)
10005e9c:	05c40074 	movhi	r23,4097
10005ea0:	bdc1b284 	addi	r23,r23,1738
10005ea4:	9400170e 	bge	r18,r16,10005f04 <___vfprintf_internal_r+0xc44>
10005ea8:	04c001c4 	movi	r19,7
10005eac:	dd012917 	ldw	r20,1188(sp)
10005eb0:	00000306 	br	10005ec0 <___vfprintf_internal_r+0xc00>
10005eb4:	843ffc04 	addi	r16,r16,-16
10005eb8:	4a400204 	addi	r9,r9,8
10005ebc:	9400110e 	bge	r18,r16,10005f04 <___vfprintf_internal_r+0xc44>
10005ec0:	4dc00015 	stw	r23,0(r9)
10005ec4:	4c800115 	stw	r18,4(r9)
10005ec8:	42000404 	addi	r8,r8,16
10005ecc:	18c00044 	addi	r3,r3,1
10005ed0:	da011d15 	stw	r8,1140(sp)
10005ed4:	d8c11c15 	stw	r3,1136(sp)
10005ed8:	98fff60e 	bge	r19,r3,10005eb4 <__alt_data_end+0xf8005eb4>
10005edc:	8809883a 	mov	r4,r17
10005ee0:	a00b883a 	mov	r5,r20
10005ee4:	d9811b04 	addi	r6,sp,1132
10005ee8:	000528c0 	call	1000528c <__sprint_r>
10005eec:	103e3a1e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10005ef0:	843ffc04 	addi	r16,r16,-16
10005ef4:	da011d17 	ldw	r8,1140(sp)
10005ef8:	d8c11c17 	ldw	r3,1136(sp)
10005efc:	da400404 	addi	r9,sp,16
10005f00:	943fef16 	blt	r18,r16,10005ec0 <__alt_data_end+0xf8005ec0>
10005f04:	4dc00015 	stw	r23,0(r9)
10005f08:	4c000115 	stw	r16,4(r9)
10005f0c:	8211883a 	add	r8,r16,r8
10005f10:	18c00044 	addi	r3,r3,1
10005f14:	da011d15 	stw	r8,1140(sp)
10005f18:	d8c11c15 	stw	r3,1136(sp)
10005f1c:	008001c4 	movi	r2,7
10005f20:	10c0060e 	bge	r2,r3,10005f3c <___vfprintf_internal_r+0xc7c>
10005f24:	d9412917 	ldw	r5,1188(sp)
10005f28:	8809883a 	mov	r4,r17
10005f2c:	d9811b04 	addi	r6,sp,1132
10005f30:	000528c0 	call	1000528c <__sprint_r>
10005f34:	103e281e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10005f38:	da011d17 	ldw	r8,1140(sp)
10005f3c:	dd012817 	ldw	r20,1184(sp)
10005f40:	d9012e17 	ldw	r4,1208(sp)
10005f44:	a100010e 	bge	r20,r4,10005f4c <___vfprintf_internal_r+0xc8c>
10005f48:	2029883a 	mov	r20,r4
10005f4c:	d8812c17 	ldw	r2,1200(sp)
10005f50:	1505883a 	add	r2,r2,r20
10005f54:	d8812c15 	stw	r2,1200(sp)
10005f58:	4000b91e 	bne	r8,zero,10006240 <___vfprintf_internal_r+0xf80>
10005f5c:	d8011c15 	stw	zero,1136(sp)
10005f60:	a8800007 	ldb	r2,0(r21)
10005f64:	da400404 	addi	r9,sp,16
10005f68:	103d0d1e 	bne	r2,zero,100053a0 <__alt_data_end+0xf80053a0>
10005f6c:	a825883a 	mov	r18,r21
10005f70:	003d2306 	br	10005400 <__alt_data_end+0xf8005400>
10005f74:	d9412917 	ldw	r5,1188(sp)
10005f78:	8809883a 	mov	r4,r17
10005f7c:	d9811b04 	addi	r6,sp,1132
10005f80:	000528c0 	call	1000528c <__sprint_r>
10005f84:	103e141e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10005f88:	da011d17 	ldw	r8,1140(sp)
10005f8c:	da400404 	addi	r9,sp,16
10005f90:	8080004c 	andi	r2,r16,1
10005f94:	103fb926 	beq	r2,zero,10005e7c <__alt_data_end+0xf8005e7c>
10005f98:	d8c11c17 	ldw	r3,1136(sp)
10005f9c:	d9013717 	ldw	r4,1244(sp)
10005fa0:	00800044 	movi	r2,1
10005fa4:	48800115 	stw	r2,4(r9)
10005fa8:	49000015 	stw	r4,0(r9)
10005fac:	4091883a 	add	r8,r8,r2
10005fb0:	1887883a 	add	r3,r3,r2
10005fb4:	da011d15 	stw	r8,1140(sp)
10005fb8:	d8c11c15 	stw	r3,1136(sp)
10005fbc:	008001c4 	movi	r2,7
10005fc0:	10ffad0e 	bge	r2,r3,10005e78 <__alt_data_end+0xf8005e78>
10005fc4:	d9412917 	ldw	r5,1188(sp)
10005fc8:	8809883a 	mov	r4,r17
10005fcc:	d9811b04 	addi	r6,sp,1132
10005fd0:	000528c0 	call	1000528c <__sprint_r>
10005fd4:	103e001e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10005fd8:	da400404 	addi	r9,sp,16
10005fdc:	da011d17 	ldw	r8,1140(sp)
10005fe0:	003fa606 	br	10005e7c <__alt_data_end+0xf8005e7c>
10005fe4:	18803fcc 	andi	r2,r3,255
10005fe8:	00c00044 	movi	r3,1
10005fec:	10c10126 	beq	r2,r3,100063f4 <___vfprintf_internal_r+0x1134>
10005ff0:	00c00084 	movi	r3,2
10005ff4:	10c0ed26 	beq	r2,r3,100063ac <___vfprintf_internal_r+0x10ec>
10005ff8:	d8c10dc4 	addi	r3,sp,1079
10005ffc:	b808d0fa 	srli	r4,r23,3
10006000:	b00a977a 	slli	r5,r22,29
10006004:	b02cd0fa 	srli	r22,r22,3
10006008:	bdc001cc 	andi	r23,r23,7
1000600c:	b8800c04 	addi	r2,r23,48
10006010:	292eb03a 	or	r23,r5,r4
10006014:	18800005 	stb	r2,0(r3)
10006018:	bd88b03a 	or	r4,r23,r22
1000601c:	1827883a 	mov	r19,r3
10006020:	18ffffc4 	addi	r3,r3,-1
10006024:	203ff51e 	bne	r4,zero,10005ffc <__alt_data_end+0xf8005ffc>
10006028:	8100004c 	andi	r4,r16,1
1000602c:	980b883a 	mov	r5,r19
10006030:	20000726 	beq	r4,zero,10006050 <___vfprintf_internal_r+0xd90>
10006034:	10803fcc 	andi	r2,r2,255
10006038:	1080201c 	xori	r2,r2,128
1000603c:	10bfe004 	addi	r2,r2,-128
10006040:	01000c04 	movi	r4,48
10006044:	11000226 	beq	r2,r4,10006050 <___vfprintf_internal_r+0xd90>
10006048:	1827883a 	mov	r19,r3
1000604c:	293fffc5 	stb	r4,-1(r5)
10006050:	d8812717 	ldw	r2,1180(sp)
10006054:	14c5c83a 	sub	r2,r2,r19
10006058:	d8812b15 	stw	r2,1196(sp)
1000605c:	003e1f06 	br	100058dc <__alt_data_end+0xf80058dc>
10006060:	00801944 	movi	r2,101
10006064:	14807c0e 	bge	r2,r18,10006258 <___vfprintf_internal_r+0xf98>
10006068:	d9013317 	ldw	r4,1228(sp)
1000606c:	d9413417 	ldw	r5,1232(sp)
10006070:	000d883a 	mov	r6,zero
10006074:	000f883a 	mov	r7,zero
10006078:	d8c13b15 	stw	r3,1260(sp)
1000607c:	da013a15 	stw	r8,1256(sp)
10006080:	da413c15 	stw	r9,1264(sp)
10006084:	000d3840 	call	1000d384 <__nedf2>
10006088:	d8c13b17 	ldw	r3,1260(sp)
1000608c:	da013a17 	ldw	r8,1256(sp)
10006090:	da413c17 	ldw	r9,1264(sp)
10006094:	1001001e 	bne	r2,zero,10006498 <___vfprintf_internal_r+0x11d8>
10006098:	00840074 	movhi	r2,4097
1000609c:	1081b204 	addi	r2,r2,1736
100060a0:	48800015 	stw	r2,0(r9)
100060a4:	00800044 	movi	r2,1
100060a8:	48800115 	stw	r2,4(r9)
100060ac:	4091883a 	add	r8,r8,r2
100060b0:	1887883a 	add	r3,r3,r2
100060b4:	da011d15 	stw	r8,1140(sp)
100060b8:	d8c11c15 	stw	r3,1136(sp)
100060bc:	008001c4 	movi	r2,7
100060c0:	10c20316 	blt	r2,r3,100068d0 <___vfprintf_internal_r+0x1610>
100060c4:	4a400204 	addi	r9,r9,8
100060c8:	d8812417 	ldw	r2,1168(sp)
100060cc:	d8c13217 	ldw	r3,1224(sp)
100060d0:	10c00216 	blt	r2,r3,100060dc <___vfprintf_internal_r+0xe1c>
100060d4:	8080004c 	andi	r2,r16,1
100060d8:	103f6826 	beq	r2,zero,10005e7c <__alt_data_end+0xf8005e7c>
100060dc:	d8c11c17 	ldw	r3,1136(sp)
100060e0:	d9013717 	ldw	r4,1244(sp)
100060e4:	00800044 	movi	r2,1
100060e8:	48800115 	stw	r2,4(r9)
100060ec:	49000015 	stw	r4,0(r9)
100060f0:	4091883a 	add	r8,r8,r2
100060f4:	1887883a 	add	r3,r3,r2
100060f8:	da011d15 	stw	r8,1140(sp)
100060fc:	d8c11c15 	stw	r3,1136(sp)
10006100:	008001c4 	movi	r2,7
10006104:	10c2ce16 	blt	r2,r3,10006c40 <___vfprintf_internal_r+0x1980>
10006108:	4a400204 	addi	r9,r9,8
1000610c:	d8813217 	ldw	r2,1224(sp)
10006110:	14bfffc4 	addi	r18,r2,-1
10006114:	04bf590e 	bge	zero,r18,10005e7c <__alt_data_end+0xf8005e7c>
10006118:	04c00404 	movi	r19,16
1000611c:	d8c11c17 	ldw	r3,1136(sp)
10006120:	05040074 	movhi	r20,4097
10006124:	a501b684 	addi	r20,r20,1754
10006128:	9c818a0e 	bge	r19,r18,10006754 <___vfprintf_internal_r+0x1494>
1000612c:	058001c4 	movi	r22,7
10006130:	ddc12917 	ldw	r23,1188(sp)
10006134:	00000306 	br	10006144 <___vfprintf_internal_r+0xe84>
10006138:	4a400204 	addi	r9,r9,8
1000613c:	94bffc04 	addi	r18,r18,-16
10006140:	9c81840e 	bge	r19,r18,10006754 <___vfprintf_internal_r+0x1494>
10006144:	4d000015 	stw	r20,0(r9)
10006148:	4cc00115 	stw	r19,4(r9)
1000614c:	42000404 	addi	r8,r8,16
10006150:	18c00044 	addi	r3,r3,1
10006154:	da011d15 	stw	r8,1140(sp)
10006158:	d8c11c15 	stw	r3,1136(sp)
1000615c:	b0fff60e 	bge	r22,r3,10006138 <__alt_data_end+0xf8006138>
10006160:	8809883a 	mov	r4,r17
10006164:	b80b883a 	mov	r5,r23
10006168:	d9811b04 	addi	r6,sp,1132
1000616c:	000528c0 	call	1000528c <__sprint_r>
10006170:	103d991e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006174:	da011d17 	ldw	r8,1140(sp)
10006178:	d8c11c17 	ldw	r3,1136(sp)
1000617c:	da400404 	addi	r9,sp,16
10006180:	003fee06 	br	1000613c <__alt_data_end+0xf800613c>
10006184:	d8812e17 	ldw	r2,1208(sp)
10006188:	d9012817 	ldw	r4,1184(sp)
1000618c:	112fc83a 	sub	r23,r2,r4
10006190:	05ff000e 	bge	zero,r23,10005d94 <__alt_data_end+0xf8005d94>
10006194:	07000404 	movi	fp,16
10006198:	05040074 	movhi	r20,4097
1000619c:	a501b684 	addi	r20,r20,1754
100061a0:	e5c01d0e 	bge	fp,r23,10006218 <___vfprintf_internal_r+0xf58>
100061a4:	dc812a15 	stw	r18,1192(sp)
100061a8:	058001c4 	movi	r22,7
100061ac:	a025883a 	mov	r18,r20
100061b0:	8029883a 	mov	r20,r16
100061b4:	dc012917 	ldw	r16,1188(sp)
100061b8:	00000306 	br	100061c8 <___vfprintf_internal_r+0xf08>
100061bc:	bdfffc04 	addi	r23,r23,-16
100061c0:	4a400204 	addi	r9,r9,8
100061c4:	e5c0110e 	bge	fp,r23,1000620c <___vfprintf_internal_r+0xf4c>
100061c8:	4c800015 	stw	r18,0(r9)
100061cc:	4f000115 	stw	fp,4(r9)
100061d0:	42000404 	addi	r8,r8,16
100061d4:	18c00044 	addi	r3,r3,1
100061d8:	da011d15 	stw	r8,1140(sp)
100061dc:	d8c11c15 	stw	r3,1136(sp)
100061e0:	b0fff60e 	bge	r22,r3,100061bc <__alt_data_end+0xf80061bc>
100061e4:	8809883a 	mov	r4,r17
100061e8:	800b883a 	mov	r5,r16
100061ec:	d9811b04 	addi	r6,sp,1132
100061f0:	000528c0 	call	1000528c <__sprint_r>
100061f4:	103d781e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
100061f8:	bdfffc04 	addi	r23,r23,-16
100061fc:	da011d17 	ldw	r8,1140(sp)
10006200:	d8c11c17 	ldw	r3,1136(sp)
10006204:	da400404 	addi	r9,sp,16
10006208:	e5ffef16 	blt	fp,r23,100061c8 <__alt_data_end+0xf80061c8>
1000620c:	a021883a 	mov	r16,r20
10006210:	9029883a 	mov	r20,r18
10006214:	dc812a17 	ldw	r18,1192(sp)
10006218:	4d000015 	stw	r20,0(r9)
1000621c:	4dc00115 	stw	r23,4(r9)
10006220:	45d1883a 	add	r8,r8,r23
10006224:	18c00044 	addi	r3,r3,1
10006228:	da011d15 	stw	r8,1140(sp)
1000622c:	d8c11c15 	stw	r3,1136(sp)
10006230:	008001c4 	movi	r2,7
10006234:	10c13616 	blt	r2,r3,10006710 <___vfprintf_internal_r+0x1450>
10006238:	4a400204 	addi	r9,r9,8
1000623c:	003ed506 	br	10005d94 <__alt_data_end+0xf8005d94>
10006240:	d9412917 	ldw	r5,1188(sp)
10006244:	8809883a 	mov	r4,r17
10006248:	d9811b04 	addi	r6,sp,1132
1000624c:	000528c0 	call	1000528c <__sprint_r>
10006250:	103f4226 	beq	r2,zero,10005f5c <__alt_data_end+0xf8005f5c>
10006254:	003d6006 	br	100057d8 <__alt_data_end+0xf80057d8>
10006258:	d9013217 	ldw	r4,1224(sp)
1000625c:	00800044 	movi	r2,1
10006260:	4cc00015 	stw	r19,0(r9)
10006264:	1101000e 	bge	r2,r4,10006668 <___vfprintf_internal_r+0x13a8>
10006268:	00800044 	movi	r2,1
1000626c:	48800115 	stw	r2,4(r9)
10006270:	4091883a 	add	r8,r8,r2
10006274:	1887883a 	add	r3,r3,r2
10006278:	da011d15 	stw	r8,1140(sp)
1000627c:	d8c11c15 	stw	r3,1136(sp)
10006280:	008001c4 	movi	r2,7
10006284:	10c10c16 	blt	r2,r3,100066b8 <___vfprintf_internal_r+0x13f8>
10006288:	4a400204 	addi	r9,r9,8
1000628c:	d8813717 	ldw	r2,1244(sp)
10006290:	48800015 	stw	r2,0(r9)
10006294:	00800044 	movi	r2,1
10006298:	48800115 	stw	r2,4(r9)
1000629c:	4091883a 	add	r8,r8,r2
100062a0:	1887883a 	add	r3,r3,r2
100062a4:	da011d15 	stw	r8,1140(sp)
100062a8:	d8c11c15 	stw	r3,1136(sp)
100062ac:	008001c4 	movi	r2,7
100062b0:	10c10a16 	blt	r2,r3,100066dc <___vfprintf_internal_r+0x141c>
100062b4:	4c800204 	addi	r18,r9,8
100062b8:	d9013317 	ldw	r4,1228(sp)
100062bc:	d9413417 	ldw	r5,1232(sp)
100062c0:	000d883a 	mov	r6,zero
100062c4:	000f883a 	mov	r7,zero
100062c8:	d8c13b15 	stw	r3,1260(sp)
100062cc:	da013a15 	stw	r8,1256(sp)
100062d0:	000d3280 	call	1000d328 <__eqdf2>
100062d4:	d8c13b17 	ldw	r3,1260(sp)
100062d8:	da013a17 	ldw	r8,1256(sp)
100062dc:	1000ba26 	beq	r2,zero,100065c8 <___vfprintf_internal_r+0x1308>
100062e0:	d9013217 	ldw	r4,1224(sp)
100062e4:	9cc00044 	addi	r19,r19,1
100062e8:	94c00015 	stw	r19,0(r18)
100062ec:	20bfffc4 	addi	r2,r4,-1
100062f0:	90800115 	stw	r2,4(r18)
100062f4:	4091883a 	add	r8,r8,r2
100062f8:	18c00044 	addi	r3,r3,1
100062fc:	da011d15 	stw	r8,1140(sp)
10006300:	d8c11c15 	stw	r3,1136(sp)
10006304:	008001c4 	movi	r2,7
10006308:	10c0e216 	blt	r2,r3,10006694 <___vfprintf_internal_r+0x13d4>
1000630c:	94800204 	addi	r18,r18,8
10006310:	d9013517 	ldw	r4,1236(sp)
10006314:	d8811fc4 	addi	r2,sp,1151
10006318:	90800015 	stw	r2,0(r18)
1000631c:	91000115 	stw	r4,4(r18)
10006320:	4111883a 	add	r8,r8,r4
10006324:	18c00044 	addi	r3,r3,1
10006328:	da011d15 	stw	r8,1140(sp)
1000632c:	d8c11c15 	stw	r3,1136(sp)
10006330:	008001c4 	movi	r2,7
10006334:	10ff2316 	blt	r2,r3,10005fc4 <__alt_data_end+0xf8005fc4>
10006338:	92400204 	addi	r9,r18,8
1000633c:	003ecf06 	br	10005e7c <__alt_data_end+0xf8005e7c>
10006340:	d9412917 	ldw	r5,1188(sp)
10006344:	8809883a 	mov	r4,r17
10006348:	d9811b04 	addi	r6,sp,1132
1000634c:	000528c0 	call	1000528c <__sprint_r>
10006350:	103d211e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006354:	da011d17 	ldw	r8,1140(sp)
10006358:	d8c11c17 	ldw	r3,1136(sp)
1000635c:	da400404 	addi	r9,sp,16
10006360:	003eba06 	br	10005e4c <__alt_data_end+0xf8005e4c>
10006364:	d9412917 	ldw	r5,1188(sp)
10006368:	8809883a 	mov	r4,r17
1000636c:	d9811b04 	addi	r6,sp,1132
10006370:	000528c0 	call	1000528c <__sprint_r>
10006374:	103d181e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006378:	da011d17 	ldw	r8,1140(sp)
1000637c:	d8c11c17 	ldw	r3,1136(sp)
10006380:	da400404 	addi	r9,sp,16
10006384:	003e8006 	br	10005d88 <__alt_data_end+0xf8005d88>
10006388:	d9412917 	ldw	r5,1188(sp)
1000638c:	8809883a 	mov	r4,r17
10006390:	d9811b04 	addi	r6,sp,1132
10006394:	000528c0 	call	1000528c <__sprint_r>
10006398:	103d0f1e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
1000639c:	da011d17 	ldw	r8,1140(sp)
100063a0:	d8c11c17 	ldw	r3,1136(sp)
100063a4:	da400404 	addi	r9,sp,16
100063a8:	003e6a06 	br	10005d54 <__alt_data_end+0xf8005d54>
100063ac:	d9413617 	ldw	r5,1240(sp)
100063b0:	d8810dc4 	addi	r2,sp,1079
100063b4:	b8c003cc 	andi	r3,r23,15
100063b8:	b008973a 	slli	r4,r22,28
100063bc:	28c7883a 	add	r3,r5,r3
100063c0:	b82ed13a 	srli	r23,r23,4
100063c4:	18c00003 	ldbu	r3,0(r3)
100063c8:	b02cd13a 	srli	r22,r22,4
100063cc:	25eeb03a 	or	r23,r4,r23
100063d0:	10c00005 	stb	r3,0(r2)
100063d4:	bd86b03a 	or	r3,r23,r22
100063d8:	1027883a 	mov	r19,r2
100063dc:	10bfffc4 	addi	r2,r2,-1
100063e0:	183ff41e 	bne	r3,zero,100063b4 <__alt_data_end+0xf80063b4>
100063e4:	003f1a06 	br	10006050 <__alt_data_end+0xf8006050>
100063e8:	d8012b15 	stw	zero,1196(sp)
100063ec:	dcc10e04 	addi	r19,sp,1080
100063f0:	003d3a06 	br	100058dc <__alt_data_end+0xf80058dc>
100063f4:	b0025426 	beq	r22,zero,10006d48 <___vfprintf_internal_r+0x1a88>
100063f8:	b807883a 	mov	r3,r23
100063fc:	d8810dc4 	addi	r2,sp,1079
10006400:	882f883a 	mov	r23,r17
10006404:	04c00244 	movi	r19,9
10006408:	8023883a 	mov	r17,r16
1000640c:	da412815 	stw	r9,1184(sp)
10006410:	1821883a 	mov	r16,r3
10006414:	8009883a 	mov	r4,r16
10006418:	b00b883a 	mov	r5,r22
1000641c:	01800284 	movi	r6,10
10006420:	000f883a 	mov	r7,zero
10006424:	1029883a 	mov	r20,r2
10006428:	000cd000 	call	1000cd00 <__umoddi3>
1000642c:	10800c04 	addi	r2,r2,48
10006430:	8009883a 	mov	r4,r16
10006434:	b00b883a 	mov	r5,r22
10006438:	a0800005 	stb	r2,0(r20)
1000643c:	01800284 	movi	r6,10
10006440:	000f883a 	mov	r7,zero
10006444:	000c6b00 	call	1000c6b0 <__udivdi3>
10006448:	1021883a 	mov	r16,r2
1000644c:	182d883a 	mov	r22,r3
10006450:	a0bfffc4 	addi	r2,r20,-1
10006454:	183fef1e 	bne	r3,zero,10006414 <__alt_data_end+0xf8006414>
10006458:	9c3fee36 	bltu	r19,r16,10006414 <__alt_data_end+0xf8006414>
1000645c:	da412817 	ldw	r9,1184(sp)
10006460:	8005883a 	mov	r2,r16
10006464:	8821883a 	mov	r16,r17
10006468:	b823883a 	mov	r17,r23
1000646c:	102f883a 	mov	r23,r2
10006470:	d8812717 	ldw	r2,1180(sp)
10006474:	a4ffffc4 	addi	r19,r20,-1
10006478:	bdc00c04 	addi	r23,r23,48
1000647c:	14c5c83a 	sub	r2,r2,r19
10006480:	a5ffffc5 	stb	r23,-1(r20)
10006484:	d8812b15 	stw	r2,1196(sp)
10006488:	003d1406 	br	100058dc <__alt_data_end+0xf80058dc>
1000648c:	00c00044 	movi	r3,1
10006490:	bd84b03a 	or	r2,r23,r22
10006494:	003d0306 	br	100058a4 <__alt_data_end+0xf80058a4>
10006498:	dc812417 	ldw	r18,1168(sp)
1000649c:	0481140e 	bge	zero,r18,100068f0 <___vfprintf_internal_r+0x1630>
100064a0:	d9013217 	ldw	r4,1224(sp)
100064a4:	4cc00015 	stw	r19,0(r9)
100064a8:	9100ec16 	blt	r18,r4,1000685c <___vfprintf_internal_r+0x159c>
100064ac:	49000115 	stw	r4,4(r9)
100064b0:	4111883a 	add	r8,r8,r4
100064b4:	18c00044 	addi	r3,r3,1
100064b8:	da011d15 	stw	r8,1140(sp)
100064bc:	d8c11c15 	stw	r3,1136(sp)
100064c0:	008001c4 	movi	r2,7
100064c4:	10c23616 	blt	r2,r3,10006da0 <___vfprintf_internal_r+0x1ae0>
100064c8:	4a400204 	addi	r9,r9,8
100064cc:	d8813217 	ldw	r2,1224(sp)
100064d0:	90a5c83a 	sub	r18,r18,r2
100064d4:	04beae0e 	bge	zero,r18,10005f90 <__alt_data_end+0xf8005f90>
100064d8:	04c00404 	movi	r19,16
100064dc:	d8c11c17 	ldw	r3,1136(sp)
100064e0:	05040074 	movhi	r20,4097
100064e4:	a501b684 	addi	r20,r20,1754
100064e8:	9c81dd0e 	bge	r19,r18,10006c60 <___vfprintf_internal_r+0x19a0>
100064ec:	058001c4 	movi	r22,7
100064f0:	ddc12917 	ldw	r23,1188(sp)
100064f4:	00000306 	br	10006504 <___vfprintf_internal_r+0x1244>
100064f8:	4a400204 	addi	r9,r9,8
100064fc:	94bffc04 	addi	r18,r18,-16
10006500:	9c81d70e 	bge	r19,r18,10006c60 <___vfprintf_internal_r+0x19a0>
10006504:	4d000015 	stw	r20,0(r9)
10006508:	4cc00115 	stw	r19,4(r9)
1000650c:	42000404 	addi	r8,r8,16
10006510:	18c00044 	addi	r3,r3,1
10006514:	da011d15 	stw	r8,1140(sp)
10006518:	d8c11c15 	stw	r3,1136(sp)
1000651c:	b0fff60e 	bge	r22,r3,100064f8 <__alt_data_end+0xf80064f8>
10006520:	8809883a 	mov	r4,r17
10006524:	b80b883a 	mov	r5,r23
10006528:	d9811b04 	addi	r6,sp,1132
1000652c:	000528c0 	call	1000528c <__sprint_r>
10006530:	103ca91e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006534:	da011d17 	ldw	r8,1140(sp)
10006538:	d8c11c17 	ldw	r3,1136(sp)
1000653c:	da400404 	addi	r9,sp,16
10006540:	003fee06 	br	100064fc <__alt_data_end+0xf80064fc>
10006544:	d9412917 	ldw	r5,1188(sp)
10006548:	8809883a 	mov	r4,r17
1000654c:	d9811b04 	addi	r6,sp,1132
10006550:	000528c0 	call	1000528c <__sprint_r>
10006554:	103ca01e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006558:	da011d17 	ldw	r8,1140(sp)
1000655c:	d8c11c17 	ldw	r3,1136(sp)
10006560:	da400404 	addi	r9,sp,16
10006564:	003dee06 	br	10005d20 <__alt_data_end+0xf8005d20>
10006568:	00c00084 	movi	r3,2
1000656c:	bd84b03a 	or	r2,r23,r22
10006570:	d8012585 	stb	zero,1174(sp)
10006574:	003ccb06 	br	100058a4 <__alt_data_end+0xf80058a4>
10006578:	8080040c 	andi	r2,r16,16
1000657c:	1000ae26 	beq	r2,zero,10006838 <___vfprintf_internal_r+0x1578>
10006580:	d9012d17 	ldw	r4,1204(sp)
10006584:	25c00017 	ldw	r23,0(r4)
10006588:	21000104 	addi	r4,r4,4
1000658c:	d9012d15 	stw	r4,1204(sp)
10006590:	b82dd7fa 	srai	r22,r23,31
10006594:	b005883a 	mov	r2,r22
10006598:	003cb906 	br	10005880 <__alt_data_end+0xf8005880>
1000659c:	8080040c 	andi	r2,r16,16
100065a0:	10007026 	beq	r2,zero,10006764 <___vfprintf_internal_r+0x14a4>
100065a4:	d8812d17 	ldw	r2,1204(sp)
100065a8:	002d883a 	mov	r22,zero
100065ac:	00c00044 	movi	r3,1
100065b0:	15c00017 	ldw	r23,0(r2)
100065b4:	10800104 	addi	r2,r2,4
100065b8:	d8812d15 	stw	r2,1204(sp)
100065bc:	d8012585 	stb	zero,1174(sp)
100065c0:	b805883a 	mov	r2,r23
100065c4:	003cb706 	br	100058a4 <__alt_data_end+0xf80058a4>
100065c8:	d8813217 	ldw	r2,1224(sp)
100065cc:	14ffffc4 	addi	r19,r2,-1
100065d0:	04ff4f0e 	bge	zero,r19,10006310 <__alt_data_end+0xf8006310>
100065d4:	05800404 	movi	r22,16
100065d8:	05040074 	movhi	r20,4097
100065dc:	a501b684 	addi	r20,r20,1754
100065e0:	b4c0470e 	bge	r22,r19,10006700 <___vfprintf_internal_r+0x1440>
100065e4:	05c001c4 	movi	r23,7
100065e8:	df012917 	ldw	fp,1188(sp)
100065ec:	00000306 	br	100065fc <___vfprintf_internal_r+0x133c>
100065f0:	94800204 	addi	r18,r18,8
100065f4:	9cfffc04 	addi	r19,r19,-16
100065f8:	b4c0410e 	bge	r22,r19,10006700 <___vfprintf_internal_r+0x1440>
100065fc:	95000015 	stw	r20,0(r18)
10006600:	95800115 	stw	r22,4(r18)
10006604:	42000404 	addi	r8,r8,16
10006608:	18c00044 	addi	r3,r3,1
1000660c:	da011d15 	stw	r8,1140(sp)
10006610:	d8c11c15 	stw	r3,1136(sp)
10006614:	b8fff60e 	bge	r23,r3,100065f0 <__alt_data_end+0xf80065f0>
10006618:	8809883a 	mov	r4,r17
1000661c:	e00b883a 	mov	r5,fp
10006620:	d9811b04 	addi	r6,sp,1132
10006624:	000528c0 	call	1000528c <__sprint_r>
10006628:	103c6b1e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
1000662c:	da011d17 	ldw	r8,1140(sp)
10006630:	d8c11c17 	ldw	r3,1136(sp)
10006634:	dc800404 	addi	r18,sp,16
10006638:	003fee06 	br	100065f4 <__alt_data_end+0xf80065f4>
1000663c:	8080040c 	andi	r2,r16,16
10006640:	10005326 	beq	r2,zero,10006790 <___vfprintf_internal_r+0x14d0>
10006644:	d8c12d17 	ldw	r3,1204(sp)
10006648:	002d883a 	mov	r22,zero
1000664c:	1dc00017 	ldw	r23,0(r3)
10006650:	18c00104 	addi	r3,r3,4
10006654:	d8c12d15 	stw	r3,1204(sp)
10006658:	b805883a 	mov	r2,r23
1000665c:	0007883a 	mov	r3,zero
10006660:	d8012585 	stb	zero,1174(sp)
10006664:	003c8f06 	br	100058a4 <__alt_data_end+0xf80058a4>
10006668:	8088703a 	and	r4,r16,r2
1000666c:	203efe1e 	bne	r4,zero,10006268 <__alt_data_end+0xf8006268>
10006670:	48800115 	stw	r2,4(r9)
10006674:	42000044 	addi	r8,r8,1
10006678:	18c00044 	addi	r3,r3,1
1000667c:	da011d15 	stw	r8,1140(sp)
10006680:	d8c11c15 	stw	r3,1136(sp)
10006684:	008001c4 	movi	r2,7
10006688:	10c00216 	blt	r2,r3,10006694 <___vfprintf_internal_r+0x13d4>
1000668c:	4c800204 	addi	r18,r9,8
10006690:	003f1f06 	br	10006310 <__alt_data_end+0xf8006310>
10006694:	d9412917 	ldw	r5,1188(sp)
10006698:	8809883a 	mov	r4,r17
1000669c:	d9811b04 	addi	r6,sp,1132
100066a0:	000528c0 	call	1000528c <__sprint_r>
100066a4:	103c4c1e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
100066a8:	dc800404 	addi	r18,sp,16
100066ac:	da011d17 	ldw	r8,1140(sp)
100066b0:	d8c11c17 	ldw	r3,1136(sp)
100066b4:	003f1606 	br	10006310 <__alt_data_end+0xf8006310>
100066b8:	d9412917 	ldw	r5,1188(sp)
100066bc:	8809883a 	mov	r4,r17
100066c0:	d9811b04 	addi	r6,sp,1132
100066c4:	000528c0 	call	1000528c <__sprint_r>
100066c8:	103c431e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
100066cc:	da011d17 	ldw	r8,1140(sp)
100066d0:	d8c11c17 	ldw	r3,1136(sp)
100066d4:	da400404 	addi	r9,sp,16
100066d8:	003eec06 	br	1000628c <__alt_data_end+0xf800628c>
100066dc:	d9412917 	ldw	r5,1188(sp)
100066e0:	8809883a 	mov	r4,r17
100066e4:	d9811b04 	addi	r6,sp,1132
100066e8:	000528c0 	call	1000528c <__sprint_r>
100066ec:	103c3a1e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
100066f0:	da011d17 	ldw	r8,1140(sp)
100066f4:	d8c11c17 	ldw	r3,1136(sp)
100066f8:	dc800404 	addi	r18,sp,16
100066fc:	003eee06 	br	100062b8 <__alt_data_end+0xf80062b8>
10006700:	95000015 	stw	r20,0(r18)
10006704:	94c00115 	stw	r19,4(r18)
10006708:	44d1883a 	add	r8,r8,r19
1000670c:	003efa06 	br	100062f8 <__alt_data_end+0xf80062f8>
10006710:	d9412917 	ldw	r5,1188(sp)
10006714:	8809883a 	mov	r4,r17
10006718:	d9811b04 	addi	r6,sp,1132
1000671c:	000528c0 	call	1000528c <__sprint_r>
10006720:	103c2d1e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006724:	da011d17 	ldw	r8,1140(sp)
10006728:	d8c11c17 	ldw	r3,1136(sp)
1000672c:	da400404 	addi	r9,sp,16
10006730:	003d9806 	br	10005d94 <__alt_data_end+0xf8005d94>
10006734:	8080100c 	andi	r2,r16,64
10006738:	10011626 	beq	r2,zero,10006b94 <___vfprintf_internal_r+0x18d4>
1000673c:	d8c12d17 	ldw	r3,1204(sp)
10006740:	002d883a 	mov	r22,zero
10006744:	1dc0000b 	ldhu	r23,0(r3)
10006748:	18c00104 	addi	r3,r3,4
1000674c:	d8c12d15 	stw	r3,1204(sp)
10006750:	003cc106 	br	10005a58 <__alt_data_end+0xf8005a58>
10006754:	4d000015 	stw	r20,0(r9)
10006758:	4c800115 	stw	r18,4(r9)
1000675c:	4491883a 	add	r8,r8,r18
10006760:	003dc006 	br	10005e64 <__alt_data_end+0xf8005e64>
10006764:	8080100c 	andi	r2,r16,64
10006768:	10010126 	beq	r2,zero,10006b70 <___vfprintf_internal_r+0x18b0>
1000676c:	d8c12d17 	ldw	r3,1204(sp)
10006770:	002d883a 	mov	r22,zero
10006774:	1dc0000b 	ldhu	r23,0(r3)
10006778:	18c00104 	addi	r3,r3,4
1000677c:	d8c12d15 	stw	r3,1204(sp)
10006780:	b805883a 	mov	r2,r23
10006784:	00c00044 	movi	r3,1
10006788:	d8012585 	stb	zero,1174(sp)
1000678c:	003c4506 	br	100058a4 <__alt_data_end+0xf80058a4>
10006790:	8080100c 	andi	r2,r16,64
10006794:	10010526 	beq	r2,zero,10006bac <___vfprintf_internal_r+0x18ec>
10006798:	d9012d17 	ldw	r4,1204(sp)
1000679c:	002d883a 	mov	r22,zero
100067a0:	0007883a 	mov	r3,zero
100067a4:	25c0000b 	ldhu	r23,0(r4)
100067a8:	21000104 	addi	r4,r4,4
100067ac:	d9012d15 	stw	r4,1204(sp)
100067b0:	b805883a 	mov	r2,r23
100067b4:	d8012585 	stb	zero,1174(sp)
100067b8:	003c3a06 	br	100058a4 <__alt_data_end+0xf80058a4>
100067bc:	d8812d17 	ldw	r2,1204(sp)
100067c0:	15800017 	ldw	r22,0(r2)
100067c4:	15000117 	ldw	r20,4(r2)
100067c8:	10800204 	addi	r2,r2,8
100067cc:	d8812d15 	stw	r2,1204(sp)
100067d0:	dd813315 	stw	r22,1228(sp)
100067d4:	dd013415 	stw	r20,1232(sp)
100067d8:	003c5906 	br	10005940 <__alt_data_end+0xf8005940>
100067dc:	00c00084 	movi	r3,2
100067e0:	d8012585 	stb	zero,1174(sp)
100067e4:	003c2f06 	br	100058a4 <__alt_data_end+0xf80058a4>
100067e8:	ac800007 	ldb	r18,0(r21)
100067ec:	003b1006 	br	10005430 <__alt_data_end+0xf8005430>
100067f0:	8080040c 	andi	r2,r16,16
100067f4:	1000091e 	bne	r2,zero,1000681c <___vfprintf_internal_r+0x155c>
100067f8:	8400100c 	andi	r16,r16,64
100067fc:	80000726 	beq	r16,zero,1000681c <___vfprintf_internal_r+0x155c>
10006800:	d8c12d17 	ldw	r3,1204(sp)
10006804:	d9012c17 	ldw	r4,1200(sp)
10006808:	18800017 	ldw	r2,0(r3)
1000680c:	18c00104 	addi	r3,r3,4
10006810:	d8c12d15 	stw	r3,1204(sp)
10006814:	1100000d 	sth	r4,0(r2)
10006818:	003adf06 	br	10005398 <__alt_data_end+0xf8005398>
1000681c:	d8c12d17 	ldw	r3,1204(sp)
10006820:	d9012c17 	ldw	r4,1200(sp)
10006824:	18800017 	ldw	r2,0(r3)
10006828:	18c00104 	addi	r3,r3,4
1000682c:	d8c12d15 	stw	r3,1204(sp)
10006830:	11000015 	stw	r4,0(r2)
10006834:	003ad806 	br	10005398 <__alt_data_end+0xf8005398>
10006838:	8080100c 	andi	r2,r16,64
1000683c:	1000c526 	beq	r2,zero,10006b54 <___vfprintf_internal_r+0x1894>
10006840:	d8812d17 	ldw	r2,1204(sp)
10006844:	15c0000f 	ldh	r23,0(r2)
10006848:	10800104 	addi	r2,r2,4
1000684c:	d8812d15 	stw	r2,1204(sp)
10006850:	b82dd7fa 	srai	r22,r23,31
10006854:	b005883a 	mov	r2,r22
10006858:	003c0906 	br	10005880 <__alt_data_end+0xf8005880>
1000685c:	4c800115 	stw	r18,4(r9)
10006860:	9211883a 	add	r8,r18,r8
10006864:	18c00044 	addi	r3,r3,1
10006868:	da011d15 	stw	r8,1140(sp)
1000686c:	d8c11c15 	stw	r3,1136(sp)
10006870:	008001c4 	movi	r2,7
10006874:	10c14016 	blt	r2,r3,10006d78 <___vfprintf_internal_r+0x1ab8>
10006878:	4a400204 	addi	r9,r9,8
1000687c:	d8813717 	ldw	r2,1244(sp)
10006880:	9ca7883a 	add	r19,r19,r18
10006884:	48800015 	stw	r2,0(r9)
10006888:	00800044 	movi	r2,1
1000688c:	48800115 	stw	r2,4(r9)
10006890:	4091883a 	add	r8,r8,r2
10006894:	1887883a 	add	r3,r3,r2
10006898:	da011d15 	stw	r8,1140(sp)
1000689c:	d8c11c15 	stw	r3,1136(sp)
100068a0:	008001c4 	movi	r2,7
100068a4:	10c12c16 	blt	r2,r3,10006d58 <___vfprintf_internal_r+0x1a98>
100068a8:	4a400204 	addi	r9,r9,8
100068ac:	d9013217 	ldw	r4,1224(sp)
100068b0:	da011d17 	ldw	r8,1140(sp)
100068b4:	d8c11c17 	ldw	r3,1136(sp)
100068b8:	24a5c83a 	sub	r18,r4,r18
100068bc:	4cc00015 	stw	r19,0(r9)
100068c0:	003fa506 	br	10006758 <__alt_data_end+0xf8006758>
100068c4:	04c40074 	movhi	r19,4097
100068c8:	9cc1a304 	addi	r19,r19,1676
100068cc:	003c2e06 	br	10005988 <__alt_data_end+0xf8005988>
100068d0:	d9412917 	ldw	r5,1188(sp)
100068d4:	8809883a 	mov	r4,r17
100068d8:	d9811b04 	addi	r6,sp,1132
100068dc:	000528c0 	call	1000528c <__sprint_r>
100068e0:	103bbd1e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
100068e4:	da011d17 	ldw	r8,1140(sp)
100068e8:	da400404 	addi	r9,sp,16
100068ec:	003df606 	br	100060c8 <__alt_data_end+0xf80060c8>
100068f0:	00840074 	movhi	r2,4097
100068f4:	1081b204 	addi	r2,r2,1736
100068f8:	48800015 	stw	r2,0(r9)
100068fc:	00800044 	movi	r2,1
10006900:	48800115 	stw	r2,4(r9)
10006904:	4091883a 	add	r8,r8,r2
10006908:	1887883a 	add	r3,r3,r2
1000690c:	da011d15 	stw	r8,1140(sp)
10006910:	d8c11c15 	stw	r3,1136(sp)
10006914:	008001c4 	movi	r2,7
10006918:	10c0bc16 	blt	r2,r3,10006c0c <___vfprintf_internal_r+0x194c>
1000691c:	4a400204 	addi	r9,r9,8
10006920:	9000041e 	bne	r18,zero,10006934 <___vfprintf_internal_r+0x1674>
10006924:	d8c13217 	ldw	r3,1224(sp)
10006928:	1800021e 	bne	r3,zero,10006934 <___vfprintf_internal_r+0x1674>
1000692c:	8080004c 	andi	r2,r16,1
10006930:	103d5226 	beq	r2,zero,10005e7c <__alt_data_end+0xf8005e7c>
10006934:	d8c11c17 	ldw	r3,1136(sp)
10006938:	d9013717 	ldw	r4,1244(sp)
1000693c:	00800044 	movi	r2,1
10006940:	48800115 	stw	r2,4(r9)
10006944:	49000015 	stw	r4,0(r9)
10006948:	4091883a 	add	r8,r8,r2
1000694c:	1887883a 	add	r3,r3,r2
10006950:	da011d15 	stw	r8,1140(sp)
10006954:	d8c11c15 	stw	r3,1136(sp)
10006958:	008001c4 	movi	r2,7
1000695c:	10c14516 	blt	r2,r3,10006e74 <___vfprintf_internal_r+0x1bb4>
10006960:	4a400204 	addi	r9,r9,8
10006964:	04a5c83a 	sub	r18,zero,r18
10006968:	0480d70e 	bge	zero,r18,10006cc8 <___vfprintf_internal_r+0x1a08>
1000696c:	05800404 	movi	r22,16
10006970:	05040074 	movhi	r20,4097
10006974:	a501b684 	addi	r20,r20,1754
10006978:	b480db0e 	bge	r22,r18,10006ce8 <___vfprintf_internal_r+0x1a28>
1000697c:	05c001c4 	movi	r23,7
10006980:	df012917 	ldw	fp,1188(sp)
10006984:	00000306 	br	10006994 <___vfprintf_internal_r+0x16d4>
10006988:	4a400204 	addi	r9,r9,8
1000698c:	94bffc04 	addi	r18,r18,-16
10006990:	b480d50e 	bge	r22,r18,10006ce8 <___vfprintf_internal_r+0x1a28>
10006994:	4d000015 	stw	r20,0(r9)
10006998:	4d800115 	stw	r22,4(r9)
1000699c:	42000404 	addi	r8,r8,16
100069a0:	18c00044 	addi	r3,r3,1
100069a4:	da011d15 	stw	r8,1140(sp)
100069a8:	d8c11c15 	stw	r3,1136(sp)
100069ac:	b8fff60e 	bge	r23,r3,10006988 <__alt_data_end+0xf8006988>
100069b0:	8809883a 	mov	r4,r17
100069b4:	e00b883a 	mov	r5,fp
100069b8:	d9811b04 	addi	r6,sp,1132
100069bc:	000528c0 	call	1000528c <__sprint_r>
100069c0:	103b851e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
100069c4:	da011d17 	ldw	r8,1140(sp)
100069c8:	d8c11c17 	ldw	r3,1136(sp)
100069cc:	da400404 	addi	r9,sp,16
100069d0:	003fee06 	br	1000698c <__alt_data_end+0xf800698c>
100069d4:	da413c15 	stw	r9,1264(sp)
100069d8:	000bfac0 	call	1000bfac <__isnand>
100069dc:	da413c17 	ldw	r9,1264(sp)
100069e0:	10007e1e 	bne	r2,zero,10006bdc <___vfprintf_internal_r+0x191c>
100069e4:	00bfffc4 	movi	r2,-1
100069e8:	e0816a26 	beq	fp,r2,10006f94 <___vfprintf_internal_r+0x1cd4>
100069ec:	008019c4 	movi	r2,103
100069f0:	90816526 	beq	r18,r2,10006f88 <___vfprintf_internal_r+0x1cc8>
100069f4:	008011c4 	movi	r2,71
100069f8:	90816326 	beq	r18,r2,10006f88 <___vfprintf_internal_r+0x1cc8>
100069fc:	80c04014 	ori	r3,r16,256
10006a00:	d8c12a15 	stw	r3,1192(sp)
10006a04:	a0016516 	blt	r20,zero,10006f9c <___vfprintf_internal_r+0x1cdc>
10006a08:	d8012f05 	stb	zero,1212(sp)
10006a0c:	00801984 	movi	r2,102
10006a10:	9080f226 	beq	r18,r2,10006ddc <___vfprintf_internal_r+0x1b1c>
10006a14:	00801184 	movi	r2,70
10006a18:	9080f026 	beq	r18,r2,10006ddc <___vfprintf_internal_r+0x1b1c>
10006a1c:	00801944 	movi	r2,101
10006a20:	90818d26 	beq	r18,r2,10007058 <___vfprintf_internal_r+0x1d98>
10006a24:	00801144 	movi	r2,69
10006a28:	90818b26 	beq	r18,r2,10007058 <___vfprintf_internal_r+0x1d98>
10006a2c:	e02f883a 	mov	r23,fp
10006a30:	d8812404 	addi	r2,sp,1168
10006a34:	d8800115 	stw	r2,4(sp)
10006a38:	d8812304 	addi	r2,sp,1164
10006a3c:	d8800215 	stw	r2,8(sp)
10006a40:	d8812204 	addi	r2,sp,1160
10006a44:	ddc00015 	stw	r23,0(sp)
10006a48:	d8800315 	stw	r2,12(sp)
10006a4c:	8809883a 	mov	r4,r17
10006a50:	b00b883a 	mov	r5,r22
10006a54:	a00d883a 	mov	r6,r20
10006a58:	01c00084 	movi	r7,2
10006a5c:	da413c15 	stw	r9,1264(sp)
10006a60:	00075100 	call	10007510 <_dtoa_r>
10006a64:	1027883a 	mov	r19,r2
10006a68:	008019c4 	movi	r2,103
10006a6c:	da413c17 	ldw	r9,1264(sp)
10006a70:	9081951e 	bne	r18,r2,100070c8 <___vfprintf_internal_r+0x1e08>
10006a74:	8080004c 	andi	r2,r16,1
10006a78:	10017926 	beq	r2,zero,10007060 <___vfprintf_internal_r+0x1da0>
10006a7c:	00801184 	movi	r2,70
10006a80:	9dc7883a 	add	r3,r19,r23
10006a84:	9080e626 	beq	r18,r2,10006e20 <___vfprintf_internal_r+0x1b60>
10006a88:	b009883a 	mov	r4,r22
10006a8c:	a00b883a 	mov	r5,r20
10006a90:	000d883a 	mov	r6,zero
10006a94:	000f883a 	mov	r7,zero
10006a98:	d8c13b15 	stw	r3,1260(sp)
10006a9c:	da413c15 	stw	r9,1264(sp)
10006aa0:	000d3280 	call	1000d328 <__eqdf2>
10006aa4:	d8c13b17 	ldw	r3,1260(sp)
10006aa8:	da413c17 	ldw	r9,1264(sp)
10006aac:	10000726 	beq	r2,zero,10006acc <___vfprintf_internal_r+0x180c>
10006ab0:	d8812217 	ldw	r2,1160(sp)
10006ab4:	10c18a2e 	bgeu	r2,r3,100070e0 <___vfprintf_internal_r+0x1e20>
10006ab8:	01000c04 	movi	r4,48
10006abc:	11000005 	stb	r4,0(r2)
10006ac0:	10800044 	addi	r2,r2,1
10006ac4:	d8812215 	stw	r2,1160(sp)
10006ac8:	10fffc1e 	bne	r2,r3,10006abc <__alt_data_end+0xf8006abc>
10006acc:	1cc7c83a 	sub	r3,r3,r19
10006ad0:	d8c13215 	stw	r3,1224(sp)
10006ad4:	008019c4 	movi	r2,103
10006ad8:	9080fa26 	beq	r18,r2,10006ec4 <___vfprintf_internal_r+0x1c04>
10006adc:	008011c4 	movi	r2,71
10006ae0:	9080f826 	beq	r18,r2,10006ec4 <___vfprintf_internal_r+0x1c04>
10006ae4:	00801984 	movi	r2,102
10006ae8:	90818e1e 	bne	r18,r2,10007124 <___vfprintf_internal_r+0x1e64>
10006aec:	d8812417 	ldw	r2,1168(sp)
10006af0:	d8812b15 	stw	r2,1196(sp)
10006af4:	00817c0e 	bge	zero,r2,100070e8 <___vfprintf_internal_r+0x1e28>
10006af8:	e000021e 	bne	fp,zero,10006b04 <___vfprintf_internal_r+0x1844>
10006afc:	8400004c 	andi	r16,r16,1
10006b00:	80000426 	beq	r16,zero,10006b14 <___vfprintf_internal_r+0x1854>
10006b04:	d8812b17 	ldw	r2,1196(sp)
10006b08:	e2000044 	addi	r8,fp,1
10006b0c:	1205883a 	add	r2,r2,r8
10006b10:	d8812b15 	stw	r2,1196(sp)
10006b14:	d8812815 	stw	r2,1184(sp)
10006b18:	10010b16 	blt	r2,zero,10006f48 <___vfprintf_internal_r+0x1c88>
10006b1c:	ddc12f07 	ldb	r23,1212(sp)
10006b20:	b800e426 	beq	r23,zero,10006eb4 <___vfprintf_internal_r+0x1bf4>
10006b24:	00800b44 	movi	r2,45
10006b28:	d8812585 	stb	r2,1174(sp)
10006b2c:	dc012a17 	ldw	r16,1192(sp)
10006b30:	d8013115 	stw	zero,1220(sp)
10006b34:	003b7306 	br	10005904 <__alt_data_end+0xf8005904>
10006b38:	d8812b17 	ldw	r2,1196(sp)
10006b3c:	d8812815 	stw	r2,1184(sp)
10006b40:	10005716 	blt	r2,zero,10006ca0 <___vfprintf_internal_r+0x19e0>
10006b44:	d8812583 	ldbu	r2,1174(sp)
10006b48:	ddc12d15 	stw	r23,1204(sp)
10006b4c:	d8013115 	stw	zero,1220(sp)
10006b50:	003b6806 	br	100058f4 <__alt_data_end+0xf80058f4>
10006b54:	d8c12d17 	ldw	r3,1204(sp)
10006b58:	1dc00017 	ldw	r23,0(r3)
10006b5c:	18c00104 	addi	r3,r3,4
10006b60:	d8c12d15 	stw	r3,1204(sp)
10006b64:	b82dd7fa 	srai	r22,r23,31
10006b68:	b005883a 	mov	r2,r22
10006b6c:	003b4406 	br	10005880 <__alt_data_end+0xf8005880>
10006b70:	d9012d17 	ldw	r4,1204(sp)
10006b74:	002d883a 	mov	r22,zero
10006b78:	00c00044 	movi	r3,1
10006b7c:	25c00017 	ldw	r23,0(r4)
10006b80:	21000104 	addi	r4,r4,4
10006b84:	d9012d15 	stw	r4,1204(sp)
10006b88:	b805883a 	mov	r2,r23
10006b8c:	d8012585 	stb	zero,1174(sp)
10006b90:	003b4406 	br	100058a4 <__alt_data_end+0xf80058a4>
10006b94:	d9012d17 	ldw	r4,1204(sp)
10006b98:	002d883a 	mov	r22,zero
10006b9c:	25c00017 	ldw	r23,0(r4)
10006ba0:	21000104 	addi	r4,r4,4
10006ba4:	d9012d15 	stw	r4,1204(sp)
10006ba8:	003bab06 	br	10005a58 <__alt_data_end+0xf8005a58>
10006bac:	d8812d17 	ldw	r2,1204(sp)
10006bb0:	002d883a 	mov	r22,zero
10006bb4:	0007883a 	mov	r3,zero
10006bb8:	15c00017 	ldw	r23,0(r2)
10006bbc:	10800104 	addi	r2,r2,4
10006bc0:	d8812d15 	stw	r2,1204(sp)
10006bc4:	d8012585 	stb	zero,1174(sp)
10006bc8:	b805883a 	mov	r2,r23
10006bcc:	003b3506 	br	100058a4 <__alt_data_end+0xf80058a4>
10006bd0:	00ffffc4 	movi	r3,-1
10006bd4:	b82b883a 	mov	r21,r23
10006bd8:	003a1606 	br	10005434 <__alt_data_end+0xf8005434>
10006bdc:	008011c4 	movi	r2,71
10006be0:	1480b116 	blt	r2,r18,10006ea8 <___vfprintf_internal_r+0x1be8>
10006be4:	04c40074 	movhi	r19,4097
10006be8:	9cc1a404 	addi	r19,r19,1680
10006bec:	00c000c4 	movi	r3,3
10006bf0:	00bfdfc4 	movi	r2,-129
10006bf4:	80a0703a 	and	r16,r16,r2
10006bf8:	d8c12815 	stw	r3,1184(sp)
10006bfc:	d8812583 	ldbu	r2,1174(sp)
10006c00:	d8c12b15 	stw	r3,1196(sp)
10006c04:	d8013115 	stw	zero,1220(sp)
10006c08:	003b3a06 	br	100058f4 <__alt_data_end+0xf80058f4>
10006c0c:	d9412917 	ldw	r5,1188(sp)
10006c10:	8809883a 	mov	r4,r17
10006c14:	d9811b04 	addi	r6,sp,1132
10006c18:	000528c0 	call	1000528c <__sprint_r>
10006c1c:	103aee1e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006c20:	dc812417 	ldw	r18,1168(sp)
10006c24:	da011d17 	ldw	r8,1140(sp)
10006c28:	da400404 	addi	r9,sp,16
10006c2c:	003f3c06 	br	10006920 <__alt_data_end+0xf8006920>
10006c30:	ad400044 	addi	r21,r21,1
10006c34:	84000814 	ori	r16,r16,32
10006c38:	14800047 	ldb	r18,1(r2)
10006c3c:	0039fc06 	br	10005430 <__alt_data_end+0xf8005430>
10006c40:	d9412917 	ldw	r5,1188(sp)
10006c44:	8809883a 	mov	r4,r17
10006c48:	d9811b04 	addi	r6,sp,1132
10006c4c:	000528c0 	call	1000528c <__sprint_r>
10006c50:	103ae11e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006c54:	da011d17 	ldw	r8,1140(sp)
10006c58:	da400404 	addi	r9,sp,16
10006c5c:	003d2b06 	br	1000610c <__alt_data_end+0xf800610c>
10006c60:	4d000015 	stw	r20,0(r9)
10006c64:	4c800115 	stw	r18,4(r9)
10006c68:	4491883a 	add	r8,r8,r18
10006c6c:	18c00044 	addi	r3,r3,1
10006c70:	da011d15 	stw	r8,1140(sp)
10006c74:	d8c11c15 	stw	r3,1136(sp)
10006c78:	008001c4 	movi	r2,7
10006c7c:	10fcbd16 	blt	r2,r3,10005f74 <__alt_data_end+0xf8005f74>
10006c80:	4a400204 	addi	r9,r9,8
10006c84:	003cc206 	br	10005f90 <__alt_data_end+0xf8005f90>
10006c88:	da413c15 	stw	r9,1264(sp)
10006c8c:	00052000 	call	10005200 <strlen>
10006c90:	d8812b15 	stw	r2,1196(sp)
10006c94:	d8812815 	stw	r2,1184(sp)
10006c98:	da413c17 	ldw	r9,1264(sp)
10006c9c:	103fa90e 	bge	r2,zero,10006b44 <__alt_data_end+0xf8006b44>
10006ca0:	d8012815 	stw	zero,1184(sp)
10006ca4:	003fa706 	br	10006b44 <__alt_data_end+0xf8006b44>
10006ca8:	d9412917 	ldw	r5,1188(sp)
10006cac:	8809883a 	mov	r4,r17
10006cb0:	d9811b04 	addi	r6,sp,1132
10006cb4:	000528c0 	call	1000528c <__sprint_r>
10006cb8:	103ac71e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006cbc:	da011d17 	ldw	r8,1140(sp)
10006cc0:	d8c11c17 	ldw	r3,1136(sp)
10006cc4:	da400404 	addi	r9,sp,16
10006cc8:	d8813217 	ldw	r2,1224(sp)
10006ccc:	4cc00015 	stw	r19,0(r9)
10006cd0:	48800115 	stw	r2,4(r9)
10006cd4:	4091883a 	add	r8,r8,r2
10006cd8:	003c6206 	br	10005e64 <__alt_data_end+0xf8005e64>
10006cdc:	00800b44 	movi	r2,45
10006ce0:	d8812585 	stb	r2,1174(sp)
10006ce4:	003b2406 	br	10005978 <__alt_data_end+0xf8005978>
10006ce8:	4d000015 	stw	r20,0(r9)
10006cec:	4c800115 	stw	r18,4(r9)
10006cf0:	4491883a 	add	r8,r8,r18
10006cf4:	18c00044 	addi	r3,r3,1
10006cf8:	da011d15 	stw	r8,1140(sp)
10006cfc:	d8c11c15 	stw	r3,1136(sp)
10006d00:	008001c4 	movi	r2,7
10006d04:	10ffe816 	blt	r2,r3,10006ca8 <__alt_data_end+0xf8006ca8>
10006d08:	4a400204 	addi	r9,r9,8
10006d0c:	003fee06 	br	10006cc8 <__alt_data_end+0xf8006cc8>
10006d10:	d8c12b15 	stw	r3,1196(sp)
10006d14:	00800184 	movi	r2,6
10006d18:	10c0062e 	bgeu	r2,r3,10006d34 <___vfprintf_internal_r+0x1a74>
10006d1c:	d8812b15 	stw	r2,1196(sp)
10006d20:	d8812815 	stw	r2,1184(sp)
10006d24:	ddc12d15 	stw	r23,1204(sp)
10006d28:	04c40074 	movhi	r19,4097
10006d2c:	9cc1b004 	addi	r19,r19,1728
10006d30:	0039ca06 	br	1000545c <__alt_data_end+0xf800545c>
10006d34:	d8812b17 	ldw	r2,1196(sp)
10006d38:	d8812815 	stw	r2,1184(sp)
10006d3c:	103ff90e 	bge	r2,zero,10006d24 <__alt_data_end+0xf8006d24>
10006d40:	d8012815 	stw	zero,1184(sp)
10006d44:	003ff706 	br	10006d24 <__alt_data_end+0xf8006d24>
10006d48:	00800244 	movi	r2,9
10006d4c:	15fdaa36 	bltu	r2,r23,100063f8 <__alt_data_end+0xf80063f8>
10006d50:	dd010e04 	addi	r20,sp,1080
10006d54:	003dc606 	br	10006470 <__alt_data_end+0xf8006470>
10006d58:	d9412917 	ldw	r5,1188(sp)
10006d5c:	8809883a 	mov	r4,r17
10006d60:	d9811b04 	addi	r6,sp,1132
10006d64:	000528c0 	call	1000528c <__sprint_r>
10006d68:	103a9b1e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006d6c:	dc812417 	ldw	r18,1168(sp)
10006d70:	da400404 	addi	r9,sp,16
10006d74:	003ecd06 	br	100068ac <__alt_data_end+0xf80068ac>
10006d78:	d9412917 	ldw	r5,1188(sp)
10006d7c:	8809883a 	mov	r4,r17
10006d80:	d9811b04 	addi	r6,sp,1132
10006d84:	000528c0 	call	1000528c <__sprint_r>
10006d88:	103a931e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006d8c:	dc812417 	ldw	r18,1168(sp)
10006d90:	da011d17 	ldw	r8,1140(sp)
10006d94:	d8c11c17 	ldw	r3,1136(sp)
10006d98:	da400404 	addi	r9,sp,16
10006d9c:	003eb706 	br	1000687c <__alt_data_end+0xf800687c>
10006da0:	d9412917 	ldw	r5,1188(sp)
10006da4:	8809883a 	mov	r4,r17
10006da8:	d9811b04 	addi	r6,sp,1132
10006dac:	000528c0 	call	1000528c <__sprint_r>
10006db0:	103a891e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006db4:	dc812417 	ldw	r18,1168(sp)
10006db8:	da011d17 	ldw	r8,1140(sp)
10006dbc:	da400404 	addi	r9,sp,16
10006dc0:	003dc206 	br	100064cc <__alt_data_end+0xf80064cc>
10006dc4:	df012815 	stw	fp,1184(sp)
10006dc8:	d8812583 	ldbu	r2,1174(sp)
10006dcc:	df012b15 	stw	fp,1196(sp)
10006dd0:	ddc12d15 	stw	r23,1204(sp)
10006dd4:	d8013115 	stw	zero,1220(sp)
10006dd8:	003ac606 	br	100058f4 <__alt_data_end+0xf80058f4>
10006ddc:	d8812404 	addi	r2,sp,1168
10006de0:	d8800115 	stw	r2,4(sp)
10006de4:	d8812304 	addi	r2,sp,1164
10006de8:	d8800215 	stw	r2,8(sp)
10006dec:	d8812204 	addi	r2,sp,1160
10006df0:	df000015 	stw	fp,0(sp)
10006df4:	d8800315 	stw	r2,12(sp)
10006df8:	8809883a 	mov	r4,r17
10006dfc:	b00b883a 	mov	r5,r22
10006e00:	a00d883a 	mov	r6,r20
10006e04:	01c000c4 	movi	r7,3
10006e08:	da413c15 	stw	r9,1264(sp)
10006e0c:	00075100 	call	10007510 <_dtoa_r>
10006e10:	da413c17 	ldw	r9,1264(sp)
10006e14:	1027883a 	mov	r19,r2
10006e18:	1707883a 	add	r3,r2,fp
10006e1c:	e02f883a 	mov	r23,fp
10006e20:	99000007 	ldb	r4,0(r19)
10006e24:	00800c04 	movi	r2,48
10006e28:	20800326 	beq	r4,r2,10006e38 <___vfprintf_internal_r+0x1b78>
10006e2c:	da812417 	ldw	r10,1168(sp)
10006e30:	1a87883a 	add	r3,r3,r10
10006e34:	003f1406 	br	10006a88 <__alt_data_end+0xf8006a88>
10006e38:	b009883a 	mov	r4,r22
10006e3c:	a00b883a 	mov	r5,r20
10006e40:	000d883a 	mov	r6,zero
10006e44:	000f883a 	mov	r7,zero
10006e48:	d8c13b15 	stw	r3,1260(sp)
10006e4c:	da413c15 	stw	r9,1264(sp)
10006e50:	000d3840 	call	1000d384 <__nedf2>
10006e54:	d8c13b17 	ldw	r3,1260(sp)
10006e58:	da413c17 	ldw	r9,1264(sp)
10006e5c:	103ff326 	beq	r2,zero,10006e2c <__alt_data_end+0xf8006e2c>
10006e60:	00800044 	movi	r2,1
10006e64:	15d5c83a 	sub	r10,r2,r23
10006e68:	da812415 	stw	r10,1168(sp)
10006e6c:	1a87883a 	add	r3,r3,r10
10006e70:	003f0506 	br	10006a88 <__alt_data_end+0xf8006a88>
10006e74:	d9412917 	ldw	r5,1188(sp)
10006e78:	8809883a 	mov	r4,r17
10006e7c:	d9811b04 	addi	r6,sp,1132
10006e80:	000528c0 	call	1000528c <__sprint_r>
10006e84:	103a541e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
10006e88:	dc812417 	ldw	r18,1168(sp)
10006e8c:	da011d17 	ldw	r8,1140(sp)
10006e90:	d8c11c17 	ldw	r3,1136(sp)
10006e94:	da400404 	addi	r9,sp,16
10006e98:	003eb206 	br	10006964 <__alt_data_end+0xf8006964>
10006e9c:	b82b883a 	mov	r21,r23
10006ea0:	0007883a 	mov	r3,zero
10006ea4:	00396306 	br	10005434 <__alt_data_end+0xf8005434>
10006ea8:	04c40074 	movhi	r19,4097
10006eac:	9cc1a504 	addi	r19,r19,1684
10006eb0:	003f4e06 	br	10006bec <__alt_data_end+0xf8006bec>
10006eb4:	d8812583 	ldbu	r2,1174(sp)
10006eb8:	dc012a17 	ldw	r16,1192(sp)
10006ebc:	d8013115 	stw	zero,1220(sp)
10006ec0:	003a8c06 	br	100058f4 <__alt_data_end+0xf80058f4>
10006ec4:	d8812417 	ldw	r2,1168(sp)
10006ec8:	d8812b15 	stw	r2,1196(sp)
10006ecc:	1029883a 	mov	r20,r2
10006ed0:	00bfff44 	movi	r2,-3
10006ed4:	a0800116 	blt	r20,r2,10006edc <___vfprintf_internal_r+0x1c1c>
10006ed8:	e5001d0e 	bge	fp,r20,10006f50 <___vfprintf_internal_r+0x1c90>
10006edc:	94bfff84 	addi	r18,r18,-2
10006ee0:	a53fffc4 	addi	r20,r20,-1
10006ee4:	dd012415 	stw	r20,1168(sp)
10006ee8:	dc811fc5 	stb	r18,1151(sp)
10006eec:	a0007216 	blt	r20,zero,100070b8 <___vfprintf_internal_r+0x1df8>
10006ef0:	00800ac4 	movi	r2,43
10006ef4:	d8812005 	stb	r2,1152(sp)
10006ef8:	00800244 	movi	r2,9
10006efc:	15003516 	blt	r2,r20,10006fd4 <___vfprintf_internal_r+0x1d14>
10006f00:	00800c04 	movi	r2,48
10006f04:	a5000c04 	addi	r20,r20,48
10006f08:	d8812045 	stb	r2,1153(sp)
10006f0c:	dd012085 	stb	r20,1154(sp)
10006f10:	d8c120c4 	addi	r3,sp,1155
10006f14:	d8811fc4 	addi	r2,sp,1151
10006f18:	1885c83a 	sub	r2,r3,r2
10006f1c:	d8c13217 	ldw	r3,1224(sp)
10006f20:	d8813515 	stw	r2,1236(sp)
10006f24:	1885883a 	add	r2,r3,r2
10006f28:	d8812b15 	stw	r2,1196(sp)
10006f2c:	00800044 	movi	r2,1
10006f30:	10c0580e 	bge	r2,r3,10007094 <___vfprintf_internal_r+0x1dd4>
10006f34:	d8812b17 	ldw	r2,1196(sp)
10006f38:	10800044 	addi	r2,r2,1
10006f3c:	d8812b15 	stw	r2,1196(sp)
10006f40:	d8812815 	stw	r2,1184(sp)
10006f44:	103ef50e 	bge	r2,zero,10006b1c <__alt_data_end+0xf8006b1c>
10006f48:	d8012815 	stw	zero,1184(sp)
10006f4c:	003ef306 	br	10006b1c <__alt_data_end+0xf8006b1c>
10006f50:	d8812b17 	ldw	r2,1196(sp)
10006f54:	d8c13217 	ldw	r3,1224(sp)
10006f58:	10c01416 	blt	r2,r3,10006fac <___vfprintf_internal_r+0x1cec>
10006f5c:	8400004c 	andi	r16,r16,1
10006f60:	80000326 	beq	r16,zero,10006f70 <___vfprintf_internal_r+0x1cb0>
10006f64:	d8812b17 	ldw	r2,1196(sp)
10006f68:	10800044 	addi	r2,r2,1
10006f6c:	d8812b15 	stw	r2,1196(sp)
10006f70:	d8812815 	stw	r2,1184(sp)
10006f74:	10001416 	blt	r2,zero,10006fc8 <___vfprintf_internal_r+0x1d08>
10006f78:	048019c4 	movi	r18,103
10006f7c:	003ee706 	br	10006b1c <__alt_data_end+0xf8006b1c>
10006f80:	d8012815 	stw	zero,1184(sp)
10006f84:	003b1a06 	br	10005bf0 <__alt_data_end+0xf8005bf0>
10006f88:	e03e9c1e 	bne	fp,zero,100069fc <__alt_data_end+0xf80069fc>
10006f8c:	07000044 	movi	fp,1
10006f90:	003e9a06 	br	100069fc <__alt_data_end+0xf80069fc>
10006f94:	07000184 	movi	fp,6
10006f98:	003e9806 	br	100069fc <__alt_data_end+0xf80069fc>
10006f9c:	00c00b44 	movi	r3,45
10006fa0:	a520003c 	xorhi	r20,r20,32768
10006fa4:	d8c12f05 	stb	r3,1212(sp)
10006fa8:	003e9806 	br	10006a0c <__alt_data_end+0xf8006a0c>
10006fac:	05003f0e 	bge	zero,r20,100070ac <___vfprintf_internal_r+0x1dec>
10006fb0:	05000044 	movi	r20,1
10006fb4:	d8c13217 	ldw	r3,1224(sp)
10006fb8:	a0e9883a 	add	r20,r20,r3
10006fbc:	dd012b15 	stw	r20,1196(sp)
10006fc0:	dd012815 	stw	r20,1184(sp)
10006fc4:	a03fec0e 	bge	r20,zero,10006f78 <__alt_data_end+0xf8006f78>
10006fc8:	d8012815 	stw	zero,1184(sp)
10006fcc:	048019c4 	movi	r18,103
10006fd0:	003ed206 	br	10006b1c <__alt_data_end+0xf8006b1c>
10006fd4:	d8c11f84 	addi	r3,sp,1150
10006fd8:	102f883a 	mov	r23,r2
10006fdc:	4839883a 	mov	fp,r9
10006fe0:	a009883a 	mov	r4,r20
10006fe4:	01400284 	movi	r5,10
10006fe8:	182d883a 	mov	r22,r3
10006fec:	0004a300 	call	10004a30 <__modsi3>
10006ff0:	10800c04 	addi	r2,r2,48
10006ff4:	a009883a 	mov	r4,r20
10006ff8:	b0800005 	stb	r2,0(r22)
10006ffc:	01400284 	movi	r5,10
10007000:	00049e00 	call	100049e0 <__divsi3>
10007004:	1029883a 	mov	r20,r2
10007008:	b0ffffc4 	addi	r3,r22,-1
1000700c:	b8bff416 	blt	r23,r2,10006fe0 <__alt_data_end+0xf8006fe0>
10007010:	11400c04 	addi	r5,r2,48
10007014:	b17fffc5 	stb	r5,-1(r22)
10007018:	d8811fc4 	addi	r2,sp,1151
1000701c:	e013883a 	mov	r9,fp
10007020:	18803e2e 	bgeu	r3,r2,1000711c <___vfprintf_internal_r+0x1e5c>
10007024:	b007883a 	mov	r3,r22
10007028:	d9012044 	addi	r4,sp,1153
1000702c:	00000206 	br	10007038 <___vfprintf_internal_r+0x1d78>
10007030:	19400003 	ldbu	r5,0(r3)
10007034:	18c00044 	addi	r3,r3,1
10007038:	21400005 	stb	r5,0(r4)
1000703c:	21000044 	addi	r4,r4,1
10007040:	10fffb1e 	bne	r2,r3,10007030 <__alt_data_end+0xf8007030>
10007044:	d8c12004 	addi	r3,sp,1152
10007048:	1d87c83a 	sub	r3,r3,r22
1000704c:	d9012044 	addi	r4,sp,1153
10007050:	20c7883a 	add	r3,r4,r3
10007054:	003fb006 	br	10006f18 <__alt_data_end+0xf8006f18>
10007058:	e5c00044 	addi	r23,fp,1
1000705c:	003e7406 	br	10006a30 <__alt_data_end+0xf8006a30>
10007060:	d8c12217 	ldw	r3,1160(sp)
10007064:	003e9906 	br	10006acc <__alt_data_end+0xf8006acc>
10007068:	d9012d17 	ldw	r4,1204(sp)
1000706c:	ac800043 	ldbu	r18,1(r21)
10007070:	b82b883a 	mov	r21,r23
10007074:	20c00017 	ldw	r3,0(r4)
10007078:	20800104 	addi	r2,r4,4
1000707c:	d8812d15 	stw	r2,1204(sp)
10007080:	18002116 	blt	r3,zero,10007108 <___vfprintf_internal_r+0x1e48>
10007084:	94803fcc 	andi	r18,r18,255
10007088:	9480201c 	xori	r18,r18,128
1000708c:	94bfe004 	addi	r18,r18,-128
10007090:	0038e706 	br	10005430 <__alt_data_end+0xf8005430>
10007094:	80a0703a 	and	r16,r16,r2
10007098:	803fa61e 	bne	r16,zero,10006f34 <__alt_data_end+0xf8006f34>
1000709c:	d8812b17 	ldw	r2,1196(sp)
100070a0:	d8812815 	stw	r2,1184(sp)
100070a4:	103e9d0e 	bge	r2,zero,10006b1c <__alt_data_end+0xf8006b1c>
100070a8:	003fa706 	br	10006f48 <__alt_data_end+0xf8006f48>
100070ac:	00800084 	movi	r2,2
100070b0:	1529c83a 	sub	r20,r2,r20
100070b4:	003fbf06 	br	10006fb4 <__alt_data_end+0xf8006fb4>
100070b8:	00800b44 	movi	r2,45
100070bc:	0529c83a 	sub	r20,zero,r20
100070c0:	d8812005 	stb	r2,1152(sp)
100070c4:	003f8c06 	br	10006ef8 <__alt_data_end+0xf8006ef8>
100070c8:	008011c4 	movi	r2,71
100070cc:	90be6926 	beq	r18,r2,10006a74 <__alt_data_end+0xf8006a74>
100070d0:	003e6a06 	br	10006a7c <__alt_data_end+0xf8006a7c>
100070d4:	00bfffc4 	movi	r2,-1
100070d8:	d8812c15 	stw	r2,1200(sp)
100070dc:	0039ad06 	br	10005794 <__alt_data_end+0xf8005794>
100070e0:	1007883a 	mov	r3,r2
100070e4:	003e7906 	br	10006acc <__alt_data_end+0xf8006acc>
100070e8:	e000021e 	bne	fp,zero,100070f4 <___vfprintf_internal_r+0x1e34>
100070ec:	8400004c 	andi	r16,r16,1
100070f0:	80000e26 	beq	r16,zero,1000712c <___vfprintf_internal_r+0x1e6c>
100070f4:	e7000084 	addi	fp,fp,2
100070f8:	df012b15 	stw	fp,1196(sp)
100070fc:	df012815 	stw	fp,1184(sp)
10007100:	e03e860e 	bge	fp,zero,10006b1c <__alt_data_end+0xf8006b1c>
10007104:	003f9006 	br	10006f48 <__alt_data_end+0xf8006f48>
10007108:	94803fcc 	andi	r18,r18,255
1000710c:	9480201c 	xori	r18,r18,128
10007110:	00ffffc4 	movi	r3,-1
10007114:	94bfe004 	addi	r18,r18,-128
10007118:	0038c506 	br	10005430 <__alt_data_end+0xf8005430>
1000711c:	d8c12044 	addi	r3,sp,1153
10007120:	003f7d06 	br	10006f18 <__alt_data_end+0xf8006f18>
10007124:	dd012417 	ldw	r20,1168(sp)
10007128:	003f6d06 	br	10006ee0 <__alt_data_end+0xf8006ee0>
1000712c:	00c00044 	movi	r3,1
10007130:	d8c12815 	stw	r3,1184(sp)
10007134:	d8c12b15 	stw	r3,1196(sp)
10007138:	003e7806 	br	10006b1c <__alt_data_end+0xf8006b1c>

1000713c <__vfprintf_internal>:
1000713c:	00840074 	movhi	r2,4097
10007140:	1088ae04 	addi	r2,r2,8888
10007144:	2007883a 	mov	r3,r4
10007148:	11000017 	ldw	r4,0(r2)
1000714c:	2805883a 	mov	r2,r5
10007150:	300f883a 	mov	r7,r6
10007154:	180b883a 	mov	r5,r3
10007158:	100d883a 	mov	r6,r2
1000715c:	00052c01 	jmpi	100052c0 <___vfprintf_internal_r>

10007160 <__swsetup_r>:
10007160:	00840074 	movhi	r2,4097
10007164:	1088ae04 	addi	r2,r2,8888
10007168:	10800017 	ldw	r2,0(r2)
1000716c:	defffd04 	addi	sp,sp,-12
10007170:	dc400115 	stw	r17,4(sp)
10007174:	dc000015 	stw	r16,0(sp)
10007178:	dfc00215 	stw	ra,8(sp)
1000717c:	2023883a 	mov	r17,r4
10007180:	2821883a 	mov	r16,r5
10007184:	10000226 	beq	r2,zero,10007190 <__swsetup_r+0x30>
10007188:	10c00e17 	ldw	r3,56(r2)
1000718c:	18003d26 	beq	r3,zero,10007284 <__swsetup_r+0x124>
10007190:	8080030b 	ldhu	r2,12(r16)
10007194:	10c0020c 	andi	r3,r2,8
10007198:	18ffffcc 	andi	r3,r3,65535
1000719c:	18e0001c 	xori	r3,r3,32768
100071a0:	18e00004 	addi	r3,r3,-32768
100071a4:	18001226 	beq	r3,zero,100071f0 <__swsetup_r+0x90>
100071a8:	80c00417 	ldw	r3,16(r16)
100071ac:	18001f26 	beq	r3,zero,1000722c <__swsetup_r+0xcc>
100071b0:	1100004c 	andi	r4,r2,1
100071b4:	2000261e 	bne	r4,zero,10007250 <__swsetup_r+0xf0>
100071b8:	1080008c 	andi	r2,r2,2
100071bc:	10bfffcc 	andi	r2,r2,65535
100071c0:	10a0001c 	xori	r2,r2,32768
100071c4:	10a00004 	addi	r2,r2,-32768
100071c8:	1000311e 	bne	r2,zero,10007290 <__swsetup_r+0x130>
100071cc:	80800517 	ldw	r2,20(r16)
100071d0:	80800215 	stw	r2,8(r16)
100071d4:	18002326 	beq	r3,zero,10007264 <__swsetup_r+0x104>
100071d8:	0005883a 	mov	r2,zero
100071dc:	dfc00217 	ldw	ra,8(sp)
100071e0:	dc400117 	ldw	r17,4(sp)
100071e4:	dc000017 	ldw	r16,0(sp)
100071e8:	dec00304 	addi	sp,sp,12
100071ec:	f800283a 	ret
100071f0:	10c0040c 	andi	r3,r2,16
100071f4:	18ffffcc 	andi	r3,r3,65535
100071f8:	18e0001c 	xori	r3,r3,32768
100071fc:	18e00004 	addi	r3,r3,-32768
10007200:	18001e26 	beq	r3,zero,1000727c <__swsetup_r+0x11c>
10007204:	10c0010c 	andi	r3,r2,4
10007208:	18ffffcc 	andi	r3,r3,65535
1000720c:	18e0001c 	xori	r3,r3,32768
10007210:	18e00004 	addi	r3,r3,-32768
10007214:	1800211e 	bne	r3,zero,1000729c <__swsetup_r+0x13c>
10007218:	80c00417 	ldw	r3,16(r16)
1000721c:	11400214 	ori	r5,r2,8
10007220:	8140030d 	sth	r5,12(r16)
10007224:	2805883a 	mov	r2,r5
10007228:	183fe11e 	bne	r3,zero,100071b0 <__alt_data_end+0xf80071b0>
1000722c:	1140a00c 	andi	r5,r2,640
10007230:	01008004 	movi	r4,512
10007234:	293fde26 	beq	r5,r4,100071b0 <__alt_data_end+0xf80071b0>
10007238:	8809883a 	mov	r4,r17
1000723c:	800b883a 	mov	r5,r16
10007240:	0009b5c0 	call	10009b5c <__smakebuf_r>
10007244:	8080030b 	ldhu	r2,12(r16)
10007248:	80c00417 	ldw	r3,16(r16)
1000724c:	003fd806 	br	100071b0 <__alt_data_end+0xf80071b0>
10007250:	80800517 	ldw	r2,20(r16)
10007254:	80000215 	stw	zero,8(r16)
10007258:	0085c83a 	sub	r2,zero,r2
1000725c:	80800615 	stw	r2,24(r16)
10007260:	183fdd1e 	bne	r3,zero,100071d8 <__alt_data_end+0xf80071d8>
10007264:	8080030b 	ldhu	r2,12(r16)
10007268:	1080200c 	andi	r2,r2,128
1000726c:	10bfffcc 	andi	r2,r2,65535
10007270:	10a0001c 	xori	r2,r2,32768
10007274:	10a00004 	addi	r2,r2,-32768
10007278:	103fd826 	beq	r2,zero,100071dc <__alt_data_end+0xf80071dc>
1000727c:	00bfffc4 	movi	r2,-1
10007280:	003fd606 	br	100071dc <__alt_data_end+0xf80071dc>
10007284:	1009883a 	mov	r4,r2
10007288:	0008de80 	call	10008de8 <__sinit>
1000728c:	003fc006 	br	10007190 <__alt_data_end+0xf8007190>
10007290:	0005883a 	mov	r2,zero
10007294:	80800215 	stw	r2,8(r16)
10007298:	003fce06 	br	100071d4 <__alt_data_end+0xf80071d4>
1000729c:	81400c17 	ldw	r5,48(r16)
100072a0:	28000626 	beq	r5,zero,100072bc <__swsetup_r+0x15c>
100072a4:	80c01004 	addi	r3,r16,64
100072a8:	28c00326 	beq	r5,r3,100072b8 <__swsetup_r+0x158>
100072ac:	8809883a 	mov	r4,r17
100072b0:	000916c0 	call	1000916c <_free_r>
100072b4:	8080030b 	ldhu	r2,12(r16)
100072b8:	80000c15 	stw	zero,48(r16)
100072bc:	80c00417 	ldw	r3,16(r16)
100072c0:	013ff6c4 	movi	r4,-37
100072c4:	2084703a 	and	r2,r4,r2
100072c8:	80000115 	stw	zero,4(r16)
100072cc:	80c00015 	stw	r3,0(r16)
100072d0:	003fd206 	br	1000721c <__alt_data_end+0xf800721c>

100072d4 <quorem>:
100072d4:	defff204 	addi	sp,sp,-56
100072d8:	dd000815 	stw	r20,32(sp)
100072dc:	20800417 	ldw	r2,16(r4)
100072e0:	2d000417 	ldw	r20,16(r5)
100072e4:	dcc00715 	stw	r19,28(sp)
100072e8:	dfc00d15 	stw	ra,52(sp)
100072ec:	df000c15 	stw	fp,48(sp)
100072f0:	ddc00b15 	stw	r23,44(sp)
100072f4:	dd800a15 	stw	r22,40(sp)
100072f8:	dd400915 	stw	r21,36(sp)
100072fc:	dc800615 	stw	r18,24(sp)
10007300:	dc400515 	stw	r17,20(sp)
10007304:	dc000415 	stw	r16,16(sp)
10007308:	d9400015 	stw	r5,0(sp)
1000730c:	2027883a 	mov	r19,r4
10007310:	15007d16 	blt	r2,r20,10007508 <quorem+0x234>
10007314:	a0800104 	addi	r2,r20,4
10007318:	1085883a 	add	r2,r2,r2
1000731c:	1085883a 	add	r2,r2,r2
10007320:	28ad883a 	add	r22,r5,r2
10007324:	2085883a 	add	r2,r4,r2
10007328:	10800017 	ldw	r2,0(r2)
1000732c:	b1400017 	ldw	r5,0(r22)
10007330:	a53fffc4 	addi	r20,r20,-1
10007334:	1009883a 	mov	r4,r2
10007338:	29400044 	addi	r5,r5,1
1000733c:	d8800115 	stw	r2,4(sp)
10007340:	0004a8c0 	call	10004a8c <__udivsi3>
10007344:	1025883a 	mov	r18,r2
10007348:	d8800017 	ldw	r2,0(sp)
1000734c:	9f000504 	addi	fp,r19,20
10007350:	14000504 	addi	r16,r2,20
10007354:	90003626 	beq	r18,zero,10007430 <quorem+0x15c>
10007358:	802b883a 	mov	r21,r16
1000735c:	e023883a 	mov	r17,fp
10007360:	0007883a 	mov	r3,zero
10007364:	002f883a 	mov	r23,zero
10007368:	a9800017 	ldw	r6,0(r21)
1000736c:	900b883a 	mov	r5,r18
10007370:	d8c00315 	stw	r3,12(sp)
10007374:	313fffcc 	andi	r4,r6,65535
10007378:	d9800215 	stw	r6,8(sp)
1000737c:	00050500 	call	10005050 <__mulsi3>
10007380:	d9800217 	ldw	r6,8(sp)
10007384:	d8c00317 	ldw	r3,12(sp)
10007388:	900b883a 	mov	r5,r18
1000738c:	3008d43a 	srli	r4,r6,16
10007390:	1887883a 	add	r3,r3,r2
10007394:	d8c00315 	stw	r3,12(sp)
10007398:	00050500 	call	10005050 <__mulsi3>
1000739c:	89400017 	ldw	r5,0(r17)
100073a0:	d8c00317 	ldw	r3,12(sp)
100073a4:	ad400104 	addi	r21,r21,4
100073a8:	293fffcc 	andi	r4,r5,65535
100073ac:	1810d43a 	srli	r8,r3,16
100073b0:	25c9883a 	add	r4,r4,r23
100073b4:	18ffffcc 	andi	r3,r3,65535
100073b8:	20c9c83a 	sub	r4,r4,r3
100073bc:	280cd43a 	srli	r6,r5,16
100073c0:	4085883a 	add	r2,r8,r2
100073c4:	2007d43a 	srai	r3,r4,16
100073c8:	117fffcc 	andi	r5,r2,65535
100073cc:	314bc83a 	sub	r5,r6,r5
100073d0:	28cb883a 	add	r5,r5,r3
100073d4:	8940008d 	sth	r5,2(r17)
100073d8:	8900000d 	sth	r4,0(r17)
100073dc:	1006d43a 	srli	r3,r2,16
100073e0:	282fd43a 	srai	r23,r5,16
100073e4:	8c400104 	addi	r17,r17,4
100073e8:	b57fdf2e 	bgeu	r22,r21,10007368 <__alt_data_end+0xf8007368>
100073ec:	d8c00117 	ldw	r3,4(sp)
100073f0:	18000f1e 	bne	r3,zero,10007430 <quorem+0x15c>
100073f4:	a0800144 	addi	r2,r20,5
100073f8:	1085883a 	add	r2,r2,r2
100073fc:	1085883a 	add	r2,r2,r2
10007400:	9887883a 	add	r3,r19,r2
10007404:	18bfff04 	addi	r2,r3,-4
10007408:	e080082e 	bgeu	fp,r2,1000742c <quorem+0x158>
1000740c:	18ffff17 	ldw	r3,-4(r3)
10007410:	18000326 	beq	r3,zero,10007420 <quorem+0x14c>
10007414:	00000506 	br	1000742c <quorem+0x158>
10007418:	10c00017 	ldw	r3,0(r2)
1000741c:	1800031e 	bne	r3,zero,1000742c <quorem+0x158>
10007420:	10bfff04 	addi	r2,r2,-4
10007424:	a53fffc4 	addi	r20,r20,-1
10007428:	e0bffb36 	bltu	fp,r2,10007418 <__alt_data_end+0xf8007418>
1000742c:	9d000415 	stw	r20,16(r19)
10007430:	d9400017 	ldw	r5,0(sp)
10007434:	9809883a 	mov	r4,r19
10007438:	000b2740 	call	1000b274 <__mcmp>
1000743c:	10002516 	blt	r2,zero,100074d4 <quorem+0x200>
10007440:	94800044 	addi	r18,r18,1
10007444:	e007883a 	mov	r3,fp
10007448:	000d883a 	mov	r6,zero
1000744c:	18800017 	ldw	r2,0(r3)
10007450:	82000017 	ldw	r8,0(r16)
10007454:	84000104 	addi	r16,r16,4
10007458:	11ffffcc 	andi	r7,r2,65535
1000745c:	413fffcc 	andi	r4,r8,65535
10007460:	398d883a 	add	r6,r7,r6
10007464:	310fc83a 	sub	r7,r6,r4
10007468:	4010d43a 	srli	r8,r8,16
1000746c:	100cd43a 	srli	r6,r2,16
10007470:	3809d43a 	srai	r4,r7,16
10007474:	19c0000d 	sth	r7,0(r3)
10007478:	320dc83a 	sub	r6,r6,r8
1000747c:	310d883a 	add	r6,r6,r4
10007480:	1980008d 	sth	r6,2(r3)
10007484:	300dd43a 	srai	r6,r6,16
10007488:	18c00104 	addi	r3,r3,4
1000748c:	b43fef2e 	bgeu	r22,r16,1000744c <__alt_data_end+0xf800744c>
10007490:	a0800144 	addi	r2,r20,5
10007494:	1085883a 	add	r2,r2,r2
10007498:	1085883a 	add	r2,r2,r2
1000749c:	9885883a 	add	r2,r19,r2
100074a0:	10c00017 	ldw	r3,0(r2)
100074a4:	18000b1e 	bne	r3,zero,100074d4 <quorem+0x200>
100074a8:	10ffff04 	addi	r3,r2,-4
100074ac:	e0c0082e 	bgeu	fp,r3,100074d0 <quorem+0x1fc>
100074b0:	10bfff17 	ldw	r2,-4(r2)
100074b4:	10000326 	beq	r2,zero,100074c4 <quorem+0x1f0>
100074b8:	00000506 	br	100074d0 <quorem+0x1fc>
100074bc:	18800017 	ldw	r2,0(r3)
100074c0:	1000031e 	bne	r2,zero,100074d0 <quorem+0x1fc>
100074c4:	18ffff04 	addi	r3,r3,-4
100074c8:	a53fffc4 	addi	r20,r20,-1
100074cc:	e0fffb36 	bltu	fp,r3,100074bc <__alt_data_end+0xf80074bc>
100074d0:	9d000415 	stw	r20,16(r19)
100074d4:	9005883a 	mov	r2,r18
100074d8:	dfc00d17 	ldw	ra,52(sp)
100074dc:	df000c17 	ldw	fp,48(sp)
100074e0:	ddc00b17 	ldw	r23,44(sp)
100074e4:	dd800a17 	ldw	r22,40(sp)
100074e8:	dd400917 	ldw	r21,36(sp)
100074ec:	dd000817 	ldw	r20,32(sp)
100074f0:	dcc00717 	ldw	r19,28(sp)
100074f4:	dc800617 	ldw	r18,24(sp)
100074f8:	dc400517 	ldw	r17,20(sp)
100074fc:	dc000417 	ldw	r16,16(sp)
10007500:	dec00e04 	addi	sp,sp,56
10007504:	f800283a 	ret
10007508:	0005883a 	mov	r2,zero
1000750c:	003ff206 	br	100074d8 <__alt_data_end+0xf80074d8>

10007510 <_dtoa_r>:
10007510:	20801017 	ldw	r2,64(r4)
10007514:	deffdf04 	addi	sp,sp,-132
10007518:	dcc01a15 	stw	r19,104(sp)
1000751c:	dc801915 	stw	r18,100(sp)
10007520:	dc401815 	stw	r17,96(sp)
10007524:	dc001715 	stw	r16,92(sp)
10007528:	dfc02015 	stw	ra,128(sp)
1000752c:	df001f15 	stw	fp,124(sp)
10007530:	ddc01e15 	stw	r23,120(sp)
10007534:	dd801d15 	stw	r22,116(sp)
10007538:	dd401c15 	stw	r21,112(sp)
1000753c:	dd001b15 	stw	r20,108(sp)
10007540:	d9400315 	stw	r5,12(sp)
10007544:	d9c00415 	stw	r7,16(sp)
10007548:	2021883a 	mov	r16,r4
1000754c:	3025883a 	mov	r18,r6
10007550:	dcc02317 	ldw	r19,140(sp)
10007554:	3023883a 	mov	r17,r6
10007558:	10000826 	beq	r2,zero,1000757c <_dtoa_r+0x6c>
1000755c:	20c01117 	ldw	r3,68(r4)
10007560:	01800044 	movi	r6,1
10007564:	100b883a 	mov	r5,r2
10007568:	30cc983a 	sll	r6,r6,r3
1000756c:	10c00115 	stw	r3,4(r2)
10007570:	11800215 	stw	r6,8(r2)
10007574:	000a9d00 	call	1000a9d0 <_Bfree>
10007578:	80001015 	stw	zero,64(r16)
1000757c:	90002f16 	blt	r18,zero,1000763c <_dtoa_r+0x12c>
10007580:	98000015 	stw	zero,0(r19)
10007584:	90dffc2c 	andhi	r3,r18,32752
10007588:	009ffc34 	movhi	r2,32752
1000758c:	18801c26 	beq	r3,r2,10007600 <_dtoa_r+0xf0>
10007590:	d9000317 	ldw	r4,12(sp)
10007594:	880b883a 	mov	r5,r17
10007598:	000d883a 	mov	r6,zero
1000759c:	000f883a 	mov	r7,zero
100075a0:	000d3840 	call	1000d384 <__nedf2>
100075a4:	10002c1e 	bne	r2,zero,10007658 <_dtoa_r+0x148>
100075a8:	d9002217 	ldw	r4,136(sp)
100075ac:	d9c02417 	ldw	r7,144(sp)
100075b0:	00800044 	movi	r2,1
100075b4:	20800015 	stw	r2,0(r4)
100075b8:	38019426 	beq	r7,zero,10007c0c <_dtoa_r+0x6fc>
100075bc:	00840074 	movhi	r2,4097
100075c0:	1081b244 	addi	r2,r2,1737
100075c4:	38800015 	stw	r2,0(r7)
100075c8:	15ffffc4 	addi	r23,r2,-1
100075cc:	b805883a 	mov	r2,r23
100075d0:	dfc02017 	ldw	ra,128(sp)
100075d4:	df001f17 	ldw	fp,124(sp)
100075d8:	ddc01e17 	ldw	r23,120(sp)
100075dc:	dd801d17 	ldw	r22,116(sp)
100075e0:	dd401c17 	ldw	r21,112(sp)
100075e4:	dd001b17 	ldw	r20,108(sp)
100075e8:	dcc01a17 	ldw	r19,104(sp)
100075ec:	dc801917 	ldw	r18,100(sp)
100075f0:	dc401817 	ldw	r17,96(sp)
100075f4:	dc001717 	ldw	r16,92(sp)
100075f8:	dec02104 	addi	sp,sp,132
100075fc:	f800283a 	ret
10007600:	d8c02217 	ldw	r3,136(sp)
10007604:	d9000317 	ldw	r4,12(sp)
10007608:	0089c3c4 	movi	r2,9999
1000760c:	18800015 	stw	r2,0(r3)
10007610:	20016c26 	beq	r4,zero,10007bc4 <_dtoa_r+0x6b4>
10007614:	05c40074 	movhi	r23,4097
10007618:	bdc1be04 	addi	r23,r23,1784
1000761c:	d9c02417 	ldw	r7,144(sp)
10007620:	383fea26 	beq	r7,zero,100075cc <__alt_data_end+0xf80075cc>
10007624:	b88000c7 	ldb	r2,3(r23)
10007628:	10016d1e 	bne	r2,zero,10007be0 <_dtoa_r+0x6d0>
1000762c:	b88000c4 	addi	r2,r23,3
10007630:	d8c02417 	ldw	r3,144(sp)
10007634:	18800015 	stw	r2,0(r3)
10007638:	003fe406 	br	100075cc <__alt_data_end+0xf80075cc>
1000763c:	04600034 	movhi	r17,32768
10007640:	8c7fffc4 	addi	r17,r17,-1
10007644:	9462703a 	and	r17,r18,r17
10007648:	00800044 	movi	r2,1
1000764c:	98800015 	stw	r2,0(r19)
10007650:	8825883a 	mov	r18,r17
10007654:	003fcb06 	br	10007584 <__alt_data_end+0xf8007584>
10007658:	d9400317 	ldw	r5,12(sp)
1000765c:	9028d53a 	srli	r20,r18,20
10007660:	d8800204 	addi	r2,sp,8
10007664:	d8800015 	stw	r2,0(sp)
10007668:	8009883a 	mov	r4,r16
1000766c:	880d883a 	mov	r6,r17
10007670:	d9c00104 	addi	r7,sp,4
10007674:	000b61c0 	call	1000b61c <__d2b>
10007678:	a501ffcc 	andi	r20,r20,2047
1000767c:	1039883a 	mov	fp,r2
10007680:	a001591e 	bne	r20,zero,10007be8 <_dtoa_r+0x6d8>
10007684:	dd400217 	ldw	r21,8(sp)
10007688:	dd000117 	ldw	r20,4(sp)
1000768c:	00befbc4 	movi	r2,-1041
10007690:	ad29883a 	add	r20,r21,r20
10007694:	a082d216 	blt	r20,r2,100081e0 <_dtoa_r+0xcd0>
10007698:	d8c00317 	ldw	r3,12(sp)
1000769c:	013f0384 	movi	r4,-1010
100076a0:	2509c83a 	sub	r4,r4,r20
100076a4:	a0810484 	addi	r2,r20,1042
100076a8:	9124983a 	sll	r18,r18,r4
100076ac:	1884d83a 	srl	r2,r3,r2
100076b0:	9088b03a 	or	r4,r18,r2
100076b4:	000d4a00 	call	1000d4a0 <__floatunsidf>
100076b8:	1009883a 	mov	r4,r2
100076bc:	017f8434 	movhi	r5,65040
100076c0:	00800044 	movi	r2,1
100076c4:	194b883a 	add	r5,r3,r5
100076c8:	a53fffc4 	addi	r20,r20,-1
100076cc:	d8800f15 	stw	r2,60(sp)
100076d0:	000d883a 	mov	r6,zero
100076d4:	01cffe34 	movhi	r7,16376
100076d8:	00042780 	call	10004278 <__subdf3>
100076dc:	1009883a 	mov	r4,r2
100076e0:	180b883a 	mov	r5,r3
100076e4:	0198dbf4 	movhi	r6,25455
100076e8:	3190d844 	addi	r6,r6,17249
100076ec:	01cff4f4 	movhi	r7,16339
100076f0:	39e1e9c4 	addi	r7,r7,-30809
100076f4:	00042d80 	call	100042d8 <__muldf3>
100076f8:	180b883a 	mov	r5,r3
100076fc:	01a2d874 	movhi	r6,35681
10007700:	31b22cc4 	addi	r6,r6,-14157
10007704:	01cff1f4 	movhi	r7,16327
10007708:	39e28a04 	addi	r7,r7,-30168
1000770c:	1009883a 	mov	r4,r2
10007710:	00042240 	call	10004224 <__adddf3>
10007714:	a009883a 	mov	r4,r20
10007718:	1027883a 	mov	r19,r2
1000771c:	1825883a 	mov	r18,r3
10007720:	00047d40 	call	100047d4 <__floatsidf>
10007724:	1009883a 	mov	r4,r2
10007728:	180b883a 	mov	r5,r3
1000772c:	019427f4 	movhi	r6,20639
10007730:	319e7ec4 	addi	r6,r6,31227
10007734:	01cff4f4 	movhi	r7,16339
10007738:	39d104c4 	addi	r7,r7,17427
1000773c:	00042d80 	call	100042d8 <__muldf3>
10007740:	9809883a 	mov	r4,r19
10007744:	900b883a 	mov	r5,r18
10007748:	100d883a 	mov	r6,r2
1000774c:	180f883a 	mov	r7,r3
10007750:	00042240 	call	10004224 <__adddf3>
10007754:	1009883a 	mov	r4,r2
10007758:	180b883a 	mov	r5,r3
1000775c:	1027883a 	mov	r19,r2
10007760:	1825883a 	mov	r18,r3
10007764:	00048a80 	call	100048a8 <__fixdfsi>
10007768:	9809883a 	mov	r4,r19
1000776c:	900b883a 	mov	r5,r18
10007770:	000d883a 	mov	r6,zero
10007774:	000f883a 	mov	r7,zero
10007778:	d8800615 	stw	r2,24(sp)
1000777c:	000d4440 	call	1000d444 <__ltdf2>
10007780:	10027e16 	blt	r2,zero,1000817c <_dtoa_r+0xc6c>
10007784:	d8c00617 	ldw	r3,24(sp)
10007788:	00800584 	movi	r2,22
1000778c:	10c26c36 	bltu	r2,r3,10008140 <_dtoa_r+0xc30>
10007790:	180490fa 	slli	r2,r3,3
10007794:	00c40074 	movhi	r3,4097
10007798:	18c1e404 	addi	r3,r3,1936
1000779c:	d9800317 	ldw	r6,12(sp)
100077a0:	1885883a 	add	r2,r3,r2
100077a4:	11000017 	ldw	r4,0(r2)
100077a8:	11400117 	ldw	r5,4(r2)
100077ac:	880f883a 	mov	r7,r17
100077b0:	000d3e00 	call	1000d3e0 <__gtdf2>
100077b4:	00828f0e 	bge	zero,r2,100081f4 <_dtoa_r+0xce4>
100077b8:	d8800617 	ldw	r2,24(sp)
100077bc:	d8000d15 	stw	zero,52(sp)
100077c0:	10bfffc4 	addi	r2,r2,-1
100077c4:	d8800615 	stw	r2,24(sp)
100077c8:	ad29c83a 	sub	r20,r21,r20
100077cc:	a53fffc4 	addi	r20,r20,-1
100077d0:	a0026616 	blt	r20,zero,1000816c <_dtoa_r+0xc5c>
100077d4:	dd000715 	stw	r20,28(sp)
100077d8:	d8000815 	stw	zero,32(sp)
100077dc:	d8800617 	ldw	r2,24(sp)
100077e0:	10025a16 	blt	r2,zero,1000814c <_dtoa_r+0xc3c>
100077e4:	d8c00717 	ldw	r3,28(sp)
100077e8:	d8800b15 	stw	r2,44(sp)
100077ec:	d8000a15 	stw	zero,40(sp)
100077f0:	1887883a 	add	r3,r3,r2
100077f4:	d8c00715 	stw	r3,28(sp)
100077f8:	d9c00417 	ldw	r7,16(sp)
100077fc:	00800244 	movi	r2,9
10007800:	11c10536 	bltu	r2,r7,10007c18 <_dtoa_r+0x708>
10007804:	00800144 	movi	r2,5
10007808:	11c4c60e 	bge	r2,r7,10008b24 <_dtoa_r+0x1614>
1000780c:	39ffff04 	addi	r7,r7,-4
10007810:	d9c00415 	stw	r7,16(sp)
10007814:	0027883a 	mov	r19,zero
10007818:	d9c00417 	ldw	r7,16(sp)
1000781c:	008000c4 	movi	r2,3
10007820:	3883a226 	beq	r7,r2,100086ac <_dtoa_r+0x119c>
10007824:	11c2bc16 	blt	r2,r7,10008318 <_dtoa_r+0xe08>
10007828:	00800084 	movi	r2,2
1000782c:	3880fb1e 	bne	r7,r2,10007c1c <_dtoa_r+0x70c>
10007830:	d8000c15 	stw	zero,48(sp)
10007834:	d9002117 	ldw	r4,132(sp)
10007838:	0103ae0e 	bge	zero,r4,100086f4 <_dtoa_r+0x11e4>
1000783c:	2025883a 	mov	r18,r4
10007840:	d9000e15 	stw	r4,56(sp)
10007844:	d9000915 	stw	r4,36(sp)
10007848:	80001115 	stw	zero,68(r16)
1000784c:	008005c4 	movi	r2,23
10007850:	1484b22e 	bgeu	r2,r18,10008b1c <_dtoa_r+0x160c>
10007854:	00c00044 	movi	r3,1
10007858:	00800104 	movi	r2,4
1000785c:	1085883a 	add	r2,r2,r2
10007860:	11000504 	addi	r4,r2,20
10007864:	180b883a 	mov	r5,r3
10007868:	18c00044 	addi	r3,r3,1
1000786c:	913ffb2e 	bgeu	r18,r4,1000785c <__alt_data_end+0xf800785c>
10007870:	81401115 	stw	r5,68(r16)
10007874:	8009883a 	mov	r4,r16
10007878:	000a9280 	call	1000a928 <_Balloc>
1000787c:	102f883a 	mov	r23,r2
10007880:	80801015 	stw	r2,64(r16)
10007884:	00800384 	movi	r2,14
10007888:	1480f036 	bltu	r2,r18,10007c4c <_dtoa_r+0x73c>
1000788c:	9800ef26 	beq	r19,zero,10007c4c <_dtoa_r+0x73c>
10007890:	d8800617 	ldw	r2,24(sp)
10007894:	00839c0e 	bge	zero,r2,10008708 <_dtoa_r+0x11f8>
10007898:	d8c00617 	ldw	r3,24(sp)
1000789c:	108003cc 	andi	r2,r2,15
100078a0:	100490fa 	slli	r2,r2,3
100078a4:	182bd13a 	srai	r21,r3,4
100078a8:	00c40074 	movhi	r3,4097
100078ac:	18c1e404 	addi	r3,r3,1936
100078b0:	1885883a 	add	r2,r3,r2
100078b4:	a8c0040c 	andi	r3,r21,16
100078b8:	12800017 	ldw	r10,0(r2)
100078bc:	15800117 	ldw	r22,4(r2)
100078c0:	18038726 	beq	r3,zero,100086e0 <_dtoa_r+0x11d0>
100078c4:	00840074 	movhi	r2,4097
100078c8:	1081da04 	addi	r2,r2,1896
100078cc:	11800817 	ldw	r6,32(r2)
100078d0:	11c00917 	ldw	r7,36(r2)
100078d4:	d9000317 	ldw	r4,12(sp)
100078d8:	880b883a 	mov	r5,r17
100078dc:	da801515 	stw	r10,84(sp)
100078e0:	00045bc0 	call	100045bc <__divdf3>
100078e4:	da801517 	ldw	r10,84(sp)
100078e8:	d8801015 	stw	r2,64(sp)
100078ec:	1829883a 	mov	r20,r3
100078f0:	ad4003cc 	andi	r21,r21,15
100078f4:	048000c4 	movi	r18,3
100078f8:	a8001126 	beq	r21,zero,10007940 <_dtoa_r+0x430>
100078fc:	04c40074 	movhi	r19,4097
10007900:	9cc1da04 	addi	r19,r19,1896
10007904:	5005883a 	mov	r2,r10
10007908:	b007883a 	mov	r3,r22
1000790c:	a980004c 	andi	r6,r21,1
10007910:	1009883a 	mov	r4,r2
10007914:	a82bd07a 	srai	r21,r21,1
10007918:	180b883a 	mov	r5,r3
1000791c:	30000426 	beq	r6,zero,10007930 <_dtoa_r+0x420>
10007920:	99800017 	ldw	r6,0(r19)
10007924:	99c00117 	ldw	r7,4(r19)
10007928:	94800044 	addi	r18,r18,1
1000792c:	00042d80 	call	100042d8 <__muldf3>
10007930:	9cc00204 	addi	r19,r19,8
10007934:	a83ff51e 	bne	r21,zero,1000790c <__alt_data_end+0xf800790c>
10007938:	1015883a 	mov	r10,r2
1000793c:	182d883a 	mov	r22,r3
10007940:	d9001017 	ldw	r4,64(sp)
10007944:	a00b883a 	mov	r5,r20
10007948:	500d883a 	mov	r6,r10
1000794c:	b00f883a 	mov	r7,r22
10007950:	00045bc0 	call	100045bc <__divdf3>
10007954:	1027883a 	mov	r19,r2
10007958:	1829883a 	mov	r20,r3
1000795c:	d8c00d17 	ldw	r3,52(sp)
10007960:	18000626 	beq	r3,zero,1000797c <_dtoa_r+0x46c>
10007964:	9809883a 	mov	r4,r19
10007968:	a00b883a 	mov	r5,r20
1000796c:	000d883a 	mov	r6,zero
10007970:	01cffc34 	movhi	r7,16368
10007974:	000d4440 	call	1000d444 <__ltdf2>
10007978:	10040e16 	blt	r2,zero,100089b4 <_dtoa_r+0x14a4>
1000797c:	9009883a 	mov	r4,r18
10007980:	00047d40 	call	100047d4 <__floatsidf>
10007984:	1009883a 	mov	r4,r2
10007988:	180b883a 	mov	r5,r3
1000798c:	980d883a 	mov	r6,r19
10007990:	a00f883a 	mov	r7,r20
10007994:	00042d80 	call	100042d8 <__muldf3>
10007998:	1009883a 	mov	r4,r2
1000799c:	180b883a 	mov	r5,r3
100079a0:	000d883a 	mov	r6,zero
100079a4:	01d00734 	movhi	r7,16412
100079a8:	00042240 	call	10004224 <__adddf3>
100079ac:	057f3034 	movhi	r21,64704
100079b0:	1d6b883a 	add	r21,r3,r21
100079b4:	d8c00917 	ldw	r3,36(sp)
100079b8:	1025883a 	mov	r18,r2
100079bc:	18031f26 	beq	r3,zero,1000863c <_dtoa_r+0x112c>
100079c0:	d8800617 	ldw	r2,24(sp)
100079c4:	dac00917 	ldw	r11,36(sp)
100079c8:	d8801315 	stw	r2,76(sp)
100079cc:	d8c00c17 	ldw	r3,48(sp)
100079d0:	18039026 	beq	r3,zero,10008814 <_dtoa_r+0x1304>
100079d4:	58bfffc4 	addi	r2,r11,-1
100079d8:	100490fa 	slli	r2,r2,3
100079dc:	00c40074 	movhi	r3,4097
100079e0:	18c1e404 	addi	r3,r3,1936
100079e4:	0009883a 	mov	r4,zero
100079e8:	1885883a 	add	r2,r3,r2
100079ec:	11800017 	ldw	r6,0(r2)
100079f0:	11c00117 	ldw	r7,4(r2)
100079f4:	014ff834 	movhi	r5,16352
100079f8:	dac01615 	stw	r11,88(sp)
100079fc:	00045bc0 	call	100045bc <__divdf3>
10007a00:	900d883a 	mov	r6,r18
10007a04:	a80f883a 	mov	r7,r21
10007a08:	1009883a 	mov	r4,r2
10007a0c:	180b883a 	mov	r5,r3
10007a10:	00042780 	call	10004278 <__subdf3>
10007a14:	a00b883a 	mov	r5,r20
10007a18:	9809883a 	mov	r4,r19
10007a1c:	182b883a 	mov	r21,r3
10007a20:	d8801015 	stw	r2,64(sp)
10007a24:	00048a80 	call	100048a8 <__fixdfsi>
10007a28:	1009883a 	mov	r4,r2
10007a2c:	d8801515 	stw	r2,84(sp)
10007a30:	00047d40 	call	100047d4 <__floatsidf>
10007a34:	9809883a 	mov	r4,r19
10007a38:	a00b883a 	mov	r5,r20
10007a3c:	100d883a 	mov	r6,r2
10007a40:	180f883a 	mov	r7,r3
10007a44:	00042780 	call	10004278 <__subdf3>
10007a48:	da401517 	ldw	r9,84(sp)
10007a4c:	d9001017 	ldw	r4,64(sp)
10007a50:	a80b883a 	mov	r5,r21
10007a54:	4d000c04 	addi	r20,r9,48
10007a58:	bd000005 	stb	r20,0(r23)
10007a5c:	100d883a 	mov	r6,r2
10007a60:	180f883a 	mov	r7,r3
10007a64:	bd800044 	addi	r22,r23,1
10007a68:	1025883a 	mov	r18,r2
10007a6c:	1827883a 	mov	r19,r3
10007a70:	000d3e00 	call	1000d3e0 <__gtdf2>
10007a74:	00842216 	blt	zero,r2,10008b00 <_dtoa_r+0x15f0>
10007a78:	0009883a 	mov	r4,zero
10007a7c:	014ffc34 	movhi	r5,16368
10007a80:	900d883a 	mov	r6,r18
10007a84:	980f883a 	mov	r7,r19
10007a88:	00042780 	call	10004278 <__subdf3>
10007a8c:	d9001017 	ldw	r4,64(sp)
10007a90:	a80b883a 	mov	r5,r21
10007a94:	100d883a 	mov	r6,r2
10007a98:	180f883a 	mov	r7,r3
10007a9c:	000d3e00 	call	1000d3e0 <__gtdf2>
10007aa0:	dac01617 	ldw	r11,88(sp)
10007aa4:	00841316 	blt	zero,r2,10008af4 <_dtoa_r+0x15e4>
10007aa8:	00800044 	movi	r2,1
10007aac:	12c0670e 	bge	r2,r11,10007c4c <_dtoa_r+0x73c>
10007ab0:	bad7883a 	add	r11,r23,r11
10007ab4:	df001115 	stw	fp,68(sp)
10007ab8:	dc401215 	stw	r17,72(sp)
10007abc:	5839883a 	mov	fp,r11
10007ac0:	dc401017 	ldw	r17,64(sp)
10007ac4:	00000806 	br	10007ae8 <_dtoa_r+0x5d8>
10007ac8:	00042780 	call	10004278 <__subdf3>
10007acc:	1009883a 	mov	r4,r2
10007ad0:	180b883a 	mov	r5,r3
10007ad4:	880d883a 	mov	r6,r17
10007ad8:	a80f883a 	mov	r7,r21
10007adc:	000d4440 	call	1000d444 <__ltdf2>
10007ae0:	1003ee16 	blt	r2,zero,10008a9c <_dtoa_r+0x158c>
10007ae4:	b703f126 	beq	r22,fp,10008aac <_dtoa_r+0x159c>
10007ae8:	8809883a 	mov	r4,r17
10007aec:	a80b883a 	mov	r5,r21
10007af0:	000d883a 	mov	r6,zero
10007af4:	01d00934 	movhi	r7,16420
10007af8:	00042d80 	call	100042d8 <__muldf3>
10007afc:	000d883a 	mov	r6,zero
10007b00:	01d00934 	movhi	r7,16420
10007b04:	9009883a 	mov	r4,r18
10007b08:	980b883a 	mov	r5,r19
10007b0c:	1023883a 	mov	r17,r2
10007b10:	182b883a 	mov	r21,r3
10007b14:	00042d80 	call	100042d8 <__muldf3>
10007b18:	180b883a 	mov	r5,r3
10007b1c:	1009883a 	mov	r4,r2
10007b20:	1825883a 	mov	r18,r3
10007b24:	1027883a 	mov	r19,r2
10007b28:	00048a80 	call	100048a8 <__fixdfsi>
10007b2c:	1009883a 	mov	r4,r2
10007b30:	1029883a 	mov	r20,r2
10007b34:	00047d40 	call	100047d4 <__floatsidf>
10007b38:	9809883a 	mov	r4,r19
10007b3c:	900b883a 	mov	r5,r18
10007b40:	100d883a 	mov	r6,r2
10007b44:	180f883a 	mov	r7,r3
10007b48:	00042780 	call	10004278 <__subdf3>
10007b4c:	a5000c04 	addi	r20,r20,48
10007b50:	b5000005 	stb	r20,0(r22)
10007b54:	1009883a 	mov	r4,r2
10007b58:	180b883a 	mov	r5,r3
10007b5c:	880d883a 	mov	r6,r17
10007b60:	a80f883a 	mov	r7,r21
10007b64:	1025883a 	mov	r18,r2
10007b68:	1827883a 	mov	r19,r3
10007b6c:	000d4440 	call	1000d444 <__ltdf2>
10007b70:	b5800044 	addi	r22,r22,1
10007b74:	0009883a 	mov	r4,zero
10007b78:	014ffc34 	movhi	r5,16368
10007b7c:	900d883a 	mov	r6,r18
10007b80:	980f883a 	mov	r7,r19
10007b84:	103fd00e 	bge	r2,zero,10007ac8 <__alt_data_end+0xf8007ac8>
10007b88:	d9001317 	ldw	r4,76(sp)
10007b8c:	df001117 	ldw	fp,68(sp)
10007b90:	d9000615 	stw	r4,24(sp)
10007b94:	8009883a 	mov	r4,r16
10007b98:	e00b883a 	mov	r5,fp
10007b9c:	000a9d00 	call	1000a9d0 <_Bfree>
10007ba0:	d9c00617 	ldw	r7,24(sp)
10007ba4:	d8c02217 	ldw	r3,136(sp)
10007ba8:	d9002417 	ldw	r4,144(sp)
10007bac:	b0000005 	stb	zero,0(r22)
10007bb0:	38800044 	addi	r2,r7,1
10007bb4:	18800015 	stw	r2,0(r3)
10007bb8:	203e8426 	beq	r4,zero,100075cc <__alt_data_end+0xf80075cc>
10007bbc:	25800015 	stw	r22,0(r4)
10007bc0:	003e8206 	br	100075cc <__alt_data_end+0xf80075cc>
10007bc4:	00800434 	movhi	r2,16
10007bc8:	10bfffc4 	addi	r2,r2,-1
10007bcc:	90a4703a 	and	r18,r18,r2
10007bd0:	903e901e 	bne	r18,zero,10007614 <__alt_data_end+0xf8007614>
10007bd4:	05c40074 	movhi	r23,4097
10007bd8:	bdc1bb04 	addi	r23,r23,1772
10007bdc:	003e8f06 	br	1000761c <__alt_data_end+0xf800761c>
10007be0:	b8800204 	addi	r2,r23,8
10007be4:	003e9206 	br	10007630 <__alt_data_end+0xf8007630>
10007be8:	01400434 	movhi	r5,16
10007bec:	297fffc4 	addi	r5,r5,-1
10007bf0:	894a703a 	and	r5,r17,r5
10007bf4:	d9000317 	ldw	r4,12(sp)
10007bf8:	294ffc34 	orhi	r5,r5,16368
10007bfc:	a53f0044 	addi	r20,r20,-1023
10007c00:	dd400217 	ldw	r21,8(sp)
10007c04:	d8000f15 	stw	zero,60(sp)
10007c08:	003eb106 	br	100076d0 <__alt_data_end+0xf80076d0>
10007c0c:	05c40074 	movhi	r23,4097
10007c10:	bdc1b204 	addi	r23,r23,1736
10007c14:	003e6d06 	br	100075cc <__alt_data_end+0xf80075cc>
10007c18:	d8000415 	stw	zero,16(sp)
10007c1c:	80001115 	stw	zero,68(r16)
10007c20:	8009883a 	mov	r4,r16
10007c24:	000b883a 	mov	r5,zero
10007c28:	000a9280 	call	1000a928 <_Balloc>
10007c2c:	01ffffc4 	movi	r7,-1
10007c30:	102f883a 	mov	r23,r2
10007c34:	80801015 	stw	r2,64(r16)
10007c38:	00800044 	movi	r2,1
10007c3c:	d9c00915 	stw	r7,36(sp)
10007c40:	d8002115 	stw	zero,132(sp)
10007c44:	d9c00e15 	stw	r7,56(sp)
10007c48:	d8800c15 	stw	r2,48(sp)
10007c4c:	d8800117 	ldw	r2,4(sp)
10007c50:	10008b16 	blt	r2,zero,10007e80 <_dtoa_r+0x970>
10007c54:	d9000617 	ldw	r4,24(sp)
10007c58:	00c00384 	movi	r3,14
10007c5c:	19008816 	blt	r3,r4,10007e80 <_dtoa_r+0x970>
10007c60:	200490fa 	slli	r2,r4,3
10007c64:	d9c02117 	ldw	r7,132(sp)
10007c68:	00c40074 	movhi	r3,4097
10007c6c:	18c1e404 	addi	r3,r3,1936
10007c70:	1885883a 	add	r2,r3,r2
10007c74:	14800017 	ldw	r18,0(r2)
10007c78:	14c00117 	ldw	r19,4(r2)
10007c7c:	3801c916 	blt	r7,zero,100083a4 <_dtoa_r+0xe94>
10007c80:	d9000317 	ldw	r4,12(sp)
10007c84:	900d883a 	mov	r6,r18
10007c88:	980f883a 	mov	r7,r19
10007c8c:	880b883a 	mov	r5,r17
10007c90:	00045bc0 	call	100045bc <__divdf3>
10007c94:	180b883a 	mov	r5,r3
10007c98:	1009883a 	mov	r4,r2
10007c9c:	00048a80 	call	100048a8 <__fixdfsi>
10007ca0:	1009883a 	mov	r4,r2
10007ca4:	102b883a 	mov	r21,r2
10007ca8:	00047d40 	call	100047d4 <__floatsidf>
10007cac:	1009883a 	mov	r4,r2
10007cb0:	180b883a 	mov	r5,r3
10007cb4:	900d883a 	mov	r6,r18
10007cb8:	980f883a 	mov	r7,r19
10007cbc:	00042d80 	call	100042d8 <__muldf3>
10007cc0:	d9000317 	ldw	r4,12(sp)
10007cc4:	880b883a 	mov	r5,r17
10007cc8:	100d883a 	mov	r6,r2
10007ccc:	180f883a 	mov	r7,r3
10007cd0:	00042780 	call	10004278 <__subdf3>
10007cd4:	d9c00917 	ldw	r7,36(sp)
10007cd8:	1009883a 	mov	r4,r2
10007cdc:	a8800c04 	addi	r2,r21,48
10007ce0:	b8800005 	stb	r2,0(r23)
10007ce4:	01800044 	movi	r6,1
10007ce8:	180b883a 	mov	r5,r3
10007cec:	2005883a 	mov	r2,r4
10007cf0:	bd800044 	addi	r22,r23,1
10007cf4:	39803726 	beq	r7,r6,10007dd4 <_dtoa_r+0x8c4>
10007cf8:	000d883a 	mov	r6,zero
10007cfc:	01d00934 	movhi	r7,16420
10007d00:	00042d80 	call	100042d8 <__muldf3>
10007d04:	1009883a 	mov	r4,r2
10007d08:	180b883a 	mov	r5,r3
10007d0c:	000d883a 	mov	r6,zero
10007d10:	000f883a 	mov	r7,zero
10007d14:	1029883a 	mov	r20,r2
10007d18:	1823883a 	mov	r17,r3
10007d1c:	000d3280 	call	1000d328 <__eqdf2>
10007d20:	103f9c26 	beq	r2,zero,10007b94 <__alt_data_end+0xf8007b94>
10007d24:	dd400917 	ldw	r21,36(sp)
10007d28:	dc000415 	stw	r16,16(sp)
10007d2c:	00000906 	br	10007d54 <_dtoa_r+0x844>
10007d30:	00042d80 	call	100042d8 <__muldf3>
10007d34:	1009883a 	mov	r4,r2
10007d38:	180b883a 	mov	r5,r3
10007d3c:	000d883a 	mov	r6,zero
10007d40:	000f883a 	mov	r7,zero
10007d44:	1029883a 	mov	r20,r2
10007d48:	1823883a 	mov	r17,r3
10007d4c:	000d3280 	call	1000d328 <__eqdf2>
10007d50:	10022926 	beq	r2,zero,100085f8 <_dtoa_r+0x10e8>
10007d54:	900d883a 	mov	r6,r18
10007d58:	980f883a 	mov	r7,r19
10007d5c:	a009883a 	mov	r4,r20
10007d60:	880b883a 	mov	r5,r17
10007d64:	00045bc0 	call	100045bc <__divdf3>
10007d68:	180b883a 	mov	r5,r3
10007d6c:	1009883a 	mov	r4,r2
10007d70:	00048a80 	call	100048a8 <__fixdfsi>
10007d74:	1009883a 	mov	r4,r2
10007d78:	1021883a 	mov	r16,r2
10007d7c:	00047d40 	call	100047d4 <__floatsidf>
10007d80:	1009883a 	mov	r4,r2
10007d84:	180b883a 	mov	r5,r3
10007d88:	900d883a 	mov	r6,r18
10007d8c:	980f883a 	mov	r7,r19
10007d90:	00042d80 	call	100042d8 <__muldf3>
10007d94:	a009883a 	mov	r4,r20
10007d98:	880b883a 	mov	r5,r17
10007d9c:	100d883a 	mov	r6,r2
10007da0:	180f883a 	mov	r7,r3
10007da4:	00042780 	call	10004278 <__subdf3>
10007da8:	82400c04 	addi	r9,r16,48
10007dac:	b2400005 	stb	r9,0(r22)
10007db0:	b5800044 	addi	r22,r22,1
10007db4:	b5d3c83a 	sub	r9,r22,r23
10007db8:	000d883a 	mov	r6,zero
10007dbc:	01d00934 	movhi	r7,16420
10007dc0:	1009883a 	mov	r4,r2
10007dc4:	180b883a 	mov	r5,r3
10007dc8:	aa7fd91e 	bne	r21,r9,10007d30 <__alt_data_end+0xf8007d30>
10007dcc:	802b883a 	mov	r21,r16
10007dd0:	dc000417 	ldw	r16,16(sp)
10007dd4:	1009883a 	mov	r4,r2
10007dd8:	180b883a 	mov	r5,r3
10007ddc:	100d883a 	mov	r6,r2
10007de0:	180f883a 	mov	r7,r3
10007de4:	00042240 	call	10004224 <__adddf3>
10007de8:	9009883a 	mov	r4,r18
10007dec:	980b883a 	mov	r5,r19
10007df0:	100d883a 	mov	r6,r2
10007df4:	180f883a 	mov	r7,r3
10007df8:	1023883a 	mov	r17,r2
10007dfc:	1829883a 	mov	r20,r3
10007e00:	000d4440 	call	1000d444 <__ltdf2>
10007e04:	10000816 	blt	r2,zero,10007e28 <_dtoa_r+0x918>
10007e08:	9009883a 	mov	r4,r18
10007e0c:	980b883a 	mov	r5,r19
10007e10:	880d883a 	mov	r6,r17
10007e14:	a00f883a 	mov	r7,r20
10007e18:	000d3840 	call	1000d384 <__nedf2>
10007e1c:	103f5d1e 	bne	r2,zero,10007b94 <__alt_data_end+0xf8007b94>
10007e20:	ad40004c 	andi	r21,r21,1
10007e24:	a83f5b26 	beq	r21,zero,10007b94 <__alt_data_end+0xf8007b94>
10007e28:	b53fffc3 	ldbu	r20,-1(r22)
10007e2c:	b0ffff84 	addi	r3,r22,-2
10007e30:	01400e44 	movi	r5,57
10007e34:	00000306 	br	10007e44 <_dtoa_r+0x934>
10007e38:	1d000003 	ldbu	r20,0(r3)
10007e3c:	102d883a 	mov	r22,r2
10007e40:	18ffffc4 	addi	r3,r3,-1
10007e44:	a1003fcc 	andi	r4,r20,255
10007e48:	2100201c 	xori	r4,r4,128
10007e4c:	213fe004 	addi	r4,r4,-128
10007e50:	b0bfffc4 	addi	r2,r22,-1
10007e54:	2142ca1e 	bne	r4,r5,10008980 <_dtoa_r+0x1470>
10007e58:	b8bff71e 	bne	r23,r2,10007e38 <__alt_data_end+0xf8007e38>
10007e5c:	d8800617 	ldw	r2,24(sp)
10007e60:	05000c44 	movi	r20,49
10007e64:	10800044 	addi	r2,r2,1
10007e68:	d8800615 	stw	r2,24(sp)
10007e6c:	00800c04 	movi	r2,48
10007e70:	b8800005 	stb	r2,0(r23)
10007e74:	b805883a 	mov	r2,r23
10007e78:	15000005 	stb	r20,0(r2)
10007e7c:	003f4506 	br	10007b94 <__alt_data_end+0xf8007b94>
10007e80:	d9c00c17 	ldw	r7,48(sp)
10007e84:	3800c926 	beq	r7,zero,100081ac <_dtoa_r+0xc9c>
10007e88:	d9c00417 	ldw	r7,16(sp)
10007e8c:	00c00044 	movi	r3,1
10007e90:	19c16c0e 	bge	r3,r7,10008444 <_dtoa_r+0xf34>
10007e94:	d9000917 	ldw	r4,36(sp)
10007e98:	d9c00a17 	ldw	r7,40(sp)
10007e9c:	24ffffc4 	addi	r19,r4,-1
10007ea0:	3cc20716 	blt	r7,r19,100086c0 <_dtoa_r+0x11b0>
10007ea4:	3ce7c83a 	sub	r19,r7,r19
10007ea8:	d9c00917 	ldw	r7,36(sp)
10007eac:	3802ae16 	blt	r7,zero,10008968 <_dtoa_r+0x1458>
10007eb0:	dc800817 	ldw	r18,32(sp)
10007eb4:	d8800917 	ldw	r2,36(sp)
10007eb8:	d8c00817 	ldw	r3,32(sp)
10007ebc:	d9c00717 	ldw	r7,28(sp)
10007ec0:	8009883a 	mov	r4,r16
10007ec4:	1887883a 	add	r3,r3,r2
10007ec8:	388f883a 	add	r7,r7,r2
10007ecc:	01400044 	movi	r5,1
10007ed0:	d8c00815 	stw	r3,32(sp)
10007ed4:	d9c00715 	stw	r7,28(sp)
10007ed8:	000ad580 	call	1000ad58 <__i2b>
10007edc:	102b883a 	mov	r21,r2
10007ee0:	90000a26 	beq	r18,zero,10007f0c <_dtoa_r+0x9fc>
10007ee4:	d8800717 	ldw	r2,28(sp)
10007ee8:	0080080e 	bge	zero,r2,10007f0c <_dtoa_r+0x9fc>
10007eec:	90812b16 	blt	r18,r2,1000839c <_dtoa_r+0xe8c>
10007ef0:	d8c00817 	ldw	r3,32(sp)
10007ef4:	d9000717 	ldw	r4,28(sp)
10007ef8:	90a5c83a 	sub	r18,r18,r2
10007efc:	1887c83a 	sub	r3,r3,r2
10007f00:	2089c83a 	sub	r4,r4,r2
10007f04:	d8c00815 	stw	r3,32(sp)
10007f08:	d9000715 	stw	r4,28(sp)
10007f0c:	d9c00a17 	ldw	r7,40(sp)
10007f10:	01c0140e 	bge	zero,r7,10007f64 <_dtoa_r+0xa54>
10007f14:	d8800c17 	ldw	r2,48(sp)
10007f18:	1001de26 	beq	r2,zero,10008694 <_dtoa_r+0x1184>
10007f1c:	04c00e0e 	bge	zero,r19,10007f58 <_dtoa_r+0xa48>
10007f20:	a80b883a 	mov	r5,r21
10007f24:	8009883a 	mov	r4,r16
10007f28:	980d883a 	mov	r6,r19
10007f2c:	000afec0 	call	1000afec <__pow5mult>
10007f30:	e00d883a 	mov	r6,fp
10007f34:	8009883a 	mov	r4,r16
10007f38:	100b883a 	mov	r5,r2
10007f3c:	102b883a 	mov	r21,r2
10007f40:	000ad940 	call	1000ad94 <__multiply>
10007f44:	1029883a 	mov	r20,r2
10007f48:	e00b883a 	mov	r5,fp
10007f4c:	8009883a 	mov	r4,r16
10007f50:	000a9d00 	call	1000a9d0 <_Bfree>
10007f54:	a039883a 	mov	fp,r20
10007f58:	d8c00a17 	ldw	r3,40(sp)
10007f5c:	1ccdc83a 	sub	r6,r3,r19
10007f60:	3001291e 	bne	r6,zero,10008408 <_dtoa_r+0xef8>
10007f64:	8009883a 	mov	r4,r16
10007f68:	01400044 	movi	r5,1
10007f6c:	000ad580 	call	1000ad58 <__i2b>
10007f70:	d9000b17 	ldw	r4,44(sp)
10007f74:	1029883a 	mov	r20,r2
10007f78:	0100050e 	bge	zero,r4,10007f90 <_dtoa_r+0xa80>
10007f7c:	d9800b17 	ldw	r6,44(sp)
10007f80:	8009883a 	mov	r4,r16
10007f84:	100b883a 	mov	r5,r2
10007f88:	000afec0 	call	1000afec <__pow5mult>
10007f8c:	1029883a 	mov	r20,r2
10007f90:	d9c00417 	ldw	r7,16(sp)
10007f94:	00800044 	movi	r2,1
10007f98:	11c0f00e 	bge	r2,r7,1000835c <_dtoa_r+0xe4c>
10007f9c:	0023883a 	mov	r17,zero
10007fa0:	d8800b17 	ldw	r2,44(sp)
10007fa4:	1001741e 	bne	r2,zero,10008578 <_dtoa_r+0x1068>
10007fa8:	00800044 	movi	r2,1
10007fac:	d8c00717 	ldw	r3,28(sp)
10007fb0:	10c5883a 	add	r2,r2,r3
10007fb4:	108007cc 	andi	r2,r2,31
10007fb8:	10008026 	beq	r2,zero,100081bc <_dtoa_r+0xcac>
10007fbc:	01000804 	movi	r4,32
10007fc0:	2089c83a 	sub	r4,r4,r2
10007fc4:	00c00104 	movi	r3,4
10007fc8:	1902d00e 	bge	r3,r4,10008b0c <_dtoa_r+0x15fc>
10007fcc:	d9000817 	ldw	r4,32(sp)
10007fd0:	d9c00717 	ldw	r7,28(sp)
10007fd4:	00c00704 	movi	r3,28
10007fd8:	1885c83a 	sub	r2,r3,r2
10007fdc:	2089883a 	add	r4,r4,r2
10007fe0:	388f883a 	add	r7,r7,r2
10007fe4:	d9000815 	stw	r4,32(sp)
10007fe8:	90a5883a 	add	r18,r18,r2
10007fec:	d9c00715 	stw	r7,28(sp)
10007ff0:	d9c00817 	ldw	r7,32(sp)
10007ff4:	01c0050e 	bge	zero,r7,1000800c <_dtoa_r+0xafc>
10007ff8:	e00b883a 	mov	r5,fp
10007ffc:	8009883a 	mov	r4,r16
10008000:	380d883a 	mov	r6,r7
10008004:	000b1180 	call	1000b118 <__lshift>
10008008:	1039883a 	mov	fp,r2
1000800c:	d8800717 	ldw	r2,28(sp)
10008010:	0080050e 	bge	zero,r2,10008028 <_dtoa_r+0xb18>
10008014:	a00b883a 	mov	r5,r20
10008018:	8009883a 	mov	r4,r16
1000801c:	100d883a 	mov	r6,r2
10008020:	000b1180 	call	1000b118 <__lshift>
10008024:	1029883a 	mov	r20,r2
10008028:	d8c00d17 	ldw	r3,52(sp)
1000802c:	1801401e 	bne	r3,zero,10008530 <_dtoa_r+0x1020>
10008030:	d8800917 	ldw	r2,36(sp)
10008034:	00815a0e 	bge	zero,r2,100085a0 <_dtoa_r+0x1090>
10008038:	d8c00c17 	ldw	r3,48(sp)
1000803c:	18006f1e 	bne	r3,zero,100081fc <_dtoa_r+0xcec>
10008040:	b823883a 	mov	r17,r23
10008044:	dc800917 	ldw	r18,36(sp)
10008048:	00000206 	br	10008054 <_dtoa_r+0xb44>
1000804c:	000a9f80 	call	1000a9f8 <__multadd>
10008050:	1039883a 	mov	fp,r2
10008054:	e009883a 	mov	r4,fp
10008058:	a00b883a 	mov	r5,r20
1000805c:	00072d40 	call	100072d4 <quorem>
10008060:	10800c04 	addi	r2,r2,48
10008064:	88800005 	stb	r2,0(r17)
10008068:	8c400044 	addi	r17,r17,1
1000806c:	8dc7c83a 	sub	r3,r17,r23
10008070:	8009883a 	mov	r4,r16
10008074:	e00b883a 	mov	r5,fp
10008078:	01800284 	movi	r6,10
1000807c:	000f883a 	mov	r7,zero
10008080:	1cbff216 	blt	r3,r18,1000804c <__alt_data_end+0xf800804c>
10008084:	dd800917 	ldw	r22,36(sp)
10008088:	1007883a 	mov	r3,r2
1000808c:	05823a0e 	bge	zero,r22,10008978 <_dtoa_r+0x1468>
10008090:	bdad883a 	add	r22,r23,r22
10008094:	0023883a 	mov	r17,zero
10008098:	e00b883a 	mov	r5,fp
1000809c:	01800044 	movi	r6,1
100080a0:	8009883a 	mov	r4,r16
100080a4:	d8c01515 	stw	r3,84(sp)
100080a8:	000b1180 	call	1000b118 <__lshift>
100080ac:	1009883a 	mov	r4,r2
100080b0:	a00b883a 	mov	r5,r20
100080b4:	1039883a 	mov	fp,r2
100080b8:	000b2740 	call	1000b274 <__mcmp>
100080bc:	d8c01517 	ldw	r3,84(sp)
100080c0:	0080d60e 	bge	zero,r2,1000841c <_dtoa_r+0xf0c>
100080c4:	b13fffc3 	ldbu	r4,-1(r22)
100080c8:	b0ffff84 	addi	r3,r22,-2
100080cc:	01800e44 	movi	r6,57
100080d0:	00000306 	br	100080e0 <_dtoa_r+0xbd0>
100080d4:	19000003 	ldbu	r4,0(r3)
100080d8:	102d883a 	mov	r22,r2
100080dc:	18ffffc4 	addi	r3,r3,-1
100080e0:	21403fcc 	andi	r5,r4,255
100080e4:	2940201c 	xori	r5,r5,128
100080e8:	297fe004 	addi	r5,r5,-128
100080ec:	b0bfffc4 	addi	r2,r22,-1
100080f0:	2981a71e 	bne	r5,r6,10008790 <_dtoa_r+0x1280>
100080f4:	b8bff71e 	bne	r23,r2,100080d4 <__alt_data_end+0xf80080d4>
100080f8:	d8800617 	ldw	r2,24(sp)
100080fc:	10800044 	addi	r2,r2,1
10008100:	d8800615 	stw	r2,24(sp)
10008104:	00800c44 	movi	r2,49
10008108:	b8800005 	stb	r2,0(r23)
1000810c:	8009883a 	mov	r4,r16
10008110:	a00b883a 	mov	r5,r20
10008114:	000a9d00 	call	1000a9d0 <_Bfree>
10008118:	a83e9e26 	beq	r21,zero,10007b94 <__alt_data_end+0xf8007b94>
1000811c:	88000426 	beq	r17,zero,10008130 <_dtoa_r+0xc20>
10008120:	8d400326 	beq	r17,r21,10008130 <_dtoa_r+0xc20>
10008124:	8009883a 	mov	r4,r16
10008128:	880b883a 	mov	r5,r17
1000812c:	000a9d00 	call	1000a9d0 <_Bfree>
10008130:	8009883a 	mov	r4,r16
10008134:	a80b883a 	mov	r5,r21
10008138:	000a9d00 	call	1000a9d0 <_Bfree>
1000813c:	003e9506 	br	10007b94 <__alt_data_end+0xf8007b94>
10008140:	00c00044 	movi	r3,1
10008144:	d8c00d15 	stw	r3,52(sp)
10008148:	003d9f06 	br	100077c8 <__alt_data_end+0xf80077c8>
1000814c:	d9000817 	ldw	r4,32(sp)
10008150:	d8800617 	ldw	r2,24(sp)
10008154:	d8000b15 	stw	zero,44(sp)
10008158:	2089c83a 	sub	r4,r4,r2
1000815c:	0087c83a 	sub	r3,zero,r2
10008160:	d9000815 	stw	r4,32(sp)
10008164:	d8c00a15 	stw	r3,40(sp)
10008168:	003da306 	br	100077f8 <__alt_data_end+0xf80077f8>
1000816c:	0529c83a 	sub	r20,zero,r20
10008170:	dd000815 	stw	r20,32(sp)
10008174:	d8000715 	stw	zero,28(sp)
10008178:	003d9806 	br	100077dc <__alt_data_end+0xf80077dc>
1000817c:	d9000617 	ldw	r4,24(sp)
10008180:	00047d40 	call	100047d4 <__floatsidf>
10008184:	1009883a 	mov	r4,r2
10008188:	180b883a 	mov	r5,r3
1000818c:	980d883a 	mov	r6,r19
10008190:	900f883a 	mov	r7,r18
10008194:	000d3280 	call	1000d328 <__eqdf2>
10008198:	103d7a26 	beq	r2,zero,10007784 <__alt_data_end+0xf8007784>
1000819c:	d8800617 	ldw	r2,24(sp)
100081a0:	10bfffc4 	addi	r2,r2,-1
100081a4:	d8800615 	stw	r2,24(sp)
100081a8:	003d7606 	br	10007784 <__alt_data_end+0xf8007784>
100081ac:	dcc00a17 	ldw	r19,40(sp)
100081b0:	dc800817 	ldw	r18,32(sp)
100081b4:	002b883a 	mov	r21,zero
100081b8:	003f4906 	br	10007ee0 <__alt_data_end+0xf8007ee0>
100081bc:	00800704 	movi	r2,28
100081c0:	d8c00817 	ldw	r3,32(sp)
100081c4:	d9000717 	ldw	r4,28(sp)
100081c8:	90a5883a 	add	r18,r18,r2
100081cc:	1887883a 	add	r3,r3,r2
100081d0:	2089883a 	add	r4,r4,r2
100081d4:	d8c00815 	stw	r3,32(sp)
100081d8:	d9000715 	stw	r4,28(sp)
100081dc:	003f8406 	br	10007ff0 <__alt_data_end+0xf8007ff0>
100081e0:	d9c00317 	ldw	r7,12(sp)
100081e4:	013efb84 	movi	r4,-1042
100081e8:	2509c83a 	sub	r4,r4,r20
100081ec:	3908983a 	sll	r4,r7,r4
100081f0:	003d3006 	br	100076b4 <__alt_data_end+0xf80076b4>
100081f4:	d8000d15 	stw	zero,52(sp)
100081f8:	003d7306 	br	100077c8 <__alt_data_end+0xf80077c8>
100081fc:	0480050e 	bge	zero,r18,10008214 <_dtoa_r+0xd04>
10008200:	a80b883a 	mov	r5,r21
10008204:	8009883a 	mov	r4,r16
10008208:	900d883a 	mov	r6,r18
1000820c:	000b1180 	call	1000b118 <__lshift>
10008210:	102b883a 	mov	r21,r2
10008214:	8801611e 	bne	r17,zero,1000879c <_dtoa_r+0x128c>
10008218:	a827883a 	mov	r19,r21
1000821c:	d8c00317 	ldw	r3,12(sp)
10008220:	d9000917 	ldw	r4,36(sp)
10008224:	b8bfffc4 	addi	r2,r23,-1
10008228:	18c0004c 	andi	r3,r3,1
1000822c:	1105883a 	add	r2,r2,r4
10008230:	b825883a 	mov	r18,r23
10008234:	d8800515 	stw	r2,20(sp)
10008238:	a823883a 	mov	r17,r21
1000823c:	d8c00315 	stw	r3,12(sp)
10008240:	ddc00715 	stw	r23,28(sp)
10008244:	e009883a 	mov	r4,fp
10008248:	a00b883a 	mov	r5,r20
1000824c:	00072d40 	call	100072d4 <quorem>
10008250:	e009883a 	mov	r4,fp
10008254:	880b883a 	mov	r5,r17
10008258:	102d883a 	mov	r22,r2
1000825c:	000b2740 	call	1000b274 <__mcmp>
10008260:	980d883a 	mov	r6,r19
10008264:	8009883a 	mov	r4,r16
10008268:	a00b883a 	mov	r5,r20
1000826c:	102b883a 	mov	r21,r2
10008270:	000b2cc0 	call	1000b2cc <__mdiff>
10008274:	100d883a 	mov	r6,r2
10008278:	10800317 	ldw	r2,12(r2)
1000827c:	b5c00c04 	addi	r23,r22,48
10008280:	10008c26 	beq	r2,zero,100084b4 <_dtoa_r+0xfa4>
10008284:	8009883a 	mov	r4,r16
10008288:	300b883a 	mov	r5,r6
1000828c:	000a9d00 	call	1000a9d0 <_Bfree>
10008290:	00800044 	movi	r2,1
10008294:	a8007116 	blt	r21,zero,1000845c <_dtoa_r+0xf4c>
10008298:	a800041e 	bne	r21,zero,100082ac <_dtoa_r+0xd9c>
1000829c:	d9c00417 	ldw	r7,16(sp)
100082a0:	3800021e 	bne	r7,zero,100082ac <_dtoa_r+0xd9c>
100082a4:	d8c00317 	ldw	r3,12(sp)
100082a8:	18006c26 	beq	r3,zero,1000845c <_dtoa_r+0xf4c>
100082ac:	00814c16 	blt	zero,r2,100087e0 <_dtoa_r+0x12d0>
100082b0:	d8c00517 	ldw	r3,20(sp)
100082b4:	95400044 	addi	r21,r18,1
100082b8:	95c00005 	stb	r23,0(r18)
100082bc:	a82d883a 	mov	r22,r21
100082c0:	90c14d26 	beq	r18,r3,100087f8 <_dtoa_r+0x12e8>
100082c4:	e00b883a 	mov	r5,fp
100082c8:	8009883a 	mov	r4,r16
100082cc:	01800284 	movi	r6,10
100082d0:	000f883a 	mov	r7,zero
100082d4:	000a9f80 	call	1000a9f8 <__multadd>
100082d8:	1039883a 	mov	fp,r2
100082dc:	8cc08b26 	beq	r17,r19,1000850c <_dtoa_r+0xffc>
100082e0:	880b883a 	mov	r5,r17
100082e4:	01800284 	movi	r6,10
100082e8:	000f883a 	mov	r7,zero
100082ec:	8009883a 	mov	r4,r16
100082f0:	000a9f80 	call	1000a9f8 <__multadd>
100082f4:	980b883a 	mov	r5,r19
100082f8:	8009883a 	mov	r4,r16
100082fc:	01800284 	movi	r6,10
10008300:	000f883a 	mov	r7,zero
10008304:	1023883a 	mov	r17,r2
10008308:	000a9f80 	call	1000a9f8 <__multadd>
1000830c:	1027883a 	mov	r19,r2
10008310:	a825883a 	mov	r18,r21
10008314:	003fcb06 	br	10008244 <__alt_data_end+0xf8008244>
10008318:	d9c00417 	ldw	r7,16(sp)
1000831c:	00800104 	movi	r2,4
10008320:	3880e426 	beq	r7,r2,100086b4 <_dtoa_r+0x11a4>
10008324:	00800144 	movi	r2,5
10008328:	38be3c1e 	bne	r7,r2,10007c1c <__alt_data_end+0xf8007c1c>
1000832c:	00c00044 	movi	r3,1
10008330:	d8c00c15 	stw	r3,48(sp)
10008334:	d9c02117 	ldw	r7,132(sp)
10008338:	d8800617 	ldw	r2,24(sp)
1000833c:	388f883a 	add	r7,r7,r2
10008340:	3c800044 	addi	r18,r7,1
10008344:	d9c00e15 	stw	r7,56(sp)
10008348:	dc800915 	stw	r18,36(sp)
1000834c:	04bd3e16 	blt	zero,r18,10007848 <__alt_data_end+0xf8007848>
10008350:	80001115 	stw	zero,68(r16)
10008354:	000b883a 	mov	r5,zero
10008358:	003d4606 	br	10007874 <__alt_data_end+0xf8007874>
1000835c:	d8c00317 	ldw	r3,12(sp)
10008360:	183f0e1e 	bne	r3,zero,10007f9c <__alt_data_end+0xf8007f9c>
10008364:	00c00434 	movhi	r3,16
10008368:	18ffffc4 	addi	r3,r3,-1
1000836c:	88c6703a 	and	r3,r17,r3
10008370:	183f0a1e 	bne	r3,zero,10007f9c <__alt_data_end+0xf8007f9c>
10008374:	8c5ffc2c 	andhi	r17,r17,32752
10008378:	883f0826 	beq	r17,zero,10007f9c <__alt_data_end+0xf8007f9c>
1000837c:	d9000817 	ldw	r4,32(sp)
10008380:	d9c00717 	ldw	r7,28(sp)
10008384:	1023883a 	mov	r17,r2
10008388:	2089883a 	add	r4,r4,r2
1000838c:	388f883a 	add	r7,r7,r2
10008390:	d9000815 	stw	r4,32(sp)
10008394:	d9c00715 	stw	r7,28(sp)
10008398:	003f0106 	br	10007fa0 <__alt_data_end+0xf8007fa0>
1000839c:	9005883a 	mov	r2,r18
100083a0:	003ed306 	br	10007ef0 <__alt_data_end+0xf8007ef0>
100083a4:	d8800917 	ldw	r2,36(sp)
100083a8:	00be3516 	blt	zero,r2,10007c80 <__alt_data_end+0xf8007c80>
100083ac:	1000b61e 	bne	r2,zero,10008688 <_dtoa_r+0x1178>
100083b0:	9009883a 	mov	r4,r18
100083b4:	980b883a 	mov	r5,r19
100083b8:	000d883a 	mov	r6,zero
100083bc:	01d00534 	movhi	r7,16404
100083c0:	00042d80 	call	100042d8 <__muldf3>
100083c4:	d9800317 	ldw	r6,12(sp)
100083c8:	1009883a 	mov	r4,r2
100083cc:	180b883a 	mov	r5,r3
100083d0:	880f883a 	mov	r7,r17
100083d4:	00047700 	call	10004770 <__gedf2>
100083d8:	0029883a 	mov	r20,zero
100083dc:	002b883a 	mov	r21,zero
100083e0:	10007e16 	blt	r2,zero,100085dc <_dtoa_r+0x10cc>
100083e4:	d8802117 	ldw	r2,132(sp)
100083e8:	b82d883a 	mov	r22,r23
100083ec:	0084303a 	nor	r2,zero,r2
100083f0:	d8800615 	stw	r2,24(sp)
100083f4:	8009883a 	mov	r4,r16
100083f8:	a00b883a 	mov	r5,r20
100083fc:	000a9d00 	call	1000a9d0 <_Bfree>
10008400:	a83f4b1e 	bne	r21,zero,10008130 <__alt_data_end+0xf8008130>
10008404:	003de306 	br	10007b94 <__alt_data_end+0xf8007b94>
10008408:	e00b883a 	mov	r5,fp
1000840c:	8009883a 	mov	r4,r16
10008410:	000afec0 	call	1000afec <__pow5mult>
10008414:	1039883a 	mov	fp,r2
10008418:	003ed206 	br	10007f64 <__alt_data_end+0xf8007f64>
1000841c:	1000021e 	bne	r2,zero,10008428 <_dtoa_r+0xf18>
10008420:	18c0004c 	andi	r3,r3,1
10008424:	183f271e 	bne	r3,zero,100080c4 <__alt_data_end+0xf80080c4>
10008428:	01000c04 	movi	r4,48
1000842c:	00000106 	br	10008434 <_dtoa_r+0xf24>
10008430:	102d883a 	mov	r22,r2
10008434:	b0bfffc4 	addi	r2,r22,-1
10008438:	10c00007 	ldb	r3,0(r2)
1000843c:	193ffc26 	beq	r3,r4,10008430 <__alt_data_end+0xf8008430>
10008440:	003f3206 	br	1000810c <__alt_data_end+0xf800810c>
10008444:	d8c00f17 	ldw	r3,60(sp)
10008448:	18015026 	beq	r3,zero,1000898c <_dtoa_r+0x147c>
1000844c:	10810cc4 	addi	r2,r2,1075
10008450:	dcc00a17 	ldw	r19,40(sp)
10008454:	dc800817 	ldw	r18,32(sp)
10008458:	003e9706 	br	10007eb8 <__alt_data_end+0xf8007eb8>
1000845c:	b807883a 	mov	r3,r23
10008460:	182b883a 	mov	r21,r3
10008464:	ddc00717 	ldw	r23,28(sp)
10008468:	00800e0e 	bge	zero,r2,100084a4 <_dtoa_r+0xf94>
1000846c:	e00b883a 	mov	r5,fp
10008470:	01800044 	movi	r6,1
10008474:	8009883a 	mov	r4,r16
10008478:	d8c01515 	stw	r3,84(sp)
1000847c:	000b1180 	call	1000b118 <__lshift>
10008480:	1009883a 	mov	r4,r2
10008484:	a00b883a 	mov	r5,r20
10008488:	1039883a 	mov	fp,r2
1000848c:	000b2740 	call	1000b274 <__mcmp>
10008490:	d8c01517 	ldw	r3,84(sp)
10008494:	0081880e 	bge	zero,r2,10008ab8 <_dtoa_r+0x15a8>
10008498:	00800e44 	movi	r2,57
1000849c:	b0c00c44 	addi	r3,r22,49
100084a0:	a8816326 	beq	r21,r2,10008a30 <_dtoa_r+0x1520>
100084a4:	90c00005 	stb	r3,0(r18)
100084a8:	95800044 	addi	r22,r18,1
100084ac:	982b883a 	mov	r21,r19
100084b0:	003f1606 	br	1000810c <__alt_data_end+0xf800810c>
100084b4:	300b883a 	mov	r5,r6
100084b8:	e009883a 	mov	r4,fp
100084bc:	d9801515 	stw	r6,84(sp)
100084c0:	000b2740 	call	1000b274 <__mcmp>
100084c4:	d9801517 	ldw	r6,84(sp)
100084c8:	8009883a 	mov	r4,r16
100084cc:	d8801515 	stw	r2,84(sp)
100084d0:	300b883a 	mov	r5,r6
100084d4:	000a9d00 	call	1000a9d0 <_Bfree>
100084d8:	d8801517 	ldw	r2,84(sp)
100084dc:	103f6d1e 	bne	r2,zero,10008294 <__alt_data_end+0xf8008294>
100084e0:	d9c00417 	ldw	r7,16(sp)
100084e4:	383f6b1e 	bne	r7,zero,10008294 <__alt_data_end+0xf8008294>
100084e8:	d8c00317 	ldw	r3,12(sp)
100084ec:	183f691e 	bne	r3,zero,10008294 <__alt_data_end+0xf8008294>
100084f0:	b807883a 	mov	r3,r23
100084f4:	00800e44 	movi	r2,57
100084f8:	ddc00717 	ldw	r23,28(sp)
100084fc:	18814c26 	beq	r3,r2,10008a30 <_dtoa_r+0x1520>
10008500:	057fe80e 	bge	zero,r21,100084a4 <__alt_data_end+0xf80084a4>
10008504:	b0c00c44 	addi	r3,r22,49
10008508:	003fe606 	br	100084a4 <__alt_data_end+0xf80084a4>
1000850c:	880b883a 	mov	r5,r17
10008510:	8009883a 	mov	r4,r16
10008514:	01800284 	movi	r6,10
10008518:	000f883a 	mov	r7,zero
1000851c:	000a9f80 	call	1000a9f8 <__multadd>
10008520:	1023883a 	mov	r17,r2
10008524:	1027883a 	mov	r19,r2
10008528:	a825883a 	mov	r18,r21
1000852c:	003f4506 	br	10008244 <__alt_data_end+0xf8008244>
10008530:	e009883a 	mov	r4,fp
10008534:	a00b883a 	mov	r5,r20
10008538:	000b2740 	call	1000b274 <__mcmp>
1000853c:	103ebc0e 	bge	r2,zero,10008030 <__alt_data_end+0xf8008030>
10008540:	e00b883a 	mov	r5,fp
10008544:	8009883a 	mov	r4,r16
10008548:	01800284 	movi	r6,10
1000854c:	000f883a 	mov	r7,zero
10008550:	000a9f80 	call	1000a9f8 <__multadd>
10008554:	1039883a 	mov	fp,r2
10008558:	d8800617 	ldw	r2,24(sp)
1000855c:	d8c00c17 	ldw	r3,48(sp)
10008560:	10bfffc4 	addi	r2,r2,-1
10008564:	d8800615 	stw	r2,24(sp)
10008568:	1801571e 	bne	r3,zero,10008ac8 <_dtoa_r+0x15b8>
1000856c:	d9c00e17 	ldw	r7,56(sp)
10008570:	d9c00915 	stw	r7,36(sp)
10008574:	003eae06 	br	10008030 <__alt_data_end+0xf8008030>
10008578:	a0800417 	ldw	r2,16(r20)
1000857c:	10800104 	addi	r2,r2,4
10008580:	1085883a 	add	r2,r2,r2
10008584:	1085883a 	add	r2,r2,r2
10008588:	a085883a 	add	r2,r20,r2
1000858c:	11000017 	ldw	r4,0(r2)
10008590:	000ac400 	call	1000ac40 <__hi0bits>
10008594:	00c00804 	movi	r3,32
10008598:	1885c83a 	sub	r2,r3,r2
1000859c:	003e8306 	br	10007fac <__alt_data_end+0xf8007fac>
100085a0:	d9c00417 	ldw	r7,16(sp)
100085a4:	00800084 	movi	r2,2
100085a8:	11fea30e 	bge	r2,r7,10008038 <__alt_data_end+0xf8008038>
100085ac:	d8800917 	ldw	r2,36(sp)
100085b0:	103f8c1e 	bne	r2,zero,100083e4 <__alt_data_end+0xf80083e4>
100085b4:	a00b883a 	mov	r5,r20
100085b8:	8009883a 	mov	r4,r16
100085bc:	01800144 	movi	r6,5
100085c0:	000f883a 	mov	r7,zero
100085c4:	000a9f80 	call	1000a9f8 <__multadd>
100085c8:	e009883a 	mov	r4,fp
100085cc:	100b883a 	mov	r5,r2
100085d0:	1029883a 	mov	r20,r2
100085d4:	000b2740 	call	1000b274 <__mcmp>
100085d8:	00bf820e 	bge	zero,r2,100083e4 <__alt_data_end+0xf80083e4>
100085dc:	00800c44 	movi	r2,49
100085e0:	b8800005 	stb	r2,0(r23)
100085e4:	d8800617 	ldw	r2,24(sp)
100085e8:	bd800044 	addi	r22,r23,1
100085ec:	10800044 	addi	r2,r2,1
100085f0:	d8800615 	stw	r2,24(sp)
100085f4:	003f7f06 	br	100083f4 <__alt_data_end+0xf80083f4>
100085f8:	dc000417 	ldw	r16,16(sp)
100085fc:	003d6506 	br	10007b94 <__alt_data_end+0xf8007b94>
10008600:	9009883a 	mov	r4,r18
10008604:	00047d40 	call	100047d4 <__floatsidf>
10008608:	1009883a 	mov	r4,r2
1000860c:	180b883a 	mov	r5,r3
10008610:	980d883a 	mov	r6,r19
10008614:	a00f883a 	mov	r7,r20
10008618:	00042d80 	call	100042d8 <__muldf3>
1000861c:	1009883a 	mov	r4,r2
10008620:	180b883a 	mov	r5,r3
10008624:	000d883a 	mov	r6,zero
10008628:	01d00734 	movhi	r7,16412
1000862c:	00042240 	call	10004224 <__adddf3>
10008630:	057f3034 	movhi	r21,64704
10008634:	1025883a 	mov	r18,r2
10008638:	1d6b883a 	add	r21,r3,r21
1000863c:	9809883a 	mov	r4,r19
10008640:	a00b883a 	mov	r5,r20
10008644:	000d883a 	mov	r6,zero
10008648:	01d00534 	movhi	r7,16404
1000864c:	00042780 	call	10004278 <__subdf3>
10008650:	1009883a 	mov	r4,r2
10008654:	180b883a 	mov	r5,r3
10008658:	900d883a 	mov	r6,r18
1000865c:	a80f883a 	mov	r7,r21
10008660:	1027883a 	mov	r19,r2
10008664:	1829883a 	mov	r20,r3
10008668:	000d3e00 	call	1000d3e0 <__gtdf2>
1000866c:	00806616 	blt	zero,r2,10008808 <_dtoa_r+0x12f8>
10008670:	a9e0003c 	xorhi	r7,r21,32768
10008674:	9809883a 	mov	r4,r19
10008678:	a00b883a 	mov	r5,r20
1000867c:	900d883a 	mov	r6,r18
10008680:	000d4440 	call	1000d444 <__ltdf2>
10008684:	103d710e 	bge	r2,zero,10007c4c <__alt_data_end+0xf8007c4c>
10008688:	0029883a 	mov	r20,zero
1000868c:	002b883a 	mov	r21,zero
10008690:	003f5406 	br	100083e4 <__alt_data_end+0xf80083e4>
10008694:	d9800a17 	ldw	r6,40(sp)
10008698:	e00b883a 	mov	r5,fp
1000869c:	8009883a 	mov	r4,r16
100086a0:	000afec0 	call	1000afec <__pow5mult>
100086a4:	1039883a 	mov	fp,r2
100086a8:	003e2e06 	br	10007f64 <__alt_data_end+0xf8007f64>
100086ac:	d8000c15 	stw	zero,48(sp)
100086b0:	003f2006 	br	10008334 <__alt_data_end+0xf8008334>
100086b4:	00800044 	movi	r2,1
100086b8:	d8800c15 	stw	r2,48(sp)
100086bc:	003c5d06 	br	10007834 <__alt_data_end+0xf8007834>
100086c0:	d8c00a17 	ldw	r3,40(sp)
100086c4:	d9000b17 	ldw	r4,44(sp)
100086c8:	dcc00a15 	stw	r19,40(sp)
100086cc:	98c5c83a 	sub	r2,r19,r3
100086d0:	2089883a 	add	r4,r4,r2
100086d4:	d9000b15 	stw	r4,44(sp)
100086d8:	0027883a 	mov	r19,zero
100086dc:	003df206 	br	10007ea8 <__alt_data_end+0xf8007ea8>
100086e0:	d9000317 	ldw	r4,12(sp)
100086e4:	8829883a 	mov	r20,r17
100086e8:	04800084 	movi	r18,2
100086ec:	d9001015 	stw	r4,64(sp)
100086f0:	003c8106 	br	100078f8 <__alt_data_end+0xf80078f8>
100086f4:	04800044 	movi	r18,1
100086f8:	dc800e15 	stw	r18,56(sp)
100086fc:	dc800915 	stw	r18,36(sp)
10008700:	dc802115 	stw	r18,132(sp)
10008704:	003f1206 	br	10008350 <__alt_data_end+0xf8008350>
10008708:	d8800617 	ldw	r2,24(sp)
1000870c:	00abc83a 	sub	r21,zero,r2
10008710:	a800a426 	beq	r21,zero,100089a4 <_dtoa_r+0x1494>
10008714:	a88003cc 	andi	r2,r21,15
10008718:	100490fa 	slli	r2,r2,3
1000871c:	00c40074 	movhi	r3,4097
10008720:	18c1e404 	addi	r3,r3,1936
10008724:	d9000317 	ldw	r4,12(sp)
10008728:	1885883a 	add	r2,r3,r2
1000872c:	11800017 	ldw	r6,0(r2)
10008730:	11c00117 	ldw	r7,4(r2)
10008734:	a82bd13a 	srai	r21,r21,4
10008738:	880b883a 	mov	r5,r17
1000873c:	00042d80 	call	100042d8 <__muldf3>
10008740:	1027883a 	mov	r19,r2
10008744:	1829883a 	mov	r20,r3
10008748:	a800e826 	beq	r21,zero,10008aec <_dtoa_r+0x15dc>
1000874c:	05840074 	movhi	r22,4097
10008750:	b581da04 	addi	r22,r22,1896
10008754:	04800084 	movi	r18,2
10008758:	a980004c 	andi	r6,r21,1
1000875c:	1009883a 	mov	r4,r2
10008760:	a82bd07a 	srai	r21,r21,1
10008764:	180b883a 	mov	r5,r3
10008768:	30000426 	beq	r6,zero,1000877c <_dtoa_r+0x126c>
1000876c:	b1800017 	ldw	r6,0(r22)
10008770:	b1c00117 	ldw	r7,4(r22)
10008774:	94800044 	addi	r18,r18,1
10008778:	00042d80 	call	100042d8 <__muldf3>
1000877c:	b5800204 	addi	r22,r22,8
10008780:	a83ff51e 	bne	r21,zero,10008758 <__alt_data_end+0xf8008758>
10008784:	1027883a 	mov	r19,r2
10008788:	1829883a 	mov	r20,r3
1000878c:	003c7306 	br	1000795c <__alt_data_end+0xf800795c>
10008790:	21000044 	addi	r4,r4,1
10008794:	11000005 	stb	r4,0(r2)
10008798:	003e5c06 	br	1000810c <__alt_data_end+0xf800810c>
1000879c:	a9400117 	ldw	r5,4(r21)
100087a0:	8009883a 	mov	r4,r16
100087a4:	000a9280 	call	1000a928 <_Balloc>
100087a8:	a9800417 	ldw	r6,16(r21)
100087ac:	11000304 	addi	r4,r2,12
100087b0:	a9400304 	addi	r5,r21,12
100087b4:	31800084 	addi	r6,r6,2
100087b8:	318d883a 	add	r6,r6,r6
100087bc:	318d883a 	add	r6,r6,r6
100087c0:	1023883a 	mov	r17,r2
100087c4:	000a5800 	call	1000a580 <memcpy>
100087c8:	8009883a 	mov	r4,r16
100087cc:	880b883a 	mov	r5,r17
100087d0:	01800044 	movi	r6,1
100087d4:	000b1180 	call	1000b118 <__lshift>
100087d8:	1027883a 	mov	r19,r2
100087dc:	003e8f06 	br	1000821c <__alt_data_end+0xf800821c>
100087e0:	b807883a 	mov	r3,r23
100087e4:	00800e44 	movi	r2,57
100087e8:	ddc00717 	ldw	r23,28(sp)
100087ec:	18809026 	beq	r3,r2,10008a30 <_dtoa_r+0x1520>
100087f0:	18c00044 	addi	r3,r3,1
100087f4:	003f2b06 	br	100084a4 <__alt_data_end+0xf80084a4>
100087f8:	b807883a 	mov	r3,r23
100087fc:	982b883a 	mov	r21,r19
10008800:	ddc00717 	ldw	r23,28(sp)
10008804:	003e2406 	br	10008098 <__alt_data_end+0xf8008098>
10008808:	0029883a 	mov	r20,zero
1000880c:	002b883a 	mov	r21,zero
10008810:	003f7206 	br	100085dc <__alt_data_end+0xf80085dc>
10008814:	593fffc4 	addi	r4,r11,-1
10008818:	200490fa 	slli	r2,r4,3
1000881c:	00c40074 	movhi	r3,4097
10008820:	18c1e404 	addi	r3,r3,1936
10008824:	d9001015 	stw	r4,64(sp)
10008828:	1885883a 	add	r2,r3,r2
1000882c:	11000017 	ldw	r4,0(r2)
10008830:	11400117 	ldw	r5,4(r2)
10008834:	900d883a 	mov	r6,r18
10008838:	a80f883a 	mov	r7,r21
1000883c:	dac01615 	stw	r11,88(sp)
10008840:	00042d80 	call	100042d8 <__muldf3>
10008844:	a00b883a 	mov	r5,r20
10008848:	9809883a 	mov	r4,r19
1000884c:	d8c01215 	stw	r3,72(sp)
10008850:	d8801115 	stw	r2,68(sp)
10008854:	00048a80 	call	100048a8 <__fixdfsi>
10008858:	1009883a 	mov	r4,r2
1000885c:	1025883a 	mov	r18,r2
10008860:	00047d40 	call	100047d4 <__floatsidf>
10008864:	9809883a 	mov	r4,r19
10008868:	a00b883a 	mov	r5,r20
1000886c:	100d883a 	mov	r6,r2
10008870:	180f883a 	mov	r7,r3
10008874:	94800c04 	addi	r18,r18,48
10008878:	00042780 	call	10004278 <__subdf3>
1000887c:	bc800005 	stb	r18,0(r23)
10008880:	dac01617 	ldw	r11,88(sp)
10008884:	102b883a 	mov	r21,r2
10008888:	00800044 	movi	r2,1
1000888c:	bd800044 	addi	r22,r23,1
10008890:	1815883a 	mov	r10,r3
10008894:	58802226 	beq	r11,r2,10008920 <_dtoa_r+0x1410>
10008898:	bad7883a 	add	r11,r23,r11
1000889c:	dc001415 	stw	r16,80(sp)
100088a0:	a805883a 	mov	r2,r21
100088a4:	b027883a 	mov	r19,r22
100088a8:	5821883a 	mov	r16,r11
100088ac:	882b883a 	mov	r21,r17
100088b0:	000d883a 	mov	r6,zero
100088b4:	01d00934 	movhi	r7,16420
100088b8:	1009883a 	mov	r4,r2
100088bc:	180b883a 	mov	r5,r3
100088c0:	00042d80 	call	100042d8 <__muldf3>
100088c4:	180b883a 	mov	r5,r3
100088c8:	1009883a 	mov	r4,r2
100088cc:	1829883a 	mov	r20,r3
100088d0:	1023883a 	mov	r17,r2
100088d4:	00048a80 	call	100048a8 <__fixdfsi>
100088d8:	1009883a 	mov	r4,r2
100088dc:	1025883a 	mov	r18,r2
100088e0:	00047d40 	call	100047d4 <__floatsidf>
100088e4:	8809883a 	mov	r4,r17
100088e8:	a00b883a 	mov	r5,r20
100088ec:	100d883a 	mov	r6,r2
100088f0:	180f883a 	mov	r7,r3
100088f4:	94800c04 	addi	r18,r18,48
100088f8:	00042780 	call	10004278 <__subdf3>
100088fc:	9cc00044 	addi	r19,r19,1
10008900:	9cbfffc5 	stb	r18,-1(r19)
10008904:	9c3fea1e 	bne	r19,r16,100088b0 <__alt_data_end+0xf80088b0>
10008908:	1815883a 	mov	r10,r3
1000890c:	d8c01017 	ldw	r3,64(sp)
10008910:	dc001417 	ldw	r16,80(sp)
10008914:	a823883a 	mov	r17,r21
10008918:	b0ed883a 	add	r22,r22,r3
1000891c:	102b883a 	mov	r21,r2
10008920:	d9001117 	ldw	r4,68(sp)
10008924:	d9401217 	ldw	r5,72(sp)
10008928:	000d883a 	mov	r6,zero
1000892c:	01cff834 	movhi	r7,16352
10008930:	da801515 	stw	r10,84(sp)
10008934:	00042240 	call	10004224 <__adddf3>
10008938:	da801517 	ldw	r10,84(sp)
1000893c:	1009883a 	mov	r4,r2
10008940:	180b883a 	mov	r5,r3
10008944:	500f883a 	mov	r7,r10
10008948:	a80d883a 	mov	r6,r21
1000894c:	000d4440 	call	1000d444 <__ltdf2>
10008950:	da801517 	ldw	r10,84(sp)
10008954:	10003b0e 	bge	r2,zero,10008a44 <_dtoa_r+0x1534>
10008958:	d9c01317 	ldw	r7,76(sp)
1000895c:	b53fffc3 	ldbu	r20,-1(r22)
10008960:	d9c00615 	stw	r7,24(sp)
10008964:	003d3106 	br	10007e2c <__alt_data_end+0xf8007e2c>
10008968:	d8800817 	ldw	r2,32(sp)
1000896c:	11e5c83a 	sub	r18,r2,r7
10008970:	0005883a 	mov	r2,zero
10008974:	003d5006 	br	10007eb8 <__alt_data_end+0xf8007eb8>
10008978:	05800044 	movi	r22,1
1000897c:	003dc406 	br	10008090 <__alt_data_end+0xf8008090>
10008980:	a5000044 	addi	r20,r20,1
10008984:	15000005 	stb	r20,0(r2)
10008988:	003c8206 	br	10007b94 <__alt_data_end+0xf8007b94>
1000898c:	d8800217 	ldw	r2,8(sp)
10008990:	00c00d84 	movi	r3,54
10008994:	dcc00a17 	ldw	r19,40(sp)
10008998:	1885c83a 	sub	r2,r3,r2
1000899c:	dc800817 	ldw	r18,32(sp)
100089a0:	003d4506 	br	10007eb8 <__alt_data_end+0xf8007eb8>
100089a4:	dcc00317 	ldw	r19,12(sp)
100089a8:	8829883a 	mov	r20,r17
100089ac:	04800084 	movi	r18,2
100089b0:	003bea06 	br	1000795c <__alt_data_end+0xf800795c>
100089b4:	d9000917 	ldw	r4,36(sp)
100089b8:	203f1126 	beq	r4,zero,10008600 <__alt_data_end+0xf8008600>
100089bc:	d9c00e17 	ldw	r7,56(sp)
100089c0:	01fca20e 	bge	zero,r7,10007c4c <__alt_data_end+0xf8007c4c>
100089c4:	a00b883a 	mov	r5,r20
100089c8:	9809883a 	mov	r4,r19
100089cc:	000d883a 	mov	r6,zero
100089d0:	01d00934 	movhi	r7,16420
100089d4:	00042d80 	call	100042d8 <__muldf3>
100089d8:	91000044 	addi	r4,r18,1
100089dc:	1027883a 	mov	r19,r2
100089e0:	1829883a 	mov	r20,r3
100089e4:	00047d40 	call	100047d4 <__floatsidf>
100089e8:	9809883a 	mov	r4,r19
100089ec:	a00b883a 	mov	r5,r20
100089f0:	100d883a 	mov	r6,r2
100089f4:	180f883a 	mov	r7,r3
100089f8:	00042d80 	call	100042d8 <__muldf3>
100089fc:	1009883a 	mov	r4,r2
10008a00:	180b883a 	mov	r5,r3
10008a04:	000d883a 	mov	r6,zero
10008a08:	01d00734 	movhi	r7,16412
10008a0c:	00042240 	call	10004224 <__adddf3>
10008a10:	1025883a 	mov	r18,r2
10008a14:	d8800617 	ldw	r2,24(sp)
10008a18:	057f3034 	movhi	r21,64704
10008a1c:	1d6b883a 	add	r21,r3,r21
10008a20:	10bfffc4 	addi	r2,r2,-1
10008a24:	d8801315 	stw	r2,76(sp)
10008a28:	dac00e17 	ldw	r11,56(sp)
10008a2c:	003be706 	br	100079cc <__alt_data_end+0xf80079cc>
10008a30:	01000e44 	movi	r4,57
10008a34:	91000005 	stb	r4,0(r18)
10008a38:	95800044 	addi	r22,r18,1
10008a3c:	982b883a 	mov	r21,r19
10008a40:	003da106 	br	100080c8 <__alt_data_end+0xf80080c8>
10008a44:	d9801117 	ldw	r6,68(sp)
10008a48:	d9c01217 	ldw	r7,72(sp)
10008a4c:	0009883a 	mov	r4,zero
10008a50:	014ff834 	movhi	r5,16352
10008a54:	da801515 	stw	r10,84(sp)
10008a58:	00042780 	call	10004278 <__subdf3>
10008a5c:	da801517 	ldw	r10,84(sp)
10008a60:	1009883a 	mov	r4,r2
10008a64:	180b883a 	mov	r5,r3
10008a68:	a80d883a 	mov	r6,r21
10008a6c:	500f883a 	mov	r7,r10
10008a70:	000d3e00 	call	1000d3e0 <__gtdf2>
10008a74:	00bc750e 	bge	zero,r2,10007c4c <__alt_data_end+0xf8007c4c>
10008a78:	01000c04 	movi	r4,48
10008a7c:	00000106 	br	10008a84 <_dtoa_r+0x1574>
10008a80:	102d883a 	mov	r22,r2
10008a84:	b0bfffc4 	addi	r2,r22,-1
10008a88:	10c00007 	ldb	r3,0(r2)
10008a8c:	193ffc26 	beq	r3,r4,10008a80 <__alt_data_end+0xf8008a80>
10008a90:	d8801317 	ldw	r2,76(sp)
10008a94:	d8800615 	stw	r2,24(sp)
10008a98:	003c3e06 	br	10007b94 <__alt_data_end+0xf8007b94>
10008a9c:	d9001317 	ldw	r4,76(sp)
10008aa0:	df001117 	ldw	fp,68(sp)
10008aa4:	d9000615 	stw	r4,24(sp)
10008aa8:	003ce006 	br	10007e2c <__alt_data_end+0xf8007e2c>
10008aac:	df001117 	ldw	fp,68(sp)
10008ab0:	dc401217 	ldw	r17,72(sp)
10008ab4:	003c6506 	br	10007c4c <__alt_data_end+0xf8007c4c>
10008ab8:	103e7a1e 	bne	r2,zero,100084a4 <__alt_data_end+0xf80084a4>
10008abc:	1880004c 	andi	r2,r3,1
10008ac0:	103e7826 	beq	r2,zero,100084a4 <__alt_data_end+0xf80084a4>
10008ac4:	003e7406 	br	10008498 <__alt_data_end+0xf8008498>
10008ac8:	8009883a 	mov	r4,r16
10008acc:	a80b883a 	mov	r5,r21
10008ad0:	01800284 	movi	r6,10
10008ad4:	000f883a 	mov	r7,zero
10008ad8:	000a9f80 	call	1000a9f8 <__multadd>
10008adc:	d9000e17 	ldw	r4,56(sp)
10008ae0:	102b883a 	mov	r21,r2
10008ae4:	d9000915 	stw	r4,36(sp)
10008ae8:	003d5106 	br	10008030 <__alt_data_end+0xf8008030>
10008aec:	04800084 	movi	r18,2
10008af0:	003b9a06 	br	1000795c <__alt_data_end+0xf800795c>
10008af4:	d8c01317 	ldw	r3,76(sp)
10008af8:	d8c00615 	stw	r3,24(sp)
10008afc:	003ccb06 	br	10007e2c <__alt_data_end+0xf8007e2c>
10008b00:	d8c01317 	ldw	r3,76(sp)
10008b04:	d8c00615 	stw	r3,24(sp)
10008b08:	003c2206 	br	10007b94 <__alt_data_end+0xf8007b94>
10008b0c:	20fd3826 	beq	r4,r3,10007ff0 <__alt_data_end+0xf8007ff0>
10008b10:	00c00f04 	movi	r3,60
10008b14:	1885c83a 	sub	r2,r3,r2
10008b18:	003da906 	br	100081c0 <__alt_data_end+0xf80081c0>
10008b1c:	000b883a 	mov	r5,zero
10008b20:	003b5406 	br	10007874 <__alt_data_end+0xf8007874>
10008b24:	04c00044 	movi	r19,1
10008b28:	003b3b06 	br	10007818 <__alt_data_end+0xf8007818>

10008b2c <_fflush_r>:
10008b2c:	defffb04 	addi	sp,sp,-20
10008b30:	dcc00315 	stw	r19,12(sp)
10008b34:	dc400115 	stw	r17,4(sp)
10008b38:	dfc00415 	stw	ra,16(sp)
10008b3c:	dc800215 	stw	r18,8(sp)
10008b40:	dc000015 	stw	r16,0(sp)
10008b44:	2027883a 	mov	r19,r4
10008b48:	2823883a 	mov	r17,r5
10008b4c:	20000226 	beq	r4,zero,10008b58 <_fflush_r+0x2c>
10008b50:	20800e17 	ldw	r2,56(r4)
10008b54:	10005726 	beq	r2,zero,10008cb4 <_fflush_r+0x188>
10008b58:	8880030b 	ldhu	r2,12(r17)
10008b5c:	10c0020c 	andi	r3,r2,8
10008b60:	18ffffcc 	andi	r3,r3,65535
10008b64:	18e0001c 	xori	r3,r3,32768
10008b68:	18e00004 	addi	r3,r3,-32768
10008b6c:	1800311e 	bne	r3,zero,10008c34 <_fflush_r+0x108>
10008b70:	89000117 	ldw	r4,4(r17)
10008b74:	10c20014 	ori	r3,r2,2048
10008b78:	88c0030d 	sth	r3,12(r17)
10008b7c:	180b883a 	mov	r5,r3
10008b80:	0100520e 	bge	zero,r4,10008ccc <_fflush_r+0x1a0>
10008b84:	88c00a17 	ldw	r3,40(r17)
10008b88:	18002226 	beq	r3,zero,10008c14 <_fflush_r+0xe8>
10008b8c:	1084000c 	andi	r2,r2,4096
10008b90:	10bfffcc 	andi	r2,r2,65535
10008b94:	10a0001c 	xori	r2,r2,32768
10008b98:	10a00004 	addi	r2,r2,-32768
10008b9c:	10004e26 	beq	r2,zero,10008cd8 <_fflush_r+0x1ac>
10008ba0:	8c001417 	ldw	r16,80(r17)
10008ba4:	2940010c 	andi	r5,r5,4
10008ba8:	297fffcc 	andi	r5,r5,65535
10008bac:	2960001c 	xori	r5,r5,32768
10008bb0:	29600004 	addi	r5,r5,-32768
10008bb4:	28000626 	beq	r5,zero,10008bd0 <_fflush_r+0xa4>
10008bb8:	89000117 	ldw	r4,4(r17)
10008bbc:	88800c17 	ldw	r2,48(r17)
10008bc0:	8121c83a 	sub	r16,r16,r4
10008bc4:	10000226 	beq	r2,zero,10008bd0 <_fflush_r+0xa4>
10008bc8:	88800f17 	ldw	r2,60(r17)
10008bcc:	80a1c83a 	sub	r16,r16,r2
10008bd0:	89400717 	ldw	r5,28(r17)
10008bd4:	9809883a 	mov	r4,r19
10008bd8:	800d883a 	mov	r6,r16
10008bdc:	000f883a 	mov	r7,zero
10008be0:	183ee83a 	callr	r3
10008be4:	8080281e 	bne	r16,r2,10008c88 <_fflush_r+0x15c>
10008be8:	8880030b 	ldhu	r2,12(r17)
10008bec:	88c00417 	ldw	r3,16(r17)
10008bf0:	88000115 	stw	zero,4(r17)
10008bf4:	113dffcc 	andi	r4,r2,63487
10008bf8:	1084000c 	andi	r2,r2,4096
10008bfc:	10bfffcc 	andi	r2,r2,65535
10008c00:	10a0001c 	xori	r2,r2,32768
10008c04:	8900030d 	sth	r4,12(r17)
10008c08:	88c00015 	stw	r3,0(r17)
10008c0c:	10a00004 	addi	r2,r2,-32768
10008c10:	10002c1e 	bne	r2,zero,10008cc4 <_fflush_r+0x198>
10008c14:	0005883a 	mov	r2,zero
10008c18:	dfc00417 	ldw	ra,16(sp)
10008c1c:	dcc00317 	ldw	r19,12(sp)
10008c20:	dc800217 	ldw	r18,8(sp)
10008c24:	dc400117 	ldw	r17,4(sp)
10008c28:	dc000017 	ldw	r16,0(sp)
10008c2c:	dec00504 	addi	sp,sp,20
10008c30:	f800283a 	ret
10008c34:	8c800417 	ldw	r18,16(r17)
10008c38:	903ff626 	beq	r18,zero,10008c14 <__alt_data_end+0xf8008c14>
10008c3c:	8c000017 	ldw	r16,0(r17)
10008c40:	108000cc 	andi	r2,r2,3
10008c44:	8c800015 	stw	r18,0(r17)
10008c48:	84a1c83a 	sub	r16,r16,r18
10008c4c:	10001b1e 	bne	r2,zero,10008cbc <_fflush_r+0x190>
10008c50:	88800517 	ldw	r2,20(r17)
10008c54:	88800215 	stw	r2,8(r17)
10008c58:	04000316 	blt	zero,r16,10008c68 <_fflush_r+0x13c>
10008c5c:	003fed06 	br	10008c14 <__alt_data_end+0xf8008c14>
10008c60:	90a5883a 	add	r18,r18,r2
10008c64:	043feb0e 	bge	zero,r16,10008c14 <__alt_data_end+0xf8008c14>
10008c68:	88800917 	ldw	r2,36(r17)
10008c6c:	89400717 	ldw	r5,28(r17)
10008c70:	800f883a 	mov	r7,r16
10008c74:	900d883a 	mov	r6,r18
10008c78:	9809883a 	mov	r4,r19
10008c7c:	103ee83a 	callr	r2
10008c80:	80a1c83a 	sub	r16,r16,r2
10008c84:	00bff616 	blt	zero,r2,10008c60 <__alt_data_end+0xf8008c60>
10008c88:	88c0030b 	ldhu	r3,12(r17)
10008c8c:	00bfffc4 	movi	r2,-1
10008c90:	18c01014 	ori	r3,r3,64
10008c94:	88c0030d 	sth	r3,12(r17)
10008c98:	dfc00417 	ldw	ra,16(sp)
10008c9c:	dcc00317 	ldw	r19,12(sp)
10008ca0:	dc800217 	ldw	r18,8(sp)
10008ca4:	dc400117 	ldw	r17,4(sp)
10008ca8:	dc000017 	ldw	r16,0(sp)
10008cac:	dec00504 	addi	sp,sp,20
10008cb0:	f800283a 	ret
10008cb4:	0008de80 	call	10008de8 <__sinit>
10008cb8:	003fa706 	br	10008b58 <__alt_data_end+0xf8008b58>
10008cbc:	0005883a 	mov	r2,zero
10008cc0:	003fe406 	br	10008c54 <__alt_data_end+0xf8008c54>
10008cc4:	8c001415 	stw	r16,80(r17)
10008cc8:	003fd206 	br	10008c14 <__alt_data_end+0xf8008c14>
10008ccc:	88c00f17 	ldw	r3,60(r17)
10008cd0:	00ffac16 	blt	zero,r3,10008b84 <__alt_data_end+0xf8008b84>
10008cd4:	003fcf06 	br	10008c14 <__alt_data_end+0xf8008c14>
10008cd8:	89400717 	ldw	r5,28(r17)
10008cdc:	9809883a 	mov	r4,r19
10008ce0:	000d883a 	mov	r6,zero
10008ce4:	01c00044 	movi	r7,1
10008ce8:	183ee83a 	callr	r3
10008cec:	1021883a 	mov	r16,r2
10008cf0:	00bfffc4 	movi	r2,-1
10008cf4:	80800326 	beq	r16,r2,10008d04 <_fflush_r+0x1d8>
10008cf8:	8940030b 	ldhu	r5,12(r17)
10008cfc:	88c00a17 	ldw	r3,40(r17)
10008d00:	003fa806 	br	10008ba4 <__alt_data_end+0xf8008ba4>
10008d04:	98c00017 	ldw	r3,0(r19)
10008d08:	00800744 	movi	r2,29
10008d0c:	18bfde1e 	bne	r3,r2,10008c88 <__alt_data_end+0xf8008c88>
10008d10:	003fc006 	br	10008c14 <__alt_data_end+0xf8008c14>

10008d14 <fflush>:
10008d14:	200b883a 	mov	r5,r4
10008d18:	20000426 	beq	r4,zero,10008d2c <fflush+0x18>
10008d1c:	00840074 	movhi	r2,4097
10008d20:	1088ae04 	addi	r2,r2,8888
10008d24:	11000017 	ldw	r4,0(r2)
10008d28:	0008b2c1 	jmpi	10008b2c <_fflush_r>
10008d2c:	00840074 	movhi	r2,4097
10008d30:	1088ad04 	addi	r2,r2,8884
10008d34:	11000017 	ldw	r4,0(r2)
10008d38:	01440074 	movhi	r5,4097
10008d3c:	2962cb04 	addi	r5,r5,-29908
10008d40:	00099c81 	jmpi	100099c8 <_fwalk_reent>

10008d44 <__fp_lock>:
10008d44:	0005883a 	mov	r2,zero
10008d48:	f800283a 	ret

10008d4c <__fp_unlock>:
10008d4c:	0005883a 	mov	r2,zero
10008d50:	f800283a 	ret

10008d54 <_cleanup_r>:
10008d54:	01440074 	movhi	r5,4097
10008d58:	29713e04 	addi	r5,r5,-15112
10008d5c:	00099201 	jmpi	10009920 <_fwalk>

10008d60 <__sfmoreglue>:
10008d60:	defffc04 	addi	sp,sp,-16
10008d64:	dc800215 	stw	r18,8(sp)
10008d68:	2825883a 	mov	r18,r5
10008d6c:	dc000015 	stw	r16,0(sp)
10008d70:	01401704 	movi	r5,92
10008d74:	2021883a 	mov	r16,r4
10008d78:	9009883a 	mov	r4,r18
10008d7c:	dfc00315 	stw	ra,12(sp)
10008d80:	dc400115 	stw	r17,4(sp)
10008d84:	00050500 	call	10005050 <__mulsi3>
10008d88:	8009883a 	mov	r4,r16
10008d8c:	11400304 	addi	r5,r2,12
10008d90:	1023883a 	mov	r17,r2
10008d94:	0009d040 	call	10009d04 <_malloc_r>
10008d98:	1021883a 	mov	r16,r2
10008d9c:	10000726 	beq	r2,zero,10008dbc <__sfmoreglue+0x5c>
10008da0:	11000304 	addi	r4,r2,12
10008da4:	10000015 	stw	zero,0(r2)
10008da8:	14800115 	stw	r18,4(r2)
10008dac:	11000215 	stw	r4,8(r2)
10008db0:	000b883a 	mov	r5,zero
10008db4:	880d883a 	mov	r6,r17
10008db8:	000a84c0 	call	1000a84c <memset>
10008dbc:	8005883a 	mov	r2,r16
10008dc0:	dfc00317 	ldw	ra,12(sp)
10008dc4:	dc800217 	ldw	r18,8(sp)
10008dc8:	dc400117 	ldw	r17,4(sp)
10008dcc:	dc000017 	ldw	r16,0(sp)
10008dd0:	dec00404 	addi	sp,sp,16
10008dd4:	f800283a 	ret

10008dd8 <_cleanup>:
10008dd8:	00840074 	movhi	r2,4097
10008ddc:	1088ad04 	addi	r2,r2,8884
10008de0:	11000017 	ldw	r4,0(r2)
10008de4:	0008d541 	jmpi	10008d54 <_cleanup_r>

10008de8 <__sinit>:
10008de8:	20800e17 	ldw	r2,56(r4)
10008dec:	1000401e 	bne	r2,zero,10008ef0 <__sinit+0x108>
10008df0:	21400117 	ldw	r5,4(r4)
10008df4:	01840074 	movhi	r6,4097
10008df8:	31a35504 	addi	r6,r6,-29356
10008dfc:	20c00217 	ldw	r3,8(r4)
10008e00:	21800f15 	stw	r6,60(r4)
10008e04:	2080bb04 	addi	r2,r4,748
10008e08:	02400044 	movi	r9,1
10008e0c:	018000c4 	movi	r6,3
10008e10:	2180b915 	stw	r6,740(r4)
10008e14:	2080ba15 	stw	r2,744(r4)
10008e18:	22400e15 	stw	r9,56(r4)
10008e1c:	20800317 	ldw	r2,12(r4)
10008e20:	2000b815 	stw	zero,736(r4)
10008e24:	02040074 	movhi	r8,4097
10008e28:	42300f04 	addi	r8,r8,-16324
10008e2c:	01c40074 	movhi	r7,4097
10008e30:	39f02404 	addi	r7,r7,-16240
10008e34:	01840074 	movhi	r6,4097
10008e38:	31b04604 	addi	r6,r6,-16104
10008e3c:	01040074 	movhi	r4,4097
10008e40:	21305d04 	addi	r4,r4,-16012
10008e44:	02800104 	movi	r10,4
10008e48:	28000015 	stw	zero,0(r5)
10008e4c:	28000115 	stw	zero,4(r5)
10008e50:	28000215 	stw	zero,8(r5)
10008e54:	2a80030d 	sth	r10,12(r5)
10008e58:	2800038d 	sth	zero,14(r5)
10008e5c:	28000415 	stw	zero,16(r5)
10008e60:	28000515 	stw	zero,20(r5)
10008e64:	28000615 	stw	zero,24(r5)
10008e68:	29400715 	stw	r5,28(r5)
10008e6c:	2a000815 	stw	r8,32(r5)
10008e70:	29c00915 	stw	r7,36(r5)
10008e74:	29800a15 	stw	r6,40(r5)
10008e78:	29000b15 	stw	r4,44(r5)
10008e7c:	01400284 	movi	r5,10
10008e80:	18000015 	stw	zero,0(r3)
10008e84:	18000115 	stw	zero,4(r3)
10008e88:	18000215 	stw	zero,8(r3)
10008e8c:	1940030d 	sth	r5,12(r3)
10008e90:	1a40038d 	sth	r9,14(r3)
10008e94:	18000415 	stw	zero,16(r3)
10008e98:	18000515 	stw	zero,20(r3)
10008e9c:	18000615 	stw	zero,24(r3)
10008ea0:	18c00715 	stw	r3,28(r3)
10008ea4:	1a000815 	stw	r8,32(r3)
10008ea8:	19c00915 	stw	r7,36(r3)
10008eac:	19800a15 	stw	r6,40(r3)
10008eb0:	19000b15 	stw	r4,44(r3)
10008eb4:	00c00484 	movi	r3,18
10008eb8:	10c0030d 	sth	r3,12(r2)
10008ebc:	00c00084 	movi	r3,2
10008ec0:	10000015 	stw	zero,0(r2)
10008ec4:	10000115 	stw	zero,4(r2)
10008ec8:	10000215 	stw	zero,8(r2)
10008ecc:	10c0038d 	sth	r3,14(r2)
10008ed0:	10000415 	stw	zero,16(r2)
10008ed4:	10000515 	stw	zero,20(r2)
10008ed8:	10000615 	stw	zero,24(r2)
10008edc:	10800715 	stw	r2,28(r2)
10008ee0:	12000815 	stw	r8,32(r2)
10008ee4:	11c00915 	stw	r7,36(r2)
10008ee8:	11800a15 	stw	r6,40(r2)
10008eec:	11000b15 	stw	r4,44(r2)
10008ef0:	f800283a 	ret

10008ef4 <__sfp>:
10008ef4:	defffc04 	addi	sp,sp,-16
10008ef8:	00840074 	movhi	r2,4097
10008efc:	1088ad04 	addi	r2,r2,8884
10008f00:	dc400115 	stw	r17,4(sp)
10008f04:	14400017 	ldw	r17,0(r2)
10008f08:	dc800215 	stw	r18,8(sp)
10008f0c:	dfc00315 	stw	ra,12(sp)
10008f10:	88800e17 	ldw	r2,56(r17)
10008f14:	dc000015 	stw	r16,0(sp)
10008f18:	2025883a 	mov	r18,r4
10008f1c:	10002826 	beq	r2,zero,10008fc0 <__sfp+0xcc>
10008f20:	8c40b804 	addi	r17,r17,736
10008f24:	043fffc4 	movi	r16,-1
10008f28:	89400117 	ldw	r5,4(r17)
10008f2c:	88800217 	ldw	r2,8(r17)
10008f30:	297fffc4 	addi	r5,r5,-1
10008f34:	28000a16 	blt	r5,zero,10008f60 <__sfp+0x6c>
10008f38:	10c0030f 	ldh	r3,12(r2)
10008f3c:	18000c26 	beq	r3,zero,10008f70 <__sfp+0x7c>
10008f40:	10c01a04 	addi	r3,r2,104
10008f44:	00000206 	br	10008f50 <__sfp+0x5c>
10008f48:	19bfe90f 	ldh	r6,-92(r3)
10008f4c:	30000826 	beq	r6,zero,10008f70 <__sfp+0x7c>
10008f50:	297fffc4 	addi	r5,r5,-1
10008f54:	18bffd04 	addi	r2,r3,-12
10008f58:	18c01704 	addi	r3,r3,92
10008f5c:	2c3ffa1e 	bne	r5,r16,10008f48 <__alt_data_end+0xf8008f48>
10008f60:	88800017 	ldw	r2,0(r17)
10008f64:	10001926 	beq	r2,zero,10008fcc <__sfp+0xd8>
10008f68:	1023883a 	mov	r17,r2
10008f6c:	003fee06 	br	10008f28 <__alt_data_end+0xf8008f28>
10008f70:	00ffffc4 	movi	r3,-1
10008f74:	10c0038d 	sth	r3,14(r2)
10008f78:	00c00044 	movi	r3,1
10008f7c:	10c0030d 	sth	r3,12(r2)
10008f80:	10000015 	stw	zero,0(r2)
10008f84:	10000215 	stw	zero,8(r2)
10008f88:	10000115 	stw	zero,4(r2)
10008f8c:	10000415 	stw	zero,16(r2)
10008f90:	10000515 	stw	zero,20(r2)
10008f94:	10000615 	stw	zero,24(r2)
10008f98:	10000c15 	stw	zero,48(r2)
10008f9c:	10000d15 	stw	zero,52(r2)
10008fa0:	10001115 	stw	zero,68(r2)
10008fa4:	10001215 	stw	zero,72(r2)
10008fa8:	dfc00317 	ldw	ra,12(sp)
10008fac:	dc800217 	ldw	r18,8(sp)
10008fb0:	dc400117 	ldw	r17,4(sp)
10008fb4:	dc000017 	ldw	r16,0(sp)
10008fb8:	dec00404 	addi	sp,sp,16
10008fbc:	f800283a 	ret
10008fc0:	8809883a 	mov	r4,r17
10008fc4:	0008de80 	call	10008de8 <__sinit>
10008fc8:	003fd506 	br	10008f20 <__alt_data_end+0xf8008f20>
10008fcc:	9009883a 	mov	r4,r18
10008fd0:	01400104 	movi	r5,4
10008fd4:	0008d600 	call	10008d60 <__sfmoreglue>
10008fd8:	88800015 	stw	r2,0(r17)
10008fdc:	103fe21e 	bne	r2,zero,10008f68 <__alt_data_end+0xf8008f68>
10008fe0:	00800304 	movi	r2,12
10008fe4:	90800015 	stw	r2,0(r18)
10008fe8:	0005883a 	mov	r2,zero
10008fec:	003fee06 	br	10008fa8 <__alt_data_end+0xf8008fa8>

10008ff0 <__sfp_lock_acquire>:
10008ff0:	f800283a 	ret

10008ff4 <__sfp_lock_release>:
10008ff4:	f800283a 	ret

10008ff8 <__sinit_lock_acquire>:
10008ff8:	f800283a 	ret

10008ffc <__sinit_lock_release>:
10008ffc:	f800283a 	ret

10009000 <__fp_lock_all>:
10009000:	00840074 	movhi	r2,4097
10009004:	1088ae04 	addi	r2,r2,8888
10009008:	11000017 	ldw	r4,0(r2)
1000900c:	01440074 	movhi	r5,4097
10009010:	29635104 	addi	r5,r5,-29372
10009014:	00099201 	jmpi	10009920 <_fwalk>

10009018 <__fp_unlock_all>:
10009018:	00840074 	movhi	r2,4097
1000901c:	1088ae04 	addi	r2,r2,8888
10009020:	11000017 	ldw	r4,0(r2)
10009024:	01440074 	movhi	r5,4097
10009028:	29635304 	addi	r5,r5,-29364
1000902c:	00099201 	jmpi	10009920 <_fwalk>

10009030 <_malloc_trim_r>:
10009030:	defffb04 	addi	sp,sp,-20
10009034:	dcc00315 	stw	r19,12(sp)
10009038:	dc800215 	stw	r18,8(sp)
1000903c:	dc400115 	stw	r17,4(sp)
10009040:	dc000015 	stw	r16,0(sp)
10009044:	2827883a 	mov	r19,r5
10009048:	dfc00415 	stw	ra,16(sp)
1000904c:	04440074 	movhi	r17,4097
10009050:	8c432904 	addi	r17,r17,3236
10009054:	2021883a 	mov	r16,r4
10009058:	000db800 	call	1000db80 <__malloc_lock>
1000905c:	88800217 	ldw	r2,8(r17)
10009060:	14800117 	ldw	r18,4(r2)
10009064:	00bfff04 	movi	r2,-4
10009068:	90a4703a 	and	r18,r18,r2
1000906c:	9083fbc4 	addi	r2,r18,4079
10009070:	14e7c83a 	sub	r19,r2,r19
10009074:	9826d33a 	srli	r19,r19,12
10009078:	0083ffc4 	movi	r2,4095
1000907c:	9cffffc4 	addi	r19,r19,-1
10009080:	9826933a 	slli	r19,r19,12
10009084:	14c0060e 	bge	r2,r19,100090a0 <_malloc_trim_r+0x70>
10009088:	8009883a 	mov	r4,r16
1000908c:	000b883a 	mov	r5,zero
10009090:	000bfd80 	call	1000bfd8 <_sbrk_r>
10009094:	88c00217 	ldw	r3,8(r17)
10009098:	1c87883a 	add	r3,r3,r18
1000909c:	10c00a26 	beq	r2,r3,100090c8 <_malloc_trim_r+0x98>
100090a0:	8009883a 	mov	r4,r16
100090a4:	000dba00 	call	1000dba0 <__malloc_unlock>
100090a8:	0005883a 	mov	r2,zero
100090ac:	dfc00417 	ldw	ra,16(sp)
100090b0:	dcc00317 	ldw	r19,12(sp)
100090b4:	dc800217 	ldw	r18,8(sp)
100090b8:	dc400117 	ldw	r17,4(sp)
100090bc:	dc000017 	ldw	r16,0(sp)
100090c0:	dec00504 	addi	sp,sp,20
100090c4:	f800283a 	ret
100090c8:	8009883a 	mov	r4,r16
100090cc:	04cbc83a 	sub	r5,zero,r19
100090d0:	000bfd80 	call	1000bfd8 <_sbrk_r>
100090d4:	00ffffc4 	movi	r3,-1
100090d8:	10c01326 	beq	r2,r3,10009128 <_malloc_trim_r+0xf8>
100090dc:	00840074 	movhi	r2,4097
100090e0:	108f6004 	addi	r2,r2,15744
100090e4:	11000017 	ldw	r4,0(r2)
100090e8:	88c00217 	ldw	r3,8(r17)
100090ec:	94e5c83a 	sub	r18,r18,r19
100090f0:	94800054 	ori	r18,r18,1
100090f4:	24e7c83a 	sub	r19,r4,r19
100090f8:	1c800115 	stw	r18,4(r3)
100090fc:	8009883a 	mov	r4,r16
10009100:	14c00015 	stw	r19,0(r2)
10009104:	000dba00 	call	1000dba0 <__malloc_unlock>
10009108:	00800044 	movi	r2,1
1000910c:	dfc00417 	ldw	ra,16(sp)
10009110:	dcc00317 	ldw	r19,12(sp)
10009114:	dc800217 	ldw	r18,8(sp)
10009118:	dc400117 	ldw	r17,4(sp)
1000911c:	dc000017 	ldw	r16,0(sp)
10009120:	dec00504 	addi	sp,sp,20
10009124:	f800283a 	ret
10009128:	8009883a 	mov	r4,r16
1000912c:	000b883a 	mov	r5,zero
10009130:	000bfd80 	call	1000bfd8 <_sbrk_r>
10009134:	88c00217 	ldw	r3,8(r17)
10009138:	014003c4 	movi	r5,15
1000913c:	10c9c83a 	sub	r4,r2,r3
10009140:	293fd70e 	bge	r5,r4,100090a0 <__alt_data_end+0xf80090a0>
10009144:	01440074 	movhi	r5,4097
10009148:	2948b004 	addi	r5,r5,8896
1000914c:	29400017 	ldw	r5,0(r5)
10009150:	21000054 	ori	r4,r4,1
10009154:	19000115 	stw	r4,4(r3)
10009158:	1145c83a 	sub	r2,r2,r5
1000915c:	01440074 	movhi	r5,4097
10009160:	294f6004 	addi	r5,r5,15744
10009164:	28800015 	stw	r2,0(r5)
10009168:	003fcd06 	br	100090a0 <__alt_data_end+0xf80090a0>

1000916c <_free_r>:
1000916c:	defffd04 	addi	sp,sp,-12
10009170:	dc400115 	stw	r17,4(sp)
10009174:	dc000015 	stw	r16,0(sp)
10009178:	dfc00215 	stw	ra,8(sp)
1000917c:	2821883a 	mov	r16,r5
10009180:	2023883a 	mov	r17,r4
10009184:	28004b26 	beq	r5,zero,100092b4 <_free_r+0x148>
10009188:	000db800 	call	1000db80 <__malloc_lock>
1000918c:	823fff17 	ldw	r8,-4(r16)
10009190:	00bfff84 	movi	r2,-2
10009194:	81bffe04 	addi	r6,r16,-8
10009198:	4084703a 	and	r2,r8,r2
1000919c:	3087883a 	add	r3,r6,r2
100091a0:	01440074 	movhi	r5,4097
100091a4:	29432904 	addi	r5,r5,3236
100091a8:	1a400117 	ldw	r9,4(r3)
100091ac:	29000217 	ldw	r4,8(r5)
100091b0:	01ffff04 	movi	r7,-4
100091b4:	49ce703a 	and	r7,r9,r7
100091b8:	20c06526 	beq	r4,r3,10009350 <_free_r+0x1e4>
100091bc:	19c00115 	stw	r7,4(r3)
100091c0:	4200004c 	andi	r8,r8,1
100091c4:	40003026 	beq	r8,zero,10009288 <_free_r+0x11c>
100091c8:	0009883a 	mov	r4,zero
100091cc:	19d1883a 	add	r8,r3,r7
100091d0:	42000117 	ldw	r8,4(r8)
100091d4:	4200004c 	andi	r8,r8,1
100091d8:	4000061e 	bne	r8,zero,100091f4 <_free_r+0x88>
100091dc:	11c5883a 	add	r2,r2,r7
100091e0:	19c00217 	ldw	r7,8(r3)
100091e4:	20004e26 	beq	r4,zero,10009320 <_free_r+0x1b4>
100091e8:	18c00317 	ldw	r3,12(r3)
100091ec:	38c00315 	stw	r3,12(r7)
100091f0:	19c00215 	stw	r7,8(r3)
100091f4:	11c00054 	ori	r7,r2,1
100091f8:	3087883a 	add	r3,r6,r2
100091fc:	31c00115 	stw	r7,4(r6)
10009200:	18800015 	stw	r2,0(r3)
10009204:	20001a1e 	bne	r4,zero,10009270 <_free_r+0x104>
10009208:	00c07fc4 	movi	r3,511
1000920c:	18802e2e 	bgeu	r3,r2,100092c8 <_free_r+0x15c>
10009210:	1006d27a 	srli	r3,r2,9
10009214:	01000104 	movi	r4,4
10009218:	20c06636 	bltu	r4,r3,100093b4 <_free_r+0x248>
1000921c:	1008d1ba 	srli	r4,r2,6
10009220:	21000e04 	addi	r4,r4,56
10009224:	210f883a 	add	r7,r4,r4
10009228:	39cf883a 	add	r7,r7,r7
1000922c:	39cf883a 	add	r7,r7,r7
10009230:	29cf883a 	add	r7,r5,r7
10009234:	38c00217 	ldw	r3,8(r7)
10009238:	01440074 	movhi	r5,4097
1000923c:	29432904 	addi	r5,r5,3236
10009240:	19c06126 	beq	r3,r7,100093c8 <_free_r+0x25c>
10009244:	013fff04 	movi	r4,-4
10009248:	19400117 	ldw	r5,4(r3)
1000924c:	290a703a 	and	r5,r5,r4
10009250:	1140022e 	bgeu	r2,r5,1000925c <_free_r+0xf0>
10009254:	18c00217 	ldw	r3,8(r3)
10009258:	38fffb1e 	bne	r7,r3,10009248 <__alt_data_end+0xf8009248>
1000925c:	18800317 	ldw	r2,12(r3)
10009260:	30800315 	stw	r2,12(r6)
10009264:	30c00215 	stw	r3,8(r6)
10009268:	11800215 	stw	r6,8(r2)
1000926c:	19800315 	stw	r6,12(r3)
10009270:	8809883a 	mov	r4,r17
10009274:	dfc00217 	ldw	ra,8(sp)
10009278:	dc400117 	ldw	r17,4(sp)
1000927c:	dc000017 	ldw	r16,0(sp)
10009280:	dec00304 	addi	sp,sp,12
10009284:	000dba01 	jmpi	1000dba0 <__malloc_unlock>
10009288:	813ffe17 	ldw	r4,-8(r16)
1000928c:	2a400204 	addi	r9,r5,8
10009290:	310dc83a 	sub	r6,r6,r4
10009294:	32000217 	ldw	r8,8(r6)
10009298:	1105883a 	add	r2,r2,r4
1000929c:	42404326 	beq	r8,r9,100093ac <_free_r+0x240>
100092a0:	32400317 	ldw	r9,12(r6)
100092a4:	0009883a 	mov	r4,zero
100092a8:	42400315 	stw	r9,12(r8)
100092ac:	4a000215 	stw	r8,8(r9)
100092b0:	003fc606 	br	100091cc <__alt_data_end+0xf80091cc>
100092b4:	dfc00217 	ldw	ra,8(sp)
100092b8:	dc400117 	ldw	r17,4(sp)
100092bc:	dc000017 	ldw	r16,0(sp)
100092c0:	dec00304 	addi	sp,sp,12
100092c4:	f800283a 	ret
100092c8:	1004d0fa 	srli	r2,r2,3
100092cc:	02000044 	movi	r8,1
100092d0:	29c00117 	ldw	r7,4(r5)
100092d4:	1087883a 	add	r3,r2,r2
100092d8:	18c7883a 	add	r3,r3,r3
100092dc:	1005d0ba 	srai	r2,r2,2
100092e0:	18c7883a 	add	r3,r3,r3
100092e4:	28c7883a 	add	r3,r5,r3
100092e8:	19000217 	ldw	r4,8(r3)
100092ec:	4084983a 	sll	r2,r8,r2
100092f0:	30c00315 	stw	r3,12(r6)
100092f4:	31000215 	stw	r4,8(r6)
100092f8:	11c4b03a 	or	r2,r2,r7
100092fc:	21800315 	stw	r6,12(r4)
10009300:	8809883a 	mov	r4,r17
10009304:	28800115 	stw	r2,4(r5)
10009308:	19800215 	stw	r6,8(r3)
1000930c:	dfc00217 	ldw	ra,8(sp)
10009310:	dc400117 	ldw	r17,4(sp)
10009314:	dc000017 	ldw	r16,0(sp)
10009318:	dec00304 	addi	sp,sp,12
1000931c:	000dba01 	jmpi	1000dba0 <__malloc_unlock>
10009320:	02040074 	movhi	r8,4097
10009324:	42032b04 	addi	r8,r8,3244
10009328:	3a3faf1e 	bne	r7,r8,100091e8 <__alt_data_end+0xf80091e8>
1000932c:	29800515 	stw	r6,20(r5)
10009330:	29800415 	stw	r6,16(r5)
10009334:	11000054 	ori	r4,r2,1
10009338:	3087883a 	add	r3,r6,r2
1000933c:	31c00315 	stw	r7,12(r6)
10009340:	31c00215 	stw	r7,8(r6)
10009344:	31000115 	stw	r4,4(r6)
10009348:	18800015 	stw	r2,0(r3)
1000934c:	003fc806 	br	10009270 <__alt_data_end+0xf8009270>
10009350:	4200004c 	andi	r8,r8,1
10009354:	3885883a 	add	r2,r7,r2
10009358:	4000071e 	bne	r8,zero,10009378 <_free_r+0x20c>
1000935c:	81fffe17 	ldw	r7,-8(r16)
10009360:	31cdc83a 	sub	r6,r6,r7
10009364:	30c00317 	ldw	r3,12(r6)
10009368:	31000217 	ldw	r4,8(r6)
1000936c:	11c5883a 	add	r2,r2,r7
10009370:	20c00315 	stw	r3,12(r4)
10009374:	19000215 	stw	r4,8(r3)
10009378:	00c40074 	movhi	r3,4097
1000937c:	18c8b104 	addi	r3,r3,8900
10009380:	18c00017 	ldw	r3,0(r3)
10009384:	11000054 	ori	r4,r2,1
10009388:	31000115 	stw	r4,4(r6)
1000938c:	29800215 	stw	r6,8(r5)
10009390:	10ffb736 	bltu	r2,r3,10009270 <__alt_data_end+0xf8009270>
10009394:	00840074 	movhi	r2,4097
10009398:	108f5804 	addi	r2,r2,15712
1000939c:	11400017 	ldw	r5,0(r2)
100093a0:	8809883a 	mov	r4,r17
100093a4:	00090300 	call	10009030 <_malloc_trim_r>
100093a8:	003fb106 	br	10009270 <__alt_data_end+0xf8009270>
100093ac:	01000044 	movi	r4,1
100093b0:	003f8606 	br	100091cc <__alt_data_end+0xf80091cc>
100093b4:	01000504 	movi	r4,20
100093b8:	20c00b36 	bltu	r4,r3,100093e8 <_free_r+0x27c>
100093bc:	190016c4 	addi	r4,r3,91
100093c0:	210f883a 	add	r7,r4,r4
100093c4:	003f9806 	br	10009228 <__alt_data_end+0xf8009228>
100093c8:	2009d0ba 	srai	r4,r4,2
100093cc:	00800044 	movi	r2,1
100093d0:	29c00117 	ldw	r7,4(r5)
100093d4:	1108983a 	sll	r4,r2,r4
100093d8:	1805883a 	mov	r2,r3
100093dc:	21c8b03a 	or	r4,r4,r7
100093e0:	29000115 	stw	r4,4(r5)
100093e4:	003f9e06 	br	10009260 <__alt_data_end+0xf8009260>
100093e8:	01001504 	movi	r4,84
100093ec:	20c00436 	bltu	r4,r3,10009400 <_free_r+0x294>
100093f0:	1008d33a 	srli	r4,r2,12
100093f4:	21001b84 	addi	r4,r4,110
100093f8:	210f883a 	add	r7,r4,r4
100093fc:	003f8a06 	br	10009228 <__alt_data_end+0xf8009228>
10009400:	01005504 	movi	r4,340
10009404:	20c00436 	bltu	r4,r3,10009418 <_free_r+0x2ac>
10009408:	1008d3fa 	srli	r4,r2,15
1000940c:	21001dc4 	addi	r4,r4,119
10009410:	210f883a 	add	r7,r4,r4
10009414:	003f8406 	br	10009228 <__alt_data_end+0xf8009228>
10009418:	01015504 	movi	r4,1364
1000941c:	20c00436 	bltu	r4,r3,10009430 <_free_r+0x2c4>
10009420:	1008d4ba 	srli	r4,r2,18
10009424:	21001f04 	addi	r4,r4,124
10009428:	210f883a 	add	r7,r4,r4
1000942c:	003f7e06 	br	10009228 <__alt_data_end+0xf8009228>
10009430:	01c03f04 	movi	r7,252
10009434:	01001f84 	movi	r4,126
10009438:	003f7b06 	br	10009228 <__alt_data_end+0xf8009228>

1000943c <__sfvwrite_r>:
1000943c:	30800217 	ldw	r2,8(r6)
10009440:	defff504 	addi	sp,sp,-44
10009444:	dd400615 	stw	r21,24(sp)
10009448:	dd000515 	stw	r20,20(sp)
1000944c:	dc000115 	stw	r16,4(sp)
10009450:	dfc00a15 	stw	ra,40(sp)
10009454:	df000915 	stw	fp,36(sp)
10009458:	ddc00815 	stw	r23,32(sp)
1000945c:	dd800715 	stw	r22,28(sp)
10009460:	dcc00415 	stw	r19,16(sp)
10009464:	dc800315 	stw	r18,12(sp)
10009468:	dc400215 	stw	r17,8(sp)
1000946c:	3029883a 	mov	r20,r6
10009470:	202b883a 	mov	r21,r4
10009474:	2821883a 	mov	r16,r5
10009478:	10002126 	beq	r2,zero,10009500 <__sfvwrite_r+0xc4>
1000947c:	2880030b 	ldhu	r2,12(r5)
10009480:	10c0020c 	andi	r3,r2,8
10009484:	18ffffcc 	andi	r3,r3,65535
10009488:	18e0001c 	xori	r3,r3,32768
1000948c:	18e00004 	addi	r3,r3,-32768
10009490:	18002826 	beq	r3,zero,10009534 <__sfvwrite_r+0xf8>
10009494:	28c00417 	ldw	r3,16(r5)
10009498:	18002626 	beq	r3,zero,10009534 <__sfvwrite_r+0xf8>
1000949c:	10c0008c 	andi	r3,r2,2
100094a0:	18ffffcc 	andi	r3,r3,65535
100094a4:	18e0001c 	xori	r3,r3,32768
100094a8:	18e00004 	addi	r3,r3,-32768
100094ac:	a4400017 	ldw	r17,0(r20)
100094b0:	18002b26 	beq	r3,zero,10009560 <__sfvwrite_r+0x124>
100094b4:	0027883a 	mov	r19,zero
100094b8:	0025883a 	mov	r18,zero
100094bc:	05810004 	movi	r22,1024
100094c0:	980d883a 	mov	r6,r19
100094c4:	a809883a 	mov	r4,r21
100094c8:	90004f26 	beq	r18,zero,10009608 <__sfvwrite_r+0x1cc>
100094cc:	900f883a 	mov	r7,r18
100094d0:	81400717 	ldw	r5,28(r16)
100094d4:	b480012e 	bgeu	r22,r18,100094dc <__sfvwrite_r+0xa0>
100094d8:	01c10004 	movi	r7,1024
100094dc:	80800917 	ldw	r2,36(r16)
100094e0:	103ee83a 	callr	r2
100094e4:	0080540e 	bge	zero,r2,10009638 <__sfvwrite_r+0x1fc>
100094e8:	a0c00217 	ldw	r3,8(r20)
100094ec:	98a7883a 	add	r19,r19,r2
100094f0:	90a5c83a 	sub	r18,r18,r2
100094f4:	1885c83a 	sub	r2,r3,r2
100094f8:	a0800215 	stw	r2,8(r20)
100094fc:	103ff01e 	bne	r2,zero,100094c0 <__alt_data_end+0xf80094c0>
10009500:	0005883a 	mov	r2,zero
10009504:	dfc00a17 	ldw	ra,40(sp)
10009508:	df000917 	ldw	fp,36(sp)
1000950c:	ddc00817 	ldw	r23,32(sp)
10009510:	dd800717 	ldw	r22,28(sp)
10009514:	dd400617 	ldw	r21,24(sp)
10009518:	dd000517 	ldw	r20,20(sp)
1000951c:	dcc00417 	ldw	r19,16(sp)
10009520:	dc800317 	ldw	r18,12(sp)
10009524:	dc400217 	ldw	r17,8(sp)
10009528:	dc000117 	ldw	r16,4(sp)
1000952c:	dec00b04 	addi	sp,sp,44
10009530:	f800283a 	ret
10009534:	a809883a 	mov	r4,r21
10009538:	800b883a 	mov	r5,r16
1000953c:	00071600 	call	10007160 <__swsetup_r>
10009540:	1000f01e 	bne	r2,zero,10009904 <__sfvwrite_r+0x4c8>
10009544:	8080030b 	ldhu	r2,12(r16)
10009548:	a4400017 	ldw	r17,0(r20)
1000954c:	10c0008c 	andi	r3,r2,2
10009550:	18ffffcc 	andi	r3,r3,65535
10009554:	18e0001c 	xori	r3,r3,32768
10009558:	18e00004 	addi	r3,r3,-32768
1000955c:	183fd51e 	bne	r3,zero,100094b4 <__alt_data_end+0xf80094b4>
10009560:	10c0004c 	andi	r3,r2,1
10009564:	002d883a 	mov	r22,zero
10009568:	1800381e 	bne	r3,zero,1000964c <__sfvwrite_r+0x210>
1000956c:	0025883a 	mov	r18,zero
10009570:	90002126 	beq	r18,zero,100095f8 <__sfvwrite_r+0x1bc>
10009574:	10c0800c 	andi	r3,r2,512
10009578:	18ffffcc 	andi	r3,r3,65535
1000957c:	18e0001c 	xori	r3,r3,32768
10009580:	18e00004 	addi	r3,r3,-32768
10009584:	84c00217 	ldw	r19,8(r16)
10009588:	18006b26 	beq	r3,zero,10009738 <__sfvwrite_r+0x2fc>
1000958c:	980f883a 	mov	r7,r19
10009590:	94c08636 	bltu	r18,r19,100097ac <__sfvwrite_r+0x370>
10009594:	10c1200c 	andi	r3,r2,1152
10009598:	18009f1e 	bne	r3,zero,10009818 <__sfvwrite_r+0x3dc>
1000959c:	81000017 	ldw	r4,0(r16)
100095a0:	982f883a 	mov	r23,r19
100095a4:	9039883a 	mov	fp,r18
100095a8:	9027883a 	mov	r19,r18
100095ac:	380d883a 	mov	r6,r7
100095b0:	b00b883a 	mov	r5,r22
100095b4:	d9c00015 	stw	r7,0(sp)
100095b8:	000a6c00 	call	1000a6c0 <memmove>
100095bc:	d9c00017 	ldw	r7,0(sp)
100095c0:	81000217 	ldw	r4,8(r16)
100095c4:	80800017 	ldw	r2,0(r16)
100095c8:	25efc83a 	sub	r23,r4,r23
100095cc:	11cf883a 	add	r7,r2,r7
100095d0:	85c00215 	stw	r23,8(r16)
100095d4:	81c00015 	stw	r7,0(r16)
100095d8:	a0800217 	ldw	r2,8(r20)
100095dc:	b72d883a 	add	r22,r22,fp
100095e0:	9725c83a 	sub	r18,r18,fp
100095e4:	14e7c83a 	sub	r19,r2,r19
100095e8:	a4c00215 	stw	r19,8(r20)
100095ec:	983fc426 	beq	r19,zero,10009500 <__alt_data_end+0xf8009500>
100095f0:	8080030b 	ldhu	r2,12(r16)
100095f4:	903fdf1e 	bne	r18,zero,10009574 <__alt_data_end+0xf8009574>
100095f8:	8d800017 	ldw	r22,0(r17)
100095fc:	8c800117 	ldw	r18,4(r17)
10009600:	8c400204 	addi	r17,r17,8
10009604:	003fda06 	br	10009570 <__alt_data_end+0xf8009570>
10009608:	8cc00017 	ldw	r19,0(r17)
1000960c:	8c800117 	ldw	r18,4(r17)
10009610:	8c400204 	addi	r17,r17,8
10009614:	003faa06 	br	100094c0 <__alt_data_end+0xf80094c0>
10009618:	000b9780 	call	1000b978 <_realloc_r>
1000961c:	102f883a 	mov	r23,r2
10009620:	10009f1e 	bne	r2,zero,100098a0 <__sfvwrite_r+0x464>
10009624:	81400417 	ldw	r5,16(r16)
10009628:	a809883a 	mov	r4,r21
1000962c:	000916c0 	call	1000916c <_free_r>
10009630:	00800304 	movi	r2,12
10009634:	a8800015 	stw	r2,0(r21)
10009638:	80c0030b 	ldhu	r3,12(r16)
1000963c:	00bfffc4 	movi	r2,-1
10009640:	18c01014 	ori	r3,r3,64
10009644:	80c0030d 	sth	r3,12(r16)
10009648:	003fae06 	br	10009504 <__alt_data_end+0xf8009504>
1000964c:	0007883a 	mov	r3,zero
10009650:	0039883a 	mov	fp,zero
10009654:	0025883a 	mov	r18,zero
10009658:	90001e26 	beq	r18,zero,100096d4 <__sfvwrite_r+0x298>
1000965c:	18006526 	beq	r3,zero,100097f4 <__sfvwrite_r+0x3b8>
10009660:	b02f883a 	mov	r23,r22
10009664:	9580012e 	bgeu	r18,r22,1000966c <__sfvwrite_r+0x230>
10009668:	902f883a 	mov	r23,r18
1000966c:	81000017 	ldw	r4,0(r16)
10009670:	80800417 	ldw	r2,16(r16)
10009674:	84c00217 	ldw	r19,8(r16)
10009678:	81c00517 	ldw	r7,20(r16)
1000967c:	1100022e 	bgeu	r2,r4,10009688 <__sfvwrite_r+0x24c>
10009680:	99e7883a 	add	r19,r19,r7
10009684:	9dc01816 	blt	r19,r23,100096e8 <__sfvwrite_r+0x2ac>
10009688:	b9c03b16 	blt	r23,r7,10009778 <__sfvwrite_r+0x33c>
1000968c:	80800917 	ldw	r2,36(r16)
10009690:	81400717 	ldw	r5,28(r16)
10009694:	a809883a 	mov	r4,r21
10009698:	d8c00015 	stw	r3,0(sp)
1000969c:	e00d883a 	mov	r6,fp
100096a0:	103ee83a 	callr	r2
100096a4:	1027883a 	mov	r19,r2
100096a8:	d8c00017 	ldw	r3,0(sp)
100096ac:	00bfe20e 	bge	zero,r2,10009638 <__alt_data_end+0xf8009638>
100096b0:	b4edc83a 	sub	r22,r22,r19
100096b4:	b0001a26 	beq	r22,zero,10009720 <__sfvwrite_r+0x2e4>
100096b8:	a0800217 	ldw	r2,8(r20)
100096bc:	e4f9883a 	add	fp,fp,r19
100096c0:	94e5c83a 	sub	r18,r18,r19
100096c4:	14e7c83a 	sub	r19,r2,r19
100096c8:	a4c00215 	stw	r19,8(r20)
100096cc:	983f8c26 	beq	r19,zero,10009500 <__alt_data_end+0xf8009500>
100096d0:	903fe21e 	bne	r18,zero,1000965c <__alt_data_end+0xf800965c>
100096d4:	8f000017 	ldw	fp,0(r17)
100096d8:	8c800117 	ldw	r18,4(r17)
100096dc:	0007883a 	mov	r3,zero
100096e0:	8c400204 	addi	r17,r17,8
100096e4:	003fdc06 	br	10009658 <__alt_data_end+0xf8009658>
100096e8:	e00b883a 	mov	r5,fp
100096ec:	980d883a 	mov	r6,r19
100096f0:	d8c00015 	stw	r3,0(sp)
100096f4:	000a6c00 	call	1000a6c0 <memmove>
100096f8:	80800017 	ldw	r2,0(r16)
100096fc:	a809883a 	mov	r4,r21
10009700:	800b883a 	mov	r5,r16
10009704:	14c5883a 	add	r2,r2,r19
10009708:	80800015 	stw	r2,0(r16)
1000970c:	0008b2c0 	call	10008b2c <_fflush_r>
10009710:	d8c00017 	ldw	r3,0(sp)
10009714:	103fc81e 	bne	r2,zero,10009638 <__alt_data_end+0xf8009638>
10009718:	b4edc83a 	sub	r22,r22,r19
1000971c:	b03fe61e 	bne	r22,zero,100096b8 <__alt_data_end+0xf80096b8>
10009720:	a809883a 	mov	r4,r21
10009724:	800b883a 	mov	r5,r16
10009728:	0008b2c0 	call	10008b2c <_fflush_r>
1000972c:	103fc21e 	bne	r2,zero,10009638 <__alt_data_end+0xf8009638>
10009730:	0007883a 	mov	r3,zero
10009734:	003fe006 	br	100096b8 <__alt_data_end+0xf80096b8>
10009738:	81000017 	ldw	r4,0(r16)
1000973c:	80800417 	ldw	r2,16(r16)
10009740:	1100022e 	bgeu	r2,r4,1000974c <__sfvwrite_r+0x310>
10009744:	9839883a 	mov	fp,r19
10009748:	9c806036 	bltu	r19,r18,100098cc <__sfvwrite_r+0x490>
1000974c:	81c00517 	ldw	r7,20(r16)
10009750:	91c01c36 	bltu	r18,r7,100097c4 <__sfvwrite_r+0x388>
10009754:	80800917 	ldw	r2,36(r16)
10009758:	81400717 	ldw	r5,28(r16)
1000975c:	a809883a 	mov	r4,r21
10009760:	b00d883a 	mov	r6,r22
10009764:	103ee83a 	callr	r2
10009768:	1027883a 	mov	r19,r2
1000976c:	00bfb20e 	bge	zero,r2,10009638 <__alt_data_end+0xf8009638>
10009770:	1039883a 	mov	fp,r2
10009774:	003f9806 	br	100095d8 <__alt_data_end+0xf80095d8>
10009778:	b80d883a 	mov	r6,r23
1000977c:	e00b883a 	mov	r5,fp
10009780:	d8c00015 	stw	r3,0(sp)
10009784:	000a6c00 	call	1000a6c0 <memmove>
10009788:	80800217 	ldw	r2,8(r16)
1000978c:	81000017 	ldw	r4,0(r16)
10009790:	b827883a 	mov	r19,r23
10009794:	15c5c83a 	sub	r2,r2,r23
10009798:	25ef883a 	add	r23,r4,r23
1000979c:	80800215 	stw	r2,8(r16)
100097a0:	85c00015 	stw	r23,0(r16)
100097a4:	d8c00017 	ldw	r3,0(sp)
100097a8:	003fc106 	br	100096b0 <__alt_data_end+0xf80096b0>
100097ac:	81000017 	ldw	r4,0(r16)
100097b0:	902f883a 	mov	r23,r18
100097b4:	9039883a 	mov	fp,r18
100097b8:	9027883a 	mov	r19,r18
100097bc:	900f883a 	mov	r7,r18
100097c0:	003f7a06 	br	100095ac <__alt_data_end+0xf80095ac>
100097c4:	b00b883a 	mov	r5,r22
100097c8:	900d883a 	mov	r6,r18
100097cc:	000a6c00 	call	1000a6c0 <memmove>
100097d0:	80c00217 	ldw	r3,8(r16)
100097d4:	80800017 	ldw	r2,0(r16)
100097d8:	9027883a 	mov	r19,r18
100097dc:	1c87c83a 	sub	r3,r3,r18
100097e0:	1485883a 	add	r2,r2,r18
100097e4:	80c00215 	stw	r3,8(r16)
100097e8:	80800015 	stw	r2,0(r16)
100097ec:	9039883a 	mov	fp,r18
100097f0:	003f7906 	br	100095d8 <__alt_data_end+0xf80095d8>
100097f4:	e009883a 	mov	r4,fp
100097f8:	01400284 	movi	r5,10
100097fc:	900d883a 	mov	r6,r18
10009800:	000a4880 	call	1000a488 <memchr>
10009804:	10003c26 	beq	r2,zero,100098f8 <__sfvwrite_r+0x4bc>
10009808:	15800044 	addi	r22,r2,1
1000980c:	b72dc83a 	sub	r22,r22,fp
10009810:	00c00044 	movi	r3,1
10009814:	003f9206 	br	10009660 <__alt_data_end+0xf8009660>
10009818:	81000517 	ldw	r4,20(r16)
1000981c:	81400417 	ldw	r5,16(r16)
10009820:	80c00017 	ldw	r3,0(r16)
10009824:	210d883a 	add	r6,r4,r4
10009828:	3109883a 	add	r4,r6,r4
1000982c:	2026d7fa 	srli	r19,r4,31
10009830:	1979c83a 	sub	fp,r3,r5
10009834:	e1800044 	addi	r6,fp,1
10009838:	9909883a 	add	r4,r19,r4
1000983c:	2027d07a 	srai	r19,r4,1
10009840:	3489883a 	add	r4,r6,r18
10009844:	980d883a 	mov	r6,r19
10009848:	9900022e 	bgeu	r19,r4,10009854 <__sfvwrite_r+0x418>
1000984c:	2027883a 	mov	r19,r4
10009850:	200d883a 	mov	r6,r4
10009854:	1081000c 	andi	r2,r2,1024
10009858:	10bfffcc 	andi	r2,r2,65535
1000985c:	10a0001c 	xori	r2,r2,32768
10009860:	10a00004 	addi	r2,r2,-32768
10009864:	a809883a 	mov	r4,r21
10009868:	103f6b26 	beq	r2,zero,10009618 <__alt_data_end+0xf8009618>
1000986c:	300b883a 	mov	r5,r6
10009870:	0009d040 	call	10009d04 <_malloc_r>
10009874:	102f883a 	mov	r23,r2
10009878:	103f6d26 	beq	r2,zero,10009630 <__alt_data_end+0xf8009630>
1000987c:	81400417 	ldw	r5,16(r16)
10009880:	1009883a 	mov	r4,r2
10009884:	e00d883a 	mov	r6,fp
10009888:	000a5800 	call	1000a580 <memcpy>
1000988c:	8080030b 	ldhu	r2,12(r16)
10009890:	00fedfc4 	movi	r3,-1153
10009894:	10c4703a 	and	r2,r2,r3
10009898:	10802014 	ori	r2,r2,128
1000989c:	8080030d 	sth	r2,12(r16)
100098a0:	bf09883a 	add	r4,r23,fp
100098a4:	9f07c83a 	sub	r3,r19,fp
100098a8:	85c00415 	stw	r23,16(r16)
100098ac:	84c00515 	stw	r19,20(r16)
100098b0:	81000015 	stw	r4,0(r16)
100098b4:	902f883a 	mov	r23,r18
100098b8:	80c00215 	stw	r3,8(r16)
100098bc:	9039883a 	mov	fp,r18
100098c0:	9027883a 	mov	r19,r18
100098c4:	900f883a 	mov	r7,r18
100098c8:	003f3806 	br	100095ac <__alt_data_end+0xf80095ac>
100098cc:	b00b883a 	mov	r5,r22
100098d0:	980d883a 	mov	r6,r19
100098d4:	000a6c00 	call	1000a6c0 <memmove>
100098d8:	80800017 	ldw	r2,0(r16)
100098dc:	a809883a 	mov	r4,r21
100098e0:	800b883a 	mov	r5,r16
100098e4:	14c5883a 	add	r2,r2,r19
100098e8:	80800015 	stw	r2,0(r16)
100098ec:	0008b2c0 	call	10008b2c <_fflush_r>
100098f0:	103f3926 	beq	r2,zero,100095d8 <__alt_data_end+0xf80095d8>
100098f4:	003f5006 	br	10009638 <__alt_data_end+0xf8009638>
100098f8:	95800044 	addi	r22,r18,1
100098fc:	00c00044 	movi	r3,1
10009900:	003f5706 	br	10009660 <__alt_data_end+0xf8009660>
10009904:	80c0030b 	ldhu	r3,12(r16)
10009908:	00bfffc4 	movi	r2,-1
1000990c:	18c01014 	ori	r3,r3,64
10009910:	80c0030d 	sth	r3,12(r16)
10009914:	00c00244 	movi	r3,9
10009918:	a8c00015 	stw	r3,0(r21)
1000991c:	003ef906 	br	10009504 <__alt_data_end+0xf8009504>

10009920 <_fwalk>:
10009920:	defff904 	addi	sp,sp,-28
10009924:	dcc00315 	stw	r19,12(sp)
10009928:	24c0b804 	addi	r19,r4,736
1000992c:	dd400515 	stw	r21,20(sp)
10009930:	dd000415 	stw	r20,16(sp)
10009934:	dfc00615 	stw	ra,24(sp)
10009938:	dc800215 	stw	r18,8(sp)
1000993c:	dc400115 	stw	r17,4(sp)
10009940:	dc000015 	stw	r16,0(sp)
10009944:	282b883a 	mov	r21,r5
10009948:	0029883a 	mov	r20,zero
1000994c:	0008ff00 	call	10008ff0 <__sfp_lock_acquire>
10009950:	98001226 	beq	r19,zero,1000999c <_fwalk+0x7c>
10009954:	04bfffc4 	movi	r18,-1
10009958:	9c400117 	ldw	r17,4(r19)
1000995c:	9c000217 	ldw	r16,8(r19)
10009960:	8c7fffc4 	addi	r17,r17,-1
10009964:	88000b16 	blt	r17,zero,10009994 <_fwalk+0x74>
10009968:	84000304 	addi	r16,r16,12
1000996c:	80c0000f 	ldh	r3,0(r16)
10009970:	8c7fffc4 	addi	r17,r17,-1
10009974:	813ffd04 	addi	r4,r16,-12
10009978:	18000426 	beq	r3,zero,1000998c <_fwalk+0x6c>
1000997c:	80c0008f 	ldh	r3,2(r16)
10009980:	1c800226 	beq	r3,r18,1000998c <_fwalk+0x6c>
10009984:	a83ee83a 	callr	r21
10009988:	a0a8b03a 	or	r20,r20,r2
1000998c:	84001704 	addi	r16,r16,92
10009990:	8cbff61e 	bne	r17,r18,1000996c <__alt_data_end+0xf800996c>
10009994:	9cc00017 	ldw	r19,0(r19)
10009998:	983fef1e 	bne	r19,zero,10009958 <__alt_data_end+0xf8009958>
1000999c:	0008ff40 	call	10008ff4 <__sfp_lock_release>
100099a0:	a005883a 	mov	r2,r20
100099a4:	dfc00617 	ldw	ra,24(sp)
100099a8:	dd400517 	ldw	r21,20(sp)
100099ac:	dd000417 	ldw	r20,16(sp)
100099b0:	dcc00317 	ldw	r19,12(sp)
100099b4:	dc800217 	ldw	r18,8(sp)
100099b8:	dc400117 	ldw	r17,4(sp)
100099bc:	dc000017 	ldw	r16,0(sp)
100099c0:	dec00704 	addi	sp,sp,28
100099c4:	f800283a 	ret

100099c8 <_fwalk_reent>:
100099c8:	defff804 	addi	sp,sp,-32
100099cc:	dcc00315 	stw	r19,12(sp)
100099d0:	24c0b804 	addi	r19,r4,736
100099d4:	dd800615 	stw	r22,24(sp)
100099d8:	dd400515 	stw	r21,20(sp)
100099dc:	dd000415 	stw	r20,16(sp)
100099e0:	dfc00715 	stw	ra,28(sp)
100099e4:	dc800215 	stw	r18,8(sp)
100099e8:	dc400115 	stw	r17,4(sp)
100099ec:	dc000015 	stw	r16,0(sp)
100099f0:	2029883a 	mov	r20,r4
100099f4:	282b883a 	mov	r21,r5
100099f8:	002d883a 	mov	r22,zero
100099fc:	0008ff00 	call	10008ff0 <__sfp_lock_acquire>
10009a00:	98001326 	beq	r19,zero,10009a50 <_fwalk_reent+0x88>
10009a04:	04bfffc4 	movi	r18,-1
10009a08:	9c400117 	ldw	r17,4(r19)
10009a0c:	9c000217 	ldw	r16,8(r19)
10009a10:	8c7fffc4 	addi	r17,r17,-1
10009a14:	88000c16 	blt	r17,zero,10009a48 <_fwalk_reent+0x80>
10009a18:	84000304 	addi	r16,r16,12
10009a1c:	80c0000f 	ldh	r3,0(r16)
10009a20:	8c7fffc4 	addi	r17,r17,-1
10009a24:	817ffd04 	addi	r5,r16,-12
10009a28:	18000526 	beq	r3,zero,10009a40 <_fwalk_reent+0x78>
10009a2c:	80c0008f 	ldh	r3,2(r16)
10009a30:	a009883a 	mov	r4,r20
10009a34:	1c800226 	beq	r3,r18,10009a40 <_fwalk_reent+0x78>
10009a38:	a83ee83a 	callr	r21
10009a3c:	b0acb03a 	or	r22,r22,r2
10009a40:	84001704 	addi	r16,r16,92
10009a44:	8cbff51e 	bne	r17,r18,10009a1c <__alt_data_end+0xf8009a1c>
10009a48:	9cc00017 	ldw	r19,0(r19)
10009a4c:	983fee1e 	bne	r19,zero,10009a08 <__alt_data_end+0xf8009a08>
10009a50:	0008ff40 	call	10008ff4 <__sfp_lock_release>
10009a54:	b005883a 	mov	r2,r22
10009a58:	dfc00717 	ldw	ra,28(sp)
10009a5c:	dd800617 	ldw	r22,24(sp)
10009a60:	dd400517 	ldw	r21,20(sp)
10009a64:	dd000417 	ldw	r20,16(sp)
10009a68:	dcc00317 	ldw	r19,12(sp)
10009a6c:	dc800217 	ldw	r18,8(sp)
10009a70:	dc400117 	ldw	r17,4(sp)
10009a74:	dc000017 	ldw	r16,0(sp)
10009a78:	dec00804 	addi	sp,sp,32
10009a7c:	f800283a 	ret

10009a80 <_setlocale_r>:
10009a80:	defffc04 	addi	sp,sp,-16
10009a84:	dc800215 	stw	r18,8(sp)
10009a88:	dc400115 	stw	r17,4(sp)
10009a8c:	dc000015 	stw	r16,0(sp)
10009a90:	dfc00315 	stw	ra,12(sp)
10009a94:	3021883a 	mov	r16,r6
10009a98:	2023883a 	mov	r17,r4
10009a9c:	2825883a 	mov	r18,r5
10009aa0:	30001626 	beq	r6,zero,10009afc <_setlocale_r+0x7c>
10009aa4:	3009883a 	mov	r4,r6
10009aa8:	01440074 	movhi	r5,4097
10009aac:	2941bf04 	addi	r5,r5,1788
10009ab0:	000c17c0 	call	1000c17c <strcmp>
10009ab4:	10000a1e 	bne	r2,zero,10009ae0 <_setlocale_r+0x60>
10009ab8:	8c800c15 	stw	r18,48(r17)
10009abc:	8c000d15 	stw	r16,52(r17)
10009ac0:	00840074 	movhi	r2,4097
10009ac4:	1081bf04 	addi	r2,r2,1788
10009ac8:	dfc00317 	ldw	ra,12(sp)
10009acc:	dc800217 	ldw	r18,8(sp)
10009ad0:	dc400117 	ldw	r17,4(sp)
10009ad4:	dc000017 	ldw	r16,0(sp)
10009ad8:	dec00404 	addi	sp,sp,16
10009adc:	f800283a 	ret
10009ae0:	8009883a 	mov	r4,r16
10009ae4:	01440074 	movhi	r5,4097
10009ae8:	2941aa04 	addi	r5,r5,1704
10009aec:	000c17c0 	call	1000c17c <strcmp>
10009af0:	103ff126 	beq	r2,zero,10009ab8 <__alt_data_end+0xf8009ab8>
10009af4:	0005883a 	mov	r2,zero
10009af8:	003ff306 	br	10009ac8 <__alt_data_end+0xf8009ac8>
10009afc:	00840074 	movhi	r2,4097
10009b00:	1081bf04 	addi	r2,r2,1788
10009b04:	dfc00317 	ldw	ra,12(sp)
10009b08:	dc800217 	ldw	r18,8(sp)
10009b0c:	dc400117 	ldw	r17,4(sp)
10009b10:	dc000017 	ldw	r16,0(sp)
10009b14:	dec00404 	addi	sp,sp,16
10009b18:	f800283a 	ret

10009b1c <__locale_charset>:
10009b1c:	00840074 	movhi	r2,4097
10009b20:	1081c004 	addi	r2,r2,1792
10009b24:	f800283a 	ret

10009b28 <_localeconv_r>:
10009b28:	00840074 	movhi	r2,4097
10009b2c:	1081c404 	addi	r2,r2,1808
10009b30:	f800283a 	ret

10009b34 <setlocale>:
10009b34:	00c40074 	movhi	r3,4097
10009b38:	18c8ae04 	addi	r3,r3,8888
10009b3c:	2005883a 	mov	r2,r4
10009b40:	19000017 	ldw	r4,0(r3)
10009b44:	280d883a 	mov	r6,r5
10009b48:	100b883a 	mov	r5,r2
10009b4c:	0009a801 	jmpi	10009a80 <_setlocale_r>

10009b50 <localeconv>:
10009b50:	00840074 	movhi	r2,4097
10009b54:	1081c404 	addi	r2,r2,1808
10009b58:	f800283a 	ret

10009b5c <__smakebuf_r>:
10009b5c:	2880030b 	ldhu	r2,12(r5)
10009b60:	deffed04 	addi	sp,sp,-76
10009b64:	dc401015 	stw	r17,64(sp)
10009b68:	10c0008c 	andi	r3,r2,2
10009b6c:	18ffffcc 	andi	r3,r3,65535
10009b70:	18e0001c 	xori	r3,r3,32768
10009b74:	dc000f15 	stw	r16,60(sp)
10009b78:	dfc01215 	stw	ra,72(sp)
10009b7c:	dc801115 	stw	r18,68(sp)
10009b80:	18e00004 	addi	r3,r3,-32768
10009b84:	2821883a 	mov	r16,r5
10009b88:	2023883a 	mov	r17,r4
10009b8c:	1800381e 	bne	r3,zero,10009c70 <__smakebuf_r+0x114>
10009b90:	2940038f 	ldh	r5,14(r5)
10009b94:	28002d16 	blt	r5,zero,10009c4c <__smakebuf_r+0xf0>
10009b98:	d80d883a 	mov	r6,sp
10009b9c:	000c50c0 	call	1000c50c <_fstat_r>
10009ba0:	10002916 	blt	r2,zero,10009c48 <__smakebuf_r+0xec>
10009ba4:	d8800117 	ldw	r2,4(sp)
10009ba8:	00e00014 	movui	r3,32768
10009bac:	10bc000c 	andi	r2,r2,61440
10009bb0:	10c03c26 	beq	r2,r3,10009ca4 <__smakebuf_r+0x148>
10009bb4:	80c0030b 	ldhu	r3,12(r16)
10009bb8:	18c20014 	ori	r3,r3,2048
10009bbc:	80c0030d 	sth	r3,12(r16)
10009bc0:	00c80004 	movi	r3,8192
10009bc4:	10c00c1e 	bne	r2,r3,10009bf8 <__smakebuf_r+0x9c>
10009bc8:	8140038f 	ldh	r5,14(r16)
10009bcc:	8809883a 	mov	r4,r17
10009bd0:	000c5740 	call	1000c574 <_isatty_r>
10009bd4:	10000826 	beq	r2,zero,10009bf8 <__smakebuf_r+0x9c>
10009bd8:	80c0030b 	ldhu	r3,12(r16)
10009bdc:	808010c4 	addi	r2,r16,67
10009be0:	80800015 	stw	r2,0(r16)
10009be4:	18c00054 	ori	r3,r3,1
10009be8:	80800415 	stw	r2,16(r16)
10009bec:	00800044 	movi	r2,1
10009bf0:	80c0030d 	sth	r3,12(r16)
10009bf4:	80800515 	stw	r2,20(r16)
10009bf8:	04810004 	movi	r18,1024
10009bfc:	8809883a 	mov	r4,r17
10009c00:	900b883a 	mov	r5,r18
10009c04:	0009d040 	call	10009d04 <_malloc_r>
10009c08:	10003026 	beq	r2,zero,10009ccc <__smakebuf_r+0x170>
10009c0c:	80c0030b 	ldhu	r3,12(r16)
10009c10:	01040074 	movhi	r4,4097
10009c14:	21235504 	addi	r4,r4,-29356
10009c18:	89000f15 	stw	r4,60(r17)
10009c1c:	18c02014 	ori	r3,r3,128
10009c20:	80c0030d 	sth	r3,12(r16)
10009c24:	80800015 	stw	r2,0(r16)
10009c28:	80800415 	stw	r2,16(r16)
10009c2c:	84800515 	stw	r18,20(r16)
10009c30:	dfc01217 	ldw	ra,72(sp)
10009c34:	dc801117 	ldw	r18,68(sp)
10009c38:	dc401017 	ldw	r17,64(sp)
10009c3c:	dc000f17 	ldw	r16,60(sp)
10009c40:	dec01304 	addi	sp,sp,76
10009c44:	f800283a 	ret
10009c48:	8080030b 	ldhu	r2,12(r16)
10009c4c:	10c0200c 	andi	r3,r2,128
10009c50:	18ffffcc 	andi	r3,r3,65535
10009c54:	18e0001c 	xori	r3,r3,32768
10009c58:	18e00004 	addi	r3,r3,-32768
10009c5c:	18000f1e 	bne	r3,zero,10009c9c <__smakebuf_r+0x140>
10009c60:	04810004 	movi	r18,1024
10009c64:	10820014 	ori	r2,r2,2048
10009c68:	8080030d 	sth	r2,12(r16)
10009c6c:	003fe306 	br	10009bfc <__alt_data_end+0xf8009bfc>
10009c70:	288010c4 	addi	r2,r5,67
10009c74:	28800015 	stw	r2,0(r5)
10009c78:	28800415 	stw	r2,16(r5)
10009c7c:	00800044 	movi	r2,1
10009c80:	28800515 	stw	r2,20(r5)
10009c84:	dfc01217 	ldw	ra,72(sp)
10009c88:	dc801117 	ldw	r18,68(sp)
10009c8c:	dc401017 	ldw	r17,64(sp)
10009c90:	dc000f17 	ldw	r16,60(sp)
10009c94:	dec01304 	addi	sp,sp,76
10009c98:	f800283a 	ret
10009c9c:	04801004 	movi	r18,64
10009ca0:	003ff006 	br	10009c64 <__alt_data_end+0xf8009c64>
10009ca4:	81000a17 	ldw	r4,40(r16)
10009ca8:	00c40074 	movhi	r3,4097
10009cac:	18f04604 	addi	r3,r3,-16104
10009cb0:	20ffc01e 	bne	r4,r3,10009bb4 <__alt_data_end+0xf8009bb4>
10009cb4:	8080030b 	ldhu	r2,12(r16)
10009cb8:	00c10004 	movi	r3,1024
10009cbc:	80c01315 	stw	r3,76(r16)
10009cc0:	10c4b03a 	or	r2,r2,r3
10009cc4:	8080030d 	sth	r2,12(r16)
10009cc8:	003fcb06 	br	10009bf8 <__alt_data_end+0xf8009bf8>
10009ccc:	8080030b 	ldhu	r2,12(r16)
10009cd0:	10c0800c 	andi	r3,r2,512
10009cd4:	18ffffcc 	andi	r3,r3,65535
10009cd8:	18e0001c 	xori	r3,r3,32768
10009cdc:	18e00004 	addi	r3,r3,-32768
10009ce0:	183fd31e 	bne	r3,zero,10009c30 <__alt_data_end+0xf8009c30>
10009ce4:	10800094 	ori	r2,r2,2
10009ce8:	80c010c4 	addi	r3,r16,67
10009cec:	8080030d 	sth	r2,12(r16)
10009cf0:	00800044 	movi	r2,1
10009cf4:	80c00015 	stw	r3,0(r16)
10009cf8:	80c00415 	stw	r3,16(r16)
10009cfc:	80800515 	stw	r2,20(r16)
10009d00:	003fcb06 	br	10009c30 <__alt_data_end+0xf8009c30>

10009d04 <_malloc_r>:
10009d04:	defff604 	addi	sp,sp,-40
10009d08:	dc800215 	stw	r18,8(sp)
10009d0c:	dfc00915 	stw	ra,36(sp)
10009d10:	df000815 	stw	fp,32(sp)
10009d14:	ddc00715 	stw	r23,28(sp)
10009d18:	dd800615 	stw	r22,24(sp)
10009d1c:	dd400515 	stw	r21,20(sp)
10009d20:	dd000415 	stw	r20,16(sp)
10009d24:	dcc00315 	stw	r19,12(sp)
10009d28:	dc400115 	stw	r17,4(sp)
10009d2c:	dc000015 	stw	r16,0(sp)
10009d30:	288002c4 	addi	r2,r5,11
10009d34:	00c00584 	movi	r3,22
10009d38:	2025883a 	mov	r18,r4
10009d3c:	18802b2e 	bgeu	r3,r2,10009dec <_malloc_r+0xe8>
10009d40:	047ffe04 	movi	r17,-8
10009d44:	1462703a 	and	r17,r2,r17
10009d48:	88002a16 	blt	r17,zero,10009df4 <_malloc_r+0xf0>
10009d4c:	89402936 	bltu	r17,r5,10009df4 <_malloc_r+0xf0>
10009d50:	9009883a 	mov	r4,r18
10009d54:	000db800 	call	1000db80 <__malloc_lock>
10009d58:	00807dc4 	movi	r2,503
10009d5c:	14402936 	bltu	r2,r17,10009e04 <_malloc_r+0x100>
10009d60:	8808d0fa 	srli	r4,r17,3
10009d64:	04c40074 	movhi	r19,4097
10009d68:	9cc32904 	addi	r19,r19,3236
10009d6c:	2105883a 	add	r2,r4,r4
10009d70:	1085883a 	add	r2,r2,r2
10009d74:	1085883a 	add	r2,r2,r2
10009d78:	9885883a 	add	r2,r19,r2
10009d7c:	14000317 	ldw	r16,12(r2)
10009d80:	80815526 	beq	r16,r2,1000a2d8 <_malloc_r+0x5d4>
10009d84:	81000117 	ldw	r4,4(r16)
10009d88:	00bfff04 	movi	r2,-4
10009d8c:	80c00317 	ldw	r3,12(r16)
10009d90:	2084703a 	and	r2,r4,r2
10009d94:	8085883a 	add	r2,r16,r2
10009d98:	11800117 	ldw	r6,4(r2)
10009d9c:	81400217 	ldw	r5,8(r16)
10009da0:	9009883a 	mov	r4,r18
10009da4:	31800054 	ori	r6,r6,1
10009da8:	11800115 	stw	r6,4(r2)
10009dac:	28c00315 	stw	r3,12(r5)
10009db0:	19400215 	stw	r5,8(r3)
10009db4:	000dba00 	call	1000dba0 <__malloc_unlock>
10009db8:	80800204 	addi	r2,r16,8
10009dbc:	dfc00917 	ldw	ra,36(sp)
10009dc0:	df000817 	ldw	fp,32(sp)
10009dc4:	ddc00717 	ldw	r23,28(sp)
10009dc8:	dd800617 	ldw	r22,24(sp)
10009dcc:	dd400517 	ldw	r21,20(sp)
10009dd0:	dd000417 	ldw	r20,16(sp)
10009dd4:	dcc00317 	ldw	r19,12(sp)
10009dd8:	dc800217 	ldw	r18,8(sp)
10009ddc:	dc400117 	ldw	r17,4(sp)
10009de0:	dc000017 	ldw	r16,0(sp)
10009de4:	dec00a04 	addi	sp,sp,40
10009de8:	f800283a 	ret
10009dec:	04400404 	movi	r17,16
10009df0:	897fd72e 	bgeu	r17,r5,10009d50 <__alt_data_end+0xf8009d50>
10009df4:	00800304 	movi	r2,12
10009df8:	90800015 	stw	r2,0(r18)
10009dfc:	0005883a 	mov	r2,zero
10009e00:	003fee06 	br	10009dbc <__alt_data_end+0xf8009dbc>
10009e04:	8808d27a 	srli	r4,r17,9
10009e08:	20007126 	beq	r4,zero,10009fd0 <_malloc_r+0x2cc>
10009e0c:	00800104 	movi	r2,4
10009e10:	1100eb36 	bltu	r2,r4,1000a1c0 <_malloc_r+0x4bc>
10009e14:	8808d1ba 	srli	r4,r17,6
10009e18:	21000e04 	addi	r4,r4,56
10009e1c:	210b883a 	add	r5,r4,r4
10009e20:	294b883a 	add	r5,r5,r5
10009e24:	294b883a 	add	r5,r5,r5
10009e28:	04c40074 	movhi	r19,4097
10009e2c:	9cc32904 	addi	r19,r19,3236
10009e30:	994b883a 	add	r5,r19,r5
10009e34:	2c000317 	ldw	r16,12(r5)
10009e38:	2c000e26 	beq	r5,r16,10009e74 <_malloc_r+0x170>
10009e3c:	80c00117 	ldw	r3,4(r16)
10009e40:	01ffff04 	movi	r7,-4
10009e44:	018003c4 	movi	r6,15
10009e48:	19c6703a 	and	r3,r3,r7
10009e4c:	1c45c83a 	sub	r2,r3,r17
10009e50:	30800716 	blt	r6,r2,10009e70 <_malloc_r+0x16c>
10009e54:	1000610e 	bge	r2,zero,10009fdc <_malloc_r+0x2d8>
10009e58:	84000317 	ldw	r16,12(r16)
10009e5c:	2c000526 	beq	r5,r16,10009e74 <_malloc_r+0x170>
10009e60:	80c00117 	ldw	r3,4(r16)
10009e64:	19c6703a 	and	r3,r3,r7
10009e68:	1c45c83a 	sub	r2,r3,r17
10009e6c:	30bff90e 	bge	r6,r2,10009e54 <__alt_data_end+0xf8009e54>
10009e70:	213fffc4 	addi	r4,r4,-1
10009e74:	21000044 	addi	r4,r4,1
10009e78:	9c000417 	ldw	r16,16(r19)
10009e7c:	00c40074 	movhi	r3,4097
10009e80:	18c32904 	addi	r3,r3,3236
10009e84:	1a400204 	addi	r9,r3,8
10009e88:	8240ff26 	beq	r16,r9,1000a288 <_malloc_r+0x584>
10009e8c:	81400117 	ldw	r5,4(r16)
10009e90:	00bfff04 	movi	r2,-4
10009e94:	018003c4 	movi	r6,15
10009e98:	2884703a 	and	r2,r5,r2
10009e9c:	144bc83a 	sub	r5,r2,r17
10009ea0:	3140ea16 	blt	r6,r5,1000a24c <_malloc_r+0x548>
10009ea4:	1a400515 	stw	r9,20(r3)
10009ea8:	1a400415 	stw	r9,16(r3)
10009eac:	2800570e 	bge	r5,zero,1000a00c <_malloc_r+0x308>
10009eb0:	01407fc4 	movi	r5,511
10009eb4:	2880ca36 	bltu	r5,r2,1000a1e0 <_malloc_r+0x4dc>
10009eb8:	1004d0fa 	srli	r2,r2,3
10009ebc:	02000044 	movi	r8,1
10009ec0:	19c00117 	ldw	r7,4(r3)
10009ec4:	108b883a 	add	r5,r2,r2
10009ec8:	294b883a 	add	r5,r5,r5
10009ecc:	1005d0ba 	srai	r2,r2,2
10009ed0:	294b883a 	add	r5,r5,r5
10009ed4:	28cb883a 	add	r5,r5,r3
10009ed8:	29800217 	ldw	r6,8(r5)
10009edc:	4084983a 	sll	r2,r8,r2
10009ee0:	81400315 	stw	r5,12(r16)
10009ee4:	81800215 	stw	r6,8(r16)
10009ee8:	11c4b03a 	or	r2,r2,r7
10009eec:	18800115 	stw	r2,4(r3)
10009ef0:	2c000215 	stw	r16,8(r5)
10009ef4:	34000315 	stw	r16,12(r6)
10009ef8:	200bd0ba 	srai	r5,r4,2
10009efc:	00c00044 	movi	r3,1
10009f00:	194a983a 	sll	r5,r3,r5
10009f04:	11404936 	bltu	r2,r5,1000a02c <_malloc_r+0x328>
10009f08:	1146703a 	and	r3,r2,r5
10009f0c:	18000a1e 	bne	r3,zero,10009f38 <_malloc_r+0x234>
10009f10:	00ffff04 	movi	r3,-4
10009f14:	294b883a 	add	r5,r5,r5
10009f18:	20c8703a 	and	r4,r4,r3
10009f1c:	1146703a 	and	r3,r2,r5
10009f20:	21000104 	addi	r4,r4,4
10009f24:	1800041e 	bne	r3,zero,10009f38 <_malloc_r+0x234>
10009f28:	294b883a 	add	r5,r5,r5
10009f2c:	1146703a 	and	r3,r2,r5
10009f30:	21000104 	addi	r4,r4,4
10009f34:	183ffc26 	beq	r3,zero,10009f28 <__alt_data_end+0xf8009f28>
10009f38:	023fff04 	movi	r8,-4
10009f3c:	01c003c4 	movi	r7,15
10009f40:	2105883a 	add	r2,r4,r4
10009f44:	1085883a 	add	r2,r2,r2
10009f48:	1085883a 	add	r2,r2,r2
10009f4c:	9899883a 	add	r12,r19,r2
10009f50:	62800304 	addi	r10,r12,12
10009f54:	2017883a 	mov	r11,r4
10009f58:	54000017 	ldw	r16,0(r10)
10009f5c:	51bffd04 	addi	r6,r10,-12
10009f60:	8180041e 	bne	r16,r6,10009f74 <_malloc_r+0x270>
10009f64:	0000ca06 	br	1000a290 <_malloc_r+0x58c>
10009f68:	10001c0e 	bge	r2,zero,10009fdc <_malloc_r+0x2d8>
10009f6c:	84000317 	ldw	r16,12(r16)
10009f70:	8180c726 	beq	r16,r6,1000a290 <_malloc_r+0x58c>
10009f74:	80c00117 	ldw	r3,4(r16)
10009f78:	1a06703a 	and	r3,r3,r8
10009f7c:	1c45c83a 	sub	r2,r3,r17
10009f80:	38bff90e 	bge	r7,r2,10009f68 <__alt_data_end+0xf8009f68>
10009f84:	81000317 	ldw	r4,12(r16)
10009f88:	81400217 	ldw	r5,8(r16)
10009f8c:	8447883a 	add	r3,r16,r17
10009f90:	8c400054 	ori	r17,r17,1
10009f94:	29000315 	stw	r4,12(r5)
10009f98:	21400215 	stw	r5,8(r4)
10009f9c:	84400115 	stw	r17,4(r16)
10009fa0:	1889883a 	add	r4,r3,r2
10009fa4:	11400054 	ori	r5,r2,1
10009fa8:	98c00515 	stw	r3,20(r19)
10009fac:	98c00415 	stw	r3,16(r19)
10009fb0:	20800015 	stw	r2,0(r4)
10009fb4:	1a400315 	stw	r9,12(r3)
10009fb8:	1a400215 	stw	r9,8(r3)
10009fbc:	19400115 	stw	r5,4(r3)
10009fc0:	9009883a 	mov	r4,r18
10009fc4:	000dba00 	call	1000dba0 <__malloc_unlock>
10009fc8:	80800204 	addi	r2,r16,8
10009fcc:	003f7b06 	br	10009dbc <__alt_data_end+0xf8009dbc>
10009fd0:	8808d0fa 	srli	r4,r17,3
10009fd4:	210b883a 	add	r5,r4,r4
10009fd8:	003f9106 	br	10009e20 <__alt_data_end+0xf8009e20>
10009fdc:	80c7883a 	add	r3,r16,r3
10009fe0:	19400117 	ldw	r5,4(r3)
10009fe4:	80800317 	ldw	r2,12(r16)
10009fe8:	81000217 	ldw	r4,8(r16)
10009fec:	29400054 	ori	r5,r5,1
10009ff0:	19400115 	stw	r5,4(r3)
10009ff4:	20800315 	stw	r2,12(r4)
10009ff8:	11000215 	stw	r4,8(r2)
10009ffc:	9009883a 	mov	r4,r18
1000a000:	000dba00 	call	1000dba0 <__malloc_unlock>
1000a004:	80800204 	addi	r2,r16,8
1000a008:	003f6c06 	br	10009dbc <__alt_data_end+0xf8009dbc>
1000a00c:	8085883a 	add	r2,r16,r2
1000a010:	10c00117 	ldw	r3,4(r2)
1000a014:	9009883a 	mov	r4,r18
1000a018:	18c00054 	ori	r3,r3,1
1000a01c:	10c00115 	stw	r3,4(r2)
1000a020:	000dba00 	call	1000dba0 <__malloc_unlock>
1000a024:	80800204 	addi	r2,r16,8
1000a028:	003f6406 	br	10009dbc <__alt_data_end+0xf8009dbc>
1000a02c:	9c000217 	ldw	r16,8(r19)
1000a030:	00bfff04 	movi	r2,-4
1000a034:	85400117 	ldw	r21,4(r16)
1000a038:	a8aa703a 	and	r21,r21,r2
1000a03c:	ac400336 	bltu	r21,r17,1000a04c <_malloc_r+0x348>
1000a040:	ac45c83a 	sub	r2,r21,r17
1000a044:	00c003c4 	movi	r3,15
1000a048:	18805316 	blt	r3,r2,1000a198 <_malloc_r+0x494>
1000a04c:	d5e6ab17 	ldw	r23,-25940(gp)
1000a050:	d0e00317 	ldw	r3,-32756(gp)
1000a054:	00bfffc4 	movi	r2,-1
1000a058:	8579883a 	add	fp,r16,r21
1000a05c:	8def883a 	add	r23,r17,r23
1000a060:	1880d226 	beq	r3,r2,1000a3ac <_malloc_r+0x6a8>
1000a064:	bdc403c4 	addi	r23,r23,4111
1000a068:	00bc0004 	movi	r2,-4096
1000a06c:	b8ae703a 	and	r23,r23,r2
1000a070:	9009883a 	mov	r4,r18
1000a074:	b80b883a 	mov	r5,r23
1000a078:	000bfd80 	call	1000bfd8 <_sbrk_r>
1000a07c:	1029883a 	mov	r20,r2
1000a080:	00bfffc4 	movi	r2,-1
1000a084:	a080d126 	beq	r20,r2,1000a3cc <_malloc_r+0x6c8>
1000a088:	a7009f36 	bltu	r20,fp,1000a308 <_malloc_r+0x604>
1000a08c:	05840074 	movhi	r22,4097
1000a090:	b58f6004 	addi	r22,r22,15744
1000a094:	b0800017 	ldw	r2,0(r22)
1000a098:	b885883a 	add	r2,r23,r2
1000a09c:	b0800015 	stw	r2,0(r22)
1000a0a0:	e500cf26 	beq	fp,r20,1000a3e0 <_malloc_r+0x6dc>
1000a0a4:	d1200317 	ldw	r4,-32756(gp)
1000a0a8:	00ffffc4 	movi	r3,-1
1000a0ac:	20c0e026 	beq	r4,r3,1000a430 <_malloc_r+0x72c>
1000a0b0:	a739c83a 	sub	fp,r20,fp
1000a0b4:	1705883a 	add	r2,r2,fp
1000a0b8:	b0800015 	stw	r2,0(r22)
1000a0bc:	a08001cc 	andi	r2,r20,7
1000a0c0:	1000a526 	beq	r2,zero,1000a358 <_malloc_r+0x654>
1000a0c4:	a0a9c83a 	sub	r20,r20,r2
1000a0c8:	00c40204 	movi	r3,4104
1000a0cc:	a5000204 	addi	r20,r20,8
1000a0d0:	1885c83a 	sub	r2,r3,r2
1000a0d4:	a5c7883a 	add	r3,r20,r23
1000a0d8:	18c3ffcc 	andi	r3,r3,4095
1000a0dc:	10efc83a 	sub	r23,r2,r3
1000a0e0:	9009883a 	mov	r4,r18
1000a0e4:	b80b883a 	mov	r5,r23
1000a0e8:	000bfd80 	call	1000bfd8 <_sbrk_r>
1000a0ec:	00ffffc4 	movi	r3,-1
1000a0f0:	10c0cc26 	beq	r2,r3,1000a424 <_malloc_r+0x720>
1000a0f4:	1505c83a 	sub	r2,r2,r20
1000a0f8:	b887883a 	add	r3,r23,r2
1000a0fc:	18c00054 	ori	r3,r3,1
1000a100:	b0800017 	ldw	r2,0(r22)
1000a104:	9d000215 	stw	r20,8(r19)
1000a108:	a0c00115 	stw	r3,4(r20)
1000a10c:	b885883a 	add	r2,r23,r2
1000a110:	b0800015 	stw	r2,0(r22)
1000a114:	84c00e26 	beq	r16,r19,1000a150 <_malloc_r+0x44c>
1000a118:	00c003c4 	movi	r3,15
1000a11c:	1d40902e 	bgeu	r3,r21,1000a360 <_malloc_r+0x65c>
1000a120:	ad7ffd04 	addi	r21,r21,-12
1000a124:	013ffe04 	movi	r4,-8
1000a128:	a908703a 	and	r4,r21,r4
1000a12c:	810b883a 	add	r5,r16,r4
1000a130:	01800144 	movi	r6,5
1000a134:	29800115 	stw	r6,4(r5)
1000a138:	29800215 	stw	r6,8(r5)
1000a13c:	81400117 	ldw	r5,4(r16)
1000a140:	2940004c 	andi	r5,r5,1
1000a144:	214ab03a 	or	r5,r4,r5
1000a148:	81400115 	stw	r5,4(r16)
1000a14c:	1900ae36 	bltu	r3,r4,1000a408 <_malloc_r+0x704>
1000a150:	d0e6aa17 	ldw	r3,-25944(gp)
1000a154:	1880012e 	bgeu	r3,r2,1000a15c <_malloc_r+0x458>
1000a158:	d0a6aa15 	stw	r2,-25944(gp)
1000a15c:	d0e6a917 	ldw	r3,-25948(gp)
1000a160:	9c000217 	ldw	r16,8(r19)
1000a164:	1880012e 	bgeu	r3,r2,1000a16c <_malloc_r+0x468>
1000a168:	d0a6a915 	stw	r2,-25948(gp)
1000a16c:	80c00117 	ldw	r3,4(r16)
1000a170:	00bfff04 	movi	r2,-4
1000a174:	1886703a 	and	r3,r3,r2
1000a178:	1c45c83a 	sub	r2,r3,r17
1000a17c:	1c400236 	bltu	r3,r17,1000a188 <_malloc_r+0x484>
1000a180:	00c003c4 	movi	r3,15
1000a184:	18800416 	blt	r3,r2,1000a198 <_malloc_r+0x494>
1000a188:	9009883a 	mov	r4,r18
1000a18c:	000dba00 	call	1000dba0 <__malloc_unlock>
1000a190:	0005883a 	mov	r2,zero
1000a194:	003f0906 	br	10009dbc <__alt_data_end+0xf8009dbc>
1000a198:	88c00054 	ori	r3,r17,1
1000a19c:	10800054 	ori	r2,r2,1
1000a1a0:	80c00115 	stw	r3,4(r16)
1000a1a4:	8463883a 	add	r17,r16,r17
1000a1a8:	88800115 	stw	r2,4(r17)
1000a1ac:	9009883a 	mov	r4,r18
1000a1b0:	9c400215 	stw	r17,8(r19)
1000a1b4:	000dba00 	call	1000dba0 <__malloc_unlock>
1000a1b8:	80800204 	addi	r2,r16,8
1000a1bc:	003eff06 	br	10009dbc <__alt_data_end+0xf8009dbc>
1000a1c0:	00800504 	movi	r2,20
1000a1c4:	1100492e 	bgeu	r2,r4,1000a2ec <_malloc_r+0x5e8>
1000a1c8:	00801504 	movi	r2,84
1000a1cc:	11005c36 	bltu	r2,r4,1000a340 <_malloc_r+0x63c>
1000a1d0:	8808d33a 	srli	r4,r17,12
1000a1d4:	21001b84 	addi	r4,r4,110
1000a1d8:	210b883a 	add	r5,r4,r4
1000a1dc:	003f1006 	br	10009e20 <__alt_data_end+0xf8009e20>
1000a1e0:	1006d27a 	srli	r3,r2,9
1000a1e4:	01400104 	movi	r5,4
1000a1e8:	28c0432e 	bgeu	r5,r3,1000a2f8 <_malloc_r+0x5f4>
1000a1ec:	01400504 	movi	r5,20
1000a1f0:	28c07036 	bltu	r5,r3,1000a3b4 <_malloc_r+0x6b0>
1000a1f4:	194016c4 	addi	r5,r3,91
1000a1f8:	294d883a 	add	r6,r5,r5
1000a1fc:	318d883a 	add	r6,r6,r6
1000a200:	318d883a 	add	r6,r6,r6
1000a204:	998d883a 	add	r6,r19,r6
1000a208:	30c00217 	ldw	r3,8(r6)
1000a20c:	01c40074 	movhi	r7,4097
1000a210:	39c32904 	addi	r7,r7,3236
1000a214:	19805726 	beq	r3,r6,1000a374 <_malloc_r+0x670>
1000a218:	01ffff04 	movi	r7,-4
1000a21c:	19400117 	ldw	r5,4(r3)
1000a220:	29ca703a 	and	r5,r5,r7
1000a224:	1140022e 	bgeu	r2,r5,1000a230 <_malloc_r+0x52c>
1000a228:	18c00217 	ldw	r3,8(r3)
1000a22c:	30fffb1e 	bne	r6,r3,1000a21c <__alt_data_end+0xf800a21c>
1000a230:	19400317 	ldw	r5,12(r3)
1000a234:	98800117 	ldw	r2,4(r19)
1000a238:	81400315 	stw	r5,12(r16)
1000a23c:	80c00215 	stw	r3,8(r16)
1000a240:	2c000215 	stw	r16,8(r5)
1000a244:	1c000315 	stw	r16,12(r3)
1000a248:	003f2b06 	br	10009ef8 <__alt_data_end+0xf8009ef8>
1000a24c:	8445883a 	add	r2,r16,r17
1000a250:	8c400054 	ori	r17,r17,1
1000a254:	18800515 	stw	r2,20(r3)
1000a258:	18800415 	stw	r2,16(r3)
1000a25c:	29000054 	ori	r4,r5,1
1000a260:	1147883a 	add	r3,r2,r5
1000a264:	84400115 	stw	r17,4(r16)
1000a268:	11000115 	stw	r4,4(r2)
1000a26c:	12400315 	stw	r9,12(r2)
1000a270:	12400215 	stw	r9,8(r2)
1000a274:	19400015 	stw	r5,0(r3)
1000a278:	9009883a 	mov	r4,r18
1000a27c:	000dba00 	call	1000dba0 <__malloc_unlock>
1000a280:	80800204 	addi	r2,r16,8
1000a284:	003ecd06 	br	10009dbc <__alt_data_end+0xf8009dbc>
1000a288:	18800117 	ldw	r2,4(r3)
1000a28c:	003f1a06 	br	10009ef8 <__alt_data_end+0xf8009ef8>
1000a290:	5ac00044 	addi	r11,r11,1
1000a294:	588000cc 	andi	r2,r11,3
1000a298:	52800204 	addi	r10,r10,8
1000a29c:	103f2e1e 	bne	r2,zero,10009f58 <__alt_data_end+0xf8009f58>
1000a2a0:	20c000cc 	andi	r3,r4,3
1000a2a4:	60bffe04 	addi	r2,r12,-8
1000a2a8:	18006f26 	beq	r3,zero,1000a468 <_malloc_r+0x764>
1000a2ac:	63000017 	ldw	r12,0(r12)
1000a2b0:	213fffc4 	addi	r4,r4,-1
1000a2b4:	60bffa26 	beq	r12,r2,1000a2a0 <__alt_data_end+0xf800a2a0>
1000a2b8:	98800117 	ldw	r2,4(r19)
1000a2bc:	294b883a 	add	r5,r5,r5
1000a2c0:	117f5a36 	bltu	r2,r5,1000a02c <__alt_data_end+0xf800a02c>
1000a2c4:	283f5926 	beq	r5,zero,1000a02c <__alt_data_end+0xf800a02c>
1000a2c8:	1146703a 	and	r3,r2,r5
1000a2cc:	18001626 	beq	r3,zero,1000a328 <_malloc_r+0x624>
1000a2d0:	5809883a 	mov	r4,r11
1000a2d4:	003f1a06 	br	10009f40 <__alt_data_end+0xf8009f40>
1000a2d8:	80800204 	addi	r2,r16,8
1000a2dc:	84000517 	ldw	r16,20(r16)
1000a2e0:	143ea81e 	bne	r2,r16,10009d84 <__alt_data_end+0xf8009d84>
1000a2e4:	21000084 	addi	r4,r4,2
1000a2e8:	003ee306 	br	10009e78 <__alt_data_end+0xf8009e78>
1000a2ec:	210016c4 	addi	r4,r4,91
1000a2f0:	210b883a 	add	r5,r4,r4
1000a2f4:	003eca06 	br	10009e20 <__alt_data_end+0xf8009e20>
1000a2f8:	100ad1ba 	srli	r5,r2,6
1000a2fc:	29400e04 	addi	r5,r5,56
1000a300:	294d883a 	add	r6,r5,r5
1000a304:	003fbd06 	br	1000a1fc <__alt_data_end+0xf800a1fc>
1000a308:	84ff6026 	beq	r16,r19,1000a08c <__alt_data_end+0xf800a08c>
1000a30c:	00840074 	movhi	r2,4097
1000a310:	10832904 	addi	r2,r2,3236
1000a314:	14000217 	ldw	r16,8(r2)
1000a318:	00bfff04 	movi	r2,-4
1000a31c:	80c00117 	ldw	r3,4(r16)
1000a320:	1886703a 	and	r3,r3,r2
1000a324:	003f9406 	br	1000a178 <__alt_data_end+0xf800a178>
1000a328:	294b883a 	add	r5,r5,r5
1000a32c:	1146703a 	and	r3,r2,r5
1000a330:	5ac00104 	addi	r11,r11,4
1000a334:	183ffc26 	beq	r3,zero,1000a328 <__alt_data_end+0xf800a328>
1000a338:	5809883a 	mov	r4,r11
1000a33c:	003f0006 	br	10009f40 <__alt_data_end+0xf8009f40>
1000a340:	00805504 	movi	r2,340
1000a344:	11001336 	bltu	r2,r4,1000a394 <_malloc_r+0x690>
1000a348:	8808d3fa 	srli	r4,r17,15
1000a34c:	21001dc4 	addi	r4,r4,119
1000a350:	210b883a 	add	r5,r4,r4
1000a354:	003eb206 	br	10009e20 <__alt_data_end+0xf8009e20>
1000a358:	00840004 	movi	r2,4096
1000a35c:	003f5d06 	br	1000a0d4 <__alt_data_end+0xf800a0d4>
1000a360:	00800044 	movi	r2,1
1000a364:	a0800115 	stw	r2,4(r20)
1000a368:	a021883a 	mov	r16,r20
1000a36c:	0007883a 	mov	r3,zero
1000a370:	003f8106 	br	1000a178 <__alt_data_end+0xf800a178>
1000a374:	280bd0ba 	srai	r5,r5,2
1000a378:	01800044 	movi	r6,1
1000a37c:	38800117 	ldw	r2,4(r7)
1000a380:	314c983a 	sll	r6,r6,r5
1000a384:	180b883a 	mov	r5,r3
1000a388:	3084b03a 	or	r2,r6,r2
1000a38c:	38800115 	stw	r2,4(r7)
1000a390:	003fa906 	br	1000a238 <__alt_data_end+0xf800a238>
1000a394:	00815504 	movi	r2,1364
1000a398:	11001836 	bltu	r2,r4,1000a3fc <_malloc_r+0x6f8>
1000a39c:	8808d4ba 	srli	r4,r17,18
1000a3a0:	21001f04 	addi	r4,r4,124
1000a3a4:	210b883a 	add	r5,r4,r4
1000a3a8:	003e9d06 	br	10009e20 <__alt_data_end+0xf8009e20>
1000a3ac:	bdc00404 	addi	r23,r23,16
1000a3b0:	003f2f06 	br	1000a070 <__alt_data_end+0xf800a070>
1000a3b4:	01401504 	movi	r5,84
1000a3b8:	28c01f36 	bltu	r5,r3,1000a438 <_malloc_r+0x734>
1000a3bc:	100ad33a 	srli	r5,r2,12
1000a3c0:	29401b84 	addi	r5,r5,110
1000a3c4:	294d883a 	add	r6,r5,r5
1000a3c8:	003f8c06 	br	1000a1fc <__alt_data_end+0xf800a1fc>
1000a3cc:	9c000217 	ldw	r16,8(r19)
1000a3d0:	00bfff04 	movi	r2,-4
1000a3d4:	80c00117 	ldw	r3,4(r16)
1000a3d8:	1886703a 	and	r3,r3,r2
1000a3dc:	003f6606 	br	1000a178 <__alt_data_end+0xf800a178>
1000a3e0:	e0c3ffcc 	andi	r3,fp,4095
1000a3e4:	183f2f1e 	bne	r3,zero,1000a0a4 <__alt_data_end+0xf800a0a4>
1000a3e8:	98c00217 	ldw	r3,8(r19)
1000a3ec:	bd49883a 	add	r4,r23,r21
1000a3f0:	21000054 	ori	r4,r4,1
1000a3f4:	19000115 	stw	r4,4(r3)
1000a3f8:	003f5506 	br	1000a150 <__alt_data_end+0xf800a150>
1000a3fc:	01403f04 	movi	r5,252
1000a400:	01001f84 	movi	r4,126
1000a404:	003e8606 	br	10009e20 <__alt_data_end+0xf8009e20>
1000a408:	9009883a 	mov	r4,r18
1000a40c:	81400204 	addi	r5,r16,8
1000a410:	000916c0 	call	1000916c <_free_r>
1000a414:	00840074 	movhi	r2,4097
1000a418:	108f6004 	addi	r2,r2,15744
1000a41c:	10800017 	ldw	r2,0(r2)
1000a420:	003f4b06 	br	1000a150 <__alt_data_end+0xf800a150>
1000a424:	00c00044 	movi	r3,1
1000a428:	002f883a 	mov	r23,zero
1000a42c:	003f3406 	br	1000a100 <__alt_data_end+0xf800a100>
1000a430:	d5200315 	stw	r20,-32756(gp)
1000a434:	003f2106 	br	1000a0bc <__alt_data_end+0xf800a0bc>
1000a438:	01405504 	movi	r5,340
1000a43c:	28c00436 	bltu	r5,r3,1000a450 <_malloc_r+0x74c>
1000a440:	100ad3fa 	srli	r5,r2,15
1000a444:	29401dc4 	addi	r5,r5,119
1000a448:	294d883a 	add	r6,r5,r5
1000a44c:	003f6b06 	br	1000a1fc <__alt_data_end+0xf800a1fc>
1000a450:	01415504 	movi	r5,1364
1000a454:	28c00936 	bltu	r5,r3,1000a47c <_malloc_r+0x778>
1000a458:	100ad4ba 	srli	r5,r2,18
1000a45c:	29401f04 	addi	r5,r5,124
1000a460:	294d883a 	add	r6,r5,r5
1000a464:	003f6506 	br	1000a1fc <__alt_data_end+0xf800a1fc>
1000a468:	98800117 	ldw	r2,4(r19)
1000a46c:	0146303a 	nor	r3,zero,r5
1000a470:	1884703a 	and	r2,r3,r2
1000a474:	98800115 	stw	r2,4(r19)
1000a478:	003f9006 	br	1000a2bc <__alt_data_end+0xf800a2bc>
1000a47c:	01803f04 	movi	r6,252
1000a480:	01401f84 	movi	r5,126
1000a484:	003f5d06 	br	1000a1fc <__alt_data_end+0xf800a1fc>

1000a488 <memchr>:
1000a488:	008000c4 	movi	r2,3
1000a48c:	29403fcc 	andi	r5,r5,255
1000a490:	1180282e 	bgeu	r2,r6,1000a534 <memchr+0xac>
1000a494:	2086703a 	and	r3,r4,r2
1000a498:	1800351e 	bne	r3,zero,1000a570 <memchr+0xe8>
1000a49c:	2816923a 	slli	r11,r5,8
1000a4a0:	2093883a 	add	r9,r4,r2
1000a4a4:	22000084 	addi	r8,r4,2
1000a4a8:	5957883a 	add	r11,r11,r5
1000a4ac:	5816923a 	slli	r11,r11,8
1000a4b0:	20c00044 	addi	r3,r4,1
1000a4b4:	037fbff4 	movhi	r13,65279
1000a4b8:	6b7fbfc4 	addi	r13,r13,-257
1000a4bc:	5957883a 	add	r11,r11,r5
1000a4c0:	5816923a 	slli	r11,r11,8
1000a4c4:	03202074 	movhi	r12,32897
1000a4c8:	63202004 	addi	r12,r12,-32640
1000a4cc:	101d883a 	mov	r14,r2
1000a4d0:	5957883a 	add	r11,r11,r5
1000a4d4:	21c00017 	ldw	r7,0(r4)
1000a4d8:	31bfff04 	addi	r6,r6,-4
1000a4dc:	1805883a 	mov	r2,r3
1000a4e0:	3acef03a 	xor	r7,r7,r11
1000a4e4:	3b55883a 	add	r10,r7,r13
1000a4e8:	01ce303a 	nor	r7,zero,r7
1000a4ec:	51ce703a 	and	r7,r10,r7
1000a4f0:	3b0e703a 	and	r7,r7,r12
1000a4f4:	38000a26 	beq	r7,zero,1000a520 <memchr+0x98>
1000a4f8:	21c00003 	ldbu	r7,0(r4)
1000a4fc:	39401e26 	beq	r7,r5,1000a578 <memchr+0xf0>
1000a500:	19c00003 	ldbu	r7,0(r3)
1000a504:	39401926 	beq	r7,r5,1000a56c <memchr+0xe4>
1000a508:	41c00003 	ldbu	r7,0(r8)
1000a50c:	4005883a 	mov	r2,r8
1000a510:	39401626 	beq	r7,r5,1000a56c <memchr+0xe4>
1000a514:	49c00003 	ldbu	r7,0(r9)
1000a518:	4805883a 	mov	r2,r9
1000a51c:	39401326 	beq	r7,r5,1000a56c <memchr+0xe4>
1000a520:	21000104 	addi	r4,r4,4
1000a524:	4a400104 	addi	r9,r9,4
1000a528:	42000104 	addi	r8,r8,4
1000a52c:	18c00104 	addi	r3,r3,4
1000a530:	71bfe836 	bltu	r14,r6,1000a4d4 <__alt_data_end+0xf800a4d4>
1000a534:	2005883a 	mov	r2,r4
1000a538:	30000a26 	beq	r6,zero,1000a564 <memchr+0xdc>
1000a53c:	10c00003 	ldbu	r3,0(r2)
1000a540:	19400a26 	beq	r3,r5,1000a56c <memchr+0xe4>
1000a544:	10c00044 	addi	r3,r2,1
1000a548:	118d883a 	add	r6,r2,r6
1000a54c:	00000306 	br	1000a55c <memchr+0xd4>
1000a550:	11000003 	ldbu	r4,0(r2)
1000a554:	18c00044 	addi	r3,r3,1
1000a558:	21400426 	beq	r4,r5,1000a56c <memchr+0xe4>
1000a55c:	1805883a 	mov	r2,r3
1000a560:	19bffb1e 	bne	r3,r6,1000a550 <__alt_data_end+0xf800a550>
1000a564:	0005883a 	mov	r2,zero
1000a568:	f800283a 	ret
1000a56c:	f800283a 	ret
1000a570:	2005883a 	mov	r2,r4
1000a574:	003ff106 	br	1000a53c <__alt_data_end+0xf800a53c>
1000a578:	2005883a 	mov	r2,r4
1000a57c:	f800283a 	ret

1000a580 <memcpy>:
1000a580:	defffb04 	addi	sp,sp,-20
1000a584:	dc000015 	stw	r16,0(sp)
1000a588:	dfc00415 	stw	ra,16(sp)
1000a58c:	dcc00315 	stw	r19,12(sp)
1000a590:	dc800215 	stw	r18,8(sp)
1000a594:	dc400115 	stw	r17,4(sp)
1000a598:	00c003c4 	movi	r3,15
1000a59c:	2021883a 	mov	r16,r4
1000a5a0:	3005883a 	mov	r2,r6
1000a5a4:	1980032e 	bgeu	r3,r6,1000a5b4 <memcpy+0x34>
1000a5a8:	2906b03a 	or	r3,r5,r4
1000a5ac:	18c000cc 	andi	r3,r3,3
1000a5b0:	18001026 	beq	r3,zero,1000a5f4 <memcpy+0x74>
1000a5b4:	8007883a 	mov	r3,r16
1000a5b8:	288f883a 	add	r7,r5,r2
1000a5bc:	10000526 	beq	r2,zero,1000a5d4 <memcpy+0x54>
1000a5c0:	29800003 	ldbu	r6,0(r5)
1000a5c4:	18c00044 	addi	r3,r3,1
1000a5c8:	29400044 	addi	r5,r5,1
1000a5cc:	19bfffc5 	stb	r6,-1(r3)
1000a5d0:	29fffb1e 	bne	r5,r7,1000a5c0 <__alt_data_end+0xf800a5c0>
1000a5d4:	8005883a 	mov	r2,r16
1000a5d8:	dfc00417 	ldw	ra,16(sp)
1000a5dc:	dcc00317 	ldw	r19,12(sp)
1000a5e0:	dc800217 	ldw	r18,8(sp)
1000a5e4:	dc400117 	ldw	r17,4(sp)
1000a5e8:	dc000017 	ldw	r16,0(sp)
1000a5ec:	dec00504 	addi	sp,sp,20
1000a5f0:	f800283a 	ret
1000a5f4:	32bffc04 	addi	r10,r6,-16
1000a5f8:	5014d13a 	srli	r10,r10,4
1000a5fc:	20800404 	addi	r2,r4,16
1000a600:	2007883a 	mov	r3,r4
1000a604:	5008913a 	slli	r4,r10,4
1000a608:	280f883a 	mov	r7,r5
1000a60c:	1105883a 	add	r2,r2,r4
1000a610:	3a000017 	ldw	r8,0(r7)
1000a614:	18c00404 	addi	r3,r3,16
1000a618:	39c00404 	addi	r7,r7,16
1000a61c:	1a3ffc15 	stw	r8,-16(r3)
1000a620:	3a3ffd17 	ldw	r8,-12(r7)
1000a624:	1a3ffd15 	stw	r8,-12(r3)
1000a628:	3a3ffe17 	ldw	r8,-8(r7)
1000a62c:	1a3ffe15 	stw	r8,-8(r3)
1000a630:	3a3fff17 	ldw	r8,-4(r7)
1000a634:	1a3fff15 	stw	r8,-4(r3)
1000a638:	18bff51e 	bne	r3,r2,1000a610 <__alt_data_end+0xf800a610>
1000a63c:	52800044 	addi	r10,r10,1
1000a640:	5014913a 	slli	r10,r10,4
1000a644:	308003cc 	andi	r2,r6,15
1000a648:	010000c4 	movi	r4,3
1000a64c:	8287883a 	add	r3,r16,r10
1000a650:	2a95883a 	add	r10,r5,r10
1000a654:	2080182e 	bgeu	r4,r2,1000a6b8 <memcpy+0x138>
1000a658:	147fff04 	addi	r17,r2,-4
1000a65c:	8808d0ba 	srli	r4,r17,2
1000a660:	1a400104 	addi	r9,r3,4
1000a664:	180d883a 	mov	r6,r3
1000a668:	2105883a 	add	r2,r4,r4
1000a66c:	1085883a 	add	r2,r2,r2
1000a670:	4893883a 	add	r9,r9,r2
1000a674:	500f883a 	mov	r7,r10
1000a678:	3a000017 	ldw	r8,0(r7)
1000a67c:	31800104 	addi	r6,r6,4
1000a680:	39c00104 	addi	r7,r7,4
1000a684:	323fff15 	stw	r8,-4(r6)
1000a688:	327ffb1e 	bne	r6,r9,1000a678 <__alt_data_end+0xf800a678>
1000a68c:	20800044 	addi	r2,r4,1
1000a690:	1085883a 	add	r2,r2,r2
1000a694:	1085883a 	add	r2,r2,r2
1000a698:	017fff04 	movi	r5,-4
1000a69c:	18a5883a 	add	r18,r3,r2
1000a6a0:	50a7883a 	add	r19,r10,r2
1000a6a4:	00050500 	call	10005050 <__mulsi3>
1000a6a8:	1445883a 	add	r2,r2,r17
1000a6ac:	980b883a 	mov	r5,r19
1000a6b0:	9007883a 	mov	r3,r18
1000a6b4:	003fc006 	br	1000a5b8 <__alt_data_end+0xf800a5b8>
1000a6b8:	500b883a 	mov	r5,r10
1000a6bc:	003fbe06 	br	1000a5b8 <__alt_data_end+0xf800a5b8>

1000a6c0 <memmove>:
1000a6c0:	defffb04 	addi	sp,sp,-20
1000a6c4:	dc000015 	stw	r16,0(sp)
1000a6c8:	dfc00415 	stw	ra,16(sp)
1000a6cc:	dcc00315 	stw	r19,12(sp)
1000a6d0:	dc800215 	stw	r18,8(sp)
1000a6d4:	dc400115 	stw	r17,4(sp)
1000a6d8:	2021883a 	mov	r16,r4
1000a6dc:	300f883a 	mov	r7,r6
1000a6e0:	2900122e 	bgeu	r5,r4,1000a72c <memmove+0x6c>
1000a6e4:	2987883a 	add	r3,r5,r6
1000a6e8:	20c0102e 	bgeu	r4,r3,1000a72c <memmove+0x6c>
1000a6ec:	218b883a 	add	r5,r4,r6
1000a6f0:	1989c83a 	sub	r4,r3,r6
1000a6f4:	30000526 	beq	r6,zero,1000a70c <memmove+0x4c>
1000a6f8:	18ffffc4 	addi	r3,r3,-1
1000a6fc:	18800003 	ldbu	r2,0(r3)
1000a700:	297fffc4 	addi	r5,r5,-1
1000a704:	28800005 	stb	r2,0(r5)
1000a708:	193ffb1e 	bne	r3,r4,1000a6f8 <__alt_data_end+0xf800a6f8>
1000a70c:	8005883a 	mov	r2,r16
1000a710:	dfc00417 	ldw	ra,16(sp)
1000a714:	dcc00317 	ldw	r19,12(sp)
1000a718:	dc800217 	ldw	r18,8(sp)
1000a71c:	dc400117 	ldw	r17,4(sp)
1000a720:	dc000017 	ldw	r16,0(sp)
1000a724:	dec00504 	addi	sp,sp,20
1000a728:	f800283a 	ret
1000a72c:	008003c4 	movi	r2,15
1000a730:	1180422e 	bgeu	r2,r6,1000a83c <memmove+0x17c>
1000a734:	2c04b03a 	or	r2,r5,r16
1000a738:	108000cc 	andi	r2,r2,3
1000a73c:	10003f1e 	bne	r2,zero,1000a83c <memmove+0x17c>
1000a740:	32bffc04 	addi	r10,r6,-16
1000a744:	5014d13a 	srli	r10,r10,4
1000a748:	81000404 	addi	r4,r16,16
1000a74c:	8007883a 	mov	r3,r16
1000a750:	5004913a 	slli	r2,r10,4
1000a754:	280f883a 	mov	r7,r5
1000a758:	2089883a 	add	r4,r4,r2
1000a75c:	38800017 	ldw	r2,0(r7)
1000a760:	18c00404 	addi	r3,r3,16
1000a764:	39c00404 	addi	r7,r7,16
1000a768:	18bffc15 	stw	r2,-16(r3)
1000a76c:	38bffd17 	ldw	r2,-12(r7)
1000a770:	18bffd15 	stw	r2,-12(r3)
1000a774:	38bffe17 	ldw	r2,-8(r7)
1000a778:	18bffe15 	stw	r2,-8(r3)
1000a77c:	38bfff17 	ldw	r2,-4(r7)
1000a780:	18bfff15 	stw	r2,-4(r3)
1000a784:	193ff51e 	bne	r3,r4,1000a75c <__alt_data_end+0xf800a75c>
1000a788:	52800044 	addi	r10,r10,1
1000a78c:	5014913a 	slli	r10,r10,4
1000a790:	31c003cc 	andi	r7,r6,15
1000a794:	008000c4 	movi	r2,3
1000a798:	8287883a 	add	r3,r16,r10
1000a79c:	2a95883a 	add	r10,r5,r10
1000a7a0:	11c0282e 	bgeu	r2,r7,1000a844 <memmove+0x184>
1000a7a4:	3c7fff04 	addi	r17,r7,-4
1000a7a8:	8808d0ba 	srli	r4,r17,2
1000a7ac:	1a400104 	addi	r9,r3,4
1000a7b0:	180d883a 	mov	r6,r3
1000a7b4:	2105883a 	add	r2,r4,r4
1000a7b8:	1085883a 	add	r2,r2,r2
1000a7bc:	4893883a 	add	r9,r9,r2
1000a7c0:	5005883a 	mov	r2,r10
1000a7c4:	12000017 	ldw	r8,0(r2)
1000a7c8:	31800104 	addi	r6,r6,4
1000a7cc:	10800104 	addi	r2,r2,4
1000a7d0:	323fff15 	stw	r8,-4(r6)
1000a7d4:	327ffb1e 	bne	r6,r9,1000a7c4 <__alt_data_end+0xf800a7c4>
1000a7d8:	20800044 	addi	r2,r4,1
1000a7dc:	1085883a 	add	r2,r2,r2
1000a7e0:	1085883a 	add	r2,r2,r2
1000a7e4:	017fff04 	movi	r5,-4
1000a7e8:	18a5883a 	add	r18,r3,r2
1000a7ec:	50a7883a 	add	r19,r10,r2
1000a7f0:	00050500 	call	10005050 <__mulsi3>
1000a7f4:	144f883a 	add	r7,r2,r17
1000a7f8:	980b883a 	mov	r5,r19
1000a7fc:	9007883a 	mov	r3,r18
1000a800:	383fc226 	beq	r7,zero,1000a70c <__alt_data_end+0xf800a70c>
1000a804:	19cf883a 	add	r7,r3,r7
1000a808:	29800003 	ldbu	r6,0(r5)
1000a80c:	18c00044 	addi	r3,r3,1
1000a810:	29400044 	addi	r5,r5,1
1000a814:	19bfffc5 	stb	r6,-1(r3)
1000a818:	19fffb1e 	bne	r3,r7,1000a808 <__alt_data_end+0xf800a808>
1000a81c:	8005883a 	mov	r2,r16
1000a820:	dfc00417 	ldw	ra,16(sp)
1000a824:	dcc00317 	ldw	r19,12(sp)
1000a828:	dc800217 	ldw	r18,8(sp)
1000a82c:	dc400117 	ldw	r17,4(sp)
1000a830:	dc000017 	ldw	r16,0(sp)
1000a834:	dec00504 	addi	sp,sp,20
1000a838:	f800283a 	ret
1000a83c:	8007883a 	mov	r3,r16
1000a840:	003fef06 	br	1000a800 <__alt_data_end+0xf800a800>
1000a844:	500b883a 	mov	r5,r10
1000a848:	003fed06 	br	1000a800 <__alt_data_end+0xf800a800>

1000a84c <memset>:
1000a84c:	00c000c4 	movi	r3,3
1000a850:	2005883a 	mov	r2,r4
1000a854:	29403fcc 	andi	r5,r5,255
1000a858:	19802d2e 	bgeu	r3,r6,1000a910 <memset+0xc4>
1000a85c:	20c6703a 	and	r3,r4,r3
1000a860:	18002e1e 	bne	r3,zero,1000a91c <memset+0xd0>
1000a864:	2806923a 	slli	r3,r5,8
1000a868:	010003c4 	movi	r4,15
1000a86c:	3011883a 	mov	r8,r6
1000a870:	1946b03a 	or	r3,r3,r5
1000a874:	180e943a 	slli	r7,r3,16
1000a878:	38ceb03a 	or	r7,r7,r3
1000a87c:	1007883a 	mov	r3,r2
1000a880:	21800f2e 	bgeu	r4,r6,1000a8c0 <memset+0x74>
1000a884:	19c00015 	stw	r7,0(r3)
1000a888:	19c00115 	stw	r7,4(r3)
1000a88c:	19c00215 	stw	r7,8(r3)
1000a890:	19c00315 	stw	r7,12(r3)
1000a894:	423ffc04 	addi	r8,r8,-16
1000a898:	18c00404 	addi	r3,r3,16
1000a89c:	223ff936 	bltu	r4,r8,1000a884 <__alt_data_end+0xf800a884>
1000a8a0:	30fffc04 	addi	r3,r6,-16
1000a8a4:	1806d13a 	srli	r3,r3,4
1000a8a8:	318003cc 	andi	r6,r6,15
1000a8ac:	010000c4 	movi	r4,3
1000a8b0:	18c00044 	addi	r3,r3,1
1000a8b4:	1806913a 	slli	r3,r3,4
1000a8b8:	10c7883a 	add	r3,r2,r3
1000a8bc:	21800e2e 	bgeu	r4,r6,1000a8f8 <memset+0xac>
1000a8c0:	1813883a 	mov	r9,r3
1000a8c4:	3011883a 	mov	r8,r6
1000a8c8:	010000c4 	movi	r4,3
1000a8cc:	49c00015 	stw	r7,0(r9)
1000a8d0:	423fff04 	addi	r8,r8,-4
1000a8d4:	4a400104 	addi	r9,r9,4
1000a8d8:	223ffc36 	bltu	r4,r8,1000a8cc <__alt_data_end+0xf800a8cc>
1000a8dc:	313fff04 	addi	r4,r6,-4
1000a8e0:	2008d0ba 	srli	r4,r4,2
1000a8e4:	318000cc 	andi	r6,r6,3
1000a8e8:	21000044 	addi	r4,r4,1
1000a8ec:	2109883a 	add	r4,r4,r4
1000a8f0:	2109883a 	add	r4,r4,r4
1000a8f4:	1907883a 	add	r3,r3,r4
1000a8f8:	30000a26 	beq	r6,zero,1000a924 <memset+0xd8>
1000a8fc:	198d883a 	add	r6,r3,r6
1000a900:	19400005 	stb	r5,0(r3)
1000a904:	18c00044 	addi	r3,r3,1
1000a908:	19bffd1e 	bne	r3,r6,1000a900 <__alt_data_end+0xf800a900>
1000a90c:	f800283a 	ret
1000a910:	2007883a 	mov	r3,r4
1000a914:	303ff91e 	bne	r6,zero,1000a8fc <__alt_data_end+0xf800a8fc>
1000a918:	00000206 	br	1000a924 <memset+0xd8>
1000a91c:	2007883a 	mov	r3,r4
1000a920:	003ff606 	br	1000a8fc <__alt_data_end+0xf800a8fc>
1000a924:	f800283a 	ret

1000a928 <_Balloc>:
1000a928:	20801317 	ldw	r2,76(r4)
1000a92c:	defffc04 	addi	sp,sp,-16
1000a930:	dc400115 	stw	r17,4(sp)
1000a934:	dc000015 	stw	r16,0(sp)
1000a938:	dfc00315 	stw	ra,12(sp)
1000a93c:	dc800215 	stw	r18,8(sp)
1000a940:	2023883a 	mov	r17,r4
1000a944:	2821883a 	mov	r16,r5
1000a948:	10000f26 	beq	r2,zero,1000a988 <_Balloc+0x60>
1000a94c:	8407883a 	add	r3,r16,r16
1000a950:	18c7883a 	add	r3,r3,r3
1000a954:	10c7883a 	add	r3,r2,r3
1000a958:	18800017 	ldw	r2,0(r3)
1000a95c:	10001126 	beq	r2,zero,1000a9a4 <_Balloc+0x7c>
1000a960:	11000017 	ldw	r4,0(r2)
1000a964:	19000015 	stw	r4,0(r3)
1000a968:	10000415 	stw	zero,16(r2)
1000a96c:	10000315 	stw	zero,12(r2)
1000a970:	dfc00317 	ldw	ra,12(sp)
1000a974:	dc800217 	ldw	r18,8(sp)
1000a978:	dc400117 	ldw	r17,4(sp)
1000a97c:	dc000017 	ldw	r16,0(sp)
1000a980:	dec00404 	addi	sp,sp,16
1000a984:	f800283a 	ret
1000a988:	01400104 	movi	r5,4
1000a98c:	01800404 	movi	r6,16
1000a990:	000c28c0 	call	1000c28c <_calloc_r>
1000a994:	88801315 	stw	r2,76(r17)
1000a998:	103fec1e 	bne	r2,zero,1000a94c <__alt_data_end+0xf800a94c>
1000a99c:	0005883a 	mov	r2,zero
1000a9a0:	003ff306 	br	1000a970 <__alt_data_end+0xf800a970>
1000a9a4:	01400044 	movi	r5,1
1000a9a8:	2c24983a 	sll	r18,r5,r16
1000a9ac:	8809883a 	mov	r4,r17
1000a9b0:	91800144 	addi	r6,r18,5
1000a9b4:	318d883a 	add	r6,r6,r6
1000a9b8:	318d883a 	add	r6,r6,r6
1000a9bc:	000c28c0 	call	1000c28c <_calloc_r>
1000a9c0:	103ff626 	beq	r2,zero,1000a99c <__alt_data_end+0xf800a99c>
1000a9c4:	14000115 	stw	r16,4(r2)
1000a9c8:	14800215 	stw	r18,8(r2)
1000a9cc:	003fe606 	br	1000a968 <__alt_data_end+0xf800a968>

1000a9d0 <_Bfree>:
1000a9d0:	28000826 	beq	r5,zero,1000a9f4 <_Bfree+0x24>
1000a9d4:	28c00117 	ldw	r3,4(r5)
1000a9d8:	20801317 	ldw	r2,76(r4)
1000a9dc:	18c7883a 	add	r3,r3,r3
1000a9e0:	18c7883a 	add	r3,r3,r3
1000a9e4:	10c5883a 	add	r2,r2,r3
1000a9e8:	10c00017 	ldw	r3,0(r2)
1000a9ec:	28c00015 	stw	r3,0(r5)
1000a9f0:	11400015 	stw	r5,0(r2)
1000a9f4:	f800283a 	ret

1000a9f8 <__multadd>:
1000a9f8:	defff604 	addi	sp,sp,-40
1000a9fc:	dd400515 	stw	r21,20(sp)
1000aa00:	2d400417 	ldw	r21,16(r5)
1000aa04:	df000815 	stw	fp,32(sp)
1000aa08:	ddc00715 	stw	r23,28(sp)
1000aa0c:	dd800615 	stw	r22,24(sp)
1000aa10:	dd000415 	stw	r20,16(sp)
1000aa14:	dc400115 	stw	r17,4(sp)
1000aa18:	dc000015 	stw	r16,0(sp)
1000aa1c:	dfc00915 	stw	ra,36(sp)
1000aa20:	dcc00315 	stw	r19,12(sp)
1000aa24:	dc800215 	stw	r18,8(sp)
1000aa28:	282d883a 	mov	r22,r5
1000aa2c:	202f883a 	mov	r23,r4
1000aa30:	3029883a 	mov	r20,r6
1000aa34:	3839883a 	mov	fp,r7
1000aa38:	2c000504 	addi	r16,r5,20
1000aa3c:	0023883a 	mov	r17,zero
1000aa40:	84c00017 	ldw	r19,0(r16)
1000aa44:	a00b883a 	mov	r5,r20
1000aa48:	8c400044 	addi	r17,r17,1
1000aa4c:	993fffcc 	andi	r4,r19,65535
1000aa50:	00050500 	call	10005050 <__mulsi3>
1000aa54:	1725883a 	add	r18,r2,fp
1000aa58:	9808d43a 	srli	r4,r19,16
1000aa5c:	9026d43a 	srli	r19,r18,16
1000aa60:	a00b883a 	mov	r5,r20
1000aa64:	00050500 	call	10005050 <__mulsi3>
1000aa68:	988f883a 	add	r7,r19,r2
1000aa6c:	3804943a 	slli	r2,r7,16
1000aa70:	94bfffcc 	andi	r18,r18,65535
1000aa74:	3838d43a 	srli	fp,r7,16
1000aa78:	14a5883a 	add	r18,r2,r18
1000aa7c:	84800015 	stw	r18,0(r16)
1000aa80:	84000104 	addi	r16,r16,4
1000aa84:	8d7fee16 	blt	r17,r21,1000aa40 <__alt_data_end+0xf800aa40>
1000aa88:	e0000926 	beq	fp,zero,1000aab0 <__multadd+0xb8>
1000aa8c:	b0800217 	ldw	r2,8(r22)
1000aa90:	a880140e 	bge	r21,r2,1000aae4 <__multadd+0xec>
1000aa94:	a8800144 	addi	r2,r21,5
1000aa98:	1085883a 	add	r2,r2,r2
1000aa9c:	1085883a 	add	r2,r2,r2
1000aaa0:	b085883a 	add	r2,r22,r2
1000aaa4:	ad400044 	addi	r21,r21,1
1000aaa8:	17000015 	stw	fp,0(r2)
1000aaac:	b5400415 	stw	r21,16(r22)
1000aab0:	b005883a 	mov	r2,r22
1000aab4:	dfc00917 	ldw	ra,36(sp)
1000aab8:	df000817 	ldw	fp,32(sp)
1000aabc:	ddc00717 	ldw	r23,28(sp)
1000aac0:	dd800617 	ldw	r22,24(sp)
1000aac4:	dd400517 	ldw	r21,20(sp)
1000aac8:	dd000417 	ldw	r20,16(sp)
1000aacc:	dcc00317 	ldw	r19,12(sp)
1000aad0:	dc800217 	ldw	r18,8(sp)
1000aad4:	dc400117 	ldw	r17,4(sp)
1000aad8:	dc000017 	ldw	r16,0(sp)
1000aadc:	dec00a04 	addi	sp,sp,40
1000aae0:	f800283a 	ret
1000aae4:	b1400117 	ldw	r5,4(r22)
1000aae8:	b809883a 	mov	r4,r23
1000aaec:	29400044 	addi	r5,r5,1
1000aaf0:	000a9280 	call	1000a928 <_Balloc>
1000aaf4:	b1800417 	ldw	r6,16(r22)
1000aaf8:	b1400304 	addi	r5,r22,12
1000aafc:	11000304 	addi	r4,r2,12
1000ab00:	31800084 	addi	r6,r6,2
1000ab04:	318d883a 	add	r6,r6,r6
1000ab08:	318d883a 	add	r6,r6,r6
1000ab0c:	1021883a 	mov	r16,r2
1000ab10:	000a5800 	call	1000a580 <memcpy>
1000ab14:	b0c00117 	ldw	r3,4(r22)
1000ab18:	b8801317 	ldw	r2,76(r23)
1000ab1c:	18c7883a 	add	r3,r3,r3
1000ab20:	18c7883a 	add	r3,r3,r3
1000ab24:	10c5883a 	add	r2,r2,r3
1000ab28:	10c00017 	ldw	r3,0(r2)
1000ab2c:	b0c00015 	stw	r3,0(r22)
1000ab30:	15800015 	stw	r22,0(r2)
1000ab34:	802d883a 	mov	r22,r16
1000ab38:	003fd606 	br	1000aa94 <__alt_data_end+0xf800aa94>

1000ab3c <__s2b>:
1000ab3c:	defff904 	addi	sp,sp,-28
1000ab40:	dd000415 	stw	r20,16(sp)
1000ab44:	dc400115 	stw	r17,4(sp)
1000ab48:	2829883a 	mov	r20,r5
1000ab4c:	2023883a 	mov	r17,r4
1000ab50:	01400244 	movi	r5,9
1000ab54:	39000204 	addi	r4,r7,8
1000ab58:	dcc00315 	stw	r19,12(sp)
1000ab5c:	dc800215 	stw	r18,8(sp)
1000ab60:	dfc00615 	stw	ra,24(sp)
1000ab64:	dd400515 	stw	r21,20(sp)
1000ab68:	dc000015 	stw	r16,0(sp)
1000ab6c:	3825883a 	mov	r18,r7
1000ab70:	3027883a 	mov	r19,r6
1000ab74:	00049e00 	call	100049e0 <__divsi3>
1000ab78:	00c00044 	movi	r3,1
1000ab7c:	000b883a 	mov	r5,zero
1000ab80:	1880030e 	bge	r3,r2,1000ab90 <__s2b+0x54>
1000ab84:	18c7883a 	add	r3,r3,r3
1000ab88:	29400044 	addi	r5,r5,1
1000ab8c:	18bffd16 	blt	r3,r2,1000ab84 <__alt_data_end+0xf800ab84>
1000ab90:	8809883a 	mov	r4,r17
1000ab94:	000a9280 	call	1000a928 <_Balloc>
1000ab98:	d8c00717 	ldw	r3,28(sp)
1000ab9c:	10c00515 	stw	r3,20(r2)
1000aba0:	00c00044 	movi	r3,1
1000aba4:	10c00415 	stw	r3,16(r2)
1000aba8:	00c00244 	movi	r3,9
1000abac:	1cc0210e 	bge	r3,r19,1000ac34 <__s2b+0xf8>
1000abb0:	a0eb883a 	add	r21,r20,r3
1000abb4:	a821883a 	mov	r16,r21
1000abb8:	a4e9883a 	add	r20,r20,r19
1000abbc:	81c00007 	ldb	r7,0(r16)
1000abc0:	8809883a 	mov	r4,r17
1000abc4:	84000044 	addi	r16,r16,1
1000abc8:	100b883a 	mov	r5,r2
1000abcc:	01800284 	movi	r6,10
1000abd0:	39fff404 	addi	r7,r7,-48
1000abd4:	000a9f80 	call	1000a9f8 <__multadd>
1000abd8:	853ff81e 	bne	r16,r20,1000abbc <__alt_data_end+0xf800abbc>
1000abdc:	ace1883a 	add	r16,r21,r19
1000abe0:	843ffe04 	addi	r16,r16,-8
1000abe4:	9c800a0e 	bge	r19,r18,1000ac10 <__s2b+0xd4>
1000abe8:	94e5c83a 	sub	r18,r18,r19
1000abec:	84a5883a 	add	r18,r16,r18
1000abf0:	81c00007 	ldb	r7,0(r16)
1000abf4:	8809883a 	mov	r4,r17
1000abf8:	84000044 	addi	r16,r16,1
1000abfc:	100b883a 	mov	r5,r2
1000ac00:	01800284 	movi	r6,10
1000ac04:	39fff404 	addi	r7,r7,-48
1000ac08:	000a9f80 	call	1000a9f8 <__multadd>
1000ac0c:	84bff81e 	bne	r16,r18,1000abf0 <__alt_data_end+0xf800abf0>
1000ac10:	dfc00617 	ldw	ra,24(sp)
1000ac14:	dd400517 	ldw	r21,20(sp)
1000ac18:	dd000417 	ldw	r20,16(sp)
1000ac1c:	dcc00317 	ldw	r19,12(sp)
1000ac20:	dc800217 	ldw	r18,8(sp)
1000ac24:	dc400117 	ldw	r17,4(sp)
1000ac28:	dc000017 	ldw	r16,0(sp)
1000ac2c:	dec00704 	addi	sp,sp,28
1000ac30:	f800283a 	ret
1000ac34:	a4000284 	addi	r16,r20,10
1000ac38:	1827883a 	mov	r19,r3
1000ac3c:	003fe906 	br	1000abe4 <__alt_data_end+0xf800abe4>

1000ac40 <__hi0bits>:
1000ac40:	20bfffec 	andhi	r2,r4,65535
1000ac44:	1000141e 	bne	r2,zero,1000ac98 <__hi0bits+0x58>
1000ac48:	2008943a 	slli	r4,r4,16
1000ac4c:	00800404 	movi	r2,16
1000ac50:	20ffc02c 	andhi	r3,r4,65280
1000ac54:	1800021e 	bne	r3,zero,1000ac60 <__hi0bits+0x20>
1000ac58:	2008923a 	slli	r4,r4,8
1000ac5c:	10800204 	addi	r2,r2,8
1000ac60:	20fc002c 	andhi	r3,r4,61440
1000ac64:	1800021e 	bne	r3,zero,1000ac70 <__hi0bits+0x30>
1000ac68:	2008913a 	slli	r4,r4,4
1000ac6c:	10800104 	addi	r2,r2,4
1000ac70:	20f0002c 	andhi	r3,r4,49152
1000ac74:	1800031e 	bne	r3,zero,1000ac84 <__hi0bits+0x44>
1000ac78:	2109883a 	add	r4,r4,r4
1000ac7c:	10800084 	addi	r2,r2,2
1000ac80:	2109883a 	add	r4,r4,r4
1000ac84:	20000316 	blt	r4,zero,1000ac94 <__hi0bits+0x54>
1000ac88:	2110002c 	andhi	r4,r4,16384
1000ac8c:	2000041e 	bne	r4,zero,1000aca0 <__hi0bits+0x60>
1000ac90:	00800804 	movi	r2,32
1000ac94:	f800283a 	ret
1000ac98:	0005883a 	mov	r2,zero
1000ac9c:	003fec06 	br	1000ac50 <__alt_data_end+0xf800ac50>
1000aca0:	10800044 	addi	r2,r2,1
1000aca4:	f800283a 	ret

1000aca8 <__lo0bits>:
1000aca8:	20c00017 	ldw	r3,0(r4)
1000acac:	188001cc 	andi	r2,r3,7
1000acb0:	10000826 	beq	r2,zero,1000acd4 <__lo0bits+0x2c>
1000acb4:	1880004c 	andi	r2,r3,1
1000acb8:	1000211e 	bne	r2,zero,1000ad40 <__lo0bits+0x98>
1000acbc:	1880008c 	andi	r2,r3,2
1000acc0:	1000211e 	bne	r2,zero,1000ad48 <__lo0bits+0xa0>
1000acc4:	1806d0ba 	srli	r3,r3,2
1000acc8:	00800084 	movi	r2,2
1000accc:	20c00015 	stw	r3,0(r4)
1000acd0:	f800283a 	ret
1000acd4:	18bfffcc 	andi	r2,r3,65535
1000acd8:	10001326 	beq	r2,zero,1000ad28 <__lo0bits+0x80>
1000acdc:	0005883a 	mov	r2,zero
1000ace0:	19403fcc 	andi	r5,r3,255
1000ace4:	2800021e 	bne	r5,zero,1000acf0 <__lo0bits+0x48>
1000ace8:	1806d23a 	srli	r3,r3,8
1000acec:	10800204 	addi	r2,r2,8
1000acf0:	194003cc 	andi	r5,r3,15
1000acf4:	2800021e 	bne	r5,zero,1000ad00 <__lo0bits+0x58>
1000acf8:	1806d13a 	srli	r3,r3,4
1000acfc:	10800104 	addi	r2,r2,4
1000ad00:	194000cc 	andi	r5,r3,3
1000ad04:	2800021e 	bne	r5,zero,1000ad10 <__lo0bits+0x68>
1000ad08:	1806d0ba 	srli	r3,r3,2
1000ad0c:	10800084 	addi	r2,r2,2
1000ad10:	1940004c 	andi	r5,r3,1
1000ad14:	2800081e 	bne	r5,zero,1000ad38 <__lo0bits+0x90>
1000ad18:	1806d07a 	srli	r3,r3,1
1000ad1c:	1800051e 	bne	r3,zero,1000ad34 <__lo0bits+0x8c>
1000ad20:	00800804 	movi	r2,32
1000ad24:	f800283a 	ret
1000ad28:	1806d43a 	srli	r3,r3,16
1000ad2c:	00800404 	movi	r2,16
1000ad30:	003feb06 	br	1000ace0 <__alt_data_end+0xf800ace0>
1000ad34:	10800044 	addi	r2,r2,1
1000ad38:	20c00015 	stw	r3,0(r4)
1000ad3c:	f800283a 	ret
1000ad40:	0005883a 	mov	r2,zero
1000ad44:	f800283a 	ret
1000ad48:	1806d07a 	srli	r3,r3,1
1000ad4c:	00800044 	movi	r2,1
1000ad50:	20c00015 	stw	r3,0(r4)
1000ad54:	f800283a 	ret

1000ad58 <__i2b>:
1000ad58:	defffd04 	addi	sp,sp,-12
1000ad5c:	dc000015 	stw	r16,0(sp)
1000ad60:	04000044 	movi	r16,1
1000ad64:	dc400115 	stw	r17,4(sp)
1000ad68:	2823883a 	mov	r17,r5
1000ad6c:	800b883a 	mov	r5,r16
1000ad70:	dfc00215 	stw	ra,8(sp)
1000ad74:	000a9280 	call	1000a928 <_Balloc>
1000ad78:	14400515 	stw	r17,20(r2)
1000ad7c:	14000415 	stw	r16,16(r2)
1000ad80:	dfc00217 	ldw	ra,8(sp)
1000ad84:	dc400117 	ldw	r17,4(sp)
1000ad88:	dc000017 	ldw	r16,0(sp)
1000ad8c:	dec00304 	addi	sp,sp,12
1000ad90:	f800283a 	ret

1000ad94 <__multiply>:
1000ad94:	defff004 	addi	sp,sp,-64
1000ad98:	dc800815 	stw	r18,32(sp)
1000ad9c:	dc400715 	stw	r17,28(sp)
1000ada0:	34800417 	ldw	r18,16(r6)
1000ada4:	2c400417 	ldw	r17,16(r5)
1000ada8:	ddc00d15 	stw	r23,52(sp)
1000adac:	dc000615 	stw	r16,24(sp)
1000adb0:	dfc00f15 	stw	ra,60(sp)
1000adb4:	df000e15 	stw	fp,56(sp)
1000adb8:	dd800c15 	stw	r22,48(sp)
1000adbc:	dd400b15 	stw	r21,44(sp)
1000adc0:	dd000a15 	stw	r20,40(sp)
1000adc4:	dcc00915 	stw	r19,36(sp)
1000adc8:	2821883a 	mov	r16,r5
1000adcc:	302f883a 	mov	r23,r6
1000add0:	8c80050e 	bge	r17,r18,1000ade8 <__multiply+0x54>
1000add4:	8807883a 	mov	r3,r17
1000add8:	3021883a 	mov	r16,r6
1000addc:	9023883a 	mov	r17,r18
1000ade0:	282f883a 	mov	r23,r5
1000ade4:	1825883a 	mov	r18,r3
1000ade8:	80800217 	ldw	r2,8(r16)
1000adec:	8c87883a 	add	r3,r17,r18
1000adf0:	d8c00115 	stw	r3,4(sp)
1000adf4:	81400117 	ldw	r5,4(r16)
1000adf8:	10c0010e 	bge	r2,r3,1000ae00 <__multiply+0x6c>
1000adfc:	29400044 	addi	r5,r5,1
1000ae00:	000a9280 	call	1000a928 <_Balloc>
1000ae04:	d8c00117 	ldw	r3,4(sp)
1000ae08:	d8800515 	stw	r2,20(sp)
1000ae0c:	14c00504 	addi	r19,r2,20
1000ae10:	1d400144 	addi	r21,r3,5
1000ae14:	ad6b883a 	add	r21,r21,r21
1000ae18:	ad6b883a 	add	r21,r21,r21
1000ae1c:	156b883a 	add	r21,r2,r21
1000ae20:	dd400215 	stw	r21,8(sp)
1000ae24:	9805883a 	mov	r2,r19
1000ae28:	9d40042e 	bgeu	r19,r21,1000ae3c <__multiply+0xa8>
1000ae2c:	d8c00217 	ldw	r3,8(sp)
1000ae30:	10000015 	stw	zero,0(r2)
1000ae34:	10800104 	addi	r2,r2,4
1000ae38:	10fffc36 	bltu	r2,r3,1000ae2c <__alt_data_end+0xf800ae2c>
1000ae3c:	94800144 	addi	r18,r18,5
1000ae40:	94a5883a 	add	r18,r18,r18
1000ae44:	94ad883a 	add	r22,r18,r18
1000ae48:	8c400144 	addi	r17,r17,5
1000ae4c:	8c63883a 	add	r17,r17,r17
1000ae50:	bdad883a 	add	r22,r23,r22
1000ae54:	80c00504 	addi	r3,r16,20
1000ae58:	8c63883a 	add	r17,r17,r17
1000ae5c:	bc800504 	addi	r18,r23,20
1000ae60:	dd800315 	stw	r22,12(sp)
1000ae64:	d8c00415 	stw	r3,16(sp)
1000ae68:	dcc00015 	stw	r19,0(sp)
1000ae6c:	8463883a 	add	r17,r16,r17
1000ae70:	9580412e 	bgeu	r18,r22,1000af78 <__multiply+0x1e4>
1000ae74:	90800017 	ldw	r2,0(r18)
1000ae78:	173fffcc 	andi	fp,r2,65535
1000ae7c:	e0001a26 	beq	fp,zero,1000aee8 <__multiply+0x154>
1000ae80:	dd000017 	ldw	r20,0(sp)
1000ae84:	dd800417 	ldw	r22,16(sp)
1000ae88:	002b883a 	mov	r21,zero
1000ae8c:	b4c00017 	ldw	r19,0(r22)
1000ae90:	a4000017 	ldw	r16,0(r20)
1000ae94:	e00b883a 	mov	r5,fp
1000ae98:	993fffcc 	andi	r4,r19,65535
1000ae9c:	00050500 	call	10005050 <__mulsi3>
1000aea0:	9808d43a 	srli	r4,r19,16
1000aea4:	817fffcc 	andi	r5,r16,65535
1000aea8:	1145883a 	add	r2,r2,r5
1000aeac:	e00b883a 	mov	r5,fp
1000aeb0:	1567883a 	add	r19,r2,r21
1000aeb4:	8020d43a 	srli	r16,r16,16
1000aeb8:	00050500 	call	10005050 <__mulsi3>
1000aebc:	9808d43a 	srli	r4,r19,16
1000aec0:	1405883a 	add	r2,r2,r16
1000aec4:	a4c0000d 	sth	r19,0(r20)
1000aec8:	110f883a 	add	r7,r2,r4
1000aecc:	a1c0008d 	sth	r7,2(r20)
1000aed0:	b5800104 	addi	r22,r22,4
1000aed4:	382ad43a 	srli	r21,r7,16
1000aed8:	a5000104 	addi	r20,r20,4
1000aedc:	b47feb36 	bltu	r22,r17,1000ae8c <__alt_data_end+0xf800ae8c>
1000aee0:	a5400015 	stw	r21,0(r20)
1000aee4:	90800017 	ldw	r2,0(r18)
1000aee8:	1038d43a 	srli	fp,r2,16
1000aeec:	e0001c26 	beq	fp,zero,1000af60 <__multiply+0x1cc>
1000aef0:	d8c00017 	ldw	r3,0(sp)
1000aef4:	dd000417 	ldw	r20,16(sp)
1000aef8:	002b883a 	mov	r21,zero
1000aefc:	1d800017 	ldw	r22,0(r3)
1000af00:	182f883a 	mov	r23,r3
1000af04:	b021883a 	mov	r16,r22
1000af08:	a4c00017 	ldw	r19,0(r20)
1000af0c:	8020d43a 	srli	r16,r16,16
1000af10:	e00b883a 	mov	r5,fp
1000af14:	993fffcc 	andi	r4,r19,65535
1000af18:	00050500 	call	10005050 <__mulsi3>
1000af1c:	1405883a 	add	r2,r2,r16
1000af20:	9808d43a 	srli	r4,r19,16
1000af24:	156b883a 	add	r21,r2,r21
1000af28:	bdc00104 	addi	r23,r23,4
1000af2c:	bdbfff0d 	sth	r22,-4(r23)
1000af30:	bd7fff8d 	sth	r21,-2(r23)
1000af34:	bc000017 	ldw	r16,0(r23)
1000af38:	e00b883a 	mov	r5,fp
1000af3c:	00050500 	call	10005050 <__mulsi3>
1000af40:	a80ed43a 	srli	r7,r21,16
1000af44:	813fffcc 	andi	r4,r16,65535
1000af48:	2085883a 	add	r2,r4,r2
1000af4c:	11ed883a 	add	r22,r2,r7
1000af50:	a5000104 	addi	r20,r20,4
1000af54:	b02ad43a 	srli	r21,r22,16
1000af58:	a47feb36 	bltu	r20,r17,1000af08 <__alt_data_end+0xf800af08>
1000af5c:	bd800015 	stw	r22,0(r23)
1000af60:	d8c00017 	ldw	r3,0(sp)
1000af64:	94800104 	addi	r18,r18,4
1000af68:	18c00104 	addi	r3,r3,4
1000af6c:	d8c00015 	stw	r3,0(sp)
1000af70:	d8c00317 	ldw	r3,12(sp)
1000af74:	90ffbf36 	bltu	r18,r3,1000ae74 <__alt_data_end+0xf800ae74>
1000af78:	d8c00117 	ldw	r3,4(sp)
1000af7c:	00c00c0e 	bge	zero,r3,1000afb0 <__multiply+0x21c>
1000af80:	d8c00217 	ldw	r3,8(sp)
1000af84:	18bfff17 	ldw	r2,-4(r3)
1000af88:	1d7fff04 	addi	r21,r3,-4
1000af8c:	10000326 	beq	r2,zero,1000af9c <__multiply+0x208>
1000af90:	00000706 	br	1000afb0 <__multiply+0x21c>
1000af94:	a8800017 	ldw	r2,0(r21)
1000af98:	1000051e 	bne	r2,zero,1000afb0 <__multiply+0x21c>
1000af9c:	d8c00117 	ldw	r3,4(sp)
1000afa0:	ad7fff04 	addi	r21,r21,-4
1000afa4:	18ffffc4 	addi	r3,r3,-1
1000afa8:	d8c00115 	stw	r3,4(sp)
1000afac:	183ff91e 	bne	r3,zero,1000af94 <__alt_data_end+0xf800af94>
1000afb0:	d8800517 	ldw	r2,20(sp)
1000afb4:	d8c00117 	ldw	r3,4(sp)
1000afb8:	10c00415 	stw	r3,16(r2)
1000afbc:	dfc00f17 	ldw	ra,60(sp)
1000afc0:	df000e17 	ldw	fp,56(sp)
1000afc4:	ddc00d17 	ldw	r23,52(sp)
1000afc8:	dd800c17 	ldw	r22,48(sp)
1000afcc:	dd400b17 	ldw	r21,44(sp)
1000afd0:	dd000a17 	ldw	r20,40(sp)
1000afd4:	dcc00917 	ldw	r19,36(sp)
1000afd8:	dc800817 	ldw	r18,32(sp)
1000afdc:	dc400717 	ldw	r17,28(sp)
1000afe0:	dc000617 	ldw	r16,24(sp)
1000afe4:	dec01004 	addi	sp,sp,64
1000afe8:	f800283a 	ret

1000afec <__pow5mult>:
1000afec:	defffb04 	addi	sp,sp,-20
1000aff0:	dcc00315 	stw	r19,12(sp)
1000aff4:	dc800215 	stw	r18,8(sp)
1000aff8:	dc000015 	stw	r16,0(sp)
1000affc:	dfc00415 	stw	ra,16(sp)
1000b000:	dc400115 	stw	r17,4(sp)
1000b004:	308000cc 	andi	r2,r6,3
1000b008:	3021883a 	mov	r16,r6
1000b00c:	2027883a 	mov	r19,r4
1000b010:	2825883a 	mov	r18,r5
1000b014:	10002e1e 	bne	r2,zero,1000b0d0 <__pow5mult+0xe4>
1000b018:	8021d0ba 	srai	r16,r16,2
1000b01c:	80001a26 	beq	r16,zero,1000b088 <__pow5mult+0x9c>
1000b020:	9c401217 	ldw	r17,72(r19)
1000b024:	8800061e 	bne	r17,zero,1000b040 <__pow5mult+0x54>
1000b028:	00003406 	br	1000b0fc <__pow5mult+0x110>
1000b02c:	8021d07a 	srai	r16,r16,1
1000b030:	80001526 	beq	r16,zero,1000b088 <__pow5mult+0x9c>
1000b034:	88c00017 	ldw	r3,0(r17)
1000b038:	18001b26 	beq	r3,zero,1000b0a8 <__pow5mult+0xbc>
1000b03c:	1823883a 	mov	r17,r3
1000b040:	80c0004c 	andi	r3,r16,1
1000b044:	183ff926 	beq	r3,zero,1000b02c <__alt_data_end+0xf800b02c>
1000b048:	900b883a 	mov	r5,r18
1000b04c:	880d883a 	mov	r6,r17
1000b050:	9809883a 	mov	r4,r19
1000b054:	000ad940 	call	1000ad94 <__multiply>
1000b058:	90001b26 	beq	r18,zero,1000b0c8 <__pow5mult+0xdc>
1000b05c:	91000117 	ldw	r4,4(r18)
1000b060:	98c01317 	ldw	r3,76(r19)
1000b064:	8021d07a 	srai	r16,r16,1
1000b068:	2109883a 	add	r4,r4,r4
1000b06c:	2109883a 	add	r4,r4,r4
1000b070:	1907883a 	add	r3,r3,r4
1000b074:	19000017 	ldw	r4,0(r3)
1000b078:	91000015 	stw	r4,0(r18)
1000b07c:	1c800015 	stw	r18,0(r3)
1000b080:	1025883a 	mov	r18,r2
1000b084:	803feb1e 	bne	r16,zero,1000b034 <__alt_data_end+0xf800b034>
1000b088:	9005883a 	mov	r2,r18
1000b08c:	dfc00417 	ldw	ra,16(sp)
1000b090:	dcc00317 	ldw	r19,12(sp)
1000b094:	dc800217 	ldw	r18,8(sp)
1000b098:	dc400117 	ldw	r17,4(sp)
1000b09c:	dc000017 	ldw	r16,0(sp)
1000b0a0:	dec00504 	addi	sp,sp,20
1000b0a4:	f800283a 	ret
1000b0a8:	880b883a 	mov	r5,r17
1000b0ac:	880d883a 	mov	r6,r17
1000b0b0:	9809883a 	mov	r4,r19
1000b0b4:	000ad940 	call	1000ad94 <__multiply>
1000b0b8:	88800015 	stw	r2,0(r17)
1000b0bc:	10000015 	stw	zero,0(r2)
1000b0c0:	1023883a 	mov	r17,r2
1000b0c4:	003fde06 	br	1000b040 <__alt_data_end+0xf800b040>
1000b0c8:	1025883a 	mov	r18,r2
1000b0cc:	003fd706 	br	1000b02c <__alt_data_end+0xf800b02c>
1000b0d0:	10bfffc4 	addi	r2,r2,-1
1000b0d4:	1085883a 	add	r2,r2,r2
1000b0d8:	00c40074 	movhi	r3,4097
1000b0dc:	18c21604 	addi	r3,r3,2136
1000b0e0:	1085883a 	add	r2,r2,r2
1000b0e4:	1885883a 	add	r2,r3,r2
1000b0e8:	11800017 	ldw	r6,0(r2)
1000b0ec:	000f883a 	mov	r7,zero
1000b0f0:	000a9f80 	call	1000a9f8 <__multadd>
1000b0f4:	1025883a 	mov	r18,r2
1000b0f8:	003fc706 	br	1000b018 <__alt_data_end+0xf800b018>
1000b0fc:	9809883a 	mov	r4,r19
1000b100:	01409c44 	movi	r5,625
1000b104:	000ad580 	call	1000ad58 <__i2b>
1000b108:	98801215 	stw	r2,72(r19)
1000b10c:	1023883a 	mov	r17,r2
1000b110:	10000015 	stw	zero,0(r2)
1000b114:	003fca06 	br	1000b040 <__alt_data_end+0xf800b040>

1000b118 <__lshift>:
1000b118:	defff904 	addi	sp,sp,-28
1000b11c:	dd400515 	stw	r21,20(sp)
1000b120:	dc400115 	stw	r17,4(sp)
1000b124:	2d400417 	ldw	r21,16(r5)
1000b128:	3023d17a 	srai	r17,r6,5
1000b12c:	28800217 	ldw	r2,8(r5)
1000b130:	dd000415 	stw	r20,16(sp)
1000b134:	8d6b883a 	add	r21,r17,r21
1000b138:	dcc00315 	stw	r19,12(sp)
1000b13c:	dc800215 	stw	r18,8(sp)
1000b140:	dc000015 	stw	r16,0(sp)
1000b144:	dfc00615 	stw	ra,24(sp)
1000b148:	ac000044 	addi	r16,r21,1
1000b14c:	2825883a 	mov	r18,r5
1000b150:	3029883a 	mov	r20,r6
1000b154:	2027883a 	mov	r19,r4
1000b158:	29400117 	ldw	r5,4(r5)
1000b15c:	1400030e 	bge	r2,r16,1000b16c <__lshift+0x54>
1000b160:	1085883a 	add	r2,r2,r2
1000b164:	29400044 	addi	r5,r5,1
1000b168:	143ffd16 	blt	r2,r16,1000b160 <__alt_data_end+0xf800b160>
1000b16c:	9809883a 	mov	r4,r19
1000b170:	000a9280 	call	1000a928 <_Balloc>
1000b174:	10c00504 	addi	r3,r2,20
1000b178:	0440090e 	bge	zero,r17,1000b1a0 <__lshift+0x88>
1000b17c:	000f883a 	mov	r7,zero
1000b180:	18000015 	stw	zero,0(r3)
1000b184:	39c00044 	addi	r7,r7,1
1000b188:	18c00104 	addi	r3,r3,4
1000b18c:	3c7ffc1e 	bne	r7,r17,1000b180 <__alt_data_end+0xf800b180>
1000b190:	38c00144 	addi	r3,r7,5
1000b194:	18c7883a 	add	r3,r3,r3
1000b198:	18c7883a 	add	r3,r3,r3
1000b19c:	10c7883a 	add	r3,r2,r3
1000b1a0:	92000417 	ldw	r8,16(r18)
1000b1a4:	a18007cc 	andi	r6,r20,31
1000b1a8:	91c00504 	addi	r7,r18,20
1000b1ac:	42000144 	addi	r8,r8,5
1000b1b0:	4211883a 	add	r8,r8,r8
1000b1b4:	4211883a 	add	r8,r8,r8
1000b1b8:	9211883a 	add	r8,r18,r8
1000b1bc:	30002226 	beq	r6,zero,1000b248 <__lshift+0x130>
1000b1c0:	02800804 	movi	r10,32
1000b1c4:	5195c83a 	sub	r10,r10,r6
1000b1c8:	000b883a 	mov	r5,zero
1000b1cc:	3a400017 	ldw	r9,0(r7)
1000b1d0:	18c00104 	addi	r3,r3,4
1000b1d4:	39c00104 	addi	r7,r7,4
1000b1d8:	4992983a 	sll	r9,r9,r6
1000b1dc:	2a4ab03a 	or	r5,r5,r9
1000b1e0:	197fff15 	stw	r5,-4(r3)
1000b1e4:	397fff17 	ldw	r5,-4(r7)
1000b1e8:	2a8ad83a 	srl	r5,r5,r10
1000b1ec:	3a3ff736 	bltu	r7,r8,1000b1cc <__alt_data_end+0xf800b1cc>
1000b1f0:	19400015 	stw	r5,0(r3)
1000b1f4:	28000126 	beq	r5,zero,1000b1fc <__lshift+0xe4>
1000b1f8:	ac000084 	addi	r16,r21,2
1000b1fc:	91000117 	ldw	r4,4(r18)
1000b200:	98c01317 	ldw	r3,76(r19)
1000b204:	843fffc4 	addi	r16,r16,-1
1000b208:	2109883a 	add	r4,r4,r4
1000b20c:	2109883a 	add	r4,r4,r4
1000b210:	1907883a 	add	r3,r3,r4
1000b214:	19000017 	ldw	r4,0(r3)
1000b218:	14000415 	stw	r16,16(r2)
1000b21c:	91000015 	stw	r4,0(r18)
1000b220:	1c800015 	stw	r18,0(r3)
1000b224:	dfc00617 	ldw	ra,24(sp)
1000b228:	dd400517 	ldw	r21,20(sp)
1000b22c:	dd000417 	ldw	r20,16(sp)
1000b230:	dcc00317 	ldw	r19,12(sp)
1000b234:	dc800217 	ldw	r18,8(sp)
1000b238:	dc400117 	ldw	r17,4(sp)
1000b23c:	dc000017 	ldw	r16,0(sp)
1000b240:	dec00704 	addi	sp,sp,28
1000b244:	f800283a 	ret
1000b248:	39400017 	ldw	r5,0(r7)
1000b24c:	18c00104 	addi	r3,r3,4
1000b250:	39c00104 	addi	r7,r7,4
1000b254:	197fff15 	stw	r5,-4(r3)
1000b258:	3a3fe82e 	bgeu	r7,r8,1000b1fc <__alt_data_end+0xf800b1fc>
1000b25c:	39400017 	ldw	r5,0(r7)
1000b260:	18c00104 	addi	r3,r3,4
1000b264:	39c00104 	addi	r7,r7,4
1000b268:	197fff15 	stw	r5,-4(r3)
1000b26c:	3a3ff636 	bltu	r7,r8,1000b248 <__alt_data_end+0xf800b248>
1000b270:	003fe206 	br	1000b1fc <__alt_data_end+0xf800b1fc>

1000b274 <__mcmp>:
1000b274:	20800417 	ldw	r2,16(r4)
1000b278:	28c00417 	ldw	r3,16(r5)
1000b27c:	10c5c83a 	sub	r2,r2,r3
1000b280:	10000f1e 	bne	r2,zero,1000b2c0 <__mcmp+0x4c>
1000b284:	18c00144 	addi	r3,r3,5
1000b288:	18c7883a 	add	r3,r3,r3
1000b28c:	18c7883a 	add	r3,r3,r3
1000b290:	21c00504 	addi	r7,r4,20
1000b294:	28cb883a 	add	r5,r5,r3
1000b298:	20c9883a 	add	r4,r4,r3
1000b29c:	213fff04 	addi	r4,r4,-4
1000b2a0:	297fff04 	addi	r5,r5,-4
1000b2a4:	21800017 	ldw	r6,0(r4)
1000b2a8:	28c00017 	ldw	r3,0(r5)
1000b2ac:	30c0021e 	bne	r6,r3,1000b2b8 <__mcmp+0x44>
1000b2b0:	393ffa36 	bltu	r7,r4,1000b29c <__alt_data_end+0xf800b29c>
1000b2b4:	f800283a 	ret
1000b2b8:	30c00236 	bltu	r6,r3,1000b2c4 <__mcmp+0x50>
1000b2bc:	00800044 	movi	r2,1
1000b2c0:	f800283a 	ret
1000b2c4:	00bfffc4 	movi	r2,-1
1000b2c8:	f800283a 	ret

1000b2cc <__mdiff>:
1000b2cc:	defffb04 	addi	sp,sp,-20
1000b2d0:	dc000015 	stw	r16,0(sp)
1000b2d4:	2821883a 	mov	r16,r5
1000b2d8:	dc800215 	stw	r18,8(sp)
1000b2dc:	300b883a 	mov	r5,r6
1000b2e0:	2025883a 	mov	r18,r4
1000b2e4:	8009883a 	mov	r4,r16
1000b2e8:	dc400115 	stw	r17,4(sp)
1000b2ec:	dfc00415 	stw	ra,16(sp)
1000b2f0:	dcc00315 	stw	r19,12(sp)
1000b2f4:	3023883a 	mov	r17,r6
1000b2f8:	000b2740 	call	1000b274 <__mcmp>
1000b2fc:	10005026 	beq	r2,zero,1000b440 <__mdiff+0x174>
1000b300:	10004a16 	blt	r2,zero,1000b42c <__mdiff+0x160>
1000b304:	0027883a 	mov	r19,zero
1000b308:	81400117 	ldw	r5,4(r16)
1000b30c:	9009883a 	mov	r4,r18
1000b310:	000a9280 	call	1000a928 <_Balloc>
1000b314:	82400417 	ldw	r9,16(r16)
1000b318:	89800417 	ldw	r6,16(r17)
1000b31c:	14c00315 	stw	r19,12(r2)
1000b320:	4b800144 	addi	r14,r9,5
1000b324:	31800144 	addi	r6,r6,5
1000b328:	739d883a 	add	r14,r14,r14
1000b32c:	318d883a 	add	r6,r6,r6
1000b330:	739d883a 	add	r14,r14,r14
1000b334:	318d883a 	add	r6,r6,r6
1000b338:	81c00504 	addi	r7,r16,20
1000b33c:	839d883a 	add	r14,r16,r14
1000b340:	8a000504 	addi	r8,r17,20
1000b344:	898d883a 	add	r6,r17,r6
1000b348:	10c00504 	addi	r3,r2,20
1000b34c:	0009883a 	mov	r4,zero
1000b350:	3b000017 	ldw	r12,0(r7)
1000b354:	42c00017 	ldw	r11,0(r8)
1000b358:	42000104 	addi	r8,r8,4
1000b35c:	62bfffcc 	andi	r10,r12,65535
1000b360:	5b7fffcc 	andi	r13,r11,65535
1000b364:	5109883a 	add	r4,r10,r4
1000b368:	2355c83a 	sub	r10,r4,r13
1000b36c:	5816d43a 	srli	r11,r11,16
1000b370:	6008d43a 	srli	r4,r12,16
1000b374:	501bd43a 	srai	r13,r10,16
1000b378:	1a80000d 	sth	r10,0(r3)
1000b37c:	22c9c83a 	sub	r4,r4,r11
1000b380:	2349883a 	add	r4,r4,r13
1000b384:	1900008d 	sth	r4,2(r3)
1000b388:	39c00104 	addi	r7,r7,4
1000b38c:	2009d43a 	srai	r4,r4,16
1000b390:	18c00104 	addi	r3,r3,4
1000b394:	41bfee36 	bltu	r8,r6,1000b350 <__alt_data_end+0xf800b350>
1000b398:	180b883a 	mov	r5,r3
1000b39c:	3815883a 	mov	r10,r7
1000b3a0:	3b80132e 	bgeu	r7,r14,1000b3f0 <__mdiff+0x124>
1000b3a4:	3a000017 	ldw	r8,0(r7)
1000b3a8:	18c00104 	addi	r3,r3,4
1000b3ac:	39c00104 	addi	r7,r7,4
1000b3b0:	41bfffcc 	andi	r6,r8,65535
1000b3b4:	310d883a 	add	r6,r6,r4
1000b3b8:	3009d43a 	srai	r4,r6,16
1000b3bc:	4010d43a 	srli	r8,r8,16
1000b3c0:	19bfff0d 	sth	r6,-4(r3)
1000b3c4:	2209883a 	add	r4,r4,r8
1000b3c8:	193fff8d 	sth	r4,-2(r3)
1000b3cc:	2009d43a 	srai	r4,r4,16
1000b3d0:	3bbff436 	bltu	r7,r14,1000b3a4 <__alt_data_end+0xf800b3a4>
1000b3d4:	0286303a 	nor	r3,zero,r10
1000b3d8:	1b87883a 	add	r3,r3,r14
1000b3dc:	1806d0ba 	srli	r3,r3,2
1000b3e0:	18c00044 	addi	r3,r3,1
1000b3e4:	18c7883a 	add	r3,r3,r3
1000b3e8:	18c7883a 	add	r3,r3,r3
1000b3ec:	28c7883a 	add	r3,r5,r3
1000b3f0:	193fff17 	ldw	r4,-4(r3)
1000b3f4:	18ffff04 	addi	r3,r3,-4
1000b3f8:	2000041e 	bne	r4,zero,1000b40c <__mdiff+0x140>
1000b3fc:	18ffff04 	addi	r3,r3,-4
1000b400:	19000017 	ldw	r4,0(r3)
1000b404:	4a7fffc4 	addi	r9,r9,-1
1000b408:	203ffc26 	beq	r4,zero,1000b3fc <__alt_data_end+0xf800b3fc>
1000b40c:	12400415 	stw	r9,16(r2)
1000b410:	dfc00417 	ldw	ra,16(sp)
1000b414:	dcc00317 	ldw	r19,12(sp)
1000b418:	dc800217 	ldw	r18,8(sp)
1000b41c:	dc400117 	ldw	r17,4(sp)
1000b420:	dc000017 	ldw	r16,0(sp)
1000b424:	dec00504 	addi	sp,sp,20
1000b428:	f800283a 	ret
1000b42c:	8005883a 	mov	r2,r16
1000b430:	04c00044 	movi	r19,1
1000b434:	8821883a 	mov	r16,r17
1000b438:	1023883a 	mov	r17,r2
1000b43c:	003fb206 	br	1000b308 <__alt_data_end+0xf800b308>
1000b440:	9009883a 	mov	r4,r18
1000b444:	000b883a 	mov	r5,zero
1000b448:	000a9280 	call	1000a928 <_Balloc>
1000b44c:	00c00044 	movi	r3,1
1000b450:	10c00415 	stw	r3,16(r2)
1000b454:	10000515 	stw	zero,20(r2)
1000b458:	dfc00417 	ldw	ra,16(sp)
1000b45c:	dcc00317 	ldw	r19,12(sp)
1000b460:	dc800217 	ldw	r18,8(sp)
1000b464:	dc400117 	ldw	r17,4(sp)
1000b468:	dc000017 	ldw	r16,0(sp)
1000b46c:	dec00504 	addi	sp,sp,20
1000b470:	f800283a 	ret

1000b474 <__ulp>:
1000b474:	295ffc2c 	andhi	r5,r5,32752
1000b478:	00bf3034 	movhi	r2,64704
1000b47c:	2887883a 	add	r3,r5,r2
1000b480:	00c0020e 	bge	zero,r3,1000b48c <__ulp+0x18>
1000b484:	0005883a 	mov	r2,zero
1000b488:	f800283a 	ret
1000b48c:	00c7c83a 	sub	r3,zero,r3
1000b490:	1805d53a 	srai	r2,r3,20
1000b494:	00c004c4 	movi	r3,19
1000b498:	18800a0e 	bge	r3,r2,1000b4c4 <__ulp+0x50>
1000b49c:	01000c84 	movi	r4,50
1000b4a0:	0007883a 	mov	r3,zero
1000b4a4:	20800516 	blt	r4,r2,1000b4bc <__ulp+0x48>
1000b4a8:	01000cc4 	movi	r4,51
1000b4ac:	2085c83a 	sub	r2,r4,r2
1000b4b0:	01000044 	movi	r4,1
1000b4b4:	2084983a 	sll	r2,r4,r2
1000b4b8:	f800283a 	ret
1000b4bc:	00800044 	movi	r2,1
1000b4c0:	f800283a 	ret
1000b4c4:	00c00234 	movhi	r3,8
1000b4c8:	1887d83a 	sra	r3,r3,r2
1000b4cc:	0005883a 	mov	r2,zero
1000b4d0:	f800283a 	ret

1000b4d4 <__b2d>:
1000b4d4:	defffa04 	addi	sp,sp,-24
1000b4d8:	dc000015 	stw	r16,0(sp)
1000b4dc:	24000417 	ldw	r16,16(r4)
1000b4e0:	dc400115 	stw	r17,4(sp)
1000b4e4:	dcc00315 	stw	r19,12(sp)
1000b4e8:	84000144 	addi	r16,r16,5
1000b4ec:	8421883a 	add	r16,r16,r16
1000b4f0:	8421883a 	add	r16,r16,r16
1000b4f4:	2421883a 	add	r16,r4,r16
1000b4f8:	847fff17 	ldw	r17,-4(r16)
1000b4fc:	24c00504 	addi	r19,r4,20
1000b500:	dd000415 	stw	r20,16(sp)
1000b504:	8809883a 	mov	r4,r17
1000b508:	dc800215 	stw	r18,8(sp)
1000b50c:	2829883a 	mov	r20,r5
1000b510:	dfc00515 	stw	ra,20(sp)
1000b514:	000ac400 	call	1000ac40 <__hi0bits>
1000b518:	00c00804 	movi	r3,32
1000b51c:	1887c83a 	sub	r3,r3,r2
1000b520:	a0c00015 	stw	r3,0(r20)
1000b524:	00c00284 	movi	r3,10
1000b528:	84bfff04 	addi	r18,r16,-4
1000b52c:	18801216 	blt	r3,r2,1000b578 <__b2d+0xa4>
1000b530:	010002c4 	movi	r4,11
1000b534:	2089c83a 	sub	r4,r4,r2
1000b538:	8906d83a 	srl	r3,r17,r4
1000b53c:	18cffc34 	orhi	r3,r3,16368
1000b540:	9c80322e 	bgeu	r19,r18,1000b60c <__b2d+0x138>
1000b544:	817ffe17 	ldw	r5,-8(r16)
1000b548:	2908d83a 	srl	r4,r5,r4
1000b54c:	10800544 	addi	r2,r2,21
1000b550:	88a2983a 	sll	r17,r17,r2
1000b554:	2444b03a 	or	r2,r4,r17
1000b558:	dfc00517 	ldw	ra,20(sp)
1000b55c:	dd000417 	ldw	r20,16(sp)
1000b560:	dcc00317 	ldw	r19,12(sp)
1000b564:	dc800217 	ldw	r18,8(sp)
1000b568:	dc400117 	ldw	r17,4(sp)
1000b56c:	dc000017 	ldw	r16,0(sp)
1000b570:	dec00604 	addi	sp,sp,24
1000b574:	f800283a 	ret
1000b578:	9c801636 	bltu	r19,r18,1000b5d4 <__b2d+0x100>
1000b57c:	113ffd44 	addi	r4,r2,-11
1000b580:	000b883a 	mov	r5,zero
1000b584:	20001726 	beq	r4,zero,1000b5e4 <__b2d+0x110>
1000b588:	00c00ac4 	movi	r3,43
1000b58c:	1885c83a 	sub	r2,r3,r2
1000b590:	8906983a 	sll	r3,r17,r4
1000b594:	288cd83a 	srl	r6,r5,r2
1000b598:	18cffc34 	orhi	r3,r3,16368
1000b59c:	1986b03a 	or	r3,r3,r6
1000b5a0:	9c801c2e 	bgeu	r19,r18,1000b614 <__b2d+0x140>
1000b5a4:	91bfff17 	ldw	r6,-4(r18)
1000b5a8:	3084d83a 	srl	r2,r6,r2
1000b5ac:	2908983a 	sll	r4,r5,r4
1000b5b0:	1104b03a 	or	r2,r2,r4
1000b5b4:	dfc00517 	ldw	ra,20(sp)
1000b5b8:	dd000417 	ldw	r20,16(sp)
1000b5bc:	dcc00317 	ldw	r19,12(sp)
1000b5c0:	dc800217 	ldw	r18,8(sp)
1000b5c4:	dc400117 	ldw	r17,4(sp)
1000b5c8:	dc000017 	ldw	r16,0(sp)
1000b5cc:	dec00604 	addi	sp,sp,24
1000b5d0:	f800283a 	ret
1000b5d4:	113ffd44 	addi	r4,r2,-11
1000b5d8:	84bffe04 	addi	r18,r16,-8
1000b5dc:	817ffe17 	ldw	r5,-8(r16)
1000b5e0:	203fe91e 	bne	r4,zero,1000b588 <__alt_data_end+0xf800b588>
1000b5e4:	88cffc34 	orhi	r3,r17,16368
1000b5e8:	2805883a 	mov	r2,r5
1000b5ec:	dfc00517 	ldw	ra,20(sp)
1000b5f0:	dd000417 	ldw	r20,16(sp)
1000b5f4:	dcc00317 	ldw	r19,12(sp)
1000b5f8:	dc800217 	ldw	r18,8(sp)
1000b5fc:	dc400117 	ldw	r17,4(sp)
1000b600:	dc000017 	ldw	r16,0(sp)
1000b604:	dec00604 	addi	sp,sp,24
1000b608:	f800283a 	ret
1000b60c:	0009883a 	mov	r4,zero
1000b610:	003fce06 	br	1000b54c <__alt_data_end+0xf800b54c>
1000b614:	0005883a 	mov	r2,zero
1000b618:	003fe406 	br	1000b5ac <__alt_data_end+0xf800b5ac>

1000b61c <__d2b>:
1000b61c:	defff804 	addi	sp,sp,-32
1000b620:	dc400315 	stw	r17,12(sp)
1000b624:	3023883a 	mov	r17,r6
1000b628:	dc800415 	stw	r18,16(sp)
1000b62c:	8824907a 	slli	r18,r17,1
1000b630:	dcc00515 	stw	r19,20(sp)
1000b634:	2827883a 	mov	r19,r5
1000b638:	9024d57a 	srli	r18,r18,21
1000b63c:	01400044 	movi	r5,1
1000b640:	dd000615 	stw	r20,24(sp)
1000b644:	dc000215 	stw	r16,8(sp)
1000b648:	dfc00715 	stw	ra,28(sp)
1000b64c:	3829883a 	mov	r20,r7
1000b650:	000a9280 	call	1000a928 <_Balloc>
1000b654:	1021883a 	mov	r16,r2
1000b658:	00800434 	movhi	r2,16
1000b65c:	10bfffc4 	addi	r2,r2,-1
1000b660:	88a2703a 	and	r17,r17,r2
1000b664:	90000126 	beq	r18,zero,1000b66c <__d2b+0x50>
1000b668:	8c400434 	orhi	r17,r17,16
1000b66c:	dc400015 	stw	r17,0(sp)
1000b670:	98002226 	beq	r19,zero,1000b6fc <__d2b+0xe0>
1000b674:	d9000104 	addi	r4,sp,4
1000b678:	dcc00115 	stw	r19,4(sp)
1000b67c:	000aca80 	call	1000aca8 <__lo0bits>
1000b680:	d8c00017 	ldw	r3,0(sp)
1000b684:	10002d1e 	bne	r2,zero,1000b73c <__d2b+0x120>
1000b688:	d9000117 	ldw	r4,4(sp)
1000b68c:	81000515 	stw	r4,20(r16)
1000b690:	1823003a 	cmpeq	r17,r3,zero
1000b694:	01000084 	movi	r4,2
1000b698:	2463c83a 	sub	r17,r4,r17
1000b69c:	80c00615 	stw	r3,24(r16)
1000b6a0:	84400415 	stw	r17,16(r16)
1000b6a4:	90001d1e 	bne	r18,zero,1000b71c <__d2b+0x100>
1000b6a8:	88c00104 	addi	r3,r17,4
1000b6ac:	18c7883a 	add	r3,r3,r3
1000b6b0:	18c7883a 	add	r3,r3,r3
1000b6b4:	80c7883a 	add	r3,r16,r3
1000b6b8:	19000017 	ldw	r4,0(r3)
1000b6bc:	10bef384 	addi	r2,r2,-1074
1000b6c0:	a0800015 	stw	r2,0(r20)
1000b6c4:	000ac400 	call	1000ac40 <__hi0bits>
1000b6c8:	8822917a 	slli	r17,r17,5
1000b6cc:	d8c00817 	ldw	r3,32(sp)
1000b6d0:	8885c83a 	sub	r2,r17,r2
1000b6d4:	18800015 	stw	r2,0(r3)
1000b6d8:	8005883a 	mov	r2,r16
1000b6dc:	dfc00717 	ldw	ra,28(sp)
1000b6e0:	dd000617 	ldw	r20,24(sp)
1000b6e4:	dcc00517 	ldw	r19,20(sp)
1000b6e8:	dc800417 	ldw	r18,16(sp)
1000b6ec:	dc400317 	ldw	r17,12(sp)
1000b6f0:	dc000217 	ldw	r16,8(sp)
1000b6f4:	dec00804 	addi	sp,sp,32
1000b6f8:	f800283a 	ret
1000b6fc:	d809883a 	mov	r4,sp
1000b700:	000aca80 	call	1000aca8 <__lo0bits>
1000b704:	d8c00017 	ldw	r3,0(sp)
1000b708:	04400044 	movi	r17,1
1000b70c:	84400415 	stw	r17,16(r16)
1000b710:	80c00515 	stw	r3,20(r16)
1000b714:	10800804 	addi	r2,r2,32
1000b718:	903fe326 	beq	r18,zero,1000b6a8 <__alt_data_end+0xf800b6a8>
1000b71c:	00c00d44 	movi	r3,53
1000b720:	94bef344 	addi	r18,r18,-1075
1000b724:	90a5883a 	add	r18,r18,r2
1000b728:	1885c83a 	sub	r2,r3,r2
1000b72c:	d8c00817 	ldw	r3,32(sp)
1000b730:	a4800015 	stw	r18,0(r20)
1000b734:	18800015 	stw	r2,0(r3)
1000b738:	003fe706 	br	1000b6d8 <__alt_data_end+0xf800b6d8>
1000b73c:	01000804 	movi	r4,32
1000b740:	2089c83a 	sub	r4,r4,r2
1000b744:	1908983a 	sll	r4,r3,r4
1000b748:	d9400117 	ldw	r5,4(sp)
1000b74c:	1886d83a 	srl	r3,r3,r2
1000b750:	2148b03a 	or	r4,r4,r5
1000b754:	81000515 	stw	r4,20(r16)
1000b758:	d8c00015 	stw	r3,0(sp)
1000b75c:	003fcc06 	br	1000b690 <__alt_data_end+0xf800b690>

1000b760 <__ratio>:
1000b760:	defff904 	addi	sp,sp,-28
1000b764:	dc400315 	stw	r17,12(sp)
1000b768:	2823883a 	mov	r17,r5
1000b76c:	d9400104 	addi	r5,sp,4
1000b770:	dfc00615 	stw	ra,24(sp)
1000b774:	dcc00515 	stw	r19,20(sp)
1000b778:	dc800415 	stw	r18,16(sp)
1000b77c:	2027883a 	mov	r19,r4
1000b780:	dc000215 	stw	r16,8(sp)
1000b784:	000b4d40 	call	1000b4d4 <__b2d>
1000b788:	8809883a 	mov	r4,r17
1000b78c:	d80b883a 	mov	r5,sp
1000b790:	1025883a 	mov	r18,r2
1000b794:	1821883a 	mov	r16,r3
1000b798:	000b4d40 	call	1000b4d4 <__b2d>
1000b79c:	99400417 	ldw	r5,16(r19)
1000b7a0:	89000417 	ldw	r4,16(r17)
1000b7a4:	d9800117 	ldw	r6,4(sp)
1000b7a8:	2909c83a 	sub	r4,r5,r4
1000b7ac:	d9400017 	ldw	r5,0(sp)
1000b7b0:	2008917a 	slli	r4,r4,5
1000b7b4:	314bc83a 	sub	r5,r6,r5
1000b7b8:	290b883a 	add	r5,r5,r4
1000b7bc:	01400e0e 	bge	zero,r5,1000b7f8 <__ratio+0x98>
1000b7c0:	280a953a 	slli	r5,r5,20
1000b7c4:	2c21883a 	add	r16,r5,r16
1000b7c8:	9009883a 	mov	r4,r18
1000b7cc:	800b883a 	mov	r5,r16
1000b7d0:	100d883a 	mov	r6,r2
1000b7d4:	180f883a 	mov	r7,r3
1000b7d8:	00045bc0 	call	100045bc <__divdf3>
1000b7dc:	dfc00617 	ldw	ra,24(sp)
1000b7e0:	dcc00517 	ldw	r19,20(sp)
1000b7e4:	dc800417 	ldw	r18,16(sp)
1000b7e8:	dc400317 	ldw	r17,12(sp)
1000b7ec:	dc000217 	ldw	r16,8(sp)
1000b7f0:	dec00704 	addi	sp,sp,28
1000b7f4:	f800283a 	ret
1000b7f8:	280a953a 	slli	r5,r5,20
1000b7fc:	1947c83a 	sub	r3,r3,r5
1000b800:	003ff106 	br	1000b7c8 <__alt_data_end+0xf800b7c8>

1000b804 <_mprec_log10>:
1000b804:	defffe04 	addi	sp,sp,-8
1000b808:	dc000015 	stw	r16,0(sp)
1000b80c:	dfc00115 	stw	ra,4(sp)
1000b810:	008005c4 	movi	r2,23
1000b814:	2021883a 	mov	r16,r4
1000b818:	11000d0e 	bge	r2,r4,1000b850 <_mprec_log10+0x4c>
1000b81c:	0005883a 	mov	r2,zero
1000b820:	00cffc34 	movhi	r3,16368
1000b824:	843fffc4 	addi	r16,r16,-1
1000b828:	1009883a 	mov	r4,r2
1000b82c:	180b883a 	mov	r5,r3
1000b830:	000d883a 	mov	r6,zero
1000b834:	01d00934 	movhi	r7,16420
1000b838:	00042d80 	call	100042d8 <__muldf3>
1000b83c:	803ff91e 	bne	r16,zero,1000b824 <__alt_data_end+0xf800b824>
1000b840:	dfc00117 	ldw	ra,4(sp)
1000b844:	dc000017 	ldw	r16,0(sp)
1000b848:	dec00204 	addi	sp,sp,8
1000b84c:	f800283a 	ret
1000b850:	202090fa 	slli	r16,r4,3
1000b854:	00840074 	movhi	r2,4097
1000b858:	1081e404 	addi	r2,r2,1936
1000b85c:	1421883a 	add	r16,r2,r16
1000b860:	80800017 	ldw	r2,0(r16)
1000b864:	80c00117 	ldw	r3,4(r16)
1000b868:	dfc00117 	ldw	ra,4(sp)
1000b86c:	dc000017 	ldw	r16,0(sp)
1000b870:	dec00204 	addi	sp,sp,8
1000b874:	f800283a 	ret

1000b878 <__copybits>:
1000b878:	297fffc4 	addi	r5,r5,-1
1000b87c:	31c00417 	ldw	r7,16(r6)
1000b880:	2811d17a 	srai	r8,r5,5
1000b884:	30800504 	addi	r2,r6,20
1000b888:	39c00144 	addi	r7,r7,5
1000b88c:	42000044 	addi	r8,r8,1
1000b890:	39cf883a 	add	r7,r7,r7
1000b894:	4211883a 	add	r8,r8,r8
1000b898:	39cf883a 	add	r7,r7,r7
1000b89c:	4211883a 	add	r8,r8,r8
1000b8a0:	31cf883a 	add	r7,r6,r7
1000b8a4:	2211883a 	add	r8,r4,r8
1000b8a8:	11c00d2e 	bgeu	r2,r7,1000b8e0 <__copybits+0x68>
1000b8ac:	2007883a 	mov	r3,r4
1000b8b0:	11400017 	ldw	r5,0(r2)
1000b8b4:	18c00104 	addi	r3,r3,4
1000b8b8:	10800104 	addi	r2,r2,4
1000b8bc:	197fff15 	stw	r5,-4(r3)
1000b8c0:	11fffb36 	bltu	r2,r7,1000b8b0 <__alt_data_end+0xf800b8b0>
1000b8c4:	3985c83a 	sub	r2,r7,r6
1000b8c8:	10bffac4 	addi	r2,r2,-21
1000b8cc:	1004d0ba 	srli	r2,r2,2
1000b8d0:	10800044 	addi	r2,r2,1
1000b8d4:	1085883a 	add	r2,r2,r2
1000b8d8:	1085883a 	add	r2,r2,r2
1000b8dc:	2089883a 	add	r4,r4,r2
1000b8e0:	2200032e 	bgeu	r4,r8,1000b8f0 <__copybits+0x78>
1000b8e4:	20000015 	stw	zero,0(r4)
1000b8e8:	21000104 	addi	r4,r4,4
1000b8ec:	223ffd36 	bltu	r4,r8,1000b8e4 <__alt_data_end+0xf800b8e4>
1000b8f0:	f800283a 	ret

1000b8f4 <__any_on>:
1000b8f4:	21800417 	ldw	r6,16(r4)
1000b8f8:	2805d17a 	srai	r2,r5,5
1000b8fc:	20c00504 	addi	r3,r4,20
1000b900:	30800f0e 	bge	r6,r2,1000b940 <__any_on+0x4c>
1000b904:	3005883a 	mov	r2,r6
1000b908:	10800144 	addi	r2,r2,5
1000b90c:	1085883a 	add	r2,r2,r2
1000b910:	1085883a 	add	r2,r2,r2
1000b914:	2089883a 	add	r4,r4,r2
1000b918:	1900152e 	bgeu	r3,r4,1000b970 <__any_on+0x7c>
1000b91c:	20bfff17 	ldw	r2,-4(r4)
1000b920:	213fff04 	addi	r4,r4,-4
1000b924:	1000041e 	bne	r2,zero,1000b938 <__any_on+0x44>
1000b928:	1900112e 	bgeu	r3,r4,1000b970 <__any_on+0x7c>
1000b92c:	213fff04 	addi	r4,r4,-4
1000b930:	20800017 	ldw	r2,0(r4)
1000b934:	103ffc26 	beq	r2,zero,1000b928 <__alt_data_end+0xf800b928>
1000b938:	00800044 	movi	r2,1
1000b93c:	f800283a 	ret
1000b940:	11bff10e 	bge	r2,r6,1000b908 <__alt_data_end+0xf800b908>
1000b944:	294007cc 	andi	r5,r5,31
1000b948:	283fef26 	beq	r5,zero,1000b908 <__alt_data_end+0xf800b908>
1000b94c:	11800144 	addi	r6,r2,5
1000b950:	318d883a 	add	r6,r6,r6
1000b954:	318d883a 	add	r6,r6,r6
1000b958:	218d883a 	add	r6,r4,r6
1000b95c:	31800017 	ldw	r6,0(r6)
1000b960:	314ed83a 	srl	r7,r6,r5
1000b964:	394a983a 	sll	r5,r7,r5
1000b968:	29bff31e 	bne	r5,r6,1000b938 <__alt_data_end+0xf800b938>
1000b96c:	003fe606 	br	1000b908 <__alt_data_end+0xf800b908>
1000b970:	0005883a 	mov	r2,zero
1000b974:	f800283a 	ret

1000b978 <_realloc_r>:
1000b978:	defff504 	addi	sp,sp,-44
1000b97c:	dd400615 	stw	r21,24(sp)
1000b980:	dc800315 	stw	r18,12(sp)
1000b984:	dc000115 	stw	r16,4(sp)
1000b988:	dfc00a15 	stw	ra,40(sp)
1000b98c:	df000915 	stw	fp,36(sp)
1000b990:	ddc00815 	stw	r23,32(sp)
1000b994:	dd800715 	stw	r22,28(sp)
1000b998:	dd000515 	stw	r20,20(sp)
1000b99c:	dcc00415 	stw	r19,16(sp)
1000b9a0:	dc400215 	stw	r17,8(sp)
1000b9a4:	2821883a 	mov	r16,r5
1000b9a8:	202b883a 	mov	r21,r4
1000b9ac:	3025883a 	mov	r18,r6
1000b9b0:	28009626 	beq	r5,zero,1000bc0c <_realloc_r+0x294>
1000b9b4:	000db800 	call	1000db80 <__malloc_lock>
1000b9b8:	80bfff17 	ldw	r2,-4(r16)
1000b9bc:	04ffff04 	movi	r19,-4
1000b9c0:	90c002c4 	addi	r3,r18,11
1000b9c4:	01000584 	movi	r4,22
1000b9c8:	85bffe04 	addi	r22,r16,-8
1000b9cc:	14e6703a 	and	r19,r2,r19
1000b9d0:	20c0372e 	bgeu	r4,r3,1000bab0 <_realloc_r+0x138>
1000b9d4:	047ffe04 	movi	r17,-8
1000b9d8:	1c62703a 	and	r17,r3,r17
1000b9dc:	8807883a 	mov	r3,r17
1000b9e0:	88005a16 	blt	r17,zero,1000bb4c <_realloc_r+0x1d4>
1000b9e4:	8c805936 	bltu	r17,r18,1000bb4c <_realloc_r+0x1d4>
1000b9e8:	98c0340e 	bge	r19,r3,1000babc <_realloc_r+0x144>
1000b9ec:	07040074 	movhi	fp,4097
1000b9f0:	e7032904 	addi	fp,fp,3236
1000b9f4:	e1400217 	ldw	r5,8(fp)
1000b9f8:	b4c9883a 	add	r4,r22,r19
1000b9fc:	29009026 	beq	r5,r4,1000bc40 <_realloc_r+0x2c8>
1000ba00:	21800117 	ldw	r6,4(r4)
1000ba04:	01ffff84 	movi	r7,-2
1000ba08:	31ce703a 	and	r7,r6,r7
1000ba0c:	21cf883a 	add	r7,r4,r7
1000ba10:	39c00117 	ldw	r7,4(r7)
1000ba14:	39c0004c 	andi	r7,r7,1
1000ba18:	38004326 	beq	r7,zero,1000bb28 <_realloc_r+0x1b0>
1000ba1c:	000d883a 	mov	r6,zero
1000ba20:	0009883a 	mov	r4,zero
1000ba24:	1080004c 	andi	r2,r2,1
1000ba28:	10005a1e 	bne	r2,zero,1000bb94 <_realloc_r+0x21c>
1000ba2c:	85fffe17 	ldw	r23,-8(r16)
1000ba30:	00bfff04 	movi	r2,-4
1000ba34:	b5efc83a 	sub	r23,r22,r23
1000ba38:	b9c00117 	ldw	r7,4(r23)
1000ba3c:	388e703a 	and	r7,r7,r2
1000ba40:	3ccf883a 	add	r7,r7,r19
1000ba44:	20005226 	beq	r4,zero,1000bb90 <_realloc_r+0x218>
1000ba48:	31e9883a 	add	r20,r6,r7
1000ba4c:	2140c726 	beq	r4,r5,1000bd6c <_realloc_r+0x3f4>
1000ba50:	a0c04f16 	blt	r20,r3,1000bb90 <_realloc_r+0x218>
1000ba54:	20800317 	ldw	r2,12(r4)
1000ba58:	20c00217 	ldw	r3,8(r4)
1000ba5c:	99bfff04 	addi	r6,r19,-4
1000ba60:	01000904 	movi	r4,36
1000ba64:	18800315 	stw	r2,12(r3)
1000ba68:	10c00215 	stw	r3,8(r2)
1000ba6c:	b8c00217 	ldw	r3,8(r23)
1000ba70:	b8800317 	ldw	r2,12(r23)
1000ba74:	bc800204 	addi	r18,r23,8
1000ba78:	18800315 	stw	r2,12(r3)
1000ba7c:	10c00215 	stw	r3,8(r2)
1000ba80:	2180ed36 	bltu	r4,r6,1000be38 <_realloc_r+0x4c0>
1000ba84:	008004c4 	movi	r2,19
1000ba88:	11809b2e 	bgeu	r2,r6,1000bcf8 <_realloc_r+0x380>
1000ba8c:	80800017 	ldw	r2,0(r16)
1000ba90:	b8800215 	stw	r2,8(r23)
1000ba94:	80800117 	ldw	r2,4(r16)
1000ba98:	b8800315 	stw	r2,12(r23)
1000ba9c:	008006c4 	movi	r2,27
1000baa0:	1180f936 	bltu	r2,r6,1000be88 <_realloc_r+0x510>
1000baa4:	b8800404 	addi	r2,r23,16
1000baa8:	80c00204 	addi	r3,r16,8
1000baac:	00009406 	br	1000bd00 <_realloc_r+0x388>
1000bab0:	00c00404 	movi	r3,16
1000bab4:	1823883a 	mov	r17,r3
1000bab8:	003fca06 	br	1000b9e4 <__alt_data_end+0xf800b9e4>
1000babc:	9829883a 	mov	r20,r19
1000bac0:	a447c83a 	sub	r3,r20,r17
1000bac4:	010003c4 	movi	r4,15
1000bac8:	1080004c 	andi	r2,r2,1
1000bacc:	20c02336 	bltu	r4,r3,1000bb5c <_realloc_r+0x1e4>
1000bad0:	1504b03a 	or	r2,r2,r20
1000bad4:	b0800115 	stw	r2,4(r22)
1000bad8:	b52d883a 	add	r22,r22,r20
1000badc:	b0800117 	ldw	r2,4(r22)
1000bae0:	10800054 	ori	r2,r2,1
1000bae4:	b0800115 	stw	r2,4(r22)
1000bae8:	a809883a 	mov	r4,r21
1000baec:	000dba00 	call	1000dba0 <__malloc_unlock>
1000baf0:	8025883a 	mov	r18,r16
1000baf4:	9005883a 	mov	r2,r18
1000baf8:	dfc00a17 	ldw	ra,40(sp)
1000bafc:	df000917 	ldw	fp,36(sp)
1000bb00:	ddc00817 	ldw	r23,32(sp)
1000bb04:	dd800717 	ldw	r22,28(sp)
1000bb08:	dd400617 	ldw	r21,24(sp)
1000bb0c:	dd000517 	ldw	r20,20(sp)
1000bb10:	dcc00417 	ldw	r19,16(sp)
1000bb14:	dc800317 	ldw	r18,12(sp)
1000bb18:	dc400217 	ldw	r17,8(sp)
1000bb1c:	dc000117 	ldw	r16,4(sp)
1000bb20:	dec00b04 	addi	sp,sp,44
1000bb24:	f800283a 	ret
1000bb28:	01ffff04 	movi	r7,-4
1000bb2c:	31cc703a 	and	r6,r6,r7
1000bb30:	34e9883a 	add	r20,r6,r19
1000bb34:	a0ffbb16 	blt	r20,r3,1000ba24 <__alt_data_end+0xf800ba24>
1000bb38:	20c00317 	ldw	r3,12(r4)
1000bb3c:	21000217 	ldw	r4,8(r4)
1000bb40:	20c00315 	stw	r3,12(r4)
1000bb44:	19000215 	stw	r4,8(r3)
1000bb48:	003fdd06 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000bb4c:	00800304 	movi	r2,12
1000bb50:	a8800015 	stw	r2,0(r21)
1000bb54:	0025883a 	mov	r18,zero
1000bb58:	003fe606 	br	1000baf4 <__alt_data_end+0xf800baf4>
1000bb5c:	1444b03a 	or	r2,r2,r17
1000bb60:	b0800115 	stw	r2,4(r22)
1000bb64:	b44b883a 	add	r5,r22,r17
1000bb68:	18800054 	ori	r2,r3,1
1000bb6c:	28800115 	stw	r2,4(r5)
1000bb70:	28c7883a 	add	r3,r5,r3
1000bb74:	18800117 	ldw	r2,4(r3)
1000bb78:	a809883a 	mov	r4,r21
1000bb7c:	29400204 	addi	r5,r5,8
1000bb80:	10800054 	ori	r2,r2,1
1000bb84:	18800115 	stw	r2,4(r3)
1000bb88:	000916c0 	call	1000916c <_free_r>
1000bb8c:	003fd606 	br	1000bae8 <__alt_data_end+0xf800bae8>
1000bb90:	38c0330e 	bge	r7,r3,1000bc60 <_realloc_r+0x2e8>
1000bb94:	900b883a 	mov	r5,r18
1000bb98:	a809883a 	mov	r4,r21
1000bb9c:	0009d040 	call	10009d04 <_malloc_r>
1000bba0:	1025883a 	mov	r18,r2
1000bba4:	10001626 	beq	r2,zero,1000bc00 <_realloc_r+0x288>
1000bba8:	80bfff17 	ldw	r2,-4(r16)
1000bbac:	00ffff84 	movi	r3,-2
1000bbb0:	913ffe04 	addi	r4,r18,-8
1000bbb4:	10c6703a 	and	r3,r2,r3
1000bbb8:	b0c7883a 	add	r3,r22,r3
1000bbbc:	20c09926 	beq	r4,r3,1000be24 <_realloc_r+0x4ac>
1000bbc0:	99bfff04 	addi	r6,r19,-4
1000bbc4:	00800904 	movi	r2,36
1000bbc8:	11806436 	bltu	r2,r6,1000bd5c <_realloc_r+0x3e4>
1000bbcc:	00c004c4 	movi	r3,19
1000bbd0:	19804036 	bltu	r3,r6,1000bcd4 <_realloc_r+0x35c>
1000bbd4:	9005883a 	mov	r2,r18
1000bbd8:	8007883a 	mov	r3,r16
1000bbdc:	19000017 	ldw	r4,0(r3)
1000bbe0:	11000015 	stw	r4,0(r2)
1000bbe4:	19000117 	ldw	r4,4(r3)
1000bbe8:	11000115 	stw	r4,4(r2)
1000bbec:	18c00217 	ldw	r3,8(r3)
1000bbf0:	10c00215 	stw	r3,8(r2)
1000bbf4:	a809883a 	mov	r4,r21
1000bbf8:	800b883a 	mov	r5,r16
1000bbfc:	000916c0 	call	1000916c <_free_r>
1000bc00:	a809883a 	mov	r4,r21
1000bc04:	000dba00 	call	1000dba0 <__malloc_unlock>
1000bc08:	003fba06 	br	1000baf4 <__alt_data_end+0xf800baf4>
1000bc0c:	300b883a 	mov	r5,r6
1000bc10:	dfc00a17 	ldw	ra,40(sp)
1000bc14:	df000917 	ldw	fp,36(sp)
1000bc18:	ddc00817 	ldw	r23,32(sp)
1000bc1c:	dd800717 	ldw	r22,28(sp)
1000bc20:	dd400617 	ldw	r21,24(sp)
1000bc24:	dd000517 	ldw	r20,20(sp)
1000bc28:	dcc00417 	ldw	r19,16(sp)
1000bc2c:	dc800317 	ldw	r18,12(sp)
1000bc30:	dc400217 	ldw	r17,8(sp)
1000bc34:	dc000117 	ldw	r16,4(sp)
1000bc38:	dec00b04 	addi	sp,sp,44
1000bc3c:	0009d041 	jmpi	10009d04 <_malloc_r>
1000bc40:	29800117 	ldw	r6,4(r5)
1000bc44:	013fff04 	movi	r4,-4
1000bc48:	89c00404 	addi	r7,r17,16
1000bc4c:	310c703a 	and	r6,r6,r4
1000bc50:	34c9883a 	add	r4,r6,r19
1000bc54:	21c0340e 	bge	r4,r7,1000bd28 <_realloc_r+0x3b0>
1000bc58:	2809883a 	mov	r4,r5
1000bc5c:	003f7106 	br	1000ba24 <__alt_data_end+0xf800ba24>
1000bc60:	b8800317 	ldw	r2,12(r23)
1000bc64:	b8c00217 	ldw	r3,8(r23)
1000bc68:	99bfff04 	addi	r6,r19,-4
1000bc6c:	01000904 	movi	r4,36
1000bc70:	18800315 	stw	r2,12(r3)
1000bc74:	10c00215 	stw	r3,8(r2)
1000bc78:	bc800204 	addi	r18,r23,8
1000bc7c:	21807836 	bltu	r4,r6,1000be60 <_realloc_r+0x4e8>
1000bc80:	008004c4 	movi	r2,19
1000bc84:	1180732e 	bgeu	r2,r6,1000be54 <_realloc_r+0x4dc>
1000bc88:	80800017 	ldw	r2,0(r16)
1000bc8c:	b8800215 	stw	r2,8(r23)
1000bc90:	80800117 	ldw	r2,4(r16)
1000bc94:	b8800315 	stw	r2,12(r23)
1000bc98:	008006c4 	movi	r2,27
1000bc9c:	11808936 	bltu	r2,r6,1000bec4 <_realloc_r+0x54c>
1000bca0:	b8800404 	addi	r2,r23,16
1000bca4:	80c00204 	addi	r3,r16,8
1000bca8:	19000017 	ldw	r4,0(r3)
1000bcac:	9021883a 	mov	r16,r18
1000bcb0:	3829883a 	mov	r20,r7
1000bcb4:	11000015 	stw	r4,0(r2)
1000bcb8:	19000117 	ldw	r4,4(r3)
1000bcbc:	b82d883a 	mov	r22,r23
1000bcc0:	11000115 	stw	r4,4(r2)
1000bcc4:	18c00217 	ldw	r3,8(r3)
1000bcc8:	10c00215 	stw	r3,8(r2)
1000bccc:	b8800117 	ldw	r2,4(r23)
1000bcd0:	003f7b06 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000bcd4:	80c00017 	ldw	r3,0(r16)
1000bcd8:	90c00015 	stw	r3,0(r18)
1000bcdc:	80c00117 	ldw	r3,4(r16)
1000bce0:	90c00115 	stw	r3,4(r18)
1000bce4:	00c006c4 	movi	r3,27
1000bce8:	19804636 	bltu	r3,r6,1000be04 <_realloc_r+0x48c>
1000bcec:	90800204 	addi	r2,r18,8
1000bcf0:	80c00204 	addi	r3,r16,8
1000bcf4:	003fb906 	br	1000bbdc <__alt_data_end+0xf800bbdc>
1000bcf8:	9005883a 	mov	r2,r18
1000bcfc:	8007883a 	mov	r3,r16
1000bd00:	19000017 	ldw	r4,0(r3)
1000bd04:	9021883a 	mov	r16,r18
1000bd08:	b82d883a 	mov	r22,r23
1000bd0c:	11000015 	stw	r4,0(r2)
1000bd10:	19000117 	ldw	r4,4(r3)
1000bd14:	11000115 	stw	r4,4(r2)
1000bd18:	18c00217 	ldw	r3,8(r3)
1000bd1c:	10c00215 	stw	r3,8(r2)
1000bd20:	b8800117 	ldw	r2,4(r23)
1000bd24:	003f6606 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000bd28:	2445c83a 	sub	r2,r4,r17
1000bd2c:	b46d883a 	add	r22,r22,r17
1000bd30:	10800054 	ori	r2,r2,1
1000bd34:	b0800115 	stw	r2,4(r22)
1000bd38:	80bfff17 	ldw	r2,-4(r16)
1000bd3c:	a809883a 	mov	r4,r21
1000bd40:	e5800215 	stw	r22,8(fp)
1000bd44:	1080004c 	andi	r2,r2,1
1000bd48:	88a2b03a 	or	r17,r17,r2
1000bd4c:	847fff15 	stw	r17,-4(r16)
1000bd50:	000dba00 	call	1000dba0 <__malloc_unlock>
1000bd54:	8025883a 	mov	r18,r16
1000bd58:	003f6606 	br	1000baf4 <__alt_data_end+0xf800baf4>
1000bd5c:	9009883a 	mov	r4,r18
1000bd60:	800b883a 	mov	r5,r16
1000bd64:	000a6c00 	call	1000a6c0 <memmove>
1000bd68:	003fa206 	br	1000bbf4 <__alt_data_end+0xf800bbf4>
1000bd6c:	88800404 	addi	r2,r17,16
1000bd70:	a0bf8716 	blt	r20,r2,1000bb90 <__alt_data_end+0xf800bb90>
1000bd74:	b8800317 	ldw	r2,12(r23)
1000bd78:	b8c00217 	ldw	r3,8(r23)
1000bd7c:	99bfff04 	addi	r6,r19,-4
1000bd80:	01000904 	movi	r4,36
1000bd84:	18800315 	stw	r2,12(r3)
1000bd88:	10c00215 	stw	r3,8(r2)
1000bd8c:	bc800204 	addi	r18,r23,8
1000bd90:	21806536 	bltu	r4,r6,1000bf28 <_realloc_r+0x5b0>
1000bd94:	008004c4 	movi	r2,19
1000bd98:	1180592e 	bgeu	r2,r6,1000bf00 <_realloc_r+0x588>
1000bd9c:	80800017 	ldw	r2,0(r16)
1000bda0:	b8800215 	stw	r2,8(r23)
1000bda4:	80800117 	ldw	r2,4(r16)
1000bda8:	b8800315 	stw	r2,12(r23)
1000bdac:	008006c4 	movi	r2,27
1000bdb0:	11806136 	bltu	r2,r6,1000bf38 <_realloc_r+0x5c0>
1000bdb4:	b8800404 	addi	r2,r23,16
1000bdb8:	80c00204 	addi	r3,r16,8
1000bdbc:	19000017 	ldw	r4,0(r3)
1000bdc0:	11000015 	stw	r4,0(r2)
1000bdc4:	19000117 	ldw	r4,4(r3)
1000bdc8:	11000115 	stw	r4,4(r2)
1000bdcc:	18c00217 	ldw	r3,8(r3)
1000bdd0:	10c00215 	stw	r3,8(r2)
1000bdd4:	a447c83a 	sub	r3,r20,r17
1000bdd8:	bc45883a 	add	r2,r23,r17
1000bddc:	18c00054 	ori	r3,r3,1
1000bde0:	10c00115 	stw	r3,4(r2)
1000bde4:	b8c00117 	ldw	r3,4(r23)
1000bde8:	e0800215 	stw	r2,8(fp)
1000bdec:	a809883a 	mov	r4,r21
1000bdf0:	1880004c 	andi	r2,r3,1
1000bdf4:	88a2b03a 	or	r17,r17,r2
1000bdf8:	bc400115 	stw	r17,4(r23)
1000bdfc:	000dba00 	call	1000dba0 <__malloc_unlock>
1000be00:	003f3c06 	br	1000baf4 <__alt_data_end+0xf800baf4>
1000be04:	80c00217 	ldw	r3,8(r16)
1000be08:	90c00215 	stw	r3,8(r18)
1000be0c:	80c00317 	ldw	r3,12(r16)
1000be10:	90c00315 	stw	r3,12(r18)
1000be14:	30802426 	beq	r6,r2,1000bea8 <_realloc_r+0x530>
1000be18:	90800404 	addi	r2,r18,16
1000be1c:	80c00404 	addi	r3,r16,16
1000be20:	003f6e06 	br	1000bbdc <__alt_data_end+0xf800bbdc>
1000be24:	953fff17 	ldw	r20,-4(r18)
1000be28:	00ffff04 	movi	r3,-4
1000be2c:	a0e8703a 	and	r20,r20,r3
1000be30:	a4e9883a 	add	r20,r20,r19
1000be34:	003f2206 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000be38:	800b883a 	mov	r5,r16
1000be3c:	9009883a 	mov	r4,r18
1000be40:	000a6c00 	call	1000a6c0 <memmove>
1000be44:	9021883a 	mov	r16,r18
1000be48:	b8800117 	ldw	r2,4(r23)
1000be4c:	b82d883a 	mov	r22,r23
1000be50:	003f1b06 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000be54:	9005883a 	mov	r2,r18
1000be58:	8007883a 	mov	r3,r16
1000be5c:	003f9206 	br	1000bca8 <__alt_data_end+0xf800bca8>
1000be60:	800b883a 	mov	r5,r16
1000be64:	9009883a 	mov	r4,r18
1000be68:	d9c00015 	stw	r7,0(sp)
1000be6c:	000a6c00 	call	1000a6c0 <memmove>
1000be70:	d9c00017 	ldw	r7,0(sp)
1000be74:	9021883a 	mov	r16,r18
1000be78:	b8800117 	ldw	r2,4(r23)
1000be7c:	3829883a 	mov	r20,r7
1000be80:	b82d883a 	mov	r22,r23
1000be84:	003f0e06 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000be88:	80800217 	ldw	r2,8(r16)
1000be8c:	b8800415 	stw	r2,16(r23)
1000be90:	80800317 	ldw	r2,12(r16)
1000be94:	b8800515 	stw	r2,20(r23)
1000be98:	31001226 	beq	r6,r4,1000bee4 <_realloc_r+0x56c>
1000be9c:	b8800604 	addi	r2,r23,24
1000bea0:	80c00404 	addi	r3,r16,16
1000bea4:	003f9606 	br	1000bd00 <__alt_data_end+0xf800bd00>
1000bea8:	81000417 	ldw	r4,16(r16)
1000beac:	90800604 	addi	r2,r18,24
1000beb0:	80c00604 	addi	r3,r16,24
1000beb4:	91000415 	stw	r4,16(r18)
1000beb8:	81000517 	ldw	r4,20(r16)
1000bebc:	91000515 	stw	r4,20(r18)
1000bec0:	003f4606 	br	1000bbdc <__alt_data_end+0xf800bbdc>
1000bec4:	80800217 	ldw	r2,8(r16)
1000bec8:	b8800415 	stw	r2,16(r23)
1000becc:	80800317 	ldw	r2,12(r16)
1000bed0:	b8800515 	stw	r2,20(r23)
1000bed4:	31000d26 	beq	r6,r4,1000bf0c <_realloc_r+0x594>
1000bed8:	b8800604 	addi	r2,r23,24
1000bedc:	80c00404 	addi	r3,r16,16
1000bee0:	003f7106 	br	1000bca8 <__alt_data_end+0xf800bca8>
1000bee4:	81000417 	ldw	r4,16(r16)
1000bee8:	b8800804 	addi	r2,r23,32
1000beec:	80c00604 	addi	r3,r16,24
1000bef0:	b9000615 	stw	r4,24(r23)
1000bef4:	81000517 	ldw	r4,20(r16)
1000bef8:	b9000715 	stw	r4,28(r23)
1000befc:	003f8006 	br	1000bd00 <__alt_data_end+0xf800bd00>
1000bf00:	9005883a 	mov	r2,r18
1000bf04:	8007883a 	mov	r3,r16
1000bf08:	003fac06 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000bf0c:	81000417 	ldw	r4,16(r16)
1000bf10:	b8800804 	addi	r2,r23,32
1000bf14:	80c00604 	addi	r3,r16,24
1000bf18:	b9000615 	stw	r4,24(r23)
1000bf1c:	81000517 	ldw	r4,20(r16)
1000bf20:	b9000715 	stw	r4,28(r23)
1000bf24:	003f6006 	br	1000bca8 <__alt_data_end+0xf800bca8>
1000bf28:	9009883a 	mov	r4,r18
1000bf2c:	800b883a 	mov	r5,r16
1000bf30:	000a6c00 	call	1000a6c0 <memmove>
1000bf34:	003fa706 	br	1000bdd4 <__alt_data_end+0xf800bdd4>
1000bf38:	80800217 	ldw	r2,8(r16)
1000bf3c:	b8800415 	stw	r2,16(r23)
1000bf40:	80800317 	ldw	r2,12(r16)
1000bf44:	b8800515 	stw	r2,20(r23)
1000bf48:	31000326 	beq	r6,r4,1000bf58 <_realloc_r+0x5e0>
1000bf4c:	b8800604 	addi	r2,r23,24
1000bf50:	80c00404 	addi	r3,r16,16
1000bf54:	003f9906 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000bf58:	81000417 	ldw	r4,16(r16)
1000bf5c:	b8800804 	addi	r2,r23,32
1000bf60:	80c00604 	addi	r3,r16,24
1000bf64:	b9000615 	stw	r4,24(r23)
1000bf68:	81000517 	ldw	r4,20(r16)
1000bf6c:	b9000715 	stw	r4,28(r23)
1000bf70:	003f9206 	br	1000bdbc <__alt_data_end+0xf800bdbc>

1000bf74 <__isinfd>:
1000bf74:	0105c83a 	sub	r2,zero,r4
1000bf78:	1108b03a 	or	r4,r2,r4
1000bf7c:	2004d7fa 	srli	r2,r4,31
1000bf80:	00e00034 	movhi	r3,32768
1000bf84:	18ffffc4 	addi	r3,r3,-1
1000bf88:	28ca703a 	and	r5,r5,r3
1000bf8c:	1144b03a 	or	r2,r2,r5
1000bf90:	00dffc34 	movhi	r3,32752
1000bf94:	1885c83a 	sub	r2,r3,r2
1000bf98:	0087c83a 	sub	r3,zero,r2
1000bf9c:	1884b03a 	or	r2,r3,r2
1000bfa0:	1005d7fa 	srai	r2,r2,31
1000bfa4:	10800044 	addi	r2,r2,1
1000bfa8:	f800283a 	ret

1000bfac <__isnand>:
1000bfac:	0105c83a 	sub	r2,zero,r4
1000bfb0:	1108b03a 	or	r4,r2,r4
1000bfb4:	2004d7fa 	srli	r2,r4,31
1000bfb8:	00e00034 	movhi	r3,32768
1000bfbc:	18ffffc4 	addi	r3,r3,-1
1000bfc0:	28ca703a 	and	r5,r5,r3
1000bfc4:	1144b03a 	or	r2,r2,r5
1000bfc8:	00dffc34 	movhi	r3,32752
1000bfcc:	1885c83a 	sub	r2,r3,r2
1000bfd0:	1004d7fa 	srli	r2,r2,31
1000bfd4:	f800283a 	ret

1000bfd8 <_sbrk_r>:
1000bfd8:	defffd04 	addi	sp,sp,-12
1000bfdc:	dc400115 	stw	r17,4(sp)
1000bfe0:	dc000015 	stw	r16,0(sp)
1000bfe4:	2023883a 	mov	r17,r4
1000bfe8:	04040074 	movhi	r16,4097
1000bfec:	840f5904 	addi	r16,r16,15716
1000bff0:	2809883a 	mov	r4,r5
1000bff4:	dfc00215 	stw	ra,8(sp)
1000bff8:	80000015 	stw	zero,0(r16)
1000bffc:	000dd840 	call	1000dd84 <sbrk>
1000c000:	00ffffc4 	movi	r3,-1
1000c004:	10c00526 	beq	r2,r3,1000c01c <_sbrk_r+0x44>
1000c008:	dfc00217 	ldw	ra,8(sp)
1000c00c:	dc400117 	ldw	r17,4(sp)
1000c010:	dc000017 	ldw	r16,0(sp)
1000c014:	dec00304 	addi	sp,sp,12
1000c018:	f800283a 	ret
1000c01c:	80c00017 	ldw	r3,0(r16)
1000c020:	183ff926 	beq	r3,zero,1000c008 <__alt_data_end+0xf800c008>
1000c024:	88c00015 	stw	r3,0(r17)
1000c028:	dfc00217 	ldw	ra,8(sp)
1000c02c:	dc400117 	ldw	r17,4(sp)
1000c030:	dc000017 	ldw	r16,0(sp)
1000c034:	dec00304 	addi	sp,sp,12
1000c038:	f800283a 	ret

1000c03c <__sread>:
1000c03c:	defffe04 	addi	sp,sp,-8
1000c040:	dc000015 	stw	r16,0(sp)
1000c044:	2821883a 	mov	r16,r5
1000c048:	2940038f 	ldh	r5,14(r5)
1000c04c:	dfc00115 	stw	ra,4(sp)
1000c050:	000c6440 	call	1000c644 <_read_r>
1000c054:	10000716 	blt	r2,zero,1000c074 <__sread+0x38>
1000c058:	80c01417 	ldw	r3,80(r16)
1000c05c:	1887883a 	add	r3,r3,r2
1000c060:	80c01415 	stw	r3,80(r16)
1000c064:	dfc00117 	ldw	ra,4(sp)
1000c068:	dc000017 	ldw	r16,0(sp)
1000c06c:	dec00204 	addi	sp,sp,8
1000c070:	f800283a 	ret
1000c074:	80c0030b 	ldhu	r3,12(r16)
1000c078:	18fbffcc 	andi	r3,r3,61439
1000c07c:	80c0030d 	sth	r3,12(r16)
1000c080:	dfc00117 	ldw	ra,4(sp)
1000c084:	dc000017 	ldw	r16,0(sp)
1000c088:	dec00204 	addi	sp,sp,8
1000c08c:	f800283a 	ret

1000c090 <__swrite>:
1000c090:	2880030b 	ldhu	r2,12(r5)
1000c094:	defffb04 	addi	sp,sp,-20
1000c098:	dcc00315 	stw	r19,12(sp)
1000c09c:	10c0400c 	andi	r3,r2,256
1000c0a0:	18ffffcc 	andi	r3,r3,65535
1000c0a4:	18e0001c 	xori	r3,r3,32768
1000c0a8:	dc800215 	stw	r18,8(sp)
1000c0ac:	dc400115 	stw	r17,4(sp)
1000c0b0:	dc000015 	stw	r16,0(sp)
1000c0b4:	dfc00415 	stw	ra,16(sp)
1000c0b8:	18e00004 	addi	r3,r3,-32768
1000c0bc:	2821883a 	mov	r16,r5
1000c0c0:	2027883a 	mov	r19,r4
1000c0c4:	3025883a 	mov	r18,r6
1000c0c8:	3823883a 	mov	r17,r7
1000c0cc:	18000526 	beq	r3,zero,1000c0e4 <__swrite+0x54>
1000c0d0:	2940038f 	ldh	r5,14(r5)
1000c0d4:	000d883a 	mov	r6,zero
1000c0d8:	01c00084 	movi	r7,2
1000c0dc:	000c5d80 	call	1000c5d8 <_lseek_r>
1000c0e0:	8080030b 	ldhu	r2,12(r16)
1000c0e4:	8140038f 	ldh	r5,14(r16)
1000c0e8:	10bbffcc 	andi	r2,r2,61439
1000c0ec:	9809883a 	mov	r4,r19
1000c0f0:	900d883a 	mov	r6,r18
1000c0f4:	880f883a 	mov	r7,r17
1000c0f8:	8080030d 	sth	r2,12(r16)
1000c0fc:	dfc00417 	ldw	ra,16(sp)
1000c100:	dcc00317 	ldw	r19,12(sp)
1000c104:	dc800217 	ldw	r18,8(sp)
1000c108:	dc400117 	ldw	r17,4(sp)
1000c10c:	dc000017 	ldw	r16,0(sp)
1000c110:	dec00504 	addi	sp,sp,20
1000c114:	000c2201 	jmpi	1000c220 <_write_r>

1000c118 <__sseek>:
1000c118:	defffe04 	addi	sp,sp,-8
1000c11c:	dc000015 	stw	r16,0(sp)
1000c120:	2821883a 	mov	r16,r5
1000c124:	2940038f 	ldh	r5,14(r5)
1000c128:	dfc00115 	stw	ra,4(sp)
1000c12c:	000c5d80 	call	1000c5d8 <_lseek_r>
1000c130:	00ffffc4 	movi	r3,-1
1000c134:	10c00826 	beq	r2,r3,1000c158 <__sseek+0x40>
1000c138:	80c0030b 	ldhu	r3,12(r16)
1000c13c:	80801415 	stw	r2,80(r16)
1000c140:	18c40014 	ori	r3,r3,4096
1000c144:	80c0030d 	sth	r3,12(r16)
1000c148:	dfc00117 	ldw	ra,4(sp)
1000c14c:	dc000017 	ldw	r16,0(sp)
1000c150:	dec00204 	addi	sp,sp,8
1000c154:	f800283a 	ret
1000c158:	80c0030b 	ldhu	r3,12(r16)
1000c15c:	18fbffcc 	andi	r3,r3,61439
1000c160:	80c0030d 	sth	r3,12(r16)
1000c164:	dfc00117 	ldw	ra,4(sp)
1000c168:	dc000017 	ldw	r16,0(sp)
1000c16c:	dec00204 	addi	sp,sp,8
1000c170:	f800283a 	ret

1000c174 <__sclose>:
1000c174:	2940038f 	ldh	r5,14(r5)
1000c178:	000c3581 	jmpi	1000c358 <_close_r>

1000c17c <strcmp>:
1000c17c:	2904b03a 	or	r2,r5,r4
1000c180:	108000cc 	andi	r2,r2,3
1000c184:	1000171e 	bne	r2,zero,1000c1e4 <strcmp+0x68>
1000c188:	20800017 	ldw	r2,0(r4)
1000c18c:	28c00017 	ldw	r3,0(r5)
1000c190:	10c0141e 	bne	r2,r3,1000c1e4 <strcmp+0x68>
1000c194:	027fbff4 	movhi	r9,65279
1000c198:	4a7fbfc4 	addi	r9,r9,-257
1000c19c:	1247883a 	add	r3,r2,r9
1000c1a0:	0084303a 	nor	r2,zero,r2
1000c1a4:	1884703a 	and	r2,r3,r2
1000c1a8:	02202074 	movhi	r8,32897
1000c1ac:	42202004 	addi	r8,r8,-32640
1000c1b0:	1204703a 	and	r2,r2,r8
1000c1b4:	10000226 	beq	r2,zero,1000c1c0 <strcmp+0x44>
1000c1b8:	00001706 	br	1000c218 <strcmp+0x9c>
1000c1bc:	3000161e 	bne	r6,zero,1000c218 <strcmp+0x9c>
1000c1c0:	21000104 	addi	r4,r4,4
1000c1c4:	20800017 	ldw	r2,0(r4)
1000c1c8:	29400104 	addi	r5,r5,4
1000c1cc:	28c00017 	ldw	r3,0(r5)
1000c1d0:	124f883a 	add	r7,r2,r9
1000c1d4:	008c303a 	nor	r6,zero,r2
1000c1d8:	398c703a 	and	r6,r7,r6
1000c1dc:	320c703a 	and	r6,r6,r8
1000c1e0:	10fff626 	beq	r2,r3,1000c1bc <__alt_data_end+0xf800c1bc>
1000c1e4:	20800007 	ldb	r2,0(r4)
1000c1e8:	1000051e 	bne	r2,zero,1000c200 <strcmp+0x84>
1000c1ec:	00000606 	br	1000c208 <strcmp+0x8c>
1000c1f0:	21000044 	addi	r4,r4,1
1000c1f4:	20800007 	ldb	r2,0(r4)
1000c1f8:	29400044 	addi	r5,r5,1
1000c1fc:	10000226 	beq	r2,zero,1000c208 <strcmp+0x8c>
1000c200:	28c00007 	ldb	r3,0(r5)
1000c204:	10fffa26 	beq	r2,r3,1000c1f0 <__alt_data_end+0xf800c1f0>
1000c208:	20c00003 	ldbu	r3,0(r4)
1000c20c:	28800003 	ldbu	r2,0(r5)
1000c210:	1885c83a 	sub	r2,r3,r2
1000c214:	f800283a 	ret
1000c218:	0005883a 	mov	r2,zero
1000c21c:	f800283a 	ret

1000c220 <_write_r>:
1000c220:	defffd04 	addi	sp,sp,-12
1000c224:	dc400115 	stw	r17,4(sp)
1000c228:	dc000015 	stw	r16,0(sp)
1000c22c:	2023883a 	mov	r17,r4
1000c230:	04040074 	movhi	r16,4097
1000c234:	840f5904 	addi	r16,r16,15716
1000c238:	2809883a 	mov	r4,r5
1000c23c:	300b883a 	mov	r5,r6
1000c240:	380d883a 	mov	r6,r7
1000c244:	dfc00215 	stw	ra,8(sp)
1000c248:	80000015 	stw	zero,0(r16)
1000c24c:	000deb40 	call	1000deb4 <write>
1000c250:	00ffffc4 	movi	r3,-1
1000c254:	10c00526 	beq	r2,r3,1000c26c <_write_r+0x4c>
1000c258:	dfc00217 	ldw	ra,8(sp)
1000c25c:	dc400117 	ldw	r17,4(sp)
1000c260:	dc000017 	ldw	r16,0(sp)
1000c264:	dec00304 	addi	sp,sp,12
1000c268:	f800283a 	ret
1000c26c:	80c00017 	ldw	r3,0(r16)
1000c270:	183ff926 	beq	r3,zero,1000c258 <__alt_data_end+0xf800c258>
1000c274:	88c00015 	stw	r3,0(r17)
1000c278:	dfc00217 	ldw	ra,8(sp)
1000c27c:	dc400117 	ldw	r17,4(sp)
1000c280:	dc000017 	ldw	r16,0(sp)
1000c284:	dec00304 	addi	sp,sp,12
1000c288:	f800283a 	ret

1000c28c <_calloc_r>:
1000c28c:	defffe04 	addi	sp,sp,-8
1000c290:	dc000015 	stw	r16,0(sp)
1000c294:	2021883a 	mov	r16,r4
1000c298:	3009883a 	mov	r4,r6
1000c29c:	dfc00115 	stw	ra,4(sp)
1000c2a0:	00050500 	call	10005050 <__mulsi3>
1000c2a4:	8009883a 	mov	r4,r16
1000c2a8:	100b883a 	mov	r5,r2
1000c2ac:	0009d040 	call	10009d04 <_malloc_r>
1000c2b0:	1021883a 	mov	r16,r2
1000c2b4:	10000c26 	beq	r2,zero,1000c2e8 <_calloc_r+0x5c>
1000c2b8:	11bfff17 	ldw	r6,-4(r2)
1000c2bc:	00ffff04 	movi	r3,-4
1000c2c0:	00800904 	movi	r2,36
1000c2c4:	30cc703a 	and	r6,r6,r3
1000c2c8:	30cd883a 	add	r6,r6,r3
1000c2cc:	11801436 	bltu	r2,r6,1000c320 <_calloc_r+0x94>
1000c2d0:	00c004c4 	movi	r3,19
1000c2d4:	19800936 	bltu	r3,r6,1000c2fc <_calloc_r+0x70>
1000c2d8:	8005883a 	mov	r2,r16
1000c2dc:	10000015 	stw	zero,0(r2)
1000c2e0:	10000115 	stw	zero,4(r2)
1000c2e4:	10000215 	stw	zero,8(r2)
1000c2e8:	8005883a 	mov	r2,r16
1000c2ec:	dfc00117 	ldw	ra,4(sp)
1000c2f0:	dc000017 	ldw	r16,0(sp)
1000c2f4:	dec00204 	addi	sp,sp,8
1000c2f8:	f800283a 	ret
1000c2fc:	80000015 	stw	zero,0(r16)
1000c300:	80000115 	stw	zero,4(r16)
1000c304:	00c006c4 	movi	r3,27
1000c308:	19800d2e 	bgeu	r3,r6,1000c340 <_calloc_r+0xb4>
1000c30c:	80000215 	stw	zero,8(r16)
1000c310:	80000315 	stw	zero,12(r16)
1000c314:	30800c26 	beq	r6,r2,1000c348 <_calloc_r+0xbc>
1000c318:	80800404 	addi	r2,r16,16
1000c31c:	003fef06 	br	1000c2dc <__alt_data_end+0xf800c2dc>
1000c320:	8009883a 	mov	r4,r16
1000c324:	000b883a 	mov	r5,zero
1000c328:	000a84c0 	call	1000a84c <memset>
1000c32c:	8005883a 	mov	r2,r16
1000c330:	dfc00117 	ldw	ra,4(sp)
1000c334:	dc000017 	ldw	r16,0(sp)
1000c338:	dec00204 	addi	sp,sp,8
1000c33c:	f800283a 	ret
1000c340:	80800204 	addi	r2,r16,8
1000c344:	003fe506 	br	1000c2dc <__alt_data_end+0xf800c2dc>
1000c348:	80000415 	stw	zero,16(r16)
1000c34c:	80000515 	stw	zero,20(r16)
1000c350:	80800604 	addi	r2,r16,24
1000c354:	003fe106 	br	1000c2dc <__alt_data_end+0xf800c2dc>

1000c358 <_close_r>:
1000c358:	defffd04 	addi	sp,sp,-12
1000c35c:	dc400115 	stw	r17,4(sp)
1000c360:	dc000015 	stw	r16,0(sp)
1000c364:	2023883a 	mov	r17,r4
1000c368:	04040074 	movhi	r16,4097
1000c36c:	840f5904 	addi	r16,r16,15716
1000c370:	2809883a 	mov	r4,r5
1000c374:	dfc00215 	stw	ra,8(sp)
1000c378:	80000015 	stw	zero,0(r16)
1000c37c:	000d60c0 	call	1000d60c <close>
1000c380:	00ffffc4 	movi	r3,-1
1000c384:	10c00526 	beq	r2,r3,1000c39c <_close_r+0x44>
1000c388:	dfc00217 	ldw	ra,8(sp)
1000c38c:	dc400117 	ldw	r17,4(sp)
1000c390:	dc000017 	ldw	r16,0(sp)
1000c394:	dec00304 	addi	sp,sp,12
1000c398:	f800283a 	ret
1000c39c:	80c00017 	ldw	r3,0(r16)
1000c3a0:	183ff926 	beq	r3,zero,1000c388 <__alt_data_end+0xf800c388>
1000c3a4:	88c00015 	stw	r3,0(r17)
1000c3a8:	dfc00217 	ldw	ra,8(sp)
1000c3ac:	dc400117 	ldw	r17,4(sp)
1000c3b0:	dc000017 	ldw	r16,0(sp)
1000c3b4:	dec00304 	addi	sp,sp,12
1000c3b8:	f800283a 	ret

1000c3bc <_fclose_r>:
1000c3bc:	defffc04 	addi	sp,sp,-16
1000c3c0:	dc400115 	stw	r17,4(sp)
1000c3c4:	dc000015 	stw	r16,0(sp)
1000c3c8:	dfc00315 	stw	ra,12(sp)
1000c3cc:	dc800215 	stw	r18,8(sp)
1000c3d0:	2821883a 	mov	r16,r5
1000c3d4:	2023883a 	mov	r17,r4
1000c3d8:	28003426 	beq	r5,zero,1000c4ac <_fclose_r+0xf0>
1000c3dc:	0008ff00 	call	10008ff0 <__sfp_lock_acquire>
1000c3e0:	88000226 	beq	r17,zero,1000c3ec <_fclose_r+0x30>
1000c3e4:	88800e17 	ldw	r2,56(r17)
1000c3e8:	10003826 	beq	r2,zero,1000c4cc <_fclose_r+0x110>
1000c3ec:	8080030f 	ldh	r2,12(r16)
1000c3f0:	10002526 	beq	r2,zero,1000c488 <_fclose_r+0xcc>
1000c3f4:	8809883a 	mov	r4,r17
1000c3f8:	800b883a 	mov	r5,r16
1000c3fc:	0008b2c0 	call	10008b2c <_fflush_r>
1000c400:	1025883a 	mov	r18,r2
1000c404:	80800b17 	ldw	r2,44(r16)
1000c408:	10000426 	beq	r2,zero,1000c41c <_fclose_r+0x60>
1000c40c:	81400717 	ldw	r5,28(r16)
1000c410:	8809883a 	mov	r4,r17
1000c414:	103ee83a 	callr	r2
1000c418:	10003516 	blt	r2,zero,1000c4f0 <_fclose_r+0x134>
1000c41c:	8080030b 	ldhu	r2,12(r16)
1000c420:	1080200c 	andi	r2,r2,128
1000c424:	10bfffcc 	andi	r2,r2,65535
1000c428:	10a0001c 	xori	r2,r2,32768
1000c42c:	10a00004 	addi	r2,r2,-32768
1000c430:	10002b1e 	bne	r2,zero,1000c4e0 <_fclose_r+0x124>
1000c434:	81400c17 	ldw	r5,48(r16)
1000c438:	28000526 	beq	r5,zero,1000c450 <_fclose_r+0x94>
1000c43c:	80801004 	addi	r2,r16,64
1000c440:	28800226 	beq	r5,r2,1000c44c <_fclose_r+0x90>
1000c444:	8809883a 	mov	r4,r17
1000c448:	000916c0 	call	1000916c <_free_r>
1000c44c:	80000c15 	stw	zero,48(r16)
1000c450:	81401117 	ldw	r5,68(r16)
1000c454:	28000326 	beq	r5,zero,1000c464 <_fclose_r+0xa8>
1000c458:	8809883a 	mov	r4,r17
1000c45c:	000916c0 	call	1000916c <_free_r>
1000c460:	80001115 	stw	zero,68(r16)
1000c464:	8000030d 	sth	zero,12(r16)
1000c468:	0008ff40 	call	10008ff4 <__sfp_lock_release>
1000c46c:	9005883a 	mov	r2,r18
1000c470:	dfc00317 	ldw	ra,12(sp)
1000c474:	dc800217 	ldw	r18,8(sp)
1000c478:	dc400117 	ldw	r17,4(sp)
1000c47c:	dc000017 	ldw	r16,0(sp)
1000c480:	dec00404 	addi	sp,sp,16
1000c484:	f800283a 	ret
1000c488:	0008ff40 	call	10008ff4 <__sfp_lock_release>
1000c48c:	0025883a 	mov	r18,zero
1000c490:	9005883a 	mov	r2,r18
1000c494:	dfc00317 	ldw	ra,12(sp)
1000c498:	dc800217 	ldw	r18,8(sp)
1000c49c:	dc400117 	ldw	r17,4(sp)
1000c4a0:	dc000017 	ldw	r16,0(sp)
1000c4a4:	dec00404 	addi	sp,sp,16
1000c4a8:	f800283a 	ret
1000c4ac:	0025883a 	mov	r18,zero
1000c4b0:	9005883a 	mov	r2,r18
1000c4b4:	dfc00317 	ldw	ra,12(sp)
1000c4b8:	dc800217 	ldw	r18,8(sp)
1000c4bc:	dc400117 	ldw	r17,4(sp)
1000c4c0:	dc000017 	ldw	r16,0(sp)
1000c4c4:	dec00404 	addi	sp,sp,16
1000c4c8:	f800283a 	ret
1000c4cc:	8809883a 	mov	r4,r17
1000c4d0:	0008de80 	call	10008de8 <__sinit>
1000c4d4:	8080030f 	ldh	r2,12(r16)
1000c4d8:	103fc61e 	bne	r2,zero,1000c3f4 <__alt_data_end+0xf800c3f4>
1000c4dc:	003fea06 	br	1000c488 <__alt_data_end+0xf800c488>
1000c4e0:	81400417 	ldw	r5,16(r16)
1000c4e4:	8809883a 	mov	r4,r17
1000c4e8:	000916c0 	call	1000916c <_free_r>
1000c4ec:	003fd106 	br	1000c434 <__alt_data_end+0xf800c434>
1000c4f0:	04bfffc4 	movi	r18,-1
1000c4f4:	003fc906 	br	1000c41c <__alt_data_end+0xf800c41c>

1000c4f8 <fclose>:
1000c4f8:	00840074 	movhi	r2,4097
1000c4fc:	1088ae04 	addi	r2,r2,8888
1000c500:	200b883a 	mov	r5,r4
1000c504:	11000017 	ldw	r4,0(r2)
1000c508:	000c3bc1 	jmpi	1000c3bc <_fclose_r>

1000c50c <_fstat_r>:
1000c50c:	defffd04 	addi	sp,sp,-12
1000c510:	dc400115 	stw	r17,4(sp)
1000c514:	dc000015 	stw	r16,0(sp)
1000c518:	2023883a 	mov	r17,r4
1000c51c:	04040074 	movhi	r16,4097
1000c520:	840f5904 	addi	r16,r16,15716
1000c524:	2809883a 	mov	r4,r5
1000c528:	300b883a 	mov	r5,r6
1000c52c:	dfc00215 	stw	ra,8(sp)
1000c530:	80000015 	stw	zero,0(r16)
1000c534:	000d7540 	call	1000d754 <fstat>
1000c538:	00ffffc4 	movi	r3,-1
1000c53c:	10c00526 	beq	r2,r3,1000c554 <_fstat_r+0x48>
1000c540:	dfc00217 	ldw	ra,8(sp)
1000c544:	dc400117 	ldw	r17,4(sp)
1000c548:	dc000017 	ldw	r16,0(sp)
1000c54c:	dec00304 	addi	sp,sp,12
1000c550:	f800283a 	ret
1000c554:	80c00017 	ldw	r3,0(r16)
1000c558:	183ff926 	beq	r3,zero,1000c540 <__alt_data_end+0xf800c540>
1000c55c:	88c00015 	stw	r3,0(r17)
1000c560:	dfc00217 	ldw	ra,8(sp)
1000c564:	dc400117 	ldw	r17,4(sp)
1000c568:	dc000017 	ldw	r16,0(sp)
1000c56c:	dec00304 	addi	sp,sp,12
1000c570:	f800283a 	ret

1000c574 <_isatty_r>:
1000c574:	defffd04 	addi	sp,sp,-12
1000c578:	dc400115 	stw	r17,4(sp)
1000c57c:	dc000015 	stw	r16,0(sp)
1000c580:	2023883a 	mov	r17,r4
1000c584:	04040074 	movhi	r16,4097
1000c588:	840f5904 	addi	r16,r16,15716
1000c58c:	2809883a 	mov	r4,r5
1000c590:	dfc00215 	stw	ra,8(sp)
1000c594:	80000015 	stw	zero,0(r16)
1000c598:	000d8540 	call	1000d854 <isatty>
1000c59c:	00ffffc4 	movi	r3,-1
1000c5a0:	10c00526 	beq	r2,r3,1000c5b8 <_isatty_r+0x44>
1000c5a4:	dfc00217 	ldw	ra,8(sp)
1000c5a8:	dc400117 	ldw	r17,4(sp)
1000c5ac:	dc000017 	ldw	r16,0(sp)
1000c5b0:	dec00304 	addi	sp,sp,12
1000c5b4:	f800283a 	ret
1000c5b8:	80c00017 	ldw	r3,0(r16)
1000c5bc:	183ff926 	beq	r3,zero,1000c5a4 <__alt_data_end+0xf800c5a4>
1000c5c0:	88c00015 	stw	r3,0(r17)
1000c5c4:	dfc00217 	ldw	ra,8(sp)
1000c5c8:	dc400117 	ldw	r17,4(sp)
1000c5cc:	dc000017 	ldw	r16,0(sp)
1000c5d0:	dec00304 	addi	sp,sp,12
1000c5d4:	f800283a 	ret

1000c5d8 <_lseek_r>:
1000c5d8:	defffd04 	addi	sp,sp,-12
1000c5dc:	dc400115 	stw	r17,4(sp)
1000c5e0:	dc000015 	stw	r16,0(sp)
1000c5e4:	2023883a 	mov	r17,r4
1000c5e8:	04040074 	movhi	r16,4097
1000c5ec:	840f5904 	addi	r16,r16,15716
1000c5f0:	2809883a 	mov	r4,r5
1000c5f4:	300b883a 	mov	r5,r6
1000c5f8:	380d883a 	mov	r6,r7
1000c5fc:	dfc00215 	stw	ra,8(sp)
1000c600:	80000015 	stw	zero,0(r16)
1000c604:	000da340 	call	1000da34 <lseek>
1000c608:	00ffffc4 	movi	r3,-1
1000c60c:	10c00526 	beq	r2,r3,1000c624 <_lseek_r+0x4c>
1000c610:	dfc00217 	ldw	ra,8(sp)
1000c614:	dc400117 	ldw	r17,4(sp)
1000c618:	dc000017 	ldw	r16,0(sp)
1000c61c:	dec00304 	addi	sp,sp,12
1000c620:	f800283a 	ret
1000c624:	80c00017 	ldw	r3,0(r16)
1000c628:	183ff926 	beq	r3,zero,1000c610 <__alt_data_end+0xf800c610>
1000c62c:	88c00015 	stw	r3,0(r17)
1000c630:	dfc00217 	ldw	ra,8(sp)
1000c634:	dc400117 	ldw	r17,4(sp)
1000c638:	dc000017 	ldw	r16,0(sp)
1000c63c:	dec00304 	addi	sp,sp,12
1000c640:	f800283a 	ret

1000c644 <_read_r>:
1000c644:	defffd04 	addi	sp,sp,-12
1000c648:	dc400115 	stw	r17,4(sp)
1000c64c:	dc000015 	stw	r16,0(sp)
1000c650:	2023883a 	mov	r17,r4
1000c654:	04040074 	movhi	r16,4097
1000c658:	840f5904 	addi	r16,r16,15716
1000c65c:	2809883a 	mov	r4,r5
1000c660:	300b883a 	mov	r5,r6
1000c664:	380d883a 	mov	r6,r7
1000c668:	dfc00215 	stw	ra,8(sp)
1000c66c:	80000015 	stw	zero,0(r16)
1000c670:	000dc100 	call	1000dc10 <read>
1000c674:	00ffffc4 	movi	r3,-1
1000c678:	10c00526 	beq	r2,r3,1000c690 <_read_r+0x4c>
1000c67c:	dfc00217 	ldw	ra,8(sp)
1000c680:	dc400117 	ldw	r17,4(sp)
1000c684:	dc000017 	ldw	r16,0(sp)
1000c688:	dec00304 	addi	sp,sp,12
1000c68c:	f800283a 	ret
1000c690:	80c00017 	ldw	r3,0(r16)
1000c694:	183ff926 	beq	r3,zero,1000c67c <__alt_data_end+0xf800c67c>
1000c698:	88c00015 	stw	r3,0(r17)
1000c69c:	dfc00217 	ldw	ra,8(sp)
1000c6a0:	dc400117 	ldw	r17,4(sp)
1000c6a4:	dc000017 	ldw	r16,0(sp)
1000c6a8:	dec00304 	addi	sp,sp,12
1000c6ac:	f800283a 	ret

1000c6b0 <__udivdi3>:
1000c6b0:	defff504 	addi	sp,sp,-44
1000c6b4:	dd000515 	stw	r20,20(sp)
1000c6b8:	dcc00415 	stw	r19,16(sp)
1000c6bc:	dc800315 	stw	r18,12(sp)
1000c6c0:	dc400215 	stw	r17,8(sp)
1000c6c4:	dc000115 	stw	r16,4(sp)
1000c6c8:	dfc00a15 	stw	ra,40(sp)
1000c6cc:	df000915 	stw	fp,36(sp)
1000c6d0:	ddc00815 	stw	r23,32(sp)
1000c6d4:	dd800715 	stw	r22,28(sp)
1000c6d8:	dd400615 	stw	r21,24(sp)
1000c6dc:	2025883a 	mov	r18,r4
1000c6e0:	2823883a 	mov	r17,r5
1000c6e4:	3021883a 	mov	r16,r6
1000c6e8:	2027883a 	mov	r19,r4
1000c6ec:	2829883a 	mov	r20,r5
1000c6f0:	3800451e 	bne	r7,zero,1000c808 <__udivdi3+0x158>
1000c6f4:	2980652e 	bgeu	r5,r6,1000c88c <__udivdi3+0x1dc>
1000c6f8:	00bfffd4 	movui	r2,65535
1000c6fc:	1180b436 	bltu	r2,r6,1000c9d0 <__udivdi3+0x320>
1000c700:	00803fc4 	movi	r2,255
1000c704:	11816636 	bltu	r2,r6,1000cca0 <__udivdi3+0x5f0>
1000c708:	0005883a 	mov	r2,zero
1000c70c:	0007883a 	mov	r3,zero
1000c710:	3084d83a 	srl	r2,r6,r2
1000c714:	01040074 	movhi	r4,4097
1000c718:	21016104 	addi	r4,r4,1412
1000c71c:	2085883a 	add	r2,r4,r2
1000c720:	10800003 	ldbu	r2,0(r2)
1000c724:	10c7883a 	add	r3,r2,r3
1000c728:	00800804 	movi	r2,32
1000c72c:	10c5c83a 	sub	r2,r2,r3
1000c730:	10000526 	beq	r2,zero,1000c748 <__udivdi3+0x98>
1000c734:	88a2983a 	sll	r17,r17,r2
1000c738:	90c6d83a 	srl	r3,r18,r3
1000c73c:	30a0983a 	sll	r16,r6,r2
1000c740:	90a6983a 	sll	r19,r18,r2
1000c744:	88e8b03a 	or	r20,r17,r3
1000c748:	8022d43a 	srli	r17,r16,16
1000c74c:	a009883a 	mov	r4,r20
1000c750:	857fffcc 	andi	r21,r16,65535
1000c754:	880b883a 	mov	r5,r17
1000c758:	0004a940 	call	10004a94 <__umodsi3>
1000c75c:	a009883a 	mov	r4,r20
1000c760:	880b883a 	mov	r5,r17
1000c764:	102d883a 	mov	r22,r2
1000c768:	0004a8c0 	call	10004a8c <__udivsi3>
1000c76c:	1009883a 	mov	r4,r2
1000c770:	a80b883a 	mov	r5,r21
1000c774:	1025883a 	mov	r18,r2
1000c778:	00050500 	call	10005050 <__mulsi3>
1000c77c:	1009883a 	mov	r4,r2
1000c780:	b006943a 	slli	r3,r22,16
1000c784:	9804d43a 	srli	r2,r19,16
1000c788:	1886b03a 	or	r3,r3,r2
1000c78c:	1900052e 	bgeu	r3,r4,1000c7a4 <__udivdi3+0xf4>
1000c790:	1c07883a 	add	r3,r3,r16
1000c794:	90bfffc4 	addi	r2,r18,-1
1000c798:	1c000136 	bltu	r3,r16,1000c7a0 <__udivdi3+0xf0>
1000c79c:	19015536 	bltu	r3,r4,1000ccf4 <__udivdi3+0x644>
1000c7a0:	1025883a 	mov	r18,r2
1000c7a4:	1929c83a 	sub	r20,r3,r4
1000c7a8:	880b883a 	mov	r5,r17
1000c7ac:	a009883a 	mov	r4,r20
1000c7b0:	0004a940 	call	10004a94 <__umodsi3>
1000c7b4:	102d883a 	mov	r22,r2
1000c7b8:	880b883a 	mov	r5,r17
1000c7bc:	a009883a 	mov	r4,r20
1000c7c0:	b02c943a 	slli	r22,r22,16
1000c7c4:	0004a8c0 	call	10004a8c <__udivsi3>
1000c7c8:	1009883a 	mov	r4,r2
1000c7cc:	a80b883a 	mov	r5,r21
1000c7d0:	9cffffcc 	andi	r19,r19,65535
1000c7d4:	1023883a 	mov	r17,r2
1000c7d8:	b4e6b03a 	or	r19,r22,r19
1000c7dc:	00050500 	call	10005050 <__mulsi3>
1000c7e0:	9880052e 	bgeu	r19,r2,1000c7f8 <__udivdi3+0x148>
1000c7e4:	9c27883a 	add	r19,r19,r16
1000c7e8:	88ffffc4 	addi	r3,r17,-1
1000c7ec:	9c011436 	bltu	r19,r16,1000cc40 <__udivdi3+0x590>
1000c7f0:	9881132e 	bgeu	r19,r2,1000cc40 <__udivdi3+0x590>
1000c7f4:	8c7fff84 	addi	r17,r17,-2
1000c7f8:	9004943a 	slli	r2,r18,16
1000c7fc:	0007883a 	mov	r3,zero
1000c800:	8884b03a 	or	r2,r17,r2
1000c804:	00001506 	br	1000c85c <__udivdi3+0x1ac>
1000c808:	29c06a36 	bltu	r5,r7,1000c9b4 <__udivdi3+0x304>
1000c80c:	00bfffd4 	movui	r2,65535
1000c810:	11c06a2e 	bgeu	r2,r7,1000c9bc <__udivdi3+0x30c>
1000c814:	00804034 	movhi	r2,256
1000c818:	10bfffc4 	addi	r2,r2,-1
1000c81c:	11c11436 	bltu	r2,r7,1000cc70 <__udivdi3+0x5c0>
1000c820:	00c00404 	movi	r3,16
1000c824:	180b883a 	mov	r5,r3
1000c828:	38c6d83a 	srl	r3,r7,r3
1000c82c:	01040074 	movhi	r4,4097
1000c830:	21016104 	addi	r4,r4,1412
1000c834:	04000804 	movi	r16,32
1000c838:	20c7883a 	add	r3,r4,r3
1000c83c:	18800003 	ldbu	r2,0(r3)
1000c840:	1145883a 	add	r2,r2,r5
1000c844:	80a1c83a 	sub	r16,r16,r2
1000c848:	80006e1e 	bne	r16,zero,1000ca04 <__udivdi3+0x354>
1000c84c:	0007883a 	mov	r3,zero
1000c850:	3c406a36 	bltu	r7,r17,1000c9fc <__udivdi3+0x34c>
1000c854:	9180692e 	bgeu	r18,r6,1000c9fc <__udivdi3+0x34c>
1000c858:	0005883a 	mov	r2,zero
1000c85c:	dfc00a17 	ldw	ra,40(sp)
1000c860:	df000917 	ldw	fp,36(sp)
1000c864:	ddc00817 	ldw	r23,32(sp)
1000c868:	dd800717 	ldw	r22,28(sp)
1000c86c:	dd400617 	ldw	r21,24(sp)
1000c870:	dd000517 	ldw	r20,20(sp)
1000c874:	dcc00417 	ldw	r19,16(sp)
1000c878:	dc800317 	ldw	r18,12(sp)
1000c87c:	dc400217 	ldw	r17,8(sp)
1000c880:	dc000117 	ldw	r16,4(sp)
1000c884:	dec00b04 	addi	sp,sp,44
1000c888:	f800283a 	ret
1000c88c:	3000041e 	bne	r6,zero,1000c8a0 <__udivdi3+0x1f0>
1000c890:	01000044 	movi	r4,1
1000c894:	000b883a 	mov	r5,zero
1000c898:	0004a8c0 	call	10004a8c <__udivsi3>
1000c89c:	1021883a 	mov	r16,r2
1000c8a0:	00bfffd4 	movui	r2,65535
1000c8a4:	1400502e 	bgeu	r2,r16,1000c9e8 <__udivdi3+0x338>
1000c8a8:	00804034 	movhi	r2,256
1000c8ac:	10bfffc4 	addi	r2,r2,-1
1000c8b0:	1400f536 	bltu	r2,r16,1000cc88 <__udivdi3+0x5d8>
1000c8b4:	00800404 	movi	r2,16
1000c8b8:	1007883a 	mov	r3,r2
1000c8bc:	8084d83a 	srl	r2,r16,r2
1000c8c0:	01040074 	movhi	r4,4097
1000c8c4:	21016104 	addi	r4,r4,1412
1000c8c8:	2085883a 	add	r2,r4,r2
1000c8cc:	10800003 	ldbu	r2,0(r2)
1000c8d0:	10c7883a 	add	r3,r2,r3
1000c8d4:	00800804 	movi	r2,32
1000c8d8:	10c5c83a 	sub	r2,r2,r3
1000c8dc:	1000a01e 	bne	r2,zero,1000cb60 <__udivdi3+0x4b0>
1000c8e0:	8028d43a 	srli	r20,r16,16
1000c8e4:	8c23c83a 	sub	r17,r17,r16
1000c8e8:	857fffcc 	andi	r21,r16,65535
1000c8ec:	00c00044 	movi	r3,1
1000c8f0:	8809883a 	mov	r4,r17
1000c8f4:	a00b883a 	mov	r5,r20
1000c8f8:	d8c00015 	stw	r3,0(sp)
1000c8fc:	0004a940 	call	10004a94 <__umodsi3>
1000c900:	8809883a 	mov	r4,r17
1000c904:	a00b883a 	mov	r5,r20
1000c908:	102d883a 	mov	r22,r2
1000c90c:	0004a8c0 	call	10004a8c <__udivsi3>
1000c910:	1009883a 	mov	r4,r2
1000c914:	a80b883a 	mov	r5,r21
1000c918:	1025883a 	mov	r18,r2
1000c91c:	00050500 	call	10005050 <__mulsi3>
1000c920:	1009883a 	mov	r4,r2
1000c924:	b00c943a 	slli	r6,r22,16
1000c928:	9804d43a 	srli	r2,r19,16
1000c92c:	d8c00017 	ldw	r3,0(sp)
1000c930:	308cb03a 	or	r6,r6,r2
1000c934:	3100052e 	bgeu	r6,r4,1000c94c <__udivdi3+0x29c>
1000c938:	340d883a 	add	r6,r6,r16
1000c93c:	90bfffc4 	addi	r2,r18,-1
1000c940:	34000136 	bltu	r6,r16,1000c948 <__udivdi3+0x298>
1000c944:	3100e836 	bltu	r6,r4,1000cce8 <__udivdi3+0x638>
1000c948:	1025883a 	mov	r18,r2
1000c94c:	3123c83a 	sub	r17,r6,r4
1000c950:	8809883a 	mov	r4,r17
1000c954:	a00b883a 	mov	r5,r20
1000c958:	d8c00015 	stw	r3,0(sp)
1000c95c:	0004a940 	call	10004a94 <__umodsi3>
1000c960:	102d883a 	mov	r22,r2
1000c964:	8809883a 	mov	r4,r17
1000c968:	a00b883a 	mov	r5,r20
1000c96c:	b02c943a 	slli	r22,r22,16
1000c970:	0004a8c0 	call	10004a8c <__udivsi3>
1000c974:	1009883a 	mov	r4,r2
1000c978:	a80b883a 	mov	r5,r21
1000c97c:	9cffffcc 	andi	r19,r19,65535
1000c980:	1023883a 	mov	r17,r2
1000c984:	b4e6b03a 	or	r19,r22,r19
1000c988:	00050500 	call	10005050 <__mulsi3>
1000c98c:	d8c00017 	ldw	r3,0(sp)
1000c990:	9880052e 	bgeu	r19,r2,1000c9a8 <__udivdi3+0x2f8>
1000c994:	9c27883a 	add	r19,r19,r16
1000c998:	893fffc4 	addi	r4,r17,-1
1000c99c:	9c00aa36 	bltu	r19,r16,1000cc48 <__udivdi3+0x598>
1000c9a0:	9880a92e 	bgeu	r19,r2,1000cc48 <__udivdi3+0x598>
1000c9a4:	8c7fff84 	addi	r17,r17,-2
1000c9a8:	9004943a 	slli	r2,r18,16
1000c9ac:	8884b03a 	or	r2,r17,r2
1000c9b0:	003faa06 	br	1000c85c <__alt_data_end+0xf800c85c>
1000c9b4:	0007883a 	mov	r3,zero
1000c9b8:	003fa706 	br	1000c858 <__alt_data_end+0xf800c858>
1000c9bc:	00803fc4 	movi	r2,255
1000c9c0:	11c0ae36 	bltu	r2,r7,1000cc7c <__udivdi3+0x5cc>
1000c9c4:	0007883a 	mov	r3,zero
1000c9c8:	000b883a 	mov	r5,zero
1000c9cc:	003f9606 	br	1000c828 <__alt_data_end+0xf800c828>
1000c9d0:	00804034 	movhi	r2,256
1000c9d4:	10bfffc4 	addi	r2,r2,-1
1000c9d8:	1180ae36 	bltu	r2,r6,1000cc94 <__udivdi3+0x5e4>
1000c9dc:	00800404 	movi	r2,16
1000c9e0:	1007883a 	mov	r3,r2
1000c9e4:	003f4a06 	br	1000c710 <__alt_data_end+0xf800c710>
1000c9e8:	00803fc4 	movi	r2,255
1000c9ec:	1400af36 	bltu	r2,r16,1000ccac <__udivdi3+0x5fc>
1000c9f0:	0005883a 	mov	r2,zero
1000c9f4:	0007883a 	mov	r3,zero
1000c9f8:	003fb006 	br	1000c8bc <__alt_data_end+0xf800c8bc>
1000c9fc:	00800044 	movi	r2,1
1000ca00:	003f9606 	br	1000c85c <__alt_data_end+0xf800c85c>
1000ca04:	3c0e983a 	sll	r7,r7,r16
1000ca08:	3086d83a 	srl	r3,r6,r2
1000ca0c:	88aed83a 	srl	r23,r17,r2
1000ca10:	9084d83a 	srl	r2,r18,r2
1000ca14:	38e6b03a 	or	r19,r7,r3
1000ca18:	9828d43a 	srli	r20,r19,16
1000ca1c:	8c22983a 	sll	r17,r17,r16
1000ca20:	b809883a 	mov	r4,r23
1000ca24:	a00b883a 	mov	r5,r20
1000ca28:	342a983a 	sll	r21,r6,r16
1000ca2c:	88a2b03a 	or	r17,r17,r2
1000ca30:	0004a940 	call	10004a94 <__umodsi3>
1000ca34:	b809883a 	mov	r4,r23
1000ca38:	a00b883a 	mov	r5,r20
1000ca3c:	1039883a 	mov	fp,r2
1000ca40:	9dbfffcc 	andi	r22,r19,65535
1000ca44:	0004a8c0 	call	10004a8c <__udivsi3>
1000ca48:	1009883a 	mov	r4,r2
1000ca4c:	b00b883a 	mov	r5,r22
1000ca50:	102f883a 	mov	r23,r2
1000ca54:	00050500 	call	10005050 <__mulsi3>
1000ca58:	1009883a 	mov	r4,r2
1000ca5c:	e00e943a 	slli	r7,fp,16
1000ca60:	8804d43a 	srli	r2,r17,16
1000ca64:	388eb03a 	or	r7,r7,r2
1000ca68:	3900042e 	bgeu	r7,r4,1000ca7c <__udivdi3+0x3cc>
1000ca6c:	3ccf883a 	add	r7,r7,r19
1000ca70:	b8bfffc4 	addi	r2,r23,-1
1000ca74:	3cc0942e 	bgeu	r7,r19,1000ccc8 <__udivdi3+0x618>
1000ca78:	102f883a 	mov	r23,r2
1000ca7c:	3939c83a 	sub	fp,r7,r4
1000ca80:	a00b883a 	mov	r5,r20
1000ca84:	e009883a 	mov	r4,fp
1000ca88:	0004a940 	call	10004a94 <__umodsi3>
1000ca8c:	a00b883a 	mov	r5,r20
1000ca90:	e009883a 	mov	r4,fp
1000ca94:	d8800015 	stw	r2,0(sp)
1000ca98:	0004a8c0 	call	10004a8c <__udivsi3>
1000ca9c:	1009883a 	mov	r4,r2
1000caa0:	b00b883a 	mov	r5,r22
1000caa4:	1029883a 	mov	r20,r2
1000caa8:	00050500 	call	10005050 <__mulsi3>
1000caac:	d8c00017 	ldw	r3,0(sp)
1000cab0:	8c7fffcc 	andi	r17,r17,65535
1000cab4:	1806943a 	slli	r3,r3,16
1000cab8:	1c46b03a 	or	r3,r3,r17
1000cabc:	1880042e 	bgeu	r3,r2,1000cad0 <__udivdi3+0x420>
1000cac0:	1cc7883a 	add	r3,r3,r19
1000cac4:	a13fffc4 	addi	r4,r20,-1
1000cac8:	1cc07b2e 	bgeu	r3,r19,1000ccb8 <__udivdi3+0x608>
1000cacc:	2029883a 	mov	r20,r4
1000cad0:	b82e943a 	slli	r23,r23,16
1000cad4:	a822d43a 	srli	r17,r21,16
1000cad8:	ad7fffcc 	andi	r21,r21,65535
1000cadc:	a5e8b03a 	or	r20,r20,r23
1000cae0:	a5bfffcc 	andi	r22,r20,65535
1000cae4:	b009883a 	mov	r4,r22
1000cae8:	a80b883a 	mov	r5,r21
1000caec:	18afc83a 	sub	r23,r3,r2
1000caf0:	a026d43a 	srli	r19,r20,16
1000caf4:	00050500 	call	10005050 <__mulsi3>
1000caf8:	b009883a 	mov	r4,r22
1000cafc:	880b883a 	mov	r5,r17
1000cb00:	1039883a 	mov	fp,r2
1000cb04:	00050500 	call	10005050 <__mulsi3>
1000cb08:	a80b883a 	mov	r5,r21
1000cb0c:	9809883a 	mov	r4,r19
1000cb10:	102d883a 	mov	r22,r2
1000cb14:	00050500 	call	10005050 <__mulsi3>
1000cb18:	9809883a 	mov	r4,r19
1000cb1c:	880b883a 	mov	r5,r17
1000cb20:	102b883a 	mov	r21,r2
1000cb24:	00050500 	call	10005050 <__mulsi3>
1000cb28:	100b883a 	mov	r5,r2
1000cb2c:	e004d43a 	srli	r2,fp,16
1000cb30:	ad89883a 	add	r4,r21,r22
1000cb34:	2089883a 	add	r4,r4,r2
1000cb38:	2540022e 	bgeu	r4,r21,1000cb44 <__udivdi3+0x494>
1000cb3c:	00800074 	movhi	r2,1
1000cb40:	288b883a 	add	r5,r5,r2
1000cb44:	2004d43a 	srli	r2,r4,16
1000cb48:	288b883a 	add	r5,r5,r2
1000cb4c:	b9404536 	bltu	r23,r5,1000cc64 <__udivdi3+0x5b4>
1000cb50:	b9403f26 	beq	r23,r5,1000cc50 <__udivdi3+0x5a0>
1000cb54:	a005883a 	mov	r2,r20
1000cb58:	0007883a 	mov	r3,zero
1000cb5c:	003f3f06 	br	1000c85c <__alt_data_end+0xf800c85c>
1000cb60:	80a0983a 	sll	r16,r16,r2
1000cb64:	88eed83a 	srl	r23,r17,r3
1000cb68:	90c6d83a 	srl	r3,r18,r3
1000cb6c:	8028d43a 	srli	r20,r16,16
1000cb70:	88a2983a 	sll	r17,r17,r2
1000cb74:	b809883a 	mov	r4,r23
1000cb78:	a00b883a 	mov	r5,r20
1000cb7c:	88ecb03a 	or	r22,r17,r3
1000cb80:	90a6983a 	sll	r19,r18,r2
1000cb84:	0004a940 	call	10004a94 <__umodsi3>
1000cb88:	b809883a 	mov	r4,r23
1000cb8c:	a00b883a 	mov	r5,r20
1000cb90:	1023883a 	mov	r17,r2
1000cb94:	857fffcc 	andi	r21,r16,65535
1000cb98:	0004a8c0 	call	10004a8c <__udivsi3>
1000cb9c:	1009883a 	mov	r4,r2
1000cba0:	a80b883a 	mov	r5,r21
1000cba4:	102f883a 	mov	r23,r2
1000cba8:	00050500 	call	10005050 <__mulsi3>
1000cbac:	1009883a 	mov	r4,r2
1000cbb0:	880a943a 	slli	r5,r17,16
1000cbb4:	b004d43a 	srli	r2,r22,16
1000cbb8:	288ab03a 	or	r5,r5,r2
1000cbbc:	2900062e 	bgeu	r5,r4,1000cbd8 <__udivdi3+0x528>
1000cbc0:	2c0b883a 	add	r5,r5,r16
1000cbc4:	b8bfffc4 	addi	r2,r23,-1
1000cbc8:	2c004536 	bltu	r5,r16,1000cce0 <__udivdi3+0x630>
1000cbcc:	2900442e 	bgeu	r5,r4,1000cce0 <__udivdi3+0x630>
1000cbd0:	bdffff84 	addi	r23,r23,-2
1000cbd4:	2c0b883a 	add	r5,r5,r16
1000cbd8:	2925c83a 	sub	r18,r5,r4
1000cbdc:	9009883a 	mov	r4,r18
1000cbe0:	a00b883a 	mov	r5,r20
1000cbe4:	0004a940 	call	10004a94 <__umodsi3>
1000cbe8:	1023883a 	mov	r17,r2
1000cbec:	9009883a 	mov	r4,r18
1000cbf0:	a00b883a 	mov	r5,r20
1000cbf4:	8822943a 	slli	r17,r17,16
1000cbf8:	0004a8c0 	call	10004a8c <__udivsi3>
1000cbfc:	1009883a 	mov	r4,r2
1000cc00:	a80b883a 	mov	r5,r21
1000cc04:	b5bfffcc 	andi	r22,r22,65535
1000cc08:	1025883a 	mov	r18,r2
1000cc0c:	8da2b03a 	or	r17,r17,r22
1000cc10:	00050500 	call	10005050 <__mulsi3>
1000cc14:	8880062e 	bgeu	r17,r2,1000cc30 <__udivdi3+0x580>
1000cc18:	8c23883a 	add	r17,r17,r16
1000cc1c:	90ffffc4 	addi	r3,r18,-1
1000cc20:	8c002d36 	bltu	r17,r16,1000ccd8 <__udivdi3+0x628>
1000cc24:	88802c2e 	bgeu	r17,r2,1000ccd8 <__udivdi3+0x628>
1000cc28:	94bfff84 	addi	r18,r18,-2
1000cc2c:	8c23883a 	add	r17,r17,r16
1000cc30:	b806943a 	slli	r3,r23,16
1000cc34:	88a3c83a 	sub	r17,r17,r2
1000cc38:	90c6b03a 	or	r3,r18,r3
1000cc3c:	003f2c06 	br	1000c8f0 <__alt_data_end+0xf800c8f0>
1000cc40:	1823883a 	mov	r17,r3
1000cc44:	003eec06 	br	1000c7f8 <__alt_data_end+0xf800c7f8>
1000cc48:	2023883a 	mov	r17,r4
1000cc4c:	003f5606 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000cc50:	2008943a 	slli	r4,r4,16
1000cc54:	9420983a 	sll	r16,r18,r16
1000cc58:	e73fffcc 	andi	fp,fp,65535
1000cc5c:	2709883a 	add	r4,r4,fp
1000cc60:	813fbc2e 	bgeu	r16,r4,1000cb54 <__alt_data_end+0xf800cb54>
1000cc64:	a0bfffc4 	addi	r2,r20,-1
1000cc68:	0007883a 	mov	r3,zero
1000cc6c:	003efb06 	br	1000c85c <__alt_data_end+0xf800c85c>
1000cc70:	00c00604 	movi	r3,24
1000cc74:	180b883a 	mov	r5,r3
1000cc78:	003eeb06 	br	1000c828 <__alt_data_end+0xf800c828>
1000cc7c:	00c00204 	movi	r3,8
1000cc80:	180b883a 	mov	r5,r3
1000cc84:	003ee806 	br	1000c828 <__alt_data_end+0xf800c828>
1000cc88:	00800604 	movi	r2,24
1000cc8c:	1007883a 	mov	r3,r2
1000cc90:	003f0a06 	br	1000c8bc <__alt_data_end+0xf800c8bc>
1000cc94:	00800604 	movi	r2,24
1000cc98:	1007883a 	mov	r3,r2
1000cc9c:	003e9c06 	br	1000c710 <__alt_data_end+0xf800c710>
1000cca0:	00800204 	movi	r2,8
1000cca4:	1007883a 	mov	r3,r2
1000cca8:	003e9906 	br	1000c710 <__alt_data_end+0xf800c710>
1000ccac:	00800204 	movi	r2,8
1000ccb0:	1007883a 	mov	r3,r2
1000ccb4:	003f0106 	br	1000c8bc <__alt_data_end+0xf800c8bc>
1000ccb8:	18bf842e 	bgeu	r3,r2,1000cacc <__alt_data_end+0xf800cacc>
1000ccbc:	a53fff84 	addi	r20,r20,-2
1000ccc0:	1cc7883a 	add	r3,r3,r19
1000ccc4:	003f8206 	br	1000cad0 <__alt_data_end+0xf800cad0>
1000ccc8:	393f6b2e 	bgeu	r7,r4,1000ca78 <__alt_data_end+0xf800ca78>
1000cccc:	bdffff84 	addi	r23,r23,-2
1000ccd0:	3ccf883a 	add	r7,r7,r19
1000ccd4:	003f6906 	br	1000ca7c <__alt_data_end+0xf800ca7c>
1000ccd8:	1825883a 	mov	r18,r3
1000ccdc:	003fd406 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000cce0:	102f883a 	mov	r23,r2
1000cce4:	003fbc06 	br	1000cbd8 <__alt_data_end+0xf800cbd8>
1000cce8:	94bfff84 	addi	r18,r18,-2
1000ccec:	340d883a 	add	r6,r6,r16
1000ccf0:	003f1606 	br	1000c94c <__alt_data_end+0xf800c94c>
1000ccf4:	94bfff84 	addi	r18,r18,-2
1000ccf8:	1c07883a 	add	r3,r3,r16
1000ccfc:	003ea906 	br	1000c7a4 <__alt_data_end+0xf800c7a4>

1000cd00 <__umoddi3>:
1000cd00:	defff304 	addi	sp,sp,-52
1000cd04:	dd000715 	stw	r20,28(sp)
1000cd08:	dcc00615 	stw	r19,24(sp)
1000cd0c:	dc800515 	stw	r18,20(sp)
1000cd10:	dc400415 	stw	r17,16(sp)
1000cd14:	dc000315 	stw	r16,12(sp)
1000cd18:	dfc00c15 	stw	ra,48(sp)
1000cd1c:	df000b15 	stw	fp,44(sp)
1000cd20:	ddc00a15 	stw	r23,40(sp)
1000cd24:	dd800915 	stw	r22,36(sp)
1000cd28:	dd400815 	stw	r21,32(sp)
1000cd2c:	2025883a 	mov	r18,r4
1000cd30:	2823883a 	mov	r17,r5
1000cd34:	3021883a 	mov	r16,r6
1000cd38:	2027883a 	mov	r19,r4
1000cd3c:	2829883a 	mov	r20,r5
1000cd40:	38003a1e 	bne	r7,zero,1000ce2c <__umoddi3+0x12c>
1000cd44:	2980522e 	bgeu	r5,r6,1000ce90 <__umoddi3+0x190>
1000cd48:	00bfffd4 	movui	r2,65535
1000cd4c:	1180a436 	bltu	r2,r6,1000cfe0 <__umoddi3+0x2e0>
1000cd50:	00803fc4 	movi	r2,255
1000cd54:	11816036 	bltu	r2,r6,1000d2d8 <__umoddi3+0x5d8>
1000cd58:	0005883a 	mov	r2,zero
1000cd5c:	0009883a 	mov	r4,zero
1000cd60:	3084d83a 	srl	r2,r6,r2
1000cd64:	00c40074 	movhi	r3,4097
1000cd68:	18c16104 	addi	r3,r3,1412
1000cd6c:	05400804 	movi	r21,32
1000cd70:	1885883a 	add	r2,r3,r2
1000cd74:	10800003 	ldbu	r2,0(r2)
1000cd78:	1109883a 	add	r4,r2,r4
1000cd7c:	a92bc83a 	sub	r21,r21,r4
1000cd80:	a8010e26 	beq	r21,zero,1000d1bc <__umoddi3+0x4bc>
1000cd84:	8d62983a 	sll	r17,r17,r21
1000cd88:	9108d83a 	srl	r4,r18,r4
1000cd8c:	3560983a 	sll	r16,r6,r21
1000cd90:	9566983a 	sll	r19,r18,r21
1000cd94:	8928b03a 	or	r20,r17,r4
1000cd98:	8022d43a 	srli	r17,r16,16
1000cd9c:	a009883a 	mov	r4,r20
1000cda0:	84bfffcc 	andi	r18,r16,65535
1000cda4:	880b883a 	mov	r5,r17
1000cda8:	0004a940 	call	10004a94 <__umodsi3>
1000cdac:	a009883a 	mov	r4,r20
1000cdb0:	880b883a 	mov	r5,r17
1000cdb4:	102d883a 	mov	r22,r2
1000cdb8:	0004a8c0 	call	10004a8c <__udivsi3>
1000cdbc:	1009883a 	mov	r4,r2
1000cdc0:	900b883a 	mov	r5,r18
1000cdc4:	00050500 	call	10005050 <__mulsi3>
1000cdc8:	1009883a 	mov	r4,r2
1000cdcc:	b006943a 	slli	r3,r22,16
1000cdd0:	9804d43a 	srli	r2,r19,16
1000cdd4:	1886b03a 	or	r3,r3,r2
1000cdd8:	1900042e 	bgeu	r3,r4,1000cdec <__umoddi3+0xec>
1000cddc:	1c07883a 	add	r3,r3,r16
1000cde0:	1c000236 	bltu	r3,r16,1000cdec <__umoddi3+0xec>
1000cde4:	1900012e 	bgeu	r3,r4,1000cdec <__umoddi3+0xec>
1000cde8:	1c07883a 	add	r3,r3,r16
1000cdec:	1929c83a 	sub	r20,r3,r4
1000cdf0:	a009883a 	mov	r4,r20
1000cdf4:	880b883a 	mov	r5,r17
1000cdf8:	0004a940 	call	10004a94 <__umodsi3>
1000cdfc:	102d883a 	mov	r22,r2
1000ce00:	a009883a 	mov	r4,r20
1000ce04:	880b883a 	mov	r5,r17
1000ce08:	b02c943a 	slli	r22,r22,16
1000ce0c:	0004a8c0 	call	10004a8c <__udivsi3>
1000ce10:	1009883a 	mov	r4,r2
1000ce14:	900b883a 	mov	r5,r18
1000ce18:	9cffffcc 	andi	r19,r19,65535
1000ce1c:	00050500 	call	10005050 <__mulsi3>
1000ce20:	b4e6b03a 	or	r19,r22,r19
1000ce24:	9880572e 	bgeu	r19,r2,1000cf84 <__umoddi3+0x284>
1000ce28:	00005206 	br	1000cf74 <__umoddi3+0x274>
1000ce2c:	29c05936 	bltu	r5,r7,1000cf94 <__umoddi3+0x294>
1000ce30:	00bfffd4 	movui	r2,65535
1000ce34:	11c0652e 	bgeu	r2,r7,1000cfcc <__umoddi3+0x2cc>
1000ce38:	00804034 	movhi	r2,256
1000ce3c:	10bfffc4 	addi	r2,r2,-1
1000ce40:	11c11936 	bltu	r2,r7,1000d2a8 <__umoddi3+0x5a8>
1000ce44:	00c00404 	movi	r3,16
1000ce48:	1827883a 	mov	r19,r3
1000ce4c:	38c6d83a 	srl	r3,r7,r3
1000ce50:	01040074 	movhi	r4,4097
1000ce54:	21016104 	addi	r4,r4,1412
1000ce58:	04000804 	movi	r16,32
1000ce5c:	20c7883a 	add	r3,r4,r3
1000ce60:	18800003 	ldbu	r2,0(r3)
1000ce64:	14e7883a 	add	r19,r2,r19
1000ce68:	84e1c83a 	sub	r16,r16,r19
1000ce6c:	8000671e 	bne	r16,zero,1000d00c <__umoddi3+0x30c>
1000ce70:	3c400136 	bltu	r7,r17,1000ce78 <__umoddi3+0x178>
1000ce74:	91812536 	bltu	r18,r6,1000d30c <__umoddi3+0x60c>
1000ce78:	9185c83a 	sub	r2,r18,r6
1000ce7c:	89e3c83a 	sub	r17,r17,r7
1000ce80:	90a5803a 	cmpltu	r18,r18,r2
1000ce84:	8ca9c83a 	sub	r20,r17,r18
1000ce88:	a007883a 	mov	r3,r20
1000ce8c:	00004306 	br	1000cf9c <__umoddi3+0x29c>
1000ce90:	3000041e 	bne	r6,zero,1000cea4 <__umoddi3+0x1a4>
1000ce94:	01000044 	movi	r4,1
1000ce98:	000b883a 	mov	r5,zero
1000ce9c:	0004a8c0 	call	10004a8c <__udivsi3>
1000cea0:	1021883a 	mov	r16,r2
1000cea4:	00bfffd4 	movui	r2,65535
1000cea8:	1400532e 	bgeu	r2,r16,1000cff8 <__umoddi3+0x2f8>
1000ceac:	00804034 	movhi	r2,256
1000ceb0:	10bfffc4 	addi	r2,r2,-1
1000ceb4:	14010536 	bltu	r2,r16,1000d2cc <__umoddi3+0x5cc>
1000ceb8:	00800404 	movi	r2,16
1000cebc:	1007883a 	mov	r3,r2
1000cec0:	8084d83a 	srl	r2,r16,r2
1000cec4:	01040074 	movhi	r4,4097
1000cec8:	21016104 	addi	r4,r4,1412
1000cecc:	05400804 	movi	r21,32
1000ced0:	2085883a 	add	r2,r4,r2
1000ced4:	10800003 	ldbu	r2,0(r2)
1000ced8:	10c7883a 	add	r3,r2,r3
1000cedc:	a8ebc83a 	sub	r21,r21,r3
1000cee0:	a800b81e 	bne	r21,zero,1000d1c4 <__umoddi3+0x4c4>
1000cee4:	8028d43a 	srli	r20,r16,16
1000cee8:	8c23c83a 	sub	r17,r17,r16
1000ceec:	85bfffcc 	andi	r22,r16,65535
1000cef0:	8809883a 	mov	r4,r17
1000cef4:	a00b883a 	mov	r5,r20
1000cef8:	0004a940 	call	10004a94 <__umodsi3>
1000cefc:	8809883a 	mov	r4,r17
1000cf00:	a00b883a 	mov	r5,r20
1000cf04:	1025883a 	mov	r18,r2
1000cf08:	0004a8c0 	call	10004a8c <__udivsi3>
1000cf0c:	1009883a 	mov	r4,r2
1000cf10:	b00b883a 	mov	r5,r22
1000cf14:	00050500 	call	10005050 <__mulsi3>
1000cf18:	1009883a 	mov	r4,r2
1000cf1c:	9006943a 	slli	r3,r18,16
1000cf20:	9804d43a 	srli	r2,r19,16
1000cf24:	1886b03a 	or	r3,r3,r2
1000cf28:	1900032e 	bgeu	r3,r4,1000cf38 <__umoddi3+0x238>
1000cf2c:	1c07883a 	add	r3,r3,r16
1000cf30:	1c000136 	bltu	r3,r16,1000cf38 <__umoddi3+0x238>
1000cf34:	1900f336 	bltu	r3,r4,1000d304 <__umoddi3+0x604>
1000cf38:	1923c83a 	sub	r17,r3,r4
1000cf3c:	8809883a 	mov	r4,r17
1000cf40:	a00b883a 	mov	r5,r20
1000cf44:	0004a940 	call	10004a94 <__umodsi3>
1000cf48:	102f883a 	mov	r23,r2
1000cf4c:	8809883a 	mov	r4,r17
1000cf50:	a00b883a 	mov	r5,r20
1000cf54:	b82e943a 	slli	r23,r23,16
1000cf58:	0004a8c0 	call	10004a8c <__udivsi3>
1000cf5c:	1009883a 	mov	r4,r2
1000cf60:	b00b883a 	mov	r5,r22
1000cf64:	9cffffcc 	andi	r19,r19,65535
1000cf68:	00050500 	call	10005050 <__mulsi3>
1000cf6c:	bce6b03a 	or	r19,r23,r19
1000cf70:	9880042e 	bgeu	r19,r2,1000cf84 <__umoddi3+0x284>
1000cf74:	9c27883a 	add	r19,r19,r16
1000cf78:	9c000236 	bltu	r19,r16,1000cf84 <__umoddi3+0x284>
1000cf7c:	9880012e 	bgeu	r19,r2,1000cf84 <__umoddi3+0x284>
1000cf80:	9c27883a 	add	r19,r19,r16
1000cf84:	9885c83a 	sub	r2,r19,r2
1000cf88:	1544d83a 	srl	r2,r2,r21
1000cf8c:	0007883a 	mov	r3,zero
1000cf90:	00000206 	br	1000cf9c <__umoddi3+0x29c>
1000cf94:	2005883a 	mov	r2,r4
1000cf98:	2807883a 	mov	r3,r5
1000cf9c:	dfc00c17 	ldw	ra,48(sp)
1000cfa0:	df000b17 	ldw	fp,44(sp)
1000cfa4:	ddc00a17 	ldw	r23,40(sp)
1000cfa8:	dd800917 	ldw	r22,36(sp)
1000cfac:	dd400817 	ldw	r21,32(sp)
1000cfb0:	dd000717 	ldw	r20,28(sp)
1000cfb4:	dcc00617 	ldw	r19,24(sp)
1000cfb8:	dc800517 	ldw	r18,20(sp)
1000cfbc:	dc400417 	ldw	r17,16(sp)
1000cfc0:	dc000317 	ldw	r16,12(sp)
1000cfc4:	dec00d04 	addi	sp,sp,52
1000cfc8:	f800283a 	ret
1000cfcc:	00803fc4 	movi	r2,255
1000cfd0:	11c0b236 	bltu	r2,r7,1000d29c <__umoddi3+0x59c>
1000cfd4:	0007883a 	mov	r3,zero
1000cfd8:	0027883a 	mov	r19,zero
1000cfdc:	003f9b06 	br	1000ce4c <__alt_data_end+0xf800ce4c>
1000cfe0:	00804034 	movhi	r2,256
1000cfe4:	10bfffc4 	addi	r2,r2,-1
1000cfe8:	1180b236 	bltu	r2,r6,1000d2b4 <__umoddi3+0x5b4>
1000cfec:	00800404 	movi	r2,16
1000cff0:	1009883a 	mov	r4,r2
1000cff4:	003f5a06 	br	1000cd60 <__alt_data_end+0xf800cd60>
1000cff8:	00803fc4 	movi	r2,255
1000cffc:	1400b036 	bltu	r2,r16,1000d2c0 <__umoddi3+0x5c0>
1000d000:	0005883a 	mov	r2,zero
1000d004:	0007883a 	mov	r3,zero
1000d008:	003fad06 	br	1000cec0 <__alt_data_end+0xf800cec0>
1000d00c:	34c4d83a 	srl	r2,r6,r19
1000d010:	3c0e983a 	sll	r7,r7,r16
1000d014:	8cf8d83a 	srl	fp,r17,r19
1000d018:	8c22983a 	sll	r17,r17,r16
1000d01c:	38a8b03a 	or	r20,r7,r2
1000d020:	a02ad43a 	srli	r21,r20,16
1000d024:	94c4d83a 	srl	r2,r18,r19
1000d028:	e009883a 	mov	r4,fp
1000d02c:	a80b883a 	mov	r5,r21
1000d030:	342c983a 	sll	r22,r6,r16
1000d034:	88a2b03a 	or	r17,r17,r2
1000d038:	0004a940 	call	10004a94 <__umodsi3>
1000d03c:	e009883a 	mov	r4,fp
1000d040:	a80b883a 	mov	r5,r21
1000d044:	a5ffffcc 	andi	r23,r20,65535
1000d048:	d8800215 	stw	r2,8(sp)
1000d04c:	0004a8c0 	call	10004a8c <__udivsi3>
1000d050:	1009883a 	mov	r4,r2
1000d054:	b80b883a 	mov	r5,r23
1000d058:	1039883a 	mov	fp,r2
1000d05c:	00050500 	call	10005050 <__mulsi3>
1000d060:	d8c00217 	ldw	r3,8(sp)
1000d064:	1009883a 	mov	r4,r2
1000d068:	8804d43a 	srli	r2,r17,16
1000d06c:	1806943a 	slli	r3,r3,16
1000d070:	9424983a 	sll	r18,r18,r16
1000d074:	1886b03a 	or	r3,r3,r2
1000d078:	1900042e 	bgeu	r3,r4,1000d08c <__umoddi3+0x38c>
1000d07c:	1d07883a 	add	r3,r3,r20
1000d080:	e0bfffc4 	addi	r2,fp,-1
1000d084:	1d009b2e 	bgeu	r3,r20,1000d2f4 <__umoddi3+0x5f4>
1000d088:	1039883a 	mov	fp,r2
1000d08c:	1907c83a 	sub	r3,r3,r4
1000d090:	1809883a 	mov	r4,r3
1000d094:	a80b883a 	mov	r5,r21
1000d098:	d8c00215 	stw	r3,8(sp)
1000d09c:	0004a940 	call	10004a94 <__umodsi3>
1000d0a0:	d8c00217 	ldw	r3,8(sp)
1000d0a4:	a80b883a 	mov	r5,r21
1000d0a8:	d8800015 	stw	r2,0(sp)
1000d0ac:	1809883a 	mov	r4,r3
1000d0b0:	0004a8c0 	call	10004a8c <__udivsi3>
1000d0b4:	1009883a 	mov	r4,r2
1000d0b8:	b80b883a 	mov	r5,r23
1000d0bc:	102b883a 	mov	r21,r2
1000d0c0:	00050500 	call	10005050 <__mulsi3>
1000d0c4:	d9c00017 	ldw	r7,0(sp)
1000d0c8:	8c7fffcc 	andi	r17,r17,65535
1000d0cc:	380e943a 	slli	r7,r7,16
1000d0d0:	3c4eb03a 	or	r7,r7,r17
1000d0d4:	3880042e 	bgeu	r7,r2,1000d0e8 <__umoddi3+0x3e8>
1000d0d8:	3d0f883a 	add	r7,r7,r20
1000d0dc:	a8ffffc4 	addi	r3,r21,-1
1000d0e0:	3d00802e 	bgeu	r7,r20,1000d2e4 <__umoddi3+0x5e4>
1000d0e4:	182b883a 	mov	r21,r3
1000d0e8:	e038943a 	slli	fp,fp,16
1000d0ec:	b010d43a 	srli	r8,r22,16
1000d0f0:	b1bfffcc 	andi	r6,r22,65535
1000d0f4:	af2ab03a 	or	r21,r21,fp
1000d0f8:	a82ed43a 	srli	r23,r21,16
1000d0fc:	ad7fffcc 	andi	r21,r21,65535
1000d100:	300b883a 	mov	r5,r6
1000d104:	a809883a 	mov	r4,r21
1000d108:	38a3c83a 	sub	r17,r7,r2
1000d10c:	d9800115 	stw	r6,4(sp)
1000d110:	da000015 	stw	r8,0(sp)
1000d114:	00050500 	call	10005050 <__mulsi3>
1000d118:	da000017 	ldw	r8,0(sp)
1000d11c:	a809883a 	mov	r4,r21
1000d120:	1039883a 	mov	fp,r2
1000d124:	400b883a 	mov	r5,r8
1000d128:	da000215 	stw	r8,8(sp)
1000d12c:	00050500 	call	10005050 <__mulsi3>
1000d130:	d9800117 	ldw	r6,4(sp)
1000d134:	b809883a 	mov	r4,r23
1000d138:	d8800015 	stw	r2,0(sp)
1000d13c:	300b883a 	mov	r5,r6
1000d140:	00050500 	call	10005050 <__mulsi3>
1000d144:	d8c00217 	ldw	r3,8(sp)
1000d148:	b809883a 	mov	r4,r23
1000d14c:	102b883a 	mov	r21,r2
1000d150:	180b883a 	mov	r5,r3
1000d154:	00050500 	call	10005050 <__mulsi3>
1000d158:	d9c00017 	ldw	r7,0(sp)
1000d15c:	1007883a 	mov	r3,r2
1000d160:	e004d43a 	srli	r2,fp,16
1000d164:	a9c9883a 	add	r4,r21,r7
1000d168:	2089883a 	add	r4,r4,r2
1000d16c:	2540022e 	bgeu	r4,r21,1000d178 <__umoddi3+0x478>
1000d170:	00800074 	movhi	r2,1
1000d174:	1887883a 	add	r3,r3,r2
1000d178:	2004d43a 	srli	r2,r4,16
1000d17c:	2008943a 	slli	r4,r4,16
1000d180:	e73fffcc 	andi	fp,fp,65535
1000d184:	1887883a 	add	r3,r3,r2
1000d188:	2709883a 	add	r4,r4,fp
1000d18c:	88c03d36 	bltu	r17,r3,1000d284 <__umoddi3+0x584>
1000d190:	88c06126 	beq	r17,r3,1000d318 <__umoddi3+0x618>
1000d194:	88c7c83a 	sub	r3,r17,r3
1000d198:	202d883a 	mov	r22,r4
1000d19c:	95adc83a 	sub	r22,r18,r22
1000d1a0:	95a5803a 	cmpltu	r18,r18,r22
1000d1a4:	1c87c83a 	sub	r3,r3,r18
1000d1a8:	1cc4983a 	sll	r2,r3,r19
1000d1ac:	b42cd83a 	srl	r22,r22,r16
1000d1b0:	1c06d83a 	srl	r3,r3,r16
1000d1b4:	1584b03a 	or	r2,r2,r22
1000d1b8:	003f7806 	br	1000cf9c <__alt_data_end+0xf800cf9c>
1000d1bc:	002b883a 	mov	r21,zero
1000d1c0:	003ef506 	br	1000cd98 <__alt_data_end+0xf800cd98>
1000d1c4:	8560983a 	sll	r16,r16,r21
1000d1c8:	88e6d83a 	srl	r19,r17,r3
1000d1cc:	90c6d83a 	srl	r3,r18,r3
1000d1d0:	8028d43a 	srli	r20,r16,16
1000d1d4:	8d62983a 	sll	r17,r17,r21
1000d1d8:	9809883a 	mov	r4,r19
1000d1dc:	a00b883a 	mov	r5,r20
1000d1e0:	88eeb03a 	or	r23,r17,r3
1000d1e4:	0004a940 	call	10004a94 <__umodsi3>
1000d1e8:	9809883a 	mov	r4,r19
1000d1ec:	a00b883a 	mov	r5,r20
1000d1f0:	1023883a 	mov	r17,r2
1000d1f4:	85bfffcc 	andi	r22,r16,65535
1000d1f8:	0004a8c0 	call	10004a8c <__udivsi3>
1000d1fc:	1009883a 	mov	r4,r2
1000d200:	b00b883a 	mov	r5,r22
1000d204:	00050500 	call	10005050 <__mulsi3>
1000d208:	1007883a 	mov	r3,r2
1000d20c:	8808943a 	slli	r4,r17,16
1000d210:	b804d43a 	srli	r2,r23,16
1000d214:	9566983a 	sll	r19,r18,r21
1000d218:	2088b03a 	or	r4,r4,r2
1000d21c:	20c0042e 	bgeu	r4,r3,1000d230 <__umoddi3+0x530>
1000d220:	2409883a 	add	r4,r4,r16
1000d224:	24000236 	bltu	r4,r16,1000d230 <__umoddi3+0x530>
1000d228:	20c0012e 	bgeu	r4,r3,1000d230 <__umoddi3+0x530>
1000d22c:	2409883a 	add	r4,r4,r16
1000d230:	20e5c83a 	sub	r18,r4,r3
1000d234:	9009883a 	mov	r4,r18
1000d238:	a00b883a 	mov	r5,r20
1000d23c:	0004a940 	call	10004a94 <__umodsi3>
1000d240:	1023883a 	mov	r17,r2
1000d244:	9009883a 	mov	r4,r18
1000d248:	a00b883a 	mov	r5,r20
1000d24c:	8822943a 	slli	r17,r17,16
1000d250:	0004a8c0 	call	10004a8c <__udivsi3>
1000d254:	1009883a 	mov	r4,r2
1000d258:	b00b883a 	mov	r5,r22
1000d25c:	bdffffcc 	andi	r23,r23,65535
1000d260:	00050500 	call	10005050 <__mulsi3>
1000d264:	8de2b03a 	or	r17,r17,r23
1000d268:	8880042e 	bgeu	r17,r2,1000d27c <__umoddi3+0x57c>
1000d26c:	8c23883a 	add	r17,r17,r16
1000d270:	8c000236 	bltu	r17,r16,1000d27c <__umoddi3+0x57c>
1000d274:	8880012e 	bgeu	r17,r2,1000d27c <__umoddi3+0x57c>
1000d278:	8c23883a 	add	r17,r17,r16
1000d27c:	88a3c83a 	sub	r17,r17,r2
1000d280:	003f1b06 	br	1000cef0 <__alt_data_end+0xf800cef0>
1000d284:	25adc83a 	sub	r22,r4,r22
1000d288:	1d07c83a 	sub	r3,r3,r20
1000d28c:	2589803a 	cmpltu	r4,r4,r22
1000d290:	1907c83a 	sub	r3,r3,r4
1000d294:	88c7c83a 	sub	r3,r17,r3
1000d298:	003fc006 	br	1000d19c <__alt_data_end+0xf800d19c>
1000d29c:	00c00204 	movi	r3,8
1000d2a0:	1827883a 	mov	r19,r3
1000d2a4:	003ee906 	br	1000ce4c <__alt_data_end+0xf800ce4c>
1000d2a8:	00c00604 	movi	r3,24
1000d2ac:	1827883a 	mov	r19,r3
1000d2b0:	003ee606 	br	1000ce4c <__alt_data_end+0xf800ce4c>
1000d2b4:	00800604 	movi	r2,24
1000d2b8:	1009883a 	mov	r4,r2
1000d2bc:	003ea806 	br	1000cd60 <__alt_data_end+0xf800cd60>
1000d2c0:	00800204 	movi	r2,8
1000d2c4:	1007883a 	mov	r3,r2
1000d2c8:	003efd06 	br	1000cec0 <__alt_data_end+0xf800cec0>
1000d2cc:	00800604 	movi	r2,24
1000d2d0:	1007883a 	mov	r3,r2
1000d2d4:	003efa06 	br	1000cec0 <__alt_data_end+0xf800cec0>
1000d2d8:	00800204 	movi	r2,8
1000d2dc:	1009883a 	mov	r4,r2
1000d2e0:	003e9f06 	br	1000cd60 <__alt_data_end+0xf800cd60>
1000d2e4:	38bf7f2e 	bgeu	r7,r2,1000d0e4 <__alt_data_end+0xf800d0e4>
1000d2e8:	ad7fff84 	addi	r21,r21,-2
1000d2ec:	3d0f883a 	add	r7,r7,r20
1000d2f0:	003f7d06 	br	1000d0e8 <__alt_data_end+0xf800d0e8>
1000d2f4:	193f642e 	bgeu	r3,r4,1000d088 <__alt_data_end+0xf800d088>
1000d2f8:	e73fff84 	addi	fp,fp,-2
1000d2fc:	1d07883a 	add	r3,r3,r20
1000d300:	003f6206 	br	1000d08c <__alt_data_end+0xf800d08c>
1000d304:	1c07883a 	add	r3,r3,r16
1000d308:	003f0b06 	br	1000cf38 <__alt_data_end+0xf800cf38>
1000d30c:	9005883a 	mov	r2,r18
1000d310:	a007883a 	mov	r3,r20
1000d314:	003f2106 	br	1000cf9c <__alt_data_end+0xf800cf9c>
1000d318:	913fda36 	bltu	r18,r4,1000d284 <__alt_data_end+0xf800d284>
1000d31c:	202d883a 	mov	r22,r4
1000d320:	0007883a 	mov	r3,zero
1000d324:	003f9d06 	br	1000d19c <__alt_data_end+0xf800d19c>

1000d328 <__eqdf2>:
1000d328:	defff104 	addi	sp,sp,-60
1000d32c:	d9000c15 	stw	r4,48(sp)
1000d330:	d9400d15 	stw	r5,52(sp)
1000d334:	d9000c04 	addi	r4,sp,48
1000d338:	d9400504 	addi	r5,sp,20
1000d33c:	dfc00e15 	stw	ra,56(sp)
1000d340:	d9800a15 	stw	r6,40(sp)
1000d344:	d9c00b15 	stw	r7,44(sp)
1000d348:	0004e7c0 	call	10004e7c <__unpack_d>
1000d34c:	d9000a04 	addi	r4,sp,40
1000d350:	d80b883a 	mov	r5,sp
1000d354:	0004e7c0 	call	10004e7c <__unpack_d>
1000d358:	d8c00517 	ldw	r3,20(sp)
1000d35c:	00800044 	movi	r2,1
1000d360:	10c0052e 	bgeu	r2,r3,1000d378 <__eqdf2+0x50>
1000d364:	d8c00017 	ldw	r3,0(sp)
1000d368:	10c0032e 	bgeu	r2,r3,1000d378 <__eqdf2+0x50>
1000d36c:	d9000504 	addi	r4,sp,20
1000d370:	d80b883a 	mov	r5,sp
1000d374:	0004f800 	call	10004f80 <__fpcmp_parts_d>
1000d378:	dfc00e17 	ldw	ra,56(sp)
1000d37c:	dec00f04 	addi	sp,sp,60
1000d380:	f800283a 	ret

1000d384 <__nedf2>:
1000d384:	defff104 	addi	sp,sp,-60
1000d388:	d9000c15 	stw	r4,48(sp)
1000d38c:	d9400d15 	stw	r5,52(sp)
1000d390:	d9000c04 	addi	r4,sp,48
1000d394:	d9400504 	addi	r5,sp,20
1000d398:	dfc00e15 	stw	ra,56(sp)
1000d39c:	d9800a15 	stw	r6,40(sp)
1000d3a0:	d9c00b15 	stw	r7,44(sp)
1000d3a4:	0004e7c0 	call	10004e7c <__unpack_d>
1000d3a8:	d9000a04 	addi	r4,sp,40
1000d3ac:	d80b883a 	mov	r5,sp
1000d3b0:	0004e7c0 	call	10004e7c <__unpack_d>
1000d3b4:	d8c00517 	ldw	r3,20(sp)
1000d3b8:	00800044 	movi	r2,1
1000d3bc:	10c0052e 	bgeu	r2,r3,1000d3d4 <__nedf2+0x50>
1000d3c0:	d8c00017 	ldw	r3,0(sp)
1000d3c4:	10c0032e 	bgeu	r2,r3,1000d3d4 <__nedf2+0x50>
1000d3c8:	d9000504 	addi	r4,sp,20
1000d3cc:	d80b883a 	mov	r5,sp
1000d3d0:	0004f800 	call	10004f80 <__fpcmp_parts_d>
1000d3d4:	dfc00e17 	ldw	ra,56(sp)
1000d3d8:	dec00f04 	addi	sp,sp,60
1000d3dc:	f800283a 	ret

1000d3e0 <__gtdf2>:
1000d3e0:	defff104 	addi	sp,sp,-60
1000d3e4:	d9000c15 	stw	r4,48(sp)
1000d3e8:	d9400d15 	stw	r5,52(sp)
1000d3ec:	d9000c04 	addi	r4,sp,48
1000d3f0:	d9400504 	addi	r5,sp,20
1000d3f4:	dfc00e15 	stw	ra,56(sp)
1000d3f8:	d9800a15 	stw	r6,40(sp)
1000d3fc:	d9c00b15 	stw	r7,44(sp)
1000d400:	0004e7c0 	call	10004e7c <__unpack_d>
1000d404:	d9000a04 	addi	r4,sp,40
1000d408:	d80b883a 	mov	r5,sp
1000d40c:	0004e7c0 	call	10004e7c <__unpack_d>
1000d410:	d8c00517 	ldw	r3,20(sp)
1000d414:	00800044 	movi	r2,1
1000d418:	10c0082e 	bgeu	r2,r3,1000d43c <__gtdf2+0x5c>
1000d41c:	d8c00017 	ldw	r3,0(sp)
1000d420:	10c0062e 	bgeu	r2,r3,1000d43c <__gtdf2+0x5c>
1000d424:	d9000504 	addi	r4,sp,20
1000d428:	d80b883a 	mov	r5,sp
1000d42c:	0004f800 	call	10004f80 <__fpcmp_parts_d>
1000d430:	dfc00e17 	ldw	ra,56(sp)
1000d434:	dec00f04 	addi	sp,sp,60
1000d438:	f800283a 	ret
1000d43c:	00bfffc4 	movi	r2,-1
1000d440:	003ffb06 	br	1000d430 <__alt_data_end+0xf800d430>

1000d444 <__ltdf2>:
1000d444:	defff104 	addi	sp,sp,-60
1000d448:	d9000c15 	stw	r4,48(sp)
1000d44c:	d9400d15 	stw	r5,52(sp)
1000d450:	d9000c04 	addi	r4,sp,48
1000d454:	d9400504 	addi	r5,sp,20
1000d458:	dfc00e15 	stw	ra,56(sp)
1000d45c:	d9800a15 	stw	r6,40(sp)
1000d460:	d9c00b15 	stw	r7,44(sp)
1000d464:	0004e7c0 	call	10004e7c <__unpack_d>
1000d468:	d9000a04 	addi	r4,sp,40
1000d46c:	d80b883a 	mov	r5,sp
1000d470:	0004e7c0 	call	10004e7c <__unpack_d>
1000d474:	d8c00517 	ldw	r3,20(sp)
1000d478:	00800044 	movi	r2,1
1000d47c:	10c0052e 	bgeu	r2,r3,1000d494 <__ltdf2+0x50>
1000d480:	d8c00017 	ldw	r3,0(sp)
1000d484:	10c0032e 	bgeu	r2,r3,1000d494 <__ltdf2+0x50>
1000d488:	d9000504 	addi	r4,sp,20
1000d48c:	d80b883a 	mov	r5,sp
1000d490:	0004f800 	call	10004f80 <__fpcmp_parts_d>
1000d494:	dfc00e17 	ldw	ra,56(sp)
1000d498:	dec00f04 	addi	sp,sp,60
1000d49c:	f800283a 	ret

1000d4a0 <__floatunsidf>:
1000d4a0:	defff904 	addi	sp,sp,-28
1000d4a4:	dc000515 	stw	r16,20(sp)
1000d4a8:	dfc00615 	stw	ra,24(sp)
1000d4ac:	d8000115 	stw	zero,4(sp)
1000d4b0:	2021883a 	mov	r16,r4
1000d4b4:	20001726 	beq	r4,zero,1000d514 <__floatunsidf+0x74>
1000d4b8:	008000c4 	movi	r2,3
1000d4bc:	d8800015 	stw	r2,0(sp)
1000d4c0:	00800f04 	movi	r2,60
1000d4c4:	d8800215 	stw	r2,8(sp)
1000d4c8:	0004bac0 	call	10004bac <__clzsi2>
1000d4cc:	10c00744 	addi	r3,r2,29
1000d4d0:	18001816 	blt	r3,zero,1000d534 <__floatunsidf+0x94>
1000d4d4:	18002d26 	beq	r3,zero,1000d58c <__floatunsidf+0xec>
1000d4d8:	113fff44 	addi	r4,r2,-3
1000d4dc:	20002e16 	blt	r4,zero,1000d598 <__floatunsidf+0xf8>
1000d4e0:	8108983a 	sll	r4,r16,r4
1000d4e4:	0021883a 	mov	r16,zero
1000d4e8:	014007c4 	movi	r5,31
1000d4ec:	2885c83a 	sub	r2,r5,r2
1000d4f0:	dc000315 	stw	r16,12(sp)
1000d4f4:	d9000415 	stw	r4,16(sp)
1000d4f8:	d8800215 	stw	r2,8(sp)
1000d4fc:	d809883a 	mov	r4,sp
1000d500:	0004c580 	call	10004c58 <__pack_d>
1000d504:	dfc00617 	ldw	ra,24(sp)
1000d508:	dc000517 	ldw	r16,20(sp)
1000d50c:	dec00704 	addi	sp,sp,28
1000d510:	f800283a 	ret
1000d514:	00800084 	movi	r2,2
1000d518:	d809883a 	mov	r4,sp
1000d51c:	d8800015 	stw	r2,0(sp)
1000d520:	0004c580 	call	10004c58 <__pack_d>
1000d524:	dfc00617 	ldw	ra,24(sp)
1000d528:	dc000517 	ldw	r16,20(sp)
1000d52c:	dec00704 	addi	sp,sp,28
1000d530:	f800283a 	ret
1000d534:	00c7c83a 	sub	r3,zero,r3
1000d538:	193ff804 	addi	r4,r3,-32
1000d53c:	20001c16 	blt	r4,zero,1000d5b0 <__floatunsidf+0x110>
1000d540:	000b883a 	mov	r5,zero
1000d544:	2009d7fa 	srai	r4,r4,31
1000d548:	80c6d83a 	srl	r3,r16,r3
1000d54c:	297fffc4 	addi	r5,r5,-1
1000d550:	2c20703a 	and	r16,r5,r16
1000d554:	8020c03a 	cmpne	r16,r16,zero
1000d558:	1906703a 	and	r3,r3,r4
1000d55c:	010007c4 	movi	r4,31
1000d560:	80c6b03a 	or	r3,r16,r3
1000d564:	2085c83a 	sub	r2,r4,r2
1000d568:	d809883a 	mov	r4,sp
1000d56c:	d8c00315 	stw	r3,12(sp)
1000d570:	d8000415 	stw	zero,16(sp)
1000d574:	d8800215 	stw	r2,8(sp)
1000d578:	0004c580 	call	10004c58 <__pack_d>
1000d57c:	dfc00617 	ldw	ra,24(sp)
1000d580:	dc000517 	ldw	r16,20(sp)
1000d584:	dec00704 	addi	sp,sp,28
1000d588:	f800283a 	ret
1000d58c:	dc000315 	stw	r16,12(sp)
1000d590:	d8000415 	stw	zero,16(sp)
1000d594:	003fd906 	br	1000d4fc <__alt_data_end+0xf800d4fc>
1000d598:	800ad07a 	srli	r5,r16,1
1000d59c:	010007c4 	movi	r4,31
1000d5a0:	20c9c83a 	sub	r4,r4,r3
1000d5a4:	2908d83a 	srl	r4,r5,r4
1000d5a8:	80e0983a 	sll	r16,r16,r3
1000d5ac:	003fce06 	br	1000d4e8 <__alt_data_end+0xf800d4e8>
1000d5b0:	01400044 	movi	r5,1
1000d5b4:	28ca983a 	sll	r5,r5,r3
1000d5b8:	003fe206 	br	1000d544 <__alt_data_end+0xf800d544>

1000d5bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d5bc:	defffe04 	addi	sp,sp,-8
1000d5c0:	dfc00115 	stw	ra,4(sp)
1000d5c4:	df000015 	stw	fp,0(sp)
1000d5c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d5cc:	00840074 	movhi	r2,4097
1000d5d0:	1088b704 	addi	r2,r2,8924
1000d5d4:	10800017 	ldw	r2,0(r2)
1000d5d8:	10000526 	beq	r2,zero,1000d5f0 <alt_get_errno+0x34>
1000d5dc:	00840074 	movhi	r2,4097
1000d5e0:	1088b704 	addi	r2,r2,8924
1000d5e4:	10800017 	ldw	r2,0(r2)
1000d5e8:	103ee83a 	callr	r2
1000d5ec:	00000206 	br	1000d5f8 <alt_get_errno+0x3c>
1000d5f0:	00840074 	movhi	r2,4097
1000d5f4:	108f5904 	addi	r2,r2,15716
}
1000d5f8:	e037883a 	mov	sp,fp
1000d5fc:	dfc00117 	ldw	ra,4(sp)
1000d600:	df000017 	ldw	fp,0(sp)
1000d604:	dec00204 	addi	sp,sp,8
1000d608:	f800283a 	ret

1000d60c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000d60c:	defffb04 	addi	sp,sp,-20
1000d610:	dfc00415 	stw	ra,16(sp)
1000d614:	df000315 	stw	fp,12(sp)
1000d618:	df000304 	addi	fp,sp,12
1000d61c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000d620:	e0bfff17 	ldw	r2,-4(fp)
1000d624:	10000716 	blt	r2,zero,1000d644 <close+0x38>
1000d628:	e13fff17 	ldw	r4,-4(fp)
1000d62c:	01400304 	movi	r5,12
1000d630:	00050500 	call	10005050 <__mulsi3>
1000d634:	00c40074 	movhi	r3,4097
1000d638:	18c43504 	addi	r3,r3,4308
1000d63c:	10c5883a 	add	r2,r2,r3
1000d640:	00000106 	br	1000d648 <close+0x3c>
1000d644:	0005883a 	mov	r2,zero
1000d648:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000d64c:	e0bffd17 	ldw	r2,-12(fp)
1000d650:	10001826 	beq	r2,zero,1000d6b4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000d654:	e0bffd17 	ldw	r2,-12(fp)
1000d658:	10800017 	ldw	r2,0(r2)
1000d65c:	10800417 	ldw	r2,16(r2)
1000d660:	10000626 	beq	r2,zero,1000d67c <close+0x70>
1000d664:	e0bffd17 	ldw	r2,-12(fp)
1000d668:	10800017 	ldw	r2,0(r2)
1000d66c:	10800417 	ldw	r2,16(r2)
1000d670:	e13ffd17 	ldw	r4,-12(fp)
1000d674:	103ee83a 	callr	r2
1000d678:	00000106 	br	1000d680 <close+0x74>
1000d67c:	0005883a 	mov	r2,zero
1000d680:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000d684:	e13fff17 	ldw	r4,-4(fp)
1000d688:	000dd040 	call	1000dd04 <alt_release_fd>
    if (rval < 0)
1000d68c:	e0bffe17 	ldw	r2,-8(fp)
1000d690:	1000060e 	bge	r2,zero,1000d6ac <close+0xa0>
    {
      ALT_ERRNO = -rval;
1000d694:	000d5bc0 	call	1000d5bc <alt_get_errno>
1000d698:	e0fffe17 	ldw	r3,-8(fp)
1000d69c:	00c7c83a 	sub	r3,zero,r3
1000d6a0:	10c00015 	stw	r3,0(r2)
      return -1;
1000d6a4:	00bfffc4 	movi	r2,-1
1000d6a8:	00000606 	br	1000d6c4 <close+0xb8>
    }
    return 0;
1000d6ac:	0005883a 	mov	r2,zero
1000d6b0:	00000406 	br	1000d6c4 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d6b4:	000d5bc0 	call	1000d5bc <alt_get_errno>
1000d6b8:	00c01444 	movi	r3,81
1000d6bc:	10c00015 	stw	r3,0(r2)
    return -1;
1000d6c0:	00bfffc4 	movi	r2,-1
  }
}
1000d6c4:	e037883a 	mov	sp,fp
1000d6c8:	dfc00117 	ldw	ra,4(sp)
1000d6cc:	df000017 	ldw	fp,0(sp)
1000d6d0:	dec00204 	addi	sp,sp,8
1000d6d4:	f800283a 	ret

1000d6d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000d6d8:	defffc04 	addi	sp,sp,-16
1000d6dc:	df000315 	stw	fp,12(sp)
1000d6e0:	df000304 	addi	fp,sp,12
1000d6e4:	e13ffd15 	stw	r4,-12(fp)
1000d6e8:	e17ffe15 	stw	r5,-8(fp)
1000d6ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000d6f0:	e0bfff17 	ldw	r2,-4(fp)
}
1000d6f4:	e037883a 	mov	sp,fp
1000d6f8:	df000017 	ldw	fp,0(sp)
1000d6fc:	dec00104 	addi	sp,sp,4
1000d700:	f800283a 	ret

1000d704 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d704:	defffe04 	addi	sp,sp,-8
1000d708:	dfc00115 	stw	ra,4(sp)
1000d70c:	df000015 	stw	fp,0(sp)
1000d710:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d714:	00840074 	movhi	r2,4097
1000d718:	1088b704 	addi	r2,r2,8924
1000d71c:	10800017 	ldw	r2,0(r2)
1000d720:	10000526 	beq	r2,zero,1000d738 <alt_get_errno+0x34>
1000d724:	00840074 	movhi	r2,4097
1000d728:	1088b704 	addi	r2,r2,8924
1000d72c:	10800017 	ldw	r2,0(r2)
1000d730:	103ee83a 	callr	r2
1000d734:	00000206 	br	1000d740 <alt_get_errno+0x3c>
1000d738:	00840074 	movhi	r2,4097
1000d73c:	108f5904 	addi	r2,r2,15716
}
1000d740:	e037883a 	mov	sp,fp
1000d744:	dfc00117 	ldw	ra,4(sp)
1000d748:	df000017 	ldw	fp,0(sp)
1000d74c:	dec00204 	addi	sp,sp,8
1000d750:	f800283a 	ret

1000d754 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000d754:	defffb04 	addi	sp,sp,-20
1000d758:	dfc00415 	stw	ra,16(sp)
1000d75c:	df000315 	stw	fp,12(sp)
1000d760:	df000304 	addi	fp,sp,12
1000d764:	e13ffe15 	stw	r4,-8(fp)
1000d768:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d76c:	e0bffe17 	ldw	r2,-8(fp)
1000d770:	10000716 	blt	r2,zero,1000d790 <fstat+0x3c>
1000d774:	e13ffe17 	ldw	r4,-8(fp)
1000d778:	01400304 	movi	r5,12
1000d77c:	00050500 	call	10005050 <__mulsi3>
1000d780:	00c40074 	movhi	r3,4097
1000d784:	18c43504 	addi	r3,r3,4308
1000d788:	10c5883a 	add	r2,r2,r3
1000d78c:	00000106 	br	1000d794 <fstat+0x40>
1000d790:	0005883a 	mov	r2,zero
1000d794:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000d798:	e0bffd17 	ldw	r2,-12(fp)
1000d79c:	10001026 	beq	r2,zero,1000d7e0 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000d7a0:	e0bffd17 	ldw	r2,-12(fp)
1000d7a4:	10800017 	ldw	r2,0(r2)
1000d7a8:	10800817 	ldw	r2,32(r2)
1000d7ac:	10000726 	beq	r2,zero,1000d7cc <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
1000d7b0:	e0bffd17 	ldw	r2,-12(fp)
1000d7b4:	10800017 	ldw	r2,0(r2)
1000d7b8:	10800817 	ldw	r2,32(r2)
1000d7bc:	e13ffd17 	ldw	r4,-12(fp)
1000d7c0:	e17fff17 	ldw	r5,-4(fp)
1000d7c4:	103ee83a 	callr	r2
1000d7c8:	00000906 	br	1000d7f0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000d7cc:	e0bfff17 	ldw	r2,-4(fp)
1000d7d0:	00c80004 	movi	r3,8192
1000d7d4:	10c00115 	stw	r3,4(r2)
      return 0;
1000d7d8:	0005883a 	mov	r2,zero
1000d7dc:	00000406 	br	1000d7f0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d7e0:	000d7040 	call	1000d704 <alt_get_errno>
1000d7e4:	00c01444 	movi	r3,81
1000d7e8:	10c00015 	stw	r3,0(r2)
    return -1;
1000d7ec:	00bfffc4 	movi	r2,-1
  }
}
1000d7f0:	e037883a 	mov	sp,fp
1000d7f4:	dfc00117 	ldw	ra,4(sp)
1000d7f8:	df000017 	ldw	fp,0(sp)
1000d7fc:	dec00204 	addi	sp,sp,8
1000d800:	f800283a 	ret

1000d804 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d804:	defffe04 	addi	sp,sp,-8
1000d808:	dfc00115 	stw	ra,4(sp)
1000d80c:	df000015 	stw	fp,0(sp)
1000d810:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d814:	00840074 	movhi	r2,4097
1000d818:	1088b704 	addi	r2,r2,8924
1000d81c:	10800017 	ldw	r2,0(r2)
1000d820:	10000526 	beq	r2,zero,1000d838 <alt_get_errno+0x34>
1000d824:	00840074 	movhi	r2,4097
1000d828:	1088b704 	addi	r2,r2,8924
1000d82c:	10800017 	ldw	r2,0(r2)
1000d830:	103ee83a 	callr	r2
1000d834:	00000206 	br	1000d840 <alt_get_errno+0x3c>
1000d838:	00840074 	movhi	r2,4097
1000d83c:	108f5904 	addi	r2,r2,15716
}
1000d840:	e037883a 	mov	sp,fp
1000d844:	dfc00117 	ldw	ra,4(sp)
1000d848:	df000017 	ldw	fp,0(sp)
1000d84c:	dec00204 	addi	sp,sp,8
1000d850:	f800283a 	ret

1000d854 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000d854:	deffed04 	addi	sp,sp,-76
1000d858:	dfc01215 	stw	ra,72(sp)
1000d85c:	df001115 	stw	fp,68(sp)
1000d860:	df001104 	addi	fp,sp,68
1000d864:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d868:	e0bfff17 	ldw	r2,-4(fp)
1000d86c:	10000716 	blt	r2,zero,1000d88c <isatty+0x38>
1000d870:	e13fff17 	ldw	r4,-4(fp)
1000d874:	01400304 	movi	r5,12
1000d878:	00050500 	call	10005050 <__mulsi3>
1000d87c:	00c40074 	movhi	r3,4097
1000d880:	18c43504 	addi	r3,r3,4308
1000d884:	10c5883a 	add	r2,r2,r3
1000d888:	00000106 	br	1000d890 <isatty+0x3c>
1000d88c:	0005883a 	mov	r2,zero
1000d890:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000d894:	e0bfef17 	ldw	r2,-68(fp)
1000d898:	10000e26 	beq	r2,zero,1000d8d4 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000d89c:	e0bfef17 	ldw	r2,-68(fp)
1000d8a0:	10800017 	ldw	r2,0(r2)
1000d8a4:	10800817 	ldw	r2,32(r2)
1000d8a8:	1000021e 	bne	r2,zero,1000d8b4 <isatty+0x60>
    {
      return 1;
1000d8ac:	00800044 	movi	r2,1
1000d8b0:	00000c06 	br	1000d8e4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000d8b4:	e0bff004 	addi	r2,fp,-64
1000d8b8:	e13fff17 	ldw	r4,-4(fp)
1000d8bc:	100b883a 	mov	r5,r2
1000d8c0:	000d7540 	call	1000d754 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000d8c4:	e0bff117 	ldw	r2,-60(fp)
1000d8c8:	10880020 	cmpeqi	r2,r2,8192
1000d8cc:	10803fcc 	andi	r2,r2,255
1000d8d0:	00000406 	br	1000d8e4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d8d4:	000d8040 	call	1000d804 <alt_get_errno>
1000d8d8:	00c01444 	movi	r3,81
1000d8dc:	10c00015 	stw	r3,0(r2)
    return 0;
1000d8e0:	0005883a 	mov	r2,zero
  }
}
1000d8e4:	e037883a 	mov	sp,fp
1000d8e8:	dfc00117 	ldw	ra,4(sp)
1000d8ec:	df000017 	ldw	fp,0(sp)
1000d8f0:	dec00204 	addi	sp,sp,8
1000d8f4:	f800283a 	ret

1000d8f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000d8f8:	defffc04 	addi	sp,sp,-16
1000d8fc:	df000315 	stw	fp,12(sp)
1000d900:	df000304 	addi	fp,sp,12
1000d904:	e13ffd15 	stw	r4,-12(fp)
1000d908:	e17ffe15 	stw	r5,-8(fp)
1000d90c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000d910:	e0fffe17 	ldw	r3,-8(fp)
1000d914:	e0bffd17 	ldw	r2,-12(fp)
1000d918:	18800e26 	beq	r3,r2,1000d954 <alt_load_section+0x5c>
  {
    while( to != end )
1000d91c:	00000a06 	br	1000d948 <alt_load_section+0x50>
    {
      *to++ = *from++;
1000d920:	e0bffd17 	ldw	r2,-12(fp)
1000d924:	10c00017 	ldw	r3,0(r2)
1000d928:	e0bffe17 	ldw	r2,-8(fp)
1000d92c:	10c00015 	stw	r3,0(r2)
1000d930:	e0bffe17 	ldw	r2,-8(fp)
1000d934:	10800104 	addi	r2,r2,4
1000d938:	e0bffe15 	stw	r2,-8(fp)
1000d93c:	e0bffd17 	ldw	r2,-12(fp)
1000d940:	10800104 	addi	r2,r2,4
1000d944:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000d948:	e0fffe17 	ldw	r3,-8(fp)
1000d94c:	e0bfff17 	ldw	r2,-4(fp)
1000d950:	18bff31e 	bne	r3,r2,1000d920 <__alt_data_end+0xf800d920>
    {
      *to++ = *from++;
    }
  }
}
1000d954:	e037883a 	mov	sp,fp
1000d958:	df000017 	ldw	fp,0(sp)
1000d95c:	dec00104 	addi	sp,sp,4
1000d960:	f800283a 	ret

1000d964 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000d964:	defffe04 	addi	sp,sp,-8
1000d968:	dfc00115 	stw	ra,4(sp)
1000d96c:	df000015 	stw	fp,0(sp)
1000d970:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000d974:	01040074 	movhi	r4,4097
1000d978:	2108bc04 	addi	r4,r4,8944
1000d97c:	01440074 	movhi	r5,4097
1000d980:	29422604 	addi	r5,r5,2200
1000d984:	01840074 	movhi	r6,4097
1000d988:	3188bc04 	addi	r6,r6,8944
1000d98c:	000d8f80 	call	1000d8f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000d990:	01040034 	movhi	r4,4096
1000d994:	21000804 	addi	r4,r4,32
1000d998:	01440034 	movhi	r5,4096
1000d99c:	29400804 	addi	r5,r5,32
1000d9a0:	01840034 	movhi	r6,4096
1000d9a4:	31806e04 	addi	r6,r6,440
1000d9a8:	000d8f80 	call	1000d8f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000d9ac:	01040074 	movhi	r4,4097
1000d9b0:	213f7b04 	addi	r4,r4,-532
1000d9b4:	01440074 	movhi	r5,4097
1000d9b8:	297f7b04 	addi	r5,r5,-532
1000d9bc:	01840074 	movhi	r6,4097
1000d9c0:	31822604 	addi	r6,r6,2200
1000d9c4:	000d8f80 	call	1000d8f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000d9c8:	000ed4c0 	call	1000ed4c <alt_dcache_flush_all>
  alt_icache_flush_all();
1000d9cc:	000ef100 	call	1000ef10 <alt_icache_flush_all>
}
1000d9d0:	e037883a 	mov	sp,fp
1000d9d4:	dfc00117 	ldw	ra,4(sp)
1000d9d8:	df000017 	ldw	fp,0(sp)
1000d9dc:	dec00204 	addi	sp,sp,8
1000d9e0:	f800283a 	ret

1000d9e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d9e4:	defffe04 	addi	sp,sp,-8
1000d9e8:	dfc00115 	stw	ra,4(sp)
1000d9ec:	df000015 	stw	fp,0(sp)
1000d9f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d9f4:	00840074 	movhi	r2,4097
1000d9f8:	1088b704 	addi	r2,r2,8924
1000d9fc:	10800017 	ldw	r2,0(r2)
1000da00:	10000526 	beq	r2,zero,1000da18 <alt_get_errno+0x34>
1000da04:	00840074 	movhi	r2,4097
1000da08:	1088b704 	addi	r2,r2,8924
1000da0c:	10800017 	ldw	r2,0(r2)
1000da10:	103ee83a 	callr	r2
1000da14:	00000206 	br	1000da20 <alt_get_errno+0x3c>
1000da18:	00840074 	movhi	r2,4097
1000da1c:	108f5904 	addi	r2,r2,15716
}
1000da20:	e037883a 	mov	sp,fp
1000da24:	dfc00117 	ldw	ra,4(sp)
1000da28:	df000017 	ldw	fp,0(sp)
1000da2c:	dec00204 	addi	sp,sp,8
1000da30:	f800283a 	ret

1000da34 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000da34:	defff904 	addi	sp,sp,-28
1000da38:	dfc00615 	stw	ra,24(sp)
1000da3c:	df000515 	stw	fp,20(sp)
1000da40:	df000504 	addi	fp,sp,20
1000da44:	e13ffd15 	stw	r4,-12(fp)
1000da48:	e17ffe15 	stw	r5,-8(fp)
1000da4c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000da50:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000da54:	e0bffd17 	ldw	r2,-12(fp)
1000da58:	10000716 	blt	r2,zero,1000da78 <lseek+0x44>
1000da5c:	e13ffd17 	ldw	r4,-12(fp)
1000da60:	01400304 	movi	r5,12
1000da64:	00050500 	call	10005050 <__mulsi3>
1000da68:	00c40074 	movhi	r3,4097
1000da6c:	18c43504 	addi	r3,r3,4308
1000da70:	10c5883a 	add	r2,r2,r3
1000da74:	00000106 	br	1000da7c <lseek+0x48>
1000da78:	0005883a 	mov	r2,zero
1000da7c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000da80:	e0bffc17 	ldw	r2,-16(fp)
1000da84:	10001026 	beq	r2,zero,1000dac8 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000da88:	e0bffc17 	ldw	r2,-16(fp)
1000da8c:	10800017 	ldw	r2,0(r2)
1000da90:	10800717 	ldw	r2,28(r2)
1000da94:	10000926 	beq	r2,zero,1000dabc <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000da98:	e0bffc17 	ldw	r2,-16(fp)
1000da9c:	10800017 	ldw	r2,0(r2)
1000daa0:	10800717 	ldw	r2,28(r2)
1000daa4:	e13ffc17 	ldw	r4,-16(fp)
1000daa8:	e17ffe17 	ldw	r5,-8(fp)
1000daac:	e1bfff17 	ldw	r6,-4(fp)
1000dab0:	103ee83a 	callr	r2
1000dab4:	e0bffb15 	stw	r2,-20(fp)
1000dab8:	00000506 	br	1000dad0 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000dabc:	00bfde84 	movi	r2,-134
1000dac0:	e0bffb15 	stw	r2,-20(fp)
1000dac4:	00000206 	br	1000dad0 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
1000dac8:	00bfebc4 	movi	r2,-81
1000dacc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000dad0:	e0bffb17 	ldw	r2,-20(fp)
1000dad4:	1000060e 	bge	r2,zero,1000daf0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1000dad8:	000d9e40 	call	1000d9e4 <alt_get_errno>
1000dadc:	e0fffb17 	ldw	r3,-20(fp)
1000dae0:	00c7c83a 	sub	r3,zero,r3
1000dae4:	10c00015 	stw	r3,0(r2)
    rc = -1;
1000dae8:	00bfffc4 	movi	r2,-1
1000daec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000daf0:	e0bffb17 	ldw	r2,-20(fp)
}
1000daf4:	e037883a 	mov	sp,fp
1000daf8:	dfc00117 	ldw	ra,4(sp)
1000dafc:	df000017 	ldw	fp,0(sp)
1000db00:	dec00204 	addi	sp,sp,8
1000db04:	f800283a 	ret

1000db08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000db08:	defffd04 	addi	sp,sp,-12
1000db0c:	dfc00215 	stw	ra,8(sp)
1000db10:	df000115 	stw	fp,4(sp)
1000db14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000db18:	0009883a 	mov	r4,zero
1000db1c:	000dfdc0 	call	1000dfdc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000db20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000db24:	000e0100 	call	1000e010 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000db28:	01040074 	movhi	r4,4097
1000db2c:	21021c04 	addi	r4,r4,2160
1000db30:	01440074 	movhi	r5,4097
1000db34:	29421c04 	addi	r5,r5,2160
1000db38:	01840074 	movhi	r6,4097
1000db3c:	31821c04 	addi	r6,r6,2160
1000db40:	000f2d40 	call	1000f2d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000db44:	000ee580 	call	1000ee58 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000db48:	01040074 	movhi	r4,4097
1000db4c:	213bad04 	addi	r4,r4,-4428
1000db50:	000fa180 	call	1000fa18 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000db54:	d126ad17 	ldw	r4,-25932(gp)
1000db58:	d0e6ae17 	ldw	r3,-25928(gp)
1000db5c:	d0a6af17 	ldw	r2,-25924(gp)
1000db60:	180b883a 	mov	r5,r3
1000db64:	100d883a 	mov	r6,r2
1000db68:	000036c0 	call	1000036c <main>
1000db6c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000db70:	01000044 	movi	r4,1
1000db74:	000d60c0 	call	1000d60c <close>
  exit (result);
1000db78:	e13fff17 	ldw	r4,-4(fp)
1000db7c:	000fa2c0 	call	1000fa2c <exit>

1000db80 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000db80:	defffe04 	addi	sp,sp,-8
1000db84:	df000115 	stw	fp,4(sp)
1000db88:	df000104 	addi	fp,sp,4
1000db8c:	e13fff15 	stw	r4,-4(fp)
}
1000db90:	e037883a 	mov	sp,fp
1000db94:	df000017 	ldw	fp,0(sp)
1000db98:	dec00104 	addi	sp,sp,4
1000db9c:	f800283a 	ret

1000dba0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000dba0:	defffe04 	addi	sp,sp,-8
1000dba4:	df000115 	stw	fp,4(sp)
1000dba8:	df000104 	addi	fp,sp,4
1000dbac:	e13fff15 	stw	r4,-4(fp)
}
1000dbb0:	e037883a 	mov	sp,fp
1000dbb4:	df000017 	ldw	fp,0(sp)
1000dbb8:	dec00104 	addi	sp,sp,4
1000dbbc:	f800283a 	ret

1000dbc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dbc0:	defffe04 	addi	sp,sp,-8
1000dbc4:	dfc00115 	stw	ra,4(sp)
1000dbc8:	df000015 	stw	fp,0(sp)
1000dbcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dbd0:	00840074 	movhi	r2,4097
1000dbd4:	1088b704 	addi	r2,r2,8924
1000dbd8:	10800017 	ldw	r2,0(r2)
1000dbdc:	10000526 	beq	r2,zero,1000dbf4 <alt_get_errno+0x34>
1000dbe0:	00840074 	movhi	r2,4097
1000dbe4:	1088b704 	addi	r2,r2,8924
1000dbe8:	10800017 	ldw	r2,0(r2)
1000dbec:	103ee83a 	callr	r2
1000dbf0:	00000206 	br	1000dbfc <alt_get_errno+0x3c>
1000dbf4:	00840074 	movhi	r2,4097
1000dbf8:	108f5904 	addi	r2,r2,15716
}
1000dbfc:	e037883a 	mov	sp,fp
1000dc00:	dfc00117 	ldw	ra,4(sp)
1000dc04:	df000017 	ldw	fp,0(sp)
1000dc08:	dec00204 	addi	sp,sp,8
1000dc0c:	f800283a 	ret

1000dc10 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000dc10:	defff904 	addi	sp,sp,-28
1000dc14:	dfc00615 	stw	ra,24(sp)
1000dc18:	df000515 	stw	fp,20(sp)
1000dc1c:	df000504 	addi	fp,sp,20
1000dc20:	e13ffd15 	stw	r4,-12(fp)
1000dc24:	e17ffe15 	stw	r5,-8(fp)
1000dc28:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dc2c:	e0bffd17 	ldw	r2,-12(fp)
1000dc30:	10000716 	blt	r2,zero,1000dc50 <read+0x40>
1000dc34:	e13ffd17 	ldw	r4,-12(fp)
1000dc38:	01400304 	movi	r5,12
1000dc3c:	00050500 	call	10005050 <__mulsi3>
1000dc40:	00c40074 	movhi	r3,4097
1000dc44:	18c43504 	addi	r3,r3,4308
1000dc48:	10c5883a 	add	r2,r2,r3
1000dc4c:	00000106 	br	1000dc54 <read+0x44>
1000dc50:	0005883a 	mov	r2,zero
1000dc54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000dc58:	e0bffb17 	ldw	r2,-20(fp)
1000dc5c:	10002026 	beq	r2,zero,1000dce0 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000dc60:	e0bffb17 	ldw	r2,-20(fp)
1000dc64:	10800217 	ldw	r2,8(r2)
1000dc68:	108000cc 	andi	r2,r2,3
1000dc6c:	10800060 	cmpeqi	r2,r2,1
1000dc70:	1000171e 	bne	r2,zero,1000dcd0 <read+0xc0>
        (fd->dev->read))
1000dc74:	e0bffb17 	ldw	r2,-20(fp)
1000dc78:	10800017 	ldw	r2,0(r2)
1000dc7c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000dc80:	10001326 	beq	r2,zero,1000dcd0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000dc84:	e0bffb17 	ldw	r2,-20(fp)
1000dc88:	10800017 	ldw	r2,0(r2)
1000dc8c:	10c00517 	ldw	r3,20(r2)
1000dc90:	e0bfff17 	ldw	r2,-4(fp)
1000dc94:	e13ffb17 	ldw	r4,-20(fp)
1000dc98:	e17ffe17 	ldw	r5,-8(fp)
1000dc9c:	100d883a 	mov	r6,r2
1000dca0:	183ee83a 	callr	r3
1000dca4:	e0bffc15 	stw	r2,-16(fp)
1000dca8:	e0bffc17 	ldw	r2,-16(fp)
1000dcac:	1000060e 	bge	r2,zero,1000dcc8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1000dcb0:	000dbc00 	call	1000dbc0 <alt_get_errno>
1000dcb4:	e0fffc17 	ldw	r3,-16(fp)
1000dcb8:	00c7c83a 	sub	r3,zero,r3
1000dcbc:	10c00015 	stw	r3,0(r2)
          return -1;
1000dcc0:	00bfffc4 	movi	r2,-1
1000dcc4:	00000a06 	br	1000dcf0 <read+0xe0>
        }
        return rval;
1000dcc8:	e0bffc17 	ldw	r2,-16(fp)
1000dccc:	00000806 	br	1000dcf0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000dcd0:	000dbc00 	call	1000dbc0 <alt_get_errno>
1000dcd4:	00c00344 	movi	r3,13
1000dcd8:	10c00015 	stw	r3,0(r2)
1000dcdc:	00000306 	br	1000dcec <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000dce0:	000dbc00 	call	1000dbc0 <alt_get_errno>
1000dce4:	00c01444 	movi	r3,81
1000dce8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000dcec:	00bfffc4 	movi	r2,-1
}
1000dcf0:	e037883a 	mov	sp,fp
1000dcf4:	dfc00117 	ldw	ra,4(sp)
1000dcf8:	df000017 	ldw	fp,0(sp)
1000dcfc:	dec00204 	addi	sp,sp,8
1000dd00:	f800283a 	ret

1000dd04 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000dd04:	defffc04 	addi	sp,sp,-16
1000dd08:	dfc00315 	stw	ra,12(sp)
1000dd0c:	df000215 	stw	fp,8(sp)
1000dd10:	dc000115 	stw	r16,4(sp)
1000dd14:	df000104 	addi	fp,sp,4
1000dd18:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1000dd1c:	e0bfff17 	ldw	r2,-4(fp)
1000dd20:	108000d0 	cmplti	r2,r2,3
1000dd24:	1000111e 	bne	r2,zero,1000dd6c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000dd28:	04040074 	movhi	r16,4097
1000dd2c:	84043504 	addi	r16,r16,4308
1000dd30:	e0bfff17 	ldw	r2,-4(fp)
1000dd34:	1009883a 	mov	r4,r2
1000dd38:	01400304 	movi	r5,12
1000dd3c:	00050500 	call	10005050 <__mulsi3>
1000dd40:	8085883a 	add	r2,r16,r2
1000dd44:	10800204 	addi	r2,r2,8
1000dd48:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000dd4c:	04040074 	movhi	r16,4097
1000dd50:	84043504 	addi	r16,r16,4308
1000dd54:	e0bfff17 	ldw	r2,-4(fp)
1000dd58:	1009883a 	mov	r4,r2
1000dd5c:	01400304 	movi	r5,12
1000dd60:	00050500 	call	10005050 <__mulsi3>
1000dd64:	8085883a 	add	r2,r16,r2
1000dd68:	10000015 	stw	zero,0(r2)
  }
}
1000dd6c:	e037883a 	mov	sp,fp
1000dd70:	dfc00217 	ldw	ra,8(sp)
1000dd74:	df000117 	ldw	fp,4(sp)
1000dd78:	dc000017 	ldw	r16,0(sp)
1000dd7c:	dec00304 	addi	sp,sp,12
1000dd80:	f800283a 	ret

1000dd84 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000dd84:	defff904 	addi	sp,sp,-28
1000dd88:	df000615 	stw	fp,24(sp)
1000dd8c:	df000604 	addi	fp,sp,24
1000dd90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000dd94:	0005303a 	rdctl	r2,status
1000dd98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000dd9c:	e0fffc17 	ldw	r3,-16(fp)
1000dda0:	00bfff84 	movi	r2,-2
1000dda4:	1884703a 	and	r2,r3,r2
1000dda8:	1001703a 	wrctl	status,r2
  
  return context;
1000ddac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000ddb0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000ddb4:	d0a00b17 	ldw	r2,-32724(gp)
1000ddb8:	10c000c4 	addi	r3,r2,3
1000ddbc:	00bfff04 	movi	r2,-4
1000ddc0:	1884703a 	and	r2,r3,r2
1000ddc4:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000ddc8:	d0e00b17 	ldw	r3,-32724(gp)
1000ddcc:	e0bfff17 	ldw	r2,-4(fp)
1000ddd0:	1885883a 	add	r2,r3,r2
1000ddd4:	00c60034 	movhi	r3,6144
1000ddd8:	18c00004 	addi	r3,r3,0
1000dddc:	1880062e 	bgeu	r3,r2,1000ddf8 <sbrk+0x74>
1000dde0:	e0bffa17 	ldw	r2,-24(fp)
1000dde4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000dde8:	e0bffd17 	ldw	r2,-12(fp)
1000ddec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000ddf0:	00bfffc4 	movi	r2,-1
1000ddf4:	00000b06 	br	1000de24 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000ddf8:	d0a00b17 	ldw	r2,-32724(gp)
1000ddfc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000de00:	d0e00b17 	ldw	r3,-32724(gp)
1000de04:	e0bfff17 	ldw	r2,-4(fp)
1000de08:	1885883a 	add	r2,r3,r2
1000de0c:	d0a00b15 	stw	r2,-32724(gp)
1000de10:	e0bffa17 	ldw	r2,-24(fp)
1000de14:	e0bffe15 	stw	r2,-8(fp)
1000de18:	e0bffe17 	ldw	r2,-8(fp)
1000de1c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000de20:	e0bffb17 	ldw	r2,-20(fp)
} 
1000de24:	e037883a 	mov	sp,fp
1000de28:	df000017 	ldw	fp,0(sp)
1000de2c:	dec00104 	addi	sp,sp,4
1000de30:	f800283a 	ret

1000de34 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000de34:	defffd04 	addi	sp,sp,-12
1000de38:	dfc00215 	stw	ra,8(sp)
1000de3c:	df000115 	stw	fp,4(sp)
1000de40:	df000104 	addi	fp,sp,4
1000de44:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000de48:	e13fff17 	ldw	r4,-4(fp)
1000de4c:	000ebf80 	call	1000ebf8 <alt_busy_sleep>
}
1000de50:	e037883a 	mov	sp,fp
1000de54:	dfc00117 	ldw	ra,4(sp)
1000de58:	df000017 	ldw	fp,0(sp)
1000de5c:	dec00204 	addi	sp,sp,8
1000de60:	f800283a 	ret

1000de64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000de64:	defffe04 	addi	sp,sp,-8
1000de68:	dfc00115 	stw	ra,4(sp)
1000de6c:	df000015 	stw	fp,0(sp)
1000de70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000de74:	00840074 	movhi	r2,4097
1000de78:	1088b704 	addi	r2,r2,8924
1000de7c:	10800017 	ldw	r2,0(r2)
1000de80:	10000526 	beq	r2,zero,1000de98 <alt_get_errno+0x34>
1000de84:	00840074 	movhi	r2,4097
1000de88:	1088b704 	addi	r2,r2,8924
1000de8c:	10800017 	ldw	r2,0(r2)
1000de90:	103ee83a 	callr	r2
1000de94:	00000206 	br	1000dea0 <alt_get_errno+0x3c>
1000de98:	00840074 	movhi	r2,4097
1000de9c:	108f5904 	addi	r2,r2,15716
}
1000dea0:	e037883a 	mov	sp,fp
1000dea4:	dfc00117 	ldw	ra,4(sp)
1000dea8:	df000017 	ldw	fp,0(sp)
1000deac:	dec00204 	addi	sp,sp,8
1000deb0:	f800283a 	ret

1000deb4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000deb4:	defff904 	addi	sp,sp,-28
1000deb8:	dfc00615 	stw	ra,24(sp)
1000debc:	df000515 	stw	fp,20(sp)
1000dec0:	df000504 	addi	fp,sp,20
1000dec4:	e13ffd15 	stw	r4,-12(fp)
1000dec8:	e17ffe15 	stw	r5,-8(fp)
1000decc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ded0:	e0bffd17 	ldw	r2,-12(fp)
1000ded4:	10000716 	blt	r2,zero,1000def4 <write+0x40>
1000ded8:	e13ffd17 	ldw	r4,-12(fp)
1000dedc:	01400304 	movi	r5,12
1000dee0:	00050500 	call	10005050 <__mulsi3>
1000dee4:	00c40074 	movhi	r3,4097
1000dee8:	18c43504 	addi	r3,r3,4308
1000deec:	10c5883a 	add	r2,r2,r3
1000def0:	00000106 	br	1000def8 <write+0x44>
1000def4:	0005883a 	mov	r2,zero
1000def8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000defc:	e0bffb17 	ldw	r2,-20(fp)
1000df00:	10001f26 	beq	r2,zero,1000df80 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000df04:	e0bffb17 	ldw	r2,-20(fp)
1000df08:	10800217 	ldw	r2,8(r2)
1000df0c:	108000cc 	andi	r2,r2,3
1000df10:	10001726 	beq	r2,zero,1000df70 <write+0xbc>
1000df14:	e0bffb17 	ldw	r2,-20(fp)
1000df18:	10800017 	ldw	r2,0(r2)
1000df1c:	10800617 	ldw	r2,24(r2)
1000df20:	10001326 	beq	r2,zero,1000df70 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000df24:	e0bffb17 	ldw	r2,-20(fp)
1000df28:	10800017 	ldw	r2,0(r2)
1000df2c:	10c00617 	ldw	r3,24(r2)
1000df30:	e0bfff17 	ldw	r2,-4(fp)
1000df34:	e13ffb17 	ldw	r4,-20(fp)
1000df38:	e17ffe17 	ldw	r5,-8(fp)
1000df3c:	100d883a 	mov	r6,r2
1000df40:	183ee83a 	callr	r3
1000df44:	e0bffc15 	stw	r2,-16(fp)
1000df48:	e0bffc17 	ldw	r2,-16(fp)
1000df4c:	1000060e 	bge	r2,zero,1000df68 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1000df50:	000de640 	call	1000de64 <alt_get_errno>
1000df54:	e0fffc17 	ldw	r3,-16(fp)
1000df58:	00c7c83a 	sub	r3,zero,r3
1000df5c:	10c00015 	stw	r3,0(r2)
        return -1;
1000df60:	00bfffc4 	movi	r2,-1
1000df64:	00000a06 	br	1000df90 <write+0xdc>
      }
      return rval;
1000df68:	e0bffc17 	ldw	r2,-16(fp)
1000df6c:	00000806 	br	1000df90 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000df70:	000de640 	call	1000de64 <alt_get_errno>
1000df74:	00c00344 	movi	r3,13
1000df78:	10c00015 	stw	r3,0(r2)
1000df7c:	00000306 	br	1000df8c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000df80:	000de640 	call	1000de64 <alt_get_errno>
1000df84:	00c01444 	movi	r3,81
1000df88:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000df8c:	00bfffc4 	movi	r2,-1
}
1000df90:	e037883a 	mov	sp,fp
1000df94:	dfc00117 	ldw	ra,4(sp)
1000df98:	df000017 	ldw	fp,0(sp)
1000df9c:	dec00204 	addi	sp,sp,8
1000dfa0:	f800283a 	ret

1000dfa4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000dfa4:	defffd04 	addi	sp,sp,-12
1000dfa8:	dfc00215 	stw	ra,8(sp)
1000dfac:	df000115 	stw	fp,4(sp)
1000dfb0:	df000104 	addi	fp,sp,4
1000dfb4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000dfb8:	e13fff17 	ldw	r4,-4(fp)
1000dfbc:	01440074 	movhi	r5,4097
1000dfc0:	2948b404 	addi	r5,r5,8912
1000dfc4:	000edb80 	call	1000edb8 <alt_dev_llist_insert>
}
1000dfc8:	e037883a 	mov	sp,fp
1000dfcc:	dfc00117 	ldw	ra,4(sp)
1000dfd0:	df000017 	ldw	fp,0(sp)
1000dfd4:	dec00204 	addi	sp,sp,8
1000dfd8:	f800283a 	ret

1000dfdc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000dfdc:	defffd04 	addi	sp,sp,-12
1000dfe0:	dfc00215 	stw	ra,8(sp)
1000dfe4:	df000115 	stw	fp,4(sp)
1000dfe8:	df000104 	addi	fp,sp,4
1000dfec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000dff0:	000f7800 	call	1000f780 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000dff4:	00800044 	movi	r2,1
1000dff8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000dffc:	e037883a 	mov	sp,fp
1000e000:	dfc00117 	ldw	ra,4(sp)
1000e004:	df000017 	ldw	fp,0(sp)
1000e008:	dec00204 	addi	sp,sp,8
1000e00c:	f800283a 	ret

1000e010 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000e010:	defffe04 	addi	sp,sp,-8
1000e014:	dfc00115 	stw	ra,4(sp)
1000e018:	df000015 	stw	fp,0(sp)
1000e01c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000e020:	01040074 	movhi	r4,4097
1000e024:	21049f04 	addi	r4,r4,4732
1000e028:	000b883a 	mov	r5,zero
1000e02c:	01800144 	movi	r6,5
1000e030:	000e1bc0 	call	1000e1bc <altera_avalon_jtag_uart_init>
1000e034:	01040074 	movhi	r4,4097
1000e038:	21049504 	addi	r4,r4,4692
1000e03c:	000dfa40 	call	1000dfa4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000e040:	0001883a 	nop
}
1000e044:	e037883a 	mov	sp,fp
1000e048:	dfc00117 	ldw	ra,4(sp)
1000e04c:	df000017 	ldw	fp,0(sp)
1000e050:	dec00204 	addi	sp,sp,8
1000e054:	f800283a 	ret

1000e058 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000e058:	defffa04 	addi	sp,sp,-24
1000e05c:	dfc00515 	stw	ra,20(sp)
1000e060:	df000415 	stw	fp,16(sp)
1000e064:	df000404 	addi	fp,sp,16
1000e068:	e13ffd15 	stw	r4,-12(fp)
1000e06c:	e17ffe15 	stw	r5,-8(fp)
1000e070:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e074:	e0bffd17 	ldw	r2,-12(fp)
1000e078:	10800017 	ldw	r2,0(r2)
1000e07c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000e080:	e0bffc17 	ldw	r2,-16(fp)
1000e084:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
1000e088:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000e08c:	10800217 	ldw	r2,8(r2)
1000e090:	1809883a 	mov	r4,r3
1000e094:	e17ffe17 	ldw	r5,-8(fp)
1000e098:	e1bfff17 	ldw	r6,-4(fp)
1000e09c:	100f883a 	mov	r7,r2
1000e0a0:	000e6800 	call	1000e680 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000e0a4:	e037883a 	mov	sp,fp
1000e0a8:	dfc00117 	ldw	ra,4(sp)
1000e0ac:	df000017 	ldw	fp,0(sp)
1000e0b0:	dec00204 	addi	sp,sp,8
1000e0b4:	f800283a 	ret

1000e0b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000e0b8:	defffa04 	addi	sp,sp,-24
1000e0bc:	dfc00515 	stw	ra,20(sp)
1000e0c0:	df000415 	stw	fp,16(sp)
1000e0c4:	df000404 	addi	fp,sp,16
1000e0c8:	e13ffd15 	stw	r4,-12(fp)
1000e0cc:	e17ffe15 	stw	r5,-8(fp)
1000e0d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e0d4:	e0bffd17 	ldw	r2,-12(fp)
1000e0d8:	10800017 	ldw	r2,0(r2)
1000e0dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000e0e0:	e0bffc17 	ldw	r2,-16(fp)
1000e0e4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
1000e0e8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000e0ec:	10800217 	ldw	r2,8(r2)
1000e0f0:	1809883a 	mov	r4,r3
1000e0f4:	e17ffe17 	ldw	r5,-8(fp)
1000e0f8:	e1bfff17 	ldw	r6,-4(fp)
1000e0fc:	100f883a 	mov	r7,r2
1000e100:	000e8980 	call	1000e898 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000e104:	e037883a 	mov	sp,fp
1000e108:	dfc00117 	ldw	ra,4(sp)
1000e10c:	df000017 	ldw	fp,0(sp)
1000e110:	dec00204 	addi	sp,sp,8
1000e114:	f800283a 	ret

1000e118 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000e118:	defffc04 	addi	sp,sp,-16
1000e11c:	dfc00315 	stw	ra,12(sp)
1000e120:	df000215 	stw	fp,8(sp)
1000e124:	df000204 	addi	fp,sp,8
1000e128:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e12c:	e0bfff17 	ldw	r2,-4(fp)
1000e130:	10800017 	ldw	r2,0(r2)
1000e134:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000e138:	e0bffe17 	ldw	r2,-8(fp)
1000e13c:	10c00a04 	addi	r3,r2,40
1000e140:	e0bfff17 	ldw	r2,-4(fp)
1000e144:	10800217 	ldw	r2,8(r2)
1000e148:	1809883a 	mov	r4,r3
1000e14c:	100b883a 	mov	r5,r2
1000e150:	000e5240 	call	1000e524 <altera_avalon_jtag_uart_close>
}
1000e154:	e037883a 	mov	sp,fp
1000e158:	dfc00117 	ldw	ra,4(sp)
1000e15c:	df000017 	ldw	fp,0(sp)
1000e160:	dec00204 	addi	sp,sp,8
1000e164:	f800283a 	ret

1000e168 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000e168:	defffa04 	addi	sp,sp,-24
1000e16c:	dfc00515 	stw	ra,20(sp)
1000e170:	df000415 	stw	fp,16(sp)
1000e174:	df000404 	addi	fp,sp,16
1000e178:	e13ffd15 	stw	r4,-12(fp)
1000e17c:	e17ffe15 	stw	r5,-8(fp)
1000e180:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000e184:	e0bffd17 	ldw	r2,-12(fp)
1000e188:	10800017 	ldw	r2,0(r2)
1000e18c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000e190:	e0bffc17 	ldw	r2,-16(fp)
1000e194:	10800a04 	addi	r2,r2,40
1000e198:	1009883a 	mov	r4,r2
1000e19c:	e17ffe17 	ldw	r5,-8(fp)
1000e1a0:	e1bfff17 	ldw	r6,-4(fp)
1000e1a4:	000e58c0 	call	1000e58c <altera_avalon_jtag_uart_ioctl>
}
1000e1a8:	e037883a 	mov	sp,fp
1000e1ac:	dfc00117 	ldw	ra,4(sp)
1000e1b0:	df000017 	ldw	fp,0(sp)
1000e1b4:	dec00204 	addi	sp,sp,8
1000e1b8:	f800283a 	ret

1000e1bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000e1bc:	defffa04 	addi	sp,sp,-24
1000e1c0:	dfc00515 	stw	ra,20(sp)
1000e1c4:	df000415 	stw	fp,16(sp)
1000e1c8:	df000404 	addi	fp,sp,16
1000e1cc:	e13ffd15 	stw	r4,-12(fp)
1000e1d0:	e17ffe15 	stw	r5,-8(fp)
1000e1d4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e1d8:	e0bffd17 	ldw	r2,-12(fp)
1000e1dc:	00c00044 	movi	r3,1
1000e1e0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000e1e4:	e0bffd17 	ldw	r2,-12(fp)
1000e1e8:	10800017 	ldw	r2,0(r2)
1000e1ec:	10800104 	addi	r2,r2,4
1000e1f0:	e0fffd17 	ldw	r3,-12(fp)
1000e1f4:	18c00817 	ldw	r3,32(r3)
1000e1f8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000e1fc:	e0fffe17 	ldw	r3,-8(fp)
1000e200:	e0bfff17 	ldw	r2,-4(fp)
1000e204:	d8000015 	stw	zero,0(sp)
1000e208:	1809883a 	mov	r4,r3
1000e20c:	100b883a 	mov	r5,r2
1000e210:	01840074 	movhi	r6,4097
1000e214:	31b89f04 	addi	r6,r6,-7556
1000e218:	e1fffd17 	ldw	r7,-12(fp)
1000e21c:	000ef2c0 	call	1000ef2c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000e220:	e0bffd17 	ldw	r2,-12(fp)
1000e224:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000e228:	e0bffd17 	ldw	r2,-12(fp)
1000e22c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000e230:	00840074 	movhi	r2,4097
1000e234:	108f5e04 	addi	r2,r2,15736
1000e238:	10800017 	ldw	r2,0(r2)
1000e23c:	1809883a 	mov	r4,r3
1000e240:	100b883a 	mov	r5,r2
1000e244:	01840074 	movhi	r6,4097
1000e248:	31b92004 	addi	r6,r6,-7040
1000e24c:	e1fffd17 	ldw	r7,-12(fp)
1000e250:	000eab80 	call	1000eab8 <alt_alarm_start>
1000e254:	1000040e 	bge	r2,zero,1000e268 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000e258:	e0bffd17 	ldw	r2,-12(fp)
1000e25c:	00e00034 	movhi	r3,32768
1000e260:	18ffffc4 	addi	r3,r3,-1
1000e264:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000e268:	e037883a 	mov	sp,fp
1000e26c:	dfc00117 	ldw	ra,4(sp)
1000e270:	df000017 	ldw	fp,0(sp)
1000e274:	dec00204 	addi	sp,sp,8
1000e278:	f800283a 	ret

1000e27c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000e27c:	defff804 	addi	sp,sp,-32
1000e280:	df000715 	stw	fp,28(sp)
1000e284:	df000704 	addi	fp,sp,28
1000e288:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000e28c:	e0bfff17 	ldw	r2,-4(fp)
1000e290:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000e294:	e0bffb17 	ldw	r2,-20(fp)
1000e298:	10800017 	ldw	r2,0(r2)
1000e29c:	e0bffc15 	stw	r2,-16(fp)
1000e2a0:	00000106 	br	1000e2a8 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
1000e2a4:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e2a8:	e0bffc17 	ldw	r2,-16(fp)
1000e2ac:	10800104 	addi	r2,r2,4
1000e2b0:	10800037 	ldwio	r2,0(r2)
1000e2b4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000e2b8:	e0bffd17 	ldw	r2,-12(fp)
1000e2bc:	1080c00c 	andi	r2,r2,768
1000e2c0:	10006a26 	beq	r2,zero,1000e46c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000e2c4:	e0bffd17 	ldw	r2,-12(fp)
1000e2c8:	1080400c 	andi	r2,r2,256
1000e2cc:	10003326 	beq	r2,zero,1000e39c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000e2d0:	00800074 	movhi	r2,1
1000e2d4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e2d8:	e0bffb17 	ldw	r2,-20(fp)
1000e2dc:	10800a17 	ldw	r2,40(r2)
1000e2e0:	10800044 	addi	r2,r2,1
1000e2e4:	1081ffcc 	andi	r2,r2,2047
1000e2e8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000e2ec:	e0bffb17 	ldw	r2,-20(fp)
1000e2f0:	10c00b17 	ldw	r3,44(r2)
1000e2f4:	e0bffe17 	ldw	r2,-8(fp)
1000e2f8:	18801426 	beq	r3,r2,1000e34c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000e2fc:	e0bffc17 	ldw	r2,-16(fp)
1000e300:	10800037 	ldwio	r2,0(r2)
1000e304:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000e308:	e0bff917 	ldw	r2,-28(fp)
1000e30c:	10a0000c 	andi	r2,r2,32768
1000e310:	10001026 	beq	r2,zero,1000e354 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000e314:	e0bffb17 	ldw	r2,-20(fp)
1000e318:	10800a17 	ldw	r2,40(r2)
1000e31c:	e0fff917 	ldw	r3,-28(fp)
1000e320:	e13ffb17 	ldw	r4,-20(fp)
1000e324:	2085883a 	add	r2,r4,r2
1000e328:	10800e04 	addi	r2,r2,56
1000e32c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e330:	e0bffb17 	ldw	r2,-20(fp)
1000e334:	10800a17 	ldw	r2,40(r2)
1000e338:	10800044 	addi	r2,r2,1
1000e33c:	10c1ffcc 	andi	r3,r2,2047
1000e340:	e0bffb17 	ldw	r2,-20(fp)
1000e344:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000e348:	003fe306 	br	1000e2d8 <__alt_data_end+0xf800e2d8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1000e34c:	0001883a 	nop
1000e350:	00000106 	br	1000e358 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1000e354:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000e358:	e0bff917 	ldw	r2,-28(fp)
1000e35c:	10bfffec 	andhi	r2,r2,65535
1000e360:	10000e26 	beq	r2,zero,1000e39c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e364:	e0bffb17 	ldw	r2,-20(fp)
1000e368:	10c00817 	ldw	r3,32(r2)
1000e36c:	00bfff84 	movi	r2,-2
1000e370:	1886703a 	and	r3,r3,r2
1000e374:	e0bffb17 	ldw	r2,-20(fp)
1000e378:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000e37c:	e0bffc17 	ldw	r2,-16(fp)
1000e380:	10800104 	addi	r2,r2,4
1000e384:	e0fffb17 	ldw	r3,-20(fp)
1000e388:	18c00817 	ldw	r3,32(r3)
1000e38c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e390:	e0bffc17 	ldw	r2,-16(fp)
1000e394:	10800104 	addi	r2,r2,4
1000e398:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000e39c:	e0bffd17 	ldw	r2,-12(fp)
1000e3a0:	1080800c 	andi	r2,r2,512
1000e3a4:	103fbf26 	beq	r2,zero,1000e2a4 <__alt_data_end+0xf800e2a4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000e3a8:	e0bffd17 	ldw	r2,-12(fp)
1000e3ac:	1004d43a 	srli	r2,r2,16
1000e3b0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e3b4:	00001406 	br	1000e408 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000e3b8:	e0bffc17 	ldw	r2,-16(fp)
1000e3bc:	e0fffb17 	ldw	r3,-20(fp)
1000e3c0:	18c00d17 	ldw	r3,52(r3)
1000e3c4:	e13ffb17 	ldw	r4,-20(fp)
1000e3c8:	20c7883a 	add	r3,r4,r3
1000e3cc:	18c20e04 	addi	r3,r3,2104
1000e3d0:	18c00003 	ldbu	r3,0(r3)
1000e3d4:	18c03fcc 	andi	r3,r3,255
1000e3d8:	18c0201c 	xori	r3,r3,128
1000e3dc:	18ffe004 	addi	r3,r3,-128
1000e3e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e3e4:	e0bffb17 	ldw	r2,-20(fp)
1000e3e8:	10800d17 	ldw	r2,52(r2)
1000e3ec:	10800044 	addi	r2,r2,1
1000e3f0:	10c1ffcc 	andi	r3,r2,2047
1000e3f4:	e0bffb17 	ldw	r2,-20(fp)
1000e3f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000e3fc:	e0bffa17 	ldw	r2,-24(fp)
1000e400:	10bfffc4 	addi	r2,r2,-1
1000e404:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e408:	e0bffa17 	ldw	r2,-24(fp)
1000e40c:	10000526 	beq	r2,zero,1000e424 <altera_avalon_jtag_uart_irq+0x1a8>
1000e410:	e0bffb17 	ldw	r2,-20(fp)
1000e414:	10c00d17 	ldw	r3,52(r2)
1000e418:	e0bffb17 	ldw	r2,-20(fp)
1000e41c:	10800c17 	ldw	r2,48(r2)
1000e420:	18bfe51e 	bne	r3,r2,1000e3b8 <__alt_data_end+0xf800e3b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000e424:	e0bffa17 	ldw	r2,-24(fp)
1000e428:	103f9e26 	beq	r2,zero,1000e2a4 <__alt_data_end+0xf800e2a4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e42c:	e0bffb17 	ldw	r2,-20(fp)
1000e430:	10c00817 	ldw	r3,32(r2)
1000e434:	00bfff44 	movi	r2,-3
1000e438:	1886703a 	and	r3,r3,r2
1000e43c:	e0bffb17 	ldw	r2,-20(fp)
1000e440:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e444:	e0bffb17 	ldw	r2,-20(fp)
1000e448:	10800017 	ldw	r2,0(r2)
1000e44c:	10800104 	addi	r2,r2,4
1000e450:	e0fffb17 	ldw	r3,-20(fp)
1000e454:	18c00817 	ldw	r3,32(r3)
1000e458:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e45c:	e0bffc17 	ldw	r2,-16(fp)
1000e460:	10800104 	addi	r2,r2,4
1000e464:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000e468:	003f8e06 	br	1000e2a4 <__alt_data_end+0xf800e2a4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1000e46c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1000e470:	e037883a 	mov	sp,fp
1000e474:	df000017 	ldw	fp,0(sp)
1000e478:	dec00104 	addi	sp,sp,4
1000e47c:	f800283a 	ret

1000e480 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000e480:	defffc04 	addi	sp,sp,-16
1000e484:	df000315 	stw	fp,12(sp)
1000e488:	df000304 	addi	fp,sp,12
1000e48c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000e490:	e0bfff17 	ldw	r2,-4(fp)
1000e494:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000e498:	e0bffd17 	ldw	r2,-12(fp)
1000e49c:	10800017 	ldw	r2,0(r2)
1000e4a0:	10800104 	addi	r2,r2,4
1000e4a4:	10800037 	ldwio	r2,0(r2)
1000e4a8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000e4ac:	e0bffe17 	ldw	r2,-8(fp)
1000e4b0:	1081000c 	andi	r2,r2,1024
1000e4b4:	10000a26 	beq	r2,zero,1000e4e0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000e4b8:	e0bffd17 	ldw	r2,-12(fp)
1000e4bc:	10800017 	ldw	r2,0(r2)
1000e4c0:	10800104 	addi	r2,r2,4
1000e4c4:	e0fffd17 	ldw	r3,-12(fp)
1000e4c8:	18c00817 	ldw	r3,32(r3)
1000e4cc:	18c10014 	ori	r3,r3,1024
1000e4d0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
1000e4d4:	e0bffd17 	ldw	r2,-12(fp)
1000e4d8:	10000915 	stw	zero,36(r2)
1000e4dc:	00000a06 	br	1000e508 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000e4e0:	e0bffd17 	ldw	r2,-12(fp)
1000e4e4:	10800917 	ldw	r2,36(r2)
1000e4e8:	00e00034 	movhi	r3,32768
1000e4ec:	18ffff04 	addi	r3,r3,-4
1000e4f0:	18800536 	bltu	r3,r2,1000e508 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
1000e4f4:	e0bffd17 	ldw	r2,-12(fp)
1000e4f8:	10800917 	ldw	r2,36(r2)
1000e4fc:	10c00044 	addi	r3,r2,1
1000e500:	e0bffd17 	ldw	r2,-12(fp)
1000e504:	10c00915 	stw	r3,36(r2)
1000e508:	00840074 	movhi	r2,4097
1000e50c:	108f5e04 	addi	r2,r2,15736
1000e510:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000e514:	e037883a 	mov	sp,fp
1000e518:	df000017 	ldw	fp,0(sp)
1000e51c:	dec00104 	addi	sp,sp,4
1000e520:	f800283a 	ret

1000e524 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000e524:	defffd04 	addi	sp,sp,-12
1000e528:	df000215 	stw	fp,8(sp)
1000e52c:	df000204 	addi	fp,sp,8
1000e530:	e13ffe15 	stw	r4,-8(fp)
1000e534:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e538:	00000506 	br	1000e550 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000e53c:	e0bfff17 	ldw	r2,-4(fp)
1000e540:	1090000c 	andi	r2,r2,16384
1000e544:	10000226 	beq	r2,zero,1000e550 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000e548:	00bffd44 	movi	r2,-11
1000e54c:	00000b06 	br	1000e57c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e550:	e0bffe17 	ldw	r2,-8(fp)
1000e554:	10c00d17 	ldw	r3,52(r2)
1000e558:	e0bffe17 	ldw	r2,-8(fp)
1000e55c:	10800c17 	ldw	r2,48(r2)
1000e560:	18800526 	beq	r3,r2,1000e578 <altera_avalon_jtag_uart_close+0x54>
1000e564:	e0bffe17 	ldw	r2,-8(fp)
1000e568:	10c00917 	ldw	r3,36(r2)
1000e56c:	e0bffe17 	ldw	r2,-8(fp)
1000e570:	10800117 	ldw	r2,4(r2)
1000e574:	18bff136 	bltu	r3,r2,1000e53c <__alt_data_end+0xf800e53c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000e578:	0005883a 	mov	r2,zero
}
1000e57c:	e037883a 	mov	sp,fp
1000e580:	df000017 	ldw	fp,0(sp)
1000e584:	dec00104 	addi	sp,sp,4
1000e588:	f800283a 	ret

1000e58c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000e58c:	defffa04 	addi	sp,sp,-24
1000e590:	df000515 	stw	fp,20(sp)
1000e594:	df000504 	addi	fp,sp,20
1000e598:	e13ffd15 	stw	r4,-12(fp)
1000e59c:	e17ffe15 	stw	r5,-8(fp)
1000e5a0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000e5a4:	00bff9c4 	movi	r2,-25
1000e5a8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000e5ac:	e0bffe17 	ldw	r2,-8(fp)
1000e5b0:	10da8060 	cmpeqi	r3,r2,27137
1000e5b4:	1800031e 	bne	r3,zero,1000e5c4 <altera_avalon_jtag_uart_ioctl+0x38>
1000e5b8:	109a80a0 	cmpeqi	r2,r2,27138
1000e5bc:	1000181e 	bne	r2,zero,1000e620 <altera_avalon_jtag_uart_ioctl+0x94>
1000e5c0:	00002606 	br	1000e65c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000e5c4:	e0bffd17 	ldw	r2,-12(fp)
1000e5c8:	10c00117 	ldw	r3,4(r2)
1000e5cc:	00a00034 	movhi	r2,32768
1000e5d0:	10bfffc4 	addi	r2,r2,-1
1000e5d4:	18802226 	beq	r3,r2,1000e660 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
1000e5d8:	e0bfff17 	ldw	r2,-4(fp)
1000e5dc:	10800017 	ldw	r2,0(r2)
1000e5e0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000e5e4:	e0bffc17 	ldw	r2,-16(fp)
1000e5e8:	10800090 	cmplti	r2,r2,2
1000e5ec:	1000061e 	bne	r2,zero,1000e608 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e5f0:	e0fffc17 	ldw	r3,-16(fp)
1000e5f4:	00a00034 	movhi	r2,32768
1000e5f8:	10bfffc4 	addi	r2,r2,-1
1000e5fc:	18800226 	beq	r3,r2,1000e608 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e600:	e0bffc17 	ldw	r2,-16(fp)
1000e604:	00000206 	br	1000e610 <altera_avalon_jtag_uart_ioctl+0x84>
1000e608:	00a00034 	movhi	r2,32768
1000e60c:	10bfff84 	addi	r2,r2,-2
1000e610:	e0fffd17 	ldw	r3,-12(fp)
1000e614:	18800115 	stw	r2,4(r3)
      rc = 0;
1000e618:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e61c:	00001006 	br	1000e660 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000e620:	e0bffd17 	ldw	r2,-12(fp)
1000e624:	10c00117 	ldw	r3,4(r2)
1000e628:	00a00034 	movhi	r2,32768
1000e62c:	10bfffc4 	addi	r2,r2,-1
1000e630:	18800d26 	beq	r3,r2,1000e668 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000e634:	e0bffd17 	ldw	r2,-12(fp)
1000e638:	10c00917 	ldw	r3,36(r2)
1000e63c:	e0bffd17 	ldw	r2,-12(fp)
1000e640:	10800117 	ldw	r2,4(r2)
1000e644:	1885803a 	cmpltu	r2,r3,r2
1000e648:	10c03fcc 	andi	r3,r2,255
1000e64c:	e0bfff17 	ldw	r2,-4(fp)
1000e650:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000e654:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e658:	00000306 	br	1000e668 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
1000e65c:	00000306 	br	1000e66c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1000e660:	0001883a 	nop
1000e664:	00000106 	br	1000e66c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1000e668:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000e66c:	e0bffb17 	ldw	r2,-20(fp)
}
1000e670:	e037883a 	mov	sp,fp
1000e674:	df000017 	ldw	fp,0(sp)
1000e678:	dec00104 	addi	sp,sp,4
1000e67c:	f800283a 	ret

1000e680 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000e680:	defff304 	addi	sp,sp,-52
1000e684:	dfc00c15 	stw	ra,48(sp)
1000e688:	df000b15 	stw	fp,44(sp)
1000e68c:	df000b04 	addi	fp,sp,44
1000e690:	e13ffc15 	stw	r4,-16(fp)
1000e694:	e17ffd15 	stw	r5,-12(fp)
1000e698:	e1bffe15 	stw	r6,-8(fp)
1000e69c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000e6a0:	e0bffd17 	ldw	r2,-12(fp)
1000e6a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e6a8:	00004706 	br	1000e7c8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000e6ac:	e0bffc17 	ldw	r2,-16(fp)
1000e6b0:	10800a17 	ldw	r2,40(r2)
1000e6b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000e6b8:	e0bffc17 	ldw	r2,-16(fp)
1000e6bc:	10800b17 	ldw	r2,44(r2)
1000e6c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000e6c4:	e0fff717 	ldw	r3,-36(fp)
1000e6c8:	e0bff817 	ldw	r2,-32(fp)
1000e6cc:	18800536 	bltu	r3,r2,1000e6e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000e6d0:	e0fff717 	ldw	r3,-36(fp)
1000e6d4:	e0bff817 	ldw	r2,-32(fp)
1000e6d8:	1885c83a 	sub	r2,r3,r2
1000e6dc:	e0bff615 	stw	r2,-40(fp)
1000e6e0:	00000406 	br	1000e6f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000e6e4:	00c20004 	movi	r3,2048
1000e6e8:	e0bff817 	ldw	r2,-32(fp)
1000e6ec:	1885c83a 	sub	r2,r3,r2
1000e6f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e6f4:	e0bff617 	ldw	r2,-40(fp)
1000e6f8:	10001e26 	beq	r2,zero,1000e774 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1000e6fc:	e0fffe17 	ldw	r3,-8(fp)
1000e700:	e0bff617 	ldw	r2,-40(fp)
1000e704:	1880022e 	bgeu	r3,r2,1000e710 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1000e708:	e0bffe17 	ldw	r2,-8(fp)
1000e70c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000e710:	e0bff817 	ldw	r2,-32(fp)
1000e714:	10800e04 	addi	r2,r2,56
1000e718:	e0fffc17 	ldw	r3,-16(fp)
1000e71c:	1885883a 	add	r2,r3,r2
1000e720:	e13ff517 	ldw	r4,-44(fp)
1000e724:	100b883a 	mov	r5,r2
1000e728:	e1bff617 	ldw	r6,-40(fp)
1000e72c:	000a5800 	call	1000a580 <memcpy>
      ptr   += n;
1000e730:	e0fff517 	ldw	r3,-44(fp)
1000e734:	e0bff617 	ldw	r2,-40(fp)
1000e738:	1885883a 	add	r2,r3,r2
1000e73c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000e740:	e0fffe17 	ldw	r3,-8(fp)
1000e744:	e0bff617 	ldw	r2,-40(fp)
1000e748:	1885c83a 	sub	r2,r3,r2
1000e74c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e750:	e0fff817 	ldw	r3,-32(fp)
1000e754:	e0bff617 	ldw	r2,-40(fp)
1000e758:	1885883a 	add	r2,r3,r2
1000e75c:	10c1ffcc 	andi	r3,r2,2047
1000e760:	e0bffc17 	ldw	r2,-16(fp)
1000e764:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000e768:	e0bffe17 	ldw	r2,-8(fp)
1000e76c:	00bfcf16 	blt	zero,r2,1000e6ac <__alt_data_end+0xf800e6ac>
1000e770:	00000106 	br	1000e778 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1000e774:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1000e778:	e0fff517 	ldw	r3,-44(fp)
1000e77c:	e0bffd17 	ldw	r2,-12(fp)
1000e780:	1880141e 	bne	r3,r2,1000e7d4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000e784:	e0bfff17 	ldw	r2,-4(fp)
1000e788:	1090000c 	andi	r2,r2,16384
1000e78c:	1000131e 	bne	r2,zero,1000e7dc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000e790:	0001883a 	nop
1000e794:	e0bffc17 	ldw	r2,-16(fp)
1000e798:	10c00a17 	ldw	r3,40(r2)
1000e79c:	e0bff717 	ldw	r2,-36(fp)
1000e7a0:	1880051e 	bne	r3,r2,1000e7b8 <altera_avalon_jtag_uart_read+0x138>
1000e7a4:	e0bffc17 	ldw	r2,-16(fp)
1000e7a8:	10c00917 	ldw	r3,36(r2)
1000e7ac:	e0bffc17 	ldw	r2,-16(fp)
1000e7b0:	10800117 	ldw	r2,4(r2)
1000e7b4:	18bff736 	bltu	r3,r2,1000e794 <__alt_data_end+0xf800e794>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000e7b8:	e0bffc17 	ldw	r2,-16(fp)
1000e7bc:	10c00a17 	ldw	r3,40(r2)
1000e7c0:	e0bff717 	ldw	r2,-36(fp)
1000e7c4:	18800726 	beq	r3,r2,1000e7e4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e7c8:	e0bffe17 	ldw	r2,-8(fp)
1000e7cc:	00bfb716 	blt	zero,r2,1000e6ac <__alt_data_end+0xf800e6ac>
1000e7d0:	00000506 	br	1000e7e8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1000e7d4:	0001883a 	nop
1000e7d8:	00000306 	br	1000e7e8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1000e7dc:	0001883a 	nop
1000e7e0:	00000106 	br	1000e7e8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1000e7e4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000e7e8:	e0fff517 	ldw	r3,-44(fp)
1000e7ec:	e0bffd17 	ldw	r2,-12(fp)
1000e7f0:	18801726 	beq	r3,r2,1000e850 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e7f4:	0005303a 	rdctl	r2,status
1000e7f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e7fc:	e0fffa17 	ldw	r3,-24(fp)
1000e800:	00bfff84 	movi	r2,-2
1000e804:	1884703a 	and	r2,r3,r2
1000e808:	1001703a 	wrctl	status,r2
  
  return context;
1000e80c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000e810:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e814:	e0bffc17 	ldw	r2,-16(fp)
1000e818:	10800817 	ldw	r2,32(r2)
1000e81c:	10c00054 	ori	r3,r2,1
1000e820:	e0bffc17 	ldw	r2,-16(fp)
1000e824:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e828:	e0bffc17 	ldw	r2,-16(fp)
1000e82c:	10800017 	ldw	r2,0(r2)
1000e830:	10800104 	addi	r2,r2,4
1000e834:	e0fffc17 	ldw	r3,-16(fp)
1000e838:	18c00817 	ldw	r3,32(r3)
1000e83c:	10c00035 	stwio	r3,0(r2)
1000e840:	e0bff917 	ldw	r2,-28(fp)
1000e844:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e848:	e0bffb17 	ldw	r2,-20(fp)
1000e84c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000e850:	e0fff517 	ldw	r3,-44(fp)
1000e854:	e0bffd17 	ldw	r2,-12(fp)
1000e858:	18800426 	beq	r3,r2,1000e86c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
1000e85c:	e0fff517 	ldw	r3,-44(fp)
1000e860:	e0bffd17 	ldw	r2,-12(fp)
1000e864:	1885c83a 	sub	r2,r3,r2
1000e868:	00000606 	br	1000e884 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
1000e86c:	e0bfff17 	ldw	r2,-4(fp)
1000e870:	1090000c 	andi	r2,r2,16384
1000e874:	10000226 	beq	r2,zero,1000e880 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
1000e878:	00bffd44 	movi	r2,-11
1000e87c:	00000106 	br	1000e884 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
1000e880:	00bffec4 	movi	r2,-5
}
1000e884:	e037883a 	mov	sp,fp
1000e888:	dfc00117 	ldw	ra,4(sp)
1000e88c:	df000017 	ldw	fp,0(sp)
1000e890:	dec00204 	addi	sp,sp,8
1000e894:	f800283a 	ret

1000e898 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000e898:	defff304 	addi	sp,sp,-52
1000e89c:	dfc00c15 	stw	ra,48(sp)
1000e8a0:	df000b15 	stw	fp,44(sp)
1000e8a4:	df000b04 	addi	fp,sp,44
1000e8a8:	e13ffc15 	stw	r4,-16(fp)
1000e8ac:	e17ffd15 	stw	r5,-12(fp)
1000e8b0:	e1bffe15 	stw	r6,-8(fp)
1000e8b4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000e8b8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000e8bc:	e0bffd17 	ldw	r2,-12(fp)
1000e8c0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000e8c4:	00003706 	br	1000e9a4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000e8c8:	e0bffc17 	ldw	r2,-16(fp)
1000e8cc:	10800c17 	ldw	r2,48(r2)
1000e8d0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000e8d4:	e0bffc17 	ldw	r2,-16(fp)
1000e8d8:	10800d17 	ldw	r2,52(r2)
1000e8dc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000e8e0:	e0fff817 	ldw	r3,-32(fp)
1000e8e4:	e0bff517 	ldw	r2,-44(fp)
1000e8e8:	1880062e 	bgeu	r3,r2,1000e904 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000e8ec:	e0fff517 	ldw	r3,-44(fp)
1000e8f0:	e0bff817 	ldw	r2,-32(fp)
1000e8f4:	1885c83a 	sub	r2,r3,r2
1000e8f8:	10bfffc4 	addi	r2,r2,-1
1000e8fc:	e0bff615 	stw	r2,-40(fp)
1000e900:	00000b06 	br	1000e930 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000e904:	e0bff517 	ldw	r2,-44(fp)
1000e908:	10000526 	beq	r2,zero,1000e920 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000e90c:	00c20004 	movi	r3,2048
1000e910:	e0bff817 	ldw	r2,-32(fp)
1000e914:	1885c83a 	sub	r2,r3,r2
1000e918:	e0bff615 	stw	r2,-40(fp)
1000e91c:	00000406 	br	1000e930 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000e920:	00c1ffc4 	movi	r3,2047
1000e924:	e0bff817 	ldw	r2,-32(fp)
1000e928:	1885c83a 	sub	r2,r3,r2
1000e92c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e930:	e0bff617 	ldw	r2,-40(fp)
1000e934:	10001e26 	beq	r2,zero,1000e9b0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1000e938:	e0fffe17 	ldw	r3,-8(fp)
1000e93c:	e0bff617 	ldw	r2,-40(fp)
1000e940:	1880022e 	bgeu	r3,r2,1000e94c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1000e944:	e0bffe17 	ldw	r2,-8(fp)
1000e948:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000e94c:	e0bff817 	ldw	r2,-32(fp)
1000e950:	10820e04 	addi	r2,r2,2104
1000e954:	e0fffc17 	ldw	r3,-16(fp)
1000e958:	1885883a 	add	r2,r3,r2
1000e95c:	1009883a 	mov	r4,r2
1000e960:	e17ffd17 	ldw	r5,-12(fp)
1000e964:	e1bff617 	ldw	r6,-40(fp)
1000e968:	000a5800 	call	1000a580 <memcpy>
      ptr   += n;
1000e96c:	e0fffd17 	ldw	r3,-12(fp)
1000e970:	e0bff617 	ldw	r2,-40(fp)
1000e974:	1885883a 	add	r2,r3,r2
1000e978:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000e97c:	e0fffe17 	ldw	r3,-8(fp)
1000e980:	e0bff617 	ldw	r2,-40(fp)
1000e984:	1885c83a 	sub	r2,r3,r2
1000e988:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e98c:	e0fff817 	ldw	r3,-32(fp)
1000e990:	e0bff617 	ldw	r2,-40(fp)
1000e994:	1885883a 	add	r2,r3,r2
1000e998:	10c1ffcc 	andi	r3,r2,2047
1000e99c:	e0bffc17 	ldw	r2,-16(fp)
1000e9a0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000e9a4:	e0bffe17 	ldw	r2,-8(fp)
1000e9a8:	00bfc716 	blt	zero,r2,1000e8c8 <__alt_data_end+0xf800e8c8>
1000e9ac:	00000106 	br	1000e9b4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1000e9b0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e9b4:	0005303a 	rdctl	r2,status
1000e9b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e9bc:	e0fffa17 	ldw	r3,-24(fp)
1000e9c0:	00bfff84 	movi	r2,-2
1000e9c4:	1884703a 	and	r2,r3,r2
1000e9c8:	1001703a 	wrctl	status,r2
  
  return context;
1000e9cc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000e9d0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e9d4:	e0bffc17 	ldw	r2,-16(fp)
1000e9d8:	10800817 	ldw	r2,32(r2)
1000e9dc:	10c00094 	ori	r3,r2,2
1000e9e0:	e0bffc17 	ldw	r2,-16(fp)
1000e9e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e9e8:	e0bffc17 	ldw	r2,-16(fp)
1000e9ec:	10800017 	ldw	r2,0(r2)
1000e9f0:	10800104 	addi	r2,r2,4
1000e9f4:	e0fffc17 	ldw	r3,-16(fp)
1000e9f8:	18c00817 	ldw	r3,32(r3)
1000e9fc:	10c00035 	stwio	r3,0(r2)
1000ea00:	e0bff917 	ldw	r2,-28(fp)
1000ea04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ea08:	e0bffb17 	ldw	r2,-20(fp)
1000ea0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000ea10:	e0bffe17 	ldw	r2,-8(fp)
1000ea14:	0080100e 	bge	zero,r2,1000ea58 <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
1000ea18:	e0bfff17 	ldw	r2,-4(fp)
1000ea1c:	1090000c 	andi	r2,r2,16384
1000ea20:	1000101e 	bne	r2,zero,1000ea64 <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000ea24:	0001883a 	nop
1000ea28:	e0bffc17 	ldw	r2,-16(fp)
1000ea2c:	10c00d17 	ldw	r3,52(r2)
1000ea30:	e0bff517 	ldw	r2,-44(fp)
1000ea34:	1880051e 	bne	r3,r2,1000ea4c <altera_avalon_jtag_uart_write+0x1b4>
1000ea38:	e0bffc17 	ldw	r2,-16(fp)
1000ea3c:	10c00917 	ldw	r3,36(r2)
1000ea40:	e0bffc17 	ldw	r2,-16(fp)
1000ea44:	10800117 	ldw	r2,4(r2)
1000ea48:	18bff736 	bltu	r3,r2,1000ea28 <__alt_data_end+0xf800ea28>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000ea4c:	e0bffc17 	ldw	r2,-16(fp)
1000ea50:	10800917 	ldw	r2,36(r2)
1000ea54:	1000051e 	bne	r2,zero,1000ea6c <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
1000ea58:	e0bffe17 	ldw	r2,-8(fp)
1000ea5c:	00bfd116 	blt	zero,r2,1000e9a4 <__alt_data_end+0xf800e9a4>
1000ea60:	00000306 	br	1000ea70 <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1000ea64:	0001883a 	nop
1000ea68:	00000106 	br	1000ea70 <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1000ea6c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000ea70:	e0fffd17 	ldw	r3,-12(fp)
1000ea74:	e0bff717 	ldw	r2,-36(fp)
1000ea78:	18800426 	beq	r3,r2,1000ea8c <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
1000ea7c:	e0fffd17 	ldw	r3,-12(fp)
1000ea80:	e0bff717 	ldw	r2,-36(fp)
1000ea84:	1885c83a 	sub	r2,r3,r2
1000ea88:	00000606 	br	1000eaa4 <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
1000ea8c:	e0bfff17 	ldw	r2,-4(fp)
1000ea90:	1090000c 	andi	r2,r2,16384
1000ea94:	10000226 	beq	r2,zero,1000eaa0 <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
1000ea98:	00bffd44 	movi	r2,-11
1000ea9c:	00000106 	br	1000eaa4 <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000eaa0:	00bffec4 	movi	r2,-5
}
1000eaa4:	e037883a 	mov	sp,fp
1000eaa8:	dfc00117 	ldw	ra,4(sp)
1000eaac:	df000017 	ldw	fp,0(sp)
1000eab0:	dec00204 	addi	sp,sp,8
1000eab4:	f800283a 	ret

1000eab8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000eab8:	defff504 	addi	sp,sp,-44
1000eabc:	df000a15 	stw	fp,40(sp)
1000eac0:	df000a04 	addi	fp,sp,40
1000eac4:	e13ffc15 	stw	r4,-16(fp)
1000eac8:	e17ffd15 	stw	r5,-12(fp)
1000eacc:	e1bffe15 	stw	r6,-8(fp)
1000ead0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000ead4:	e03ff615 	stw	zero,-40(fp)
1000ead8:	00840074 	movhi	r2,4097
1000eadc:	108f5e04 	addi	r2,r2,15736
1000eae0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000eae4:	10003f26 	beq	r2,zero,1000ebe4 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000eae8:	e0bffc17 	ldw	r2,-16(fp)
1000eaec:	10003b26 	beq	r2,zero,1000ebdc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000eaf0:	e0bffc17 	ldw	r2,-16(fp)
1000eaf4:	e0fffe17 	ldw	r3,-8(fp)
1000eaf8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000eafc:	e0bffc17 	ldw	r2,-16(fp)
1000eb00:	e0ffff17 	ldw	r3,-4(fp)
1000eb04:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000eb08:	0005303a 	rdctl	r2,status
1000eb0c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000eb10:	e0fff817 	ldw	r3,-32(fp)
1000eb14:	00bfff84 	movi	r2,-2
1000eb18:	1884703a 	and	r2,r3,r2
1000eb1c:	1001703a 	wrctl	status,r2
  
  return context;
1000eb20:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000eb24:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000eb28:	00840074 	movhi	r2,4097
1000eb2c:	108f5f04 	addi	r2,r2,15740
1000eb30:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000eb34:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000eb38:	e0fffd17 	ldw	r3,-12(fp)
1000eb3c:	e0bff617 	ldw	r2,-40(fp)
1000eb40:	1885883a 	add	r2,r3,r2
1000eb44:	10c00044 	addi	r3,r2,1
1000eb48:	e0bffc17 	ldw	r2,-16(fp)
1000eb4c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000eb50:	e0bffc17 	ldw	r2,-16(fp)
1000eb54:	10c00217 	ldw	r3,8(r2)
1000eb58:	e0bff617 	ldw	r2,-40(fp)
1000eb5c:	1880042e 	bgeu	r3,r2,1000eb70 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000eb60:	e0bffc17 	ldw	r2,-16(fp)
1000eb64:	00c00044 	movi	r3,1
1000eb68:	10c00405 	stb	r3,16(r2)
1000eb6c:	00000206 	br	1000eb78 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000eb70:	e0bffc17 	ldw	r2,-16(fp)
1000eb74:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000eb78:	e0bffc17 	ldw	r2,-16(fp)
1000eb7c:	00c40074 	movhi	r3,4097
1000eb80:	18c8ba04 	addi	r3,r3,8936
1000eb84:	e0fff915 	stw	r3,-28(fp)
1000eb88:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000eb8c:	e0bffa17 	ldw	r2,-24(fp)
1000eb90:	e0fff917 	ldw	r3,-28(fp)
1000eb94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000eb98:	e0bff917 	ldw	r2,-28(fp)
1000eb9c:	10c00017 	ldw	r3,0(r2)
1000eba0:	e0bffa17 	ldw	r2,-24(fp)
1000eba4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000eba8:	e0bff917 	ldw	r2,-28(fp)
1000ebac:	10800017 	ldw	r2,0(r2)
1000ebb0:	e0fffa17 	ldw	r3,-24(fp)
1000ebb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ebb8:	e0bff917 	ldw	r2,-28(fp)
1000ebbc:	e0fffa17 	ldw	r3,-24(fp)
1000ebc0:	10c00015 	stw	r3,0(r2)
1000ebc4:	e0bff717 	ldw	r2,-36(fp)
1000ebc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ebcc:	e0bffb17 	ldw	r2,-20(fp)
1000ebd0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000ebd4:	0005883a 	mov	r2,zero
1000ebd8:	00000306 	br	1000ebe8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000ebdc:	00bffa84 	movi	r2,-22
1000ebe0:	00000106 	br	1000ebe8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000ebe4:	00bfde84 	movi	r2,-134
  }
}
1000ebe8:	e037883a 	mov	sp,fp
1000ebec:	df000017 	ldw	fp,0(sp)
1000ebf0:	dec00104 	addi	sp,sp,4
1000ebf4:	f800283a 	ret

1000ebf8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1000ebf8:	defffa04 	addi	sp,sp,-24
1000ebfc:	dfc00515 	stw	ra,20(sp)
1000ec00:	df000415 	stw	fp,16(sp)
1000ec04:	df000404 	addi	fp,sp,16
1000ec08:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1000ec0c:	00800244 	movi	r2,9
1000ec10:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1000ec14:	e13ffd17 	ldw	r4,-12(fp)
1000ec18:	014003f4 	movhi	r5,15
1000ec1c:	29509004 	addi	r5,r5,16960
1000ec20:	00050500 	call	10005050 <__mulsi3>
1000ec24:	0100bef4 	movhi	r4,763
1000ec28:	213c2004 	addi	r4,r4,-3968
1000ec2c:	100b883a 	mov	r5,r2
1000ec30:	0004a8c0 	call	10004a8c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1000ec34:	01200034 	movhi	r4,32768
1000ec38:	213fffc4 	addi	r4,r4,-1
1000ec3c:	100b883a 	mov	r5,r2
1000ec40:	0004a8c0 	call	10004a8c <__udivsi3>
1000ec44:	e13fff17 	ldw	r4,-4(fp)
1000ec48:	100b883a 	mov	r5,r2
1000ec4c:	0004a8c0 	call	10004a8c <__udivsi3>
1000ec50:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1000ec54:	e0bffe17 	ldw	r2,-8(fp)
1000ec58:	10002926 	beq	r2,zero,1000ed00 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
1000ec5c:	e03ffc15 	stw	zero,-16(fp)
1000ec60:	00001606 	br	1000ecbc <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1000ec64:	00a00034 	movhi	r2,32768
1000ec68:	10bfffc4 	addi	r2,r2,-1
1000ec6c:	10bfffc4 	addi	r2,r2,-1
1000ec70:	103ffe1e 	bne	r2,zero,1000ec6c <__alt_data_end+0xf800ec6c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1000ec74:	e13ffd17 	ldw	r4,-12(fp)
1000ec78:	014003f4 	movhi	r5,15
1000ec7c:	29509004 	addi	r5,r5,16960
1000ec80:	00050500 	call	10005050 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1000ec84:	0100bef4 	movhi	r4,763
1000ec88:	213c2004 	addi	r4,r4,-3968
1000ec8c:	100b883a 	mov	r5,r2
1000ec90:	0004a8c0 	call	10004a8c <__udivsi3>
1000ec94:	01200034 	movhi	r4,32768
1000ec98:	213fffc4 	addi	r4,r4,-1
1000ec9c:	100b883a 	mov	r5,r2
1000eca0:	0004a8c0 	call	10004a8c <__udivsi3>
1000eca4:	e0ffff17 	ldw	r3,-4(fp)
1000eca8:	1885c83a 	sub	r2,r3,r2
1000ecac:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1000ecb0:	e0bffc17 	ldw	r2,-16(fp)
1000ecb4:	10800044 	addi	r2,r2,1
1000ecb8:	e0bffc15 	stw	r2,-16(fp)
1000ecbc:	e0fffc17 	ldw	r3,-16(fp)
1000ecc0:	e0bffe17 	ldw	r2,-8(fp)
1000ecc4:	18bfe716 	blt	r3,r2,1000ec64 <__alt_data_end+0xf800ec64>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1000ecc8:	e13ffd17 	ldw	r4,-12(fp)
1000eccc:	014003f4 	movhi	r5,15
1000ecd0:	29509004 	addi	r5,r5,16960
1000ecd4:	00050500 	call	10005050 <__mulsi3>
1000ecd8:	0100bef4 	movhi	r4,763
1000ecdc:	213c2004 	addi	r4,r4,-3968
1000ece0:	100b883a 	mov	r5,r2
1000ece4:	0004a8c0 	call	10004a8c <__udivsi3>
1000ece8:	1009883a 	mov	r4,r2
1000ecec:	e17fff17 	ldw	r5,-4(fp)
1000ecf0:	00050500 	call	10005050 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1000ecf4:	10bfffc4 	addi	r2,r2,-1
1000ecf8:	103ffe1e 	bne	r2,zero,1000ecf4 <__alt_data_end+0xf800ecf4>
1000ecfc:	00000d06 	br	1000ed34 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1000ed00:	e13ffd17 	ldw	r4,-12(fp)
1000ed04:	014003f4 	movhi	r5,15
1000ed08:	29509004 	addi	r5,r5,16960
1000ed0c:	00050500 	call	10005050 <__mulsi3>
1000ed10:	0100bef4 	movhi	r4,763
1000ed14:	213c2004 	addi	r4,r4,-3968
1000ed18:	100b883a 	mov	r5,r2
1000ed1c:	0004a8c0 	call	10004a8c <__udivsi3>
1000ed20:	1009883a 	mov	r4,r2
1000ed24:	e17fff17 	ldw	r5,-4(fp)
1000ed28:	00050500 	call	10005050 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1000ed2c:	10bfffc4 	addi	r2,r2,-1
1000ed30:	00bffe16 	blt	zero,r2,1000ed2c <__alt_data_end+0xf800ed2c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1000ed34:	0005883a 	mov	r2,zero
}
1000ed38:	e037883a 	mov	sp,fp
1000ed3c:	dfc00117 	ldw	ra,4(sp)
1000ed40:	df000017 	ldw	fp,0(sp)
1000ed44:	dec00204 	addi	sp,sp,8
1000ed48:	f800283a 	ret

1000ed4c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000ed4c:	deffff04 	addi	sp,sp,-4
1000ed50:	df000015 	stw	fp,0(sp)
1000ed54:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000ed58:	e037883a 	mov	sp,fp
1000ed5c:	df000017 	ldw	fp,0(sp)
1000ed60:	dec00104 	addi	sp,sp,4
1000ed64:	f800283a 	ret

1000ed68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ed68:	defffe04 	addi	sp,sp,-8
1000ed6c:	dfc00115 	stw	ra,4(sp)
1000ed70:	df000015 	stw	fp,0(sp)
1000ed74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ed78:	00840074 	movhi	r2,4097
1000ed7c:	1088b704 	addi	r2,r2,8924
1000ed80:	10800017 	ldw	r2,0(r2)
1000ed84:	10000526 	beq	r2,zero,1000ed9c <alt_get_errno+0x34>
1000ed88:	00840074 	movhi	r2,4097
1000ed8c:	1088b704 	addi	r2,r2,8924
1000ed90:	10800017 	ldw	r2,0(r2)
1000ed94:	103ee83a 	callr	r2
1000ed98:	00000206 	br	1000eda4 <alt_get_errno+0x3c>
1000ed9c:	00840074 	movhi	r2,4097
1000eda0:	108f5904 	addi	r2,r2,15716
}
1000eda4:	e037883a 	mov	sp,fp
1000eda8:	dfc00117 	ldw	ra,4(sp)
1000edac:	df000017 	ldw	fp,0(sp)
1000edb0:	dec00204 	addi	sp,sp,8
1000edb4:	f800283a 	ret

1000edb8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000edb8:	defffa04 	addi	sp,sp,-24
1000edbc:	dfc00515 	stw	ra,20(sp)
1000edc0:	df000415 	stw	fp,16(sp)
1000edc4:	df000404 	addi	fp,sp,16
1000edc8:	e13ffe15 	stw	r4,-8(fp)
1000edcc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000edd0:	e0bffe17 	ldw	r2,-8(fp)
1000edd4:	10000326 	beq	r2,zero,1000ede4 <alt_dev_llist_insert+0x2c>
1000edd8:	e0bffe17 	ldw	r2,-8(fp)
1000eddc:	10800217 	ldw	r2,8(r2)
1000ede0:	1000051e 	bne	r2,zero,1000edf8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
1000ede4:	000ed680 	call	1000ed68 <alt_get_errno>
1000ede8:	00c00584 	movi	r3,22
1000edec:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
1000edf0:	00bffa84 	movi	r2,-22
1000edf4:	00001306 	br	1000ee44 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000edf8:	e0bffe17 	ldw	r2,-8(fp)
1000edfc:	e0ffff17 	ldw	r3,-4(fp)
1000ee00:	e0fffc15 	stw	r3,-16(fp)
1000ee04:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ee08:	e0bffd17 	ldw	r2,-12(fp)
1000ee0c:	e0fffc17 	ldw	r3,-16(fp)
1000ee10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ee14:	e0bffc17 	ldw	r2,-16(fp)
1000ee18:	10c00017 	ldw	r3,0(r2)
1000ee1c:	e0bffd17 	ldw	r2,-12(fp)
1000ee20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ee24:	e0bffc17 	ldw	r2,-16(fp)
1000ee28:	10800017 	ldw	r2,0(r2)
1000ee2c:	e0fffd17 	ldw	r3,-12(fp)
1000ee30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ee34:	e0bffc17 	ldw	r2,-16(fp)
1000ee38:	e0fffd17 	ldw	r3,-12(fp)
1000ee3c:	10c00015 	stw	r3,0(r2)

  return 0;  
1000ee40:	0005883a 	mov	r2,zero
}
1000ee44:	e037883a 	mov	sp,fp
1000ee48:	dfc00117 	ldw	ra,4(sp)
1000ee4c:	df000017 	ldw	fp,0(sp)
1000ee50:	dec00204 	addi	sp,sp,8
1000ee54:	f800283a 	ret

1000ee58 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000ee58:	defffd04 	addi	sp,sp,-12
1000ee5c:	dfc00215 	stw	ra,8(sp)
1000ee60:	df000115 	stw	fp,4(sp)
1000ee64:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ee68:	00840074 	movhi	r2,4097
1000ee6c:	10bf7a04 	addi	r2,r2,-536
1000ee70:	e0bfff15 	stw	r2,-4(fp)
1000ee74:	00000606 	br	1000ee90 <_do_ctors+0x38>
        (*ctor) (); 
1000ee78:	e0bfff17 	ldw	r2,-4(fp)
1000ee7c:	10800017 	ldw	r2,0(r2)
1000ee80:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ee84:	e0bfff17 	ldw	r2,-4(fp)
1000ee88:	10bfff04 	addi	r2,r2,-4
1000ee8c:	e0bfff15 	stw	r2,-4(fp)
1000ee90:	e0ffff17 	ldw	r3,-4(fp)
1000ee94:	00840074 	movhi	r2,4097
1000ee98:	10bf7b04 	addi	r2,r2,-532
1000ee9c:	18bff62e 	bgeu	r3,r2,1000ee78 <__alt_data_end+0xf800ee78>
        (*ctor) (); 
}
1000eea0:	e037883a 	mov	sp,fp
1000eea4:	dfc00117 	ldw	ra,4(sp)
1000eea8:	df000017 	ldw	fp,0(sp)
1000eeac:	dec00204 	addi	sp,sp,8
1000eeb0:	f800283a 	ret

1000eeb4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000eeb4:	defffd04 	addi	sp,sp,-12
1000eeb8:	dfc00215 	stw	ra,8(sp)
1000eebc:	df000115 	stw	fp,4(sp)
1000eec0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000eec4:	00840074 	movhi	r2,4097
1000eec8:	10bf7a04 	addi	r2,r2,-536
1000eecc:	e0bfff15 	stw	r2,-4(fp)
1000eed0:	00000606 	br	1000eeec <_do_dtors+0x38>
        (*dtor) (); 
1000eed4:	e0bfff17 	ldw	r2,-4(fp)
1000eed8:	10800017 	ldw	r2,0(r2)
1000eedc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000eee0:	e0bfff17 	ldw	r2,-4(fp)
1000eee4:	10bfff04 	addi	r2,r2,-4
1000eee8:	e0bfff15 	stw	r2,-4(fp)
1000eeec:	e0ffff17 	ldw	r3,-4(fp)
1000eef0:	00840074 	movhi	r2,4097
1000eef4:	10bf7b04 	addi	r2,r2,-532
1000eef8:	18bff62e 	bgeu	r3,r2,1000eed4 <__alt_data_end+0xf800eed4>
        (*dtor) (); 
}
1000eefc:	e037883a 	mov	sp,fp
1000ef00:	dfc00117 	ldw	ra,4(sp)
1000ef04:	df000017 	ldw	fp,0(sp)
1000ef08:	dec00204 	addi	sp,sp,8
1000ef0c:	f800283a 	ret

1000ef10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000ef10:	deffff04 	addi	sp,sp,-4
1000ef14:	df000015 	stw	fp,0(sp)
1000ef18:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000ef1c:	e037883a 	mov	sp,fp
1000ef20:	df000017 	ldw	fp,0(sp)
1000ef24:	dec00104 	addi	sp,sp,4
1000ef28:	f800283a 	ret

1000ef2c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000ef2c:	defff904 	addi	sp,sp,-28
1000ef30:	dfc00615 	stw	ra,24(sp)
1000ef34:	df000515 	stw	fp,20(sp)
1000ef38:	df000504 	addi	fp,sp,20
1000ef3c:	e13ffc15 	stw	r4,-16(fp)
1000ef40:	e17ffd15 	stw	r5,-12(fp)
1000ef44:	e1bffe15 	stw	r6,-8(fp)
1000ef48:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000ef4c:	e0800217 	ldw	r2,8(fp)
1000ef50:	d8800015 	stw	r2,0(sp)
1000ef54:	e13ffc17 	ldw	r4,-16(fp)
1000ef58:	e17ffd17 	ldw	r5,-12(fp)
1000ef5c:	e1bffe17 	ldw	r6,-8(fp)
1000ef60:	e1ffff17 	ldw	r7,-4(fp)
1000ef64:	000f1040 	call	1000f104 <alt_iic_isr_register>
}  
1000ef68:	e037883a 	mov	sp,fp
1000ef6c:	dfc00117 	ldw	ra,4(sp)
1000ef70:	df000017 	ldw	fp,0(sp)
1000ef74:	dec00204 	addi	sp,sp,8
1000ef78:	f800283a 	ret

1000ef7c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000ef7c:	defff904 	addi	sp,sp,-28
1000ef80:	df000615 	stw	fp,24(sp)
1000ef84:	df000604 	addi	fp,sp,24
1000ef88:	e13ffe15 	stw	r4,-8(fp)
1000ef8c:	e17fff15 	stw	r5,-4(fp)
1000ef90:	e0bfff17 	ldw	r2,-4(fp)
1000ef94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ef98:	0005303a 	rdctl	r2,status
1000ef9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000efa0:	e0fffb17 	ldw	r3,-20(fp)
1000efa4:	00bfff84 	movi	r2,-2
1000efa8:	1884703a 	and	r2,r3,r2
1000efac:	1001703a 	wrctl	status,r2
  
  return context;
1000efb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000efb4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000efb8:	e0bffa17 	ldw	r2,-24(fp)
1000efbc:	00c00044 	movi	r3,1
1000efc0:	1884983a 	sll	r2,r3,r2
1000efc4:	1007883a 	mov	r3,r2
1000efc8:	00840074 	movhi	r2,4097
1000efcc:	108f5d04 	addi	r2,r2,15732
1000efd0:	10800017 	ldw	r2,0(r2)
1000efd4:	1886b03a 	or	r3,r3,r2
1000efd8:	00840074 	movhi	r2,4097
1000efdc:	108f5d04 	addi	r2,r2,15732
1000efe0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000efe4:	00840074 	movhi	r2,4097
1000efe8:	108f5d04 	addi	r2,r2,15732
1000efec:	10800017 	ldw	r2,0(r2)
1000eff0:	100170fa 	wrctl	ienable,r2
1000eff4:	e0bffc17 	ldw	r2,-16(fp)
1000eff8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000effc:	e0bffd17 	ldw	r2,-12(fp)
1000f000:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f004:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
1000f008:	e037883a 	mov	sp,fp
1000f00c:	df000017 	ldw	fp,0(sp)
1000f010:	dec00104 	addi	sp,sp,4
1000f014:	f800283a 	ret

1000f018 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000f018:	defff904 	addi	sp,sp,-28
1000f01c:	df000615 	stw	fp,24(sp)
1000f020:	df000604 	addi	fp,sp,24
1000f024:	e13ffe15 	stw	r4,-8(fp)
1000f028:	e17fff15 	stw	r5,-4(fp)
1000f02c:	e0bfff17 	ldw	r2,-4(fp)
1000f030:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f034:	0005303a 	rdctl	r2,status
1000f038:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f03c:	e0fffb17 	ldw	r3,-20(fp)
1000f040:	00bfff84 	movi	r2,-2
1000f044:	1884703a 	and	r2,r3,r2
1000f048:	1001703a 	wrctl	status,r2
  
  return context;
1000f04c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f050:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000f054:	e0bffa17 	ldw	r2,-24(fp)
1000f058:	00c00044 	movi	r3,1
1000f05c:	1884983a 	sll	r2,r3,r2
1000f060:	0084303a 	nor	r2,zero,r2
1000f064:	1007883a 	mov	r3,r2
1000f068:	00840074 	movhi	r2,4097
1000f06c:	108f5d04 	addi	r2,r2,15732
1000f070:	10800017 	ldw	r2,0(r2)
1000f074:	1886703a 	and	r3,r3,r2
1000f078:	00840074 	movhi	r2,4097
1000f07c:	108f5d04 	addi	r2,r2,15732
1000f080:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f084:	00840074 	movhi	r2,4097
1000f088:	108f5d04 	addi	r2,r2,15732
1000f08c:	10800017 	ldw	r2,0(r2)
1000f090:	100170fa 	wrctl	ienable,r2
1000f094:	e0bffc17 	ldw	r2,-16(fp)
1000f098:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f09c:	e0bffd17 	ldw	r2,-12(fp)
1000f0a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f0a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
1000f0a8:	e037883a 	mov	sp,fp
1000f0ac:	df000017 	ldw	fp,0(sp)
1000f0b0:	dec00104 	addi	sp,sp,4
1000f0b4:	f800283a 	ret

1000f0b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000f0b8:	defffc04 	addi	sp,sp,-16
1000f0bc:	df000315 	stw	fp,12(sp)
1000f0c0:	df000304 	addi	fp,sp,12
1000f0c4:	e13ffe15 	stw	r4,-8(fp)
1000f0c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000f0cc:	000530fa 	rdctl	r2,ienable
1000f0d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000f0d4:	e0bfff17 	ldw	r2,-4(fp)
1000f0d8:	00c00044 	movi	r3,1
1000f0dc:	1884983a 	sll	r2,r3,r2
1000f0e0:	1007883a 	mov	r3,r2
1000f0e4:	e0bffd17 	ldw	r2,-12(fp)
1000f0e8:	1884703a 	and	r2,r3,r2
1000f0ec:	1004c03a 	cmpne	r2,r2,zero
1000f0f0:	10803fcc 	andi	r2,r2,255
}
1000f0f4:	e037883a 	mov	sp,fp
1000f0f8:	df000017 	ldw	fp,0(sp)
1000f0fc:	dec00104 	addi	sp,sp,4
1000f100:	f800283a 	ret

1000f104 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f104:	defff504 	addi	sp,sp,-44
1000f108:	dfc00a15 	stw	ra,40(sp)
1000f10c:	df000915 	stw	fp,36(sp)
1000f110:	df000904 	addi	fp,sp,36
1000f114:	e13ffc15 	stw	r4,-16(fp)
1000f118:	e17ffd15 	stw	r5,-12(fp)
1000f11c:	e1bffe15 	stw	r6,-8(fp)
1000f120:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000f124:	00bffa84 	movi	r2,-22
1000f128:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000f12c:	e0bffd17 	ldw	r2,-12(fp)
1000f130:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000f134:	e0bff817 	ldw	r2,-32(fp)
1000f138:	10800808 	cmpgei	r2,r2,32
1000f13c:	1000271e 	bne	r2,zero,1000f1dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f140:	0005303a 	rdctl	r2,status
1000f144:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f148:	e0fffa17 	ldw	r3,-24(fp)
1000f14c:	00bfff84 	movi	r2,-2
1000f150:	1884703a 	and	r2,r3,r2
1000f154:	1001703a 	wrctl	status,r2
  
  return context;
1000f158:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000f15c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000f160:	00c40074 	movhi	r3,4097
1000f164:	18cf6a04 	addi	r3,r3,15784
1000f168:	e0bff817 	ldw	r2,-32(fp)
1000f16c:	100490fa 	slli	r2,r2,3
1000f170:	1885883a 	add	r2,r3,r2
1000f174:	e0fffe17 	ldw	r3,-8(fp)
1000f178:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000f17c:	00c40074 	movhi	r3,4097
1000f180:	18cf6a04 	addi	r3,r3,15784
1000f184:	e0bff817 	ldw	r2,-32(fp)
1000f188:	100490fa 	slli	r2,r2,3
1000f18c:	1885883a 	add	r2,r3,r2
1000f190:	10800104 	addi	r2,r2,4
1000f194:	e0ffff17 	ldw	r3,-4(fp)
1000f198:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000f19c:	e0bffe17 	ldw	r2,-8(fp)
1000f1a0:	10000526 	beq	r2,zero,1000f1b8 <alt_iic_isr_register+0xb4>
1000f1a4:	e0bff817 	ldw	r2,-32(fp)
1000f1a8:	e13ffc17 	ldw	r4,-16(fp)
1000f1ac:	100b883a 	mov	r5,r2
1000f1b0:	000ef7c0 	call	1000ef7c <alt_ic_irq_enable>
1000f1b4:	00000406 	br	1000f1c8 <alt_iic_isr_register+0xc4>
1000f1b8:	e0bff817 	ldw	r2,-32(fp)
1000f1bc:	e13ffc17 	ldw	r4,-16(fp)
1000f1c0:	100b883a 	mov	r5,r2
1000f1c4:	000f0180 	call	1000f018 <alt_ic_irq_disable>
1000f1c8:	e0bff715 	stw	r2,-36(fp)
1000f1cc:	e0bff917 	ldw	r2,-28(fp)
1000f1d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f1d4:	e0bffb17 	ldw	r2,-20(fp)
1000f1d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000f1dc:	e0bff717 	ldw	r2,-36(fp)
}
1000f1e0:	e037883a 	mov	sp,fp
1000f1e4:	dfc00117 	ldw	ra,4(sp)
1000f1e8:	df000017 	ldw	fp,0(sp)
1000f1ec:	dec00204 	addi	sp,sp,8
1000f1f0:	f800283a 	ret

1000f1f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000f1f4:	defff804 	addi	sp,sp,-32
1000f1f8:	dfc00715 	stw	ra,28(sp)
1000f1fc:	df000615 	stw	fp,24(sp)
1000f200:	dc000515 	stw	r16,20(sp)
1000f204:	df000504 	addi	fp,sp,20
1000f208:	e13ffc15 	stw	r4,-16(fp)
1000f20c:	e17ffd15 	stw	r5,-12(fp)
1000f210:	e1bffe15 	stw	r6,-8(fp)
1000f214:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
1000f218:	e13ffd17 	ldw	r4,-12(fp)
1000f21c:	e17ffe17 	ldw	r5,-8(fp)
1000f220:	e1bfff17 	ldw	r6,-4(fp)
1000f224:	000f48c0 	call	1000f48c <open>
1000f228:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
1000f22c:	e0bffb17 	ldw	r2,-20(fp)
1000f230:	10002216 	blt	r2,zero,1000f2bc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000f234:	04040074 	movhi	r16,4097
1000f238:	84043504 	addi	r16,r16,4308
1000f23c:	e0bffb17 	ldw	r2,-20(fp)
1000f240:	1009883a 	mov	r4,r2
1000f244:	01400304 	movi	r5,12
1000f248:	00050500 	call	10005050 <__mulsi3>
1000f24c:	8085883a 	add	r2,r16,r2
1000f250:	10c00017 	ldw	r3,0(r2)
1000f254:	e0bffc17 	ldw	r2,-16(fp)
1000f258:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000f25c:	04040074 	movhi	r16,4097
1000f260:	84043504 	addi	r16,r16,4308
1000f264:	e0bffb17 	ldw	r2,-20(fp)
1000f268:	1009883a 	mov	r4,r2
1000f26c:	01400304 	movi	r5,12
1000f270:	00050500 	call	10005050 <__mulsi3>
1000f274:	8085883a 	add	r2,r16,r2
1000f278:	10800104 	addi	r2,r2,4
1000f27c:	10c00017 	ldw	r3,0(r2)
1000f280:	e0bffc17 	ldw	r2,-16(fp)
1000f284:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000f288:	04040074 	movhi	r16,4097
1000f28c:	84043504 	addi	r16,r16,4308
1000f290:	e0bffb17 	ldw	r2,-20(fp)
1000f294:	1009883a 	mov	r4,r2
1000f298:	01400304 	movi	r5,12
1000f29c:	00050500 	call	10005050 <__mulsi3>
1000f2a0:	8085883a 	add	r2,r16,r2
1000f2a4:	10800204 	addi	r2,r2,8
1000f2a8:	10c00017 	ldw	r3,0(r2)
1000f2ac:	e0bffc17 	ldw	r2,-16(fp)
1000f2b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000f2b4:	e13ffb17 	ldw	r4,-20(fp)
1000f2b8:	000dd040 	call	1000dd04 <alt_release_fd>
  }
} 
1000f2bc:	e037883a 	mov	sp,fp
1000f2c0:	dfc00217 	ldw	ra,8(sp)
1000f2c4:	df000117 	ldw	fp,4(sp)
1000f2c8:	dc000017 	ldw	r16,0(sp)
1000f2cc:	dec00304 	addi	sp,sp,12
1000f2d0:	f800283a 	ret

1000f2d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000f2d4:	defffb04 	addi	sp,sp,-20
1000f2d8:	dfc00415 	stw	ra,16(sp)
1000f2dc:	df000315 	stw	fp,12(sp)
1000f2e0:	df000304 	addi	fp,sp,12
1000f2e4:	e13ffd15 	stw	r4,-12(fp)
1000f2e8:	e17ffe15 	stw	r5,-8(fp)
1000f2ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000f2f0:	01040074 	movhi	r4,4097
1000f2f4:	21043804 	addi	r4,r4,4320
1000f2f8:	e17ffd17 	ldw	r5,-12(fp)
1000f2fc:	01800044 	movi	r6,1
1000f300:	01c07fc4 	movi	r7,511
1000f304:	000f1f40 	call	1000f1f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000f308:	01040074 	movhi	r4,4097
1000f30c:	21043504 	addi	r4,r4,4308
1000f310:	e17ffe17 	ldw	r5,-8(fp)
1000f314:	000d883a 	mov	r6,zero
1000f318:	01c07fc4 	movi	r7,511
1000f31c:	000f1f40 	call	1000f1f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000f320:	01040074 	movhi	r4,4097
1000f324:	21043b04 	addi	r4,r4,4332
1000f328:	e17fff17 	ldw	r5,-4(fp)
1000f32c:	01800044 	movi	r6,1
1000f330:	01c07fc4 	movi	r7,511
1000f334:	000f1f40 	call	1000f1f4 <alt_open_fd>
}  
1000f338:	e037883a 	mov	sp,fp
1000f33c:	dfc00117 	ldw	ra,4(sp)
1000f340:	df000017 	ldw	fp,0(sp)
1000f344:	dec00204 	addi	sp,sp,8
1000f348:	f800283a 	ret

1000f34c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f34c:	defffe04 	addi	sp,sp,-8
1000f350:	dfc00115 	stw	ra,4(sp)
1000f354:	df000015 	stw	fp,0(sp)
1000f358:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f35c:	00840074 	movhi	r2,4097
1000f360:	1088b704 	addi	r2,r2,8924
1000f364:	10800017 	ldw	r2,0(r2)
1000f368:	10000526 	beq	r2,zero,1000f380 <alt_get_errno+0x34>
1000f36c:	00840074 	movhi	r2,4097
1000f370:	1088b704 	addi	r2,r2,8924
1000f374:	10800017 	ldw	r2,0(r2)
1000f378:	103ee83a 	callr	r2
1000f37c:	00000206 	br	1000f388 <alt_get_errno+0x3c>
1000f380:	00840074 	movhi	r2,4097
1000f384:	108f5904 	addi	r2,r2,15716
}
1000f388:	e037883a 	mov	sp,fp
1000f38c:	dfc00117 	ldw	ra,4(sp)
1000f390:	df000017 	ldw	fp,0(sp)
1000f394:	dec00204 	addi	sp,sp,8
1000f398:	f800283a 	ret

1000f39c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000f39c:	defffb04 	addi	sp,sp,-20
1000f3a0:	dfc00415 	stw	ra,16(sp)
1000f3a4:	df000315 	stw	fp,12(sp)
1000f3a8:	dc000215 	stw	r16,8(sp)
1000f3ac:	df000204 	addi	fp,sp,8
1000f3b0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000f3b4:	e0bfff17 	ldw	r2,-4(fp)
1000f3b8:	10800217 	ldw	r2,8(r2)
1000f3bc:	10d00034 	orhi	r3,r2,16384
1000f3c0:	e0bfff17 	ldw	r2,-4(fp)
1000f3c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f3c8:	e03ffe15 	stw	zero,-8(fp)
1000f3cc:	00002206 	br	1000f458 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f3d0:	04040074 	movhi	r16,4097
1000f3d4:	84043504 	addi	r16,r16,4308
1000f3d8:	e0bffe17 	ldw	r2,-8(fp)
1000f3dc:	1009883a 	mov	r4,r2
1000f3e0:	01400304 	movi	r5,12
1000f3e4:	00050500 	call	10005050 <__mulsi3>
1000f3e8:	8085883a 	add	r2,r16,r2
1000f3ec:	10c00017 	ldw	r3,0(r2)
1000f3f0:	e0bfff17 	ldw	r2,-4(fp)
1000f3f4:	10800017 	ldw	r2,0(r2)
1000f3f8:	1880141e 	bne	r3,r2,1000f44c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f3fc:	04040074 	movhi	r16,4097
1000f400:	84043504 	addi	r16,r16,4308
1000f404:	e0bffe17 	ldw	r2,-8(fp)
1000f408:	1009883a 	mov	r4,r2
1000f40c:	01400304 	movi	r5,12
1000f410:	00050500 	call	10005050 <__mulsi3>
1000f414:	8085883a 	add	r2,r16,r2
1000f418:	10800204 	addi	r2,r2,8
1000f41c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f420:	10000a0e 	bge	r2,zero,1000f44c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000f424:	e13ffe17 	ldw	r4,-8(fp)
1000f428:	01400304 	movi	r5,12
1000f42c:	00050500 	call	10005050 <__mulsi3>
1000f430:	00c40074 	movhi	r3,4097
1000f434:	18c43504 	addi	r3,r3,4308
1000f438:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f43c:	e0bfff17 	ldw	r2,-4(fp)
1000f440:	18800226 	beq	r3,r2,1000f44c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000f444:	00bffcc4 	movi	r2,-13
1000f448:	00000a06 	br	1000f474 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f44c:	e0bffe17 	ldw	r2,-8(fp)
1000f450:	10800044 	addi	r2,r2,1
1000f454:	e0bffe15 	stw	r2,-8(fp)
1000f458:	00840074 	movhi	r2,4097
1000f45c:	1088b604 	addi	r2,r2,8920
1000f460:	10800017 	ldw	r2,0(r2)
1000f464:	1007883a 	mov	r3,r2
1000f468:	e0bffe17 	ldw	r2,-8(fp)
1000f46c:	18bfd82e 	bgeu	r3,r2,1000f3d0 <__alt_data_end+0xf800f3d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000f470:	0005883a 	mov	r2,zero
}
1000f474:	e037883a 	mov	sp,fp
1000f478:	dfc00217 	ldw	ra,8(sp)
1000f47c:	df000117 	ldw	fp,4(sp)
1000f480:	dc000017 	ldw	r16,0(sp)
1000f484:	dec00304 	addi	sp,sp,12
1000f488:	f800283a 	ret

1000f48c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000f48c:	defff604 	addi	sp,sp,-40
1000f490:	dfc00915 	stw	ra,36(sp)
1000f494:	df000815 	stw	fp,32(sp)
1000f498:	df000804 	addi	fp,sp,32
1000f49c:	e13ffd15 	stw	r4,-12(fp)
1000f4a0:	e17ffe15 	stw	r5,-8(fp)
1000f4a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000f4a8:	00bfffc4 	movi	r2,-1
1000f4ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000f4b0:	00bffb44 	movi	r2,-19
1000f4b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000f4b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000f4bc:	e13ffd17 	ldw	r4,-12(fp)
1000f4c0:	01440074 	movhi	r5,4097
1000f4c4:	2948b404 	addi	r5,r5,8912
1000f4c8:	000f7a00 	call	1000f7a0 <alt_find_dev>
1000f4cc:	e0bff815 	stw	r2,-32(fp)
1000f4d0:	e0bff817 	ldw	r2,-32(fp)
1000f4d4:	1000051e 	bne	r2,zero,1000f4ec <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000f4d8:	e13ffd17 	ldw	r4,-12(fp)
1000f4dc:	000f8300 	call	1000f830 <alt_find_file>
1000f4e0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000f4e4:	00800044 	movi	r2,1
1000f4e8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000f4ec:	e0bff817 	ldw	r2,-32(fp)
1000f4f0:	10002a26 	beq	r2,zero,1000f59c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000f4f4:	e13ff817 	ldw	r4,-32(fp)
1000f4f8:	000f9440 	call	1000f944 <alt_get_fd>
1000f4fc:	e0bff915 	stw	r2,-28(fp)
1000f500:	e0bff917 	ldw	r2,-28(fp)
1000f504:	1000030e 	bge	r2,zero,1000f514 <open+0x88>
    {
      status = index;
1000f508:	e0bff917 	ldw	r2,-28(fp)
1000f50c:	e0bffa15 	stw	r2,-24(fp)
1000f510:	00002406 	br	1000f5a4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1000f514:	e13ff917 	ldw	r4,-28(fp)
1000f518:	01400304 	movi	r5,12
1000f51c:	00050500 	call	10005050 <__mulsi3>
1000f520:	00c40074 	movhi	r3,4097
1000f524:	18c43504 	addi	r3,r3,4308
1000f528:	10c5883a 	add	r2,r2,r3
1000f52c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000f530:	e0fffe17 	ldw	r3,-8(fp)
1000f534:	00900034 	movhi	r2,16384
1000f538:	10bfffc4 	addi	r2,r2,-1
1000f53c:	1886703a 	and	r3,r3,r2
1000f540:	e0bffc17 	ldw	r2,-16(fp)
1000f544:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000f548:	e0bffb17 	ldw	r2,-20(fp)
1000f54c:	1000051e 	bne	r2,zero,1000f564 <open+0xd8>
1000f550:	e13ffc17 	ldw	r4,-16(fp)
1000f554:	000f39c0 	call	1000f39c <alt_file_locked>
1000f558:	e0bffa15 	stw	r2,-24(fp)
1000f55c:	e0bffa17 	ldw	r2,-24(fp)
1000f560:	10001016 	blt	r2,zero,1000f5a4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000f564:	e0bff817 	ldw	r2,-32(fp)
1000f568:	10800317 	ldw	r2,12(r2)
1000f56c:	10000826 	beq	r2,zero,1000f590 <open+0x104>
1000f570:	e0bff817 	ldw	r2,-32(fp)
1000f574:	10800317 	ldw	r2,12(r2)
1000f578:	e13ffc17 	ldw	r4,-16(fp)
1000f57c:	e17ffd17 	ldw	r5,-12(fp)
1000f580:	e1bffe17 	ldw	r6,-8(fp)
1000f584:	e1ffff17 	ldw	r7,-4(fp)
1000f588:	103ee83a 	callr	r2
1000f58c:	00000106 	br	1000f594 <open+0x108>
1000f590:	0005883a 	mov	r2,zero
1000f594:	e0bffa15 	stw	r2,-24(fp)
1000f598:	00000206 	br	1000f5a4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000f59c:	00bffb44 	movi	r2,-19
1000f5a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000f5a4:	e0bffa17 	ldw	r2,-24(fp)
1000f5a8:	1000080e 	bge	r2,zero,1000f5cc <open+0x140>
  {
    alt_release_fd (index);  
1000f5ac:	e13ff917 	ldw	r4,-28(fp)
1000f5b0:	000dd040 	call	1000dd04 <alt_release_fd>
    ALT_ERRNO = -status;
1000f5b4:	000f34c0 	call	1000f34c <alt_get_errno>
1000f5b8:	e0fffa17 	ldw	r3,-24(fp)
1000f5bc:	00c7c83a 	sub	r3,zero,r3
1000f5c0:	10c00015 	stw	r3,0(r2)
    return -1;
1000f5c4:	00bfffc4 	movi	r2,-1
1000f5c8:	00000106 	br	1000f5d0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
1000f5cc:	e0bff917 	ldw	r2,-28(fp)
}
1000f5d0:	e037883a 	mov	sp,fp
1000f5d4:	dfc00117 	ldw	ra,4(sp)
1000f5d8:	df000017 	ldw	fp,0(sp)
1000f5dc:	dec00204 	addi	sp,sp,8
1000f5e0:	f800283a 	ret

1000f5e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000f5e4:	defffa04 	addi	sp,sp,-24
1000f5e8:	df000515 	stw	fp,20(sp)
1000f5ec:	df000504 	addi	fp,sp,20
1000f5f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f5f4:	0005303a 	rdctl	r2,status
1000f5f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f5fc:	e0fffc17 	ldw	r3,-16(fp)
1000f600:	00bfff84 	movi	r2,-2
1000f604:	1884703a 	and	r2,r3,r2
1000f608:	1001703a 	wrctl	status,r2
  
  return context;
1000f60c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000f610:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000f614:	e0bfff17 	ldw	r2,-4(fp)
1000f618:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000f61c:	e0bffd17 	ldw	r2,-12(fp)
1000f620:	10800017 	ldw	r2,0(r2)
1000f624:	e0fffd17 	ldw	r3,-12(fp)
1000f628:	18c00117 	ldw	r3,4(r3)
1000f62c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000f630:	e0bffd17 	ldw	r2,-12(fp)
1000f634:	10800117 	ldw	r2,4(r2)
1000f638:	e0fffd17 	ldw	r3,-12(fp)
1000f63c:	18c00017 	ldw	r3,0(r3)
1000f640:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000f644:	e0bffd17 	ldw	r2,-12(fp)
1000f648:	e0fffd17 	ldw	r3,-12(fp)
1000f64c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000f650:	e0bffd17 	ldw	r2,-12(fp)
1000f654:	e0fffd17 	ldw	r3,-12(fp)
1000f658:	10c00015 	stw	r3,0(r2)
1000f65c:	e0bffb17 	ldw	r2,-20(fp)
1000f660:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f664:	e0bffe17 	ldw	r2,-8(fp)
1000f668:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000f66c:	e037883a 	mov	sp,fp
1000f670:	df000017 	ldw	fp,0(sp)
1000f674:	dec00104 	addi	sp,sp,4
1000f678:	f800283a 	ret

1000f67c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000f67c:	defffb04 	addi	sp,sp,-20
1000f680:	dfc00415 	stw	ra,16(sp)
1000f684:	df000315 	stw	fp,12(sp)
1000f688:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000f68c:	d0a00d17 	ldw	r2,-32716(gp)
1000f690:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000f694:	d0a6b217 	ldw	r2,-25912(gp)
1000f698:	10800044 	addi	r2,r2,1
1000f69c:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f6a0:	00002e06 	br	1000f75c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000f6a4:	e0bffd17 	ldw	r2,-12(fp)
1000f6a8:	10800017 	ldw	r2,0(r2)
1000f6ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000f6b0:	e0bffd17 	ldw	r2,-12(fp)
1000f6b4:	10800403 	ldbu	r2,16(r2)
1000f6b8:	10803fcc 	andi	r2,r2,255
1000f6bc:	10000426 	beq	r2,zero,1000f6d0 <alt_tick+0x54>
1000f6c0:	d0a6b217 	ldw	r2,-25912(gp)
1000f6c4:	1000021e 	bne	r2,zero,1000f6d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000f6c8:	e0bffd17 	ldw	r2,-12(fp)
1000f6cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000f6d0:	e0bffd17 	ldw	r2,-12(fp)
1000f6d4:	10800217 	ldw	r2,8(r2)
1000f6d8:	d0e6b217 	ldw	r3,-25912(gp)
1000f6dc:	18801d36 	bltu	r3,r2,1000f754 <alt_tick+0xd8>
1000f6e0:	e0bffd17 	ldw	r2,-12(fp)
1000f6e4:	10800403 	ldbu	r2,16(r2)
1000f6e8:	10803fcc 	andi	r2,r2,255
1000f6ec:	1000191e 	bne	r2,zero,1000f754 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000f6f0:	e0bffd17 	ldw	r2,-12(fp)
1000f6f4:	10c00317 	ldw	r3,12(r2)
1000f6f8:	e0bffd17 	ldw	r2,-12(fp)
1000f6fc:	10800517 	ldw	r2,20(r2)
1000f700:	1009883a 	mov	r4,r2
1000f704:	183ee83a 	callr	r3
1000f708:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000f70c:	e0bfff17 	ldw	r2,-4(fp)
1000f710:	1000031e 	bne	r2,zero,1000f720 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000f714:	e13ffd17 	ldw	r4,-12(fp)
1000f718:	000f5e40 	call	1000f5e4 <alt_alarm_stop>
1000f71c:	00000d06 	br	1000f754 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000f720:	e0bffd17 	ldw	r2,-12(fp)
1000f724:	10c00217 	ldw	r3,8(r2)
1000f728:	e0bfff17 	ldw	r2,-4(fp)
1000f72c:	1887883a 	add	r3,r3,r2
1000f730:	e0bffd17 	ldw	r2,-12(fp)
1000f734:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000f738:	e0bffd17 	ldw	r2,-12(fp)
1000f73c:	10c00217 	ldw	r3,8(r2)
1000f740:	d0a6b217 	ldw	r2,-25912(gp)
1000f744:	1880032e 	bgeu	r3,r2,1000f754 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000f748:	e0bffd17 	ldw	r2,-12(fp)
1000f74c:	00c00044 	movi	r3,1
1000f750:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000f754:	e0bffe17 	ldw	r2,-8(fp)
1000f758:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f75c:	e0fffd17 	ldw	r3,-12(fp)
1000f760:	d0a00d04 	addi	r2,gp,-32716
1000f764:	18bfcf1e 	bne	r3,r2,1000f6a4 <__alt_data_end+0xf800f6a4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000f768:	0001883a 	nop
}
1000f76c:	e037883a 	mov	sp,fp
1000f770:	dfc00117 	ldw	ra,4(sp)
1000f774:	df000017 	ldw	fp,0(sp)
1000f778:	dec00204 	addi	sp,sp,8
1000f77c:	f800283a 	ret

1000f780 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
1000f780:	deffff04 	addi	sp,sp,-4
1000f784:	df000015 	stw	fp,0(sp)
1000f788:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000f78c:	000170fa 	wrctl	ienable,zero
}
1000f790:	e037883a 	mov	sp,fp
1000f794:	df000017 	ldw	fp,0(sp)
1000f798:	dec00104 	addi	sp,sp,4
1000f79c:	f800283a 	ret

1000f7a0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000f7a0:	defffa04 	addi	sp,sp,-24
1000f7a4:	dfc00515 	stw	ra,20(sp)
1000f7a8:	df000415 	stw	fp,16(sp)
1000f7ac:	df000404 	addi	fp,sp,16
1000f7b0:	e13ffe15 	stw	r4,-8(fp)
1000f7b4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000f7b8:	e0bfff17 	ldw	r2,-4(fp)
1000f7bc:	10800017 	ldw	r2,0(r2)
1000f7c0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000f7c4:	e13ffe17 	ldw	r4,-8(fp)
1000f7c8:	00052000 	call	10005200 <strlen>
1000f7cc:	10800044 	addi	r2,r2,1
1000f7d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000f7d4:	00000d06 	br	1000f80c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000f7d8:	e0bffc17 	ldw	r2,-16(fp)
1000f7dc:	10c00217 	ldw	r3,8(r2)
1000f7e0:	e0bffd17 	ldw	r2,-12(fp)
1000f7e4:	1809883a 	mov	r4,r3
1000f7e8:	e17ffe17 	ldw	r5,-8(fp)
1000f7ec:	100d883a 	mov	r6,r2
1000f7f0:	000fa640 	call	1000fa64 <memcmp>
1000f7f4:	1000021e 	bne	r2,zero,1000f800 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000f7f8:	e0bffc17 	ldw	r2,-16(fp)
1000f7fc:	00000706 	br	1000f81c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000f800:	e0bffc17 	ldw	r2,-16(fp)
1000f804:	10800017 	ldw	r2,0(r2)
1000f808:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000f80c:	e0fffc17 	ldw	r3,-16(fp)
1000f810:	e0bfff17 	ldw	r2,-4(fp)
1000f814:	18bff01e 	bne	r3,r2,1000f7d8 <__alt_data_end+0xf800f7d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000f818:	0005883a 	mov	r2,zero
}
1000f81c:	e037883a 	mov	sp,fp
1000f820:	dfc00117 	ldw	ra,4(sp)
1000f824:	df000017 	ldw	fp,0(sp)
1000f828:	dec00204 	addi	sp,sp,8
1000f82c:	f800283a 	ret

1000f830 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000f830:	defffb04 	addi	sp,sp,-20
1000f834:	dfc00415 	stw	ra,16(sp)
1000f838:	df000315 	stw	fp,12(sp)
1000f83c:	df000304 	addi	fp,sp,12
1000f840:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000f844:	00840074 	movhi	r2,4097
1000f848:	1088b204 	addi	r2,r2,8904
1000f84c:	10800017 	ldw	r2,0(r2)
1000f850:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f854:	00003106 	br	1000f91c <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000f858:	e0bffd17 	ldw	r2,-12(fp)
1000f85c:	10800217 	ldw	r2,8(r2)
1000f860:	1009883a 	mov	r4,r2
1000f864:	00052000 	call	10005200 <strlen>
1000f868:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000f86c:	e0bffd17 	ldw	r2,-12(fp)
1000f870:	10c00217 	ldw	r3,8(r2)
1000f874:	e0bffe17 	ldw	r2,-8(fp)
1000f878:	10bfffc4 	addi	r2,r2,-1
1000f87c:	1885883a 	add	r2,r3,r2
1000f880:	10800003 	ldbu	r2,0(r2)
1000f884:	10803fcc 	andi	r2,r2,255
1000f888:	1080201c 	xori	r2,r2,128
1000f88c:	10bfe004 	addi	r2,r2,-128
1000f890:	10800bd8 	cmpnei	r2,r2,47
1000f894:	1000031e 	bne	r2,zero,1000f8a4 <alt_find_file+0x74>
    {
      len -= 1;
1000f898:	e0bffe17 	ldw	r2,-8(fp)
1000f89c:	10bfffc4 	addi	r2,r2,-1
1000f8a0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f8a4:	e0bffe17 	ldw	r2,-8(fp)
1000f8a8:	e0ffff17 	ldw	r3,-4(fp)
1000f8ac:	1885883a 	add	r2,r3,r2
1000f8b0:	10800003 	ldbu	r2,0(r2)
1000f8b4:	10803fcc 	andi	r2,r2,255
1000f8b8:	1080201c 	xori	r2,r2,128
1000f8bc:	10bfe004 	addi	r2,r2,-128
1000f8c0:	10800be0 	cmpeqi	r2,r2,47
1000f8c4:	1000081e 	bne	r2,zero,1000f8e8 <alt_find_file+0xb8>
1000f8c8:	e0bffe17 	ldw	r2,-8(fp)
1000f8cc:	e0ffff17 	ldw	r3,-4(fp)
1000f8d0:	1885883a 	add	r2,r3,r2
1000f8d4:	10800003 	ldbu	r2,0(r2)
1000f8d8:	10803fcc 	andi	r2,r2,255
1000f8dc:	1080201c 	xori	r2,r2,128
1000f8e0:	10bfe004 	addi	r2,r2,-128
1000f8e4:	10000a1e 	bne	r2,zero,1000f910 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000f8e8:	e0bffd17 	ldw	r2,-12(fp)
1000f8ec:	10c00217 	ldw	r3,8(r2)
1000f8f0:	e0bffe17 	ldw	r2,-8(fp)
1000f8f4:	1809883a 	mov	r4,r3
1000f8f8:	e17fff17 	ldw	r5,-4(fp)
1000f8fc:	100d883a 	mov	r6,r2
1000f900:	000fa640 	call	1000fa64 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f904:	1000021e 	bne	r2,zero,1000f910 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000f908:	e0bffd17 	ldw	r2,-12(fp)
1000f90c:	00000806 	br	1000f930 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000f910:	e0bffd17 	ldw	r2,-12(fp)
1000f914:	10800017 	ldw	r2,0(r2)
1000f918:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f91c:	e0fffd17 	ldw	r3,-12(fp)
1000f920:	00840074 	movhi	r2,4097
1000f924:	1088b204 	addi	r2,r2,8904
1000f928:	18bfcb1e 	bne	r3,r2,1000f858 <__alt_data_end+0xf800f858>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000f92c:	0005883a 	mov	r2,zero
}
1000f930:	e037883a 	mov	sp,fp
1000f934:	dfc00117 	ldw	ra,4(sp)
1000f938:	df000017 	ldw	fp,0(sp)
1000f93c:	dec00204 	addi	sp,sp,8
1000f940:	f800283a 	ret

1000f944 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000f944:	defffa04 	addi	sp,sp,-24
1000f948:	dfc00515 	stw	ra,20(sp)
1000f94c:	df000415 	stw	fp,16(sp)
1000f950:	dc000315 	stw	r16,12(sp)
1000f954:	df000304 	addi	fp,sp,12
1000f958:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
1000f95c:	00bffa04 	movi	r2,-24
1000f960:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f964:	e03ffd15 	stw	zero,-12(fp)
1000f968:	00002106 	br	1000f9f0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000f96c:	04040074 	movhi	r16,4097
1000f970:	84043504 	addi	r16,r16,4308
1000f974:	e0bffd17 	ldw	r2,-12(fp)
1000f978:	1009883a 	mov	r4,r2
1000f97c:	01400304 	movi	r5,12
1000f980:	00050500 	call	10005050 <__mulsi3>
1000f984:	8085883a 	add	r2,r16,r2
1000f988:	10800017 	ldw	r2,0(r2)
1000f98c:	1000151e 	bne	r2,zero,1000f9e4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000f990:	04040074 	movhi	r16,4097
1000f994:	84043504 	addi	r16,r16,4308
1000f998:	e0bffd17 	ldw	r2,-12(fp)
1000f99c:	1009883a 	mov	r4,r2
1000f9a0:	01400304 	movi	r5,12
1000f9a4:	00050500 	call	10005050 <__mulsi3>
1000f9a8:	8085883a 	add	r2,r16,r2
1000f9ac:	e0ffff17 	ldw	r3,-4(fp)
1000f9b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000f9b4:	00840074 	movhi	r2,4097
1000f9b8:	1088b604 	addi	r2,r2,8920
1000f9bc:	10c00017 	ldw	r3,0(r2)
1000f9c0:	e0bffd17 	ldw	r2,-12(fp)
1000f9c4:	1880040e 	bge	r3,r2,1000f9d8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000f9c8:	00840074 	movhi	r2,4097
1000f9cc:	1088b604 	addi	r2,r2,8920
1000f9d0:	e0fffd17 	ldw	r3,-12(fp)
1000f9d4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000f9d8:	e0bffd17 	ldw	r2,-12(fp)
1000f9dc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1000f9e0:	00000606 	br	1000f9fc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f9e4:	e0bffd17 	ldw	r2,-12(fp)
1000f9e8:	10800044 	addi	r2,r2,1
1000f9ec:	e0bffd15 	stw	r2,-12(fp)
1000f9f0:	e0bffd17 	ldw	r2,-12(fp)
1000f9f4:	10800810 	cmplti	r2,r2,32
1000f9f8:	103fdc1e 	bne	r2,zero,1000f96c <__alt_data_end+0xf800f96c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000f9fc:	e0bffe17 	ldw	r2,-8(fp)
}
1000fa00:	e037883a 	mov	sp,fp
1000fa04:	dfc00217 	ldw	ra,8(sp)
1000fa08:	df000117 	ldw	fp,4(sp)
1000fa0c:	dc000017 	ldw	r16,0(sp)
1000fa10:	dec00304 	addi	sp,sp,12
1000fa14:	f800283a 	ret

1000fa18 <atexit>:
1000fa18:	200b883a 	mov	r5,r4
1000fa1c:	000d883a 	mov	r6,zero
1000fa20:	0009883a 	mov	r4,zero
1000fa24:	000f883a 	mov	r7,zero
1000fa28:	000fae01 	jmpi	1000fae0 <__register_exitproc>

1000fa2c <exit>:
1000fa2c:	defffe04 	addi	sp,sp,-8
1000fa30:	000b883a 	mov	r5,zero
1000fa34:	dc000015 	stw	r16,0(sp)
1000fa38:	dfc00115 	stw	ra,4(sp)
1000fa3c:	2021883a 	mov	r16,r4
1000fa40:	000fc100 	call	1000fc10 <__call_exitprocs>
1000fa44:	00840074 	movhi	r2,4097
1000fa48:	1088ad04 	addi	r2,r2,8884
1000fa4c:	11000017 	ldw	r4,0(r2)
1000fa50:	20800f17 	ldw	r2,60(r4)
1000fa54:	10000126 	beq	r2,zero,1000fa5c <exit+0x30>
1000fa58:	103ee83a 	callr	r2
1000fa5c:	8009883a 	mov	r4,r16
1000fa60:	000fdb00 	call	1000fdb0 <_exit>

1000fa64 <memcmp>:
1000fa64:	01c000c4 	movi	r7,3
1000fa68:	3980192e 	bgeu	r7,r6,1000fad0 <memcmp+0x6c>
1000fa6c:	2904b03a 	or	r2,r5,r4
1000fa70:	11c4703a 	and	r2,r2,r7
1000fa74:	10000f26 	beq	r2,zero,1000fab4 <memcmp+0x50>
1000fa78:	20c00003 	ldbu	r3,0(r4)
1000fa7c:	28800003 	ldbu	r2,0(r5)
1000fa80:	1880151e 	bne	r3,r2,1000fad8 <memcmp+0x74>
1000fa84:	31bfff84 	addi	r6,r6,-2
1000fa88:	01ffffc4 	movi	r7,-1
1000fa8c:	00000406 	br	1000faa0 <memcmp+0x3c>
1000fa90:	20c00003 	ldbu	r3,0(r4)
1000fa94:	28800003 	ldbu	r2,0(r5)
1000fa98:	31bfffc4 	addi	r6,r6,-1
1000fa9c:	18800e1e 	bne	r3,r2,1000fad8 <memcmp+0x74>
1000faa0:	21000044 	addi	r4,r4,1
1000faa4:	29400044 	addi	r5,r5,1
1000faa8:	31fff91e 	bne	r6,r7,1000fa90 <__alt_data_end+0xf800fa90>
1000faac:	0005883a 	mov	r2,zero
1000fab0:	f800283a 	ret
1000fab4:	20c00017 	ldw	r3,0(r4)
1000fab8:	28800017 	ldw	r2,0(r5)
1000fabc:	1880041e 	bne	r3,r2,1000fad0 <memcmp+0x6c>
1000fac0:	31bfff04 	addi	r6,r6,-4
1000fac4:	21000104 	addi	r4,r4,4
1000fac8:	29400104 	addi	r5,r5,4
1000facc:	39bff936 	bltu	r7,r6,1000fab4 <__alt_data_end+0xf800fab4>
1000fad0:	303fe91e 	bne	r6,zero,1000fa78 <__alt_data_end+0xf800fa78>
1000fad4:	003ff506 	br	1000faac <__alt_data_end+0xf800faac>
1000fad8:	1885c83a 	sub	r2,r3,r2
1000fadc:	f800283a 	ret

1000fae0 <__register_exitproc>:
1000fae0:	defffa04 	addi	sp,sp,-24
1000fae4:	00840074 	movhi	r2,4097
1000fae8:	1088ad04 	addi	r2,r2,8884
1000faec:	dc000315 	stw	r16,12(sp)
1000faf0:	14000017 	ldw	r16,0(r2)
1000faf4:	dc400415 	stw	r17,16(sp)
1000faf8:	dfc00515 	stw	ra,20(sp)
1000fafc:	80805217 	ldw	r2,328(r16)
1000fb00:	2023883a 	mov	r17,r4
1000fb04:	10003e26 	beq	r2,zero,1000fc00 <__register_exitproc+0x120>
1000fb08:	10c00117 	ldw	r3,4(r2)
1000fb0c:	020007c4 	movi	r8,31
1000fb10:	40c0180e 	bge	r8,r3,1000fb74 <__register_exitproc+0x94>
1000fb14:	00800034 	movhi	r2,0
1000fb18:	10800004 	addi	r2,r2,0
1000fb1c:	1000061e 	bne	r2,zero,1000fb38 <__register_exitproc+0x58>
1000fb20:	00bfffc4 	movi	r2,-1
1000fb24:	dfc00517 	ldw	ra,20(sp)
1000fb28:	dc400417 	ldw	r17,16(sp)
1000fb2c:	dc000317 	ldw	r16,12(sp)
1000fb30:	dec00604 	addi	sp,sp,24
1000fb34:	f800283a 	ret
1000fb38:	01006404 	movi	r4,400
1000fb3c:	d9400015 	stw	r5,0(sp)
1000fb40:	d9800115 	stw	r6,4(sp)
1000fb44:	d9c00215 	stw	r7,8(sp)
1000fb48:	00000000 	call	10000000 <__alt_mem_sdram>
1000fb4c:	d9400017 	ldw	r5,0(sp)
1000fb50:	d9800117 	ldw	r6,4(sp)
1000fb54:	d9c00217 	ldw	r7,8(sp)
1000fb58:	103ff126 	beq	r2,zero,1000fb20 <__alt_data_end+0xf800fb20>
1000fb5c:	80c05217 	ldw	r3,328(r16)
1000fb60:	10000115 	stw	zero,4(r2)
1000fb64:	10c00015 	stw	r3,0(r2)
1000fb68:	80805215 	stw	r2,328(r16)
1000fb6c:	10006215 	stw	zero,392(r2)
1000fb70:	10006315 	stw	zero,396(r2)
1000fb74:	10c00117 	ldw	r3,4(r2)
1000fb78:	88000d1e 	bne	r17,zero,1000fbb0 <__register_exitproc+0xd0>
1000fb7c:	19000084 	addi	r4,r3,2
1000fb80:	2109883a 	add	r4,r4,r4
1000fb84:	18c00044 	addi	r3,r3,1
1000fb88:	2109883a 	add	r4,r4,r4
1000fb8c:	1109883a 	add	r4,r2,r4
1000fb90:	10c00115 	stw	r3,4(r2)
1000fb94:	0005883a 	mov	r2,zero
1000fb98:	21400015 	stw	r5,0(r4)
1000fb9c:	dfc00517 	ldw	ra,20(sp)
1000fba0:	dc400417 	ldw	r17,16(sp)
1000fba4:	dc000317 	ldw	r16,12(sp)
1000fba8:	dec00604 	addi	sp,sp,24
1000fbac:	f800283a 	ret
1000fbb0:	02400044 	movi	r9,1
1000fbb4:	12806217 	ldw	r10,392(r2)
1000fbb8:	48d2983a 	sll	r9,r9,r3
1000fbbc:	19000804 	addi	r4,r3,32
1000fbc0:	18d1883a 	add	r8,r3,r3
1000fbc4:	2109883a 	add	r4,r4,r4
1000fbc8:	4211883a 	add	r8,r8,r8
1000fbcc:	2109883a 	add	r4,r4,r4
1000fbd0:	1109883a 	add	r4,r2,r4
1000fbd4:	1211883a 	add	r8,r2,r8
1000fbd8:	5254b03a 	or	r10,r10,r9
1000fbdc:	21c02215 	stw	r7,136(r4)
1000fbe0:	41802215 	stw	r6,136(r8)
1000fbe4:	12806215 	stw	r10,392(r2)
1000fbe8:	01000084 	movi	r4,2
1000fbec:	893fe31e 	bne	r17,r4,1000fb7c <__alt_data_end+0xf800fb7c>
1000fbf0:	11006317 	ldw	r4,396(r2)
1000fbf4:	2252b03a 	or	r9,r4,r9
1000fbf8:	12406315 	stw	r9,396(r2)
1000fbfc:	003fdf06 	br	1000fb7c <__alt_data_end+0xf800fb7c>
1000fc00:	00840074 	movhi	r2,4097
1000fc04:	108faa04 	addi	r2,r2,16040
1000fc08:	80805215 	stw	r2,328(r16)
1000fc0c:	003fbe06 	br	1000fb08 <__alt_data_end+0xf800fb08>

1000fc10 <__call_exitprocs>:
1000fc10:	00840074 	movhi	r2,4097
1000fc14:	1088ad04 	addi	r2,r2,8884
1000fc18:	10800017 	ldw	r2,0(r2)
1000fc1c:	defff304 	addi	sp,sp,-52
1000fc20:	df000b15 	stw	fp,44(sp)
1000fc24:	d8800015 	stw	r2,0(sp)
1000fc28:	10805204 	addi	r2,r2,328
1000fc2c:	dd400815 	stw	r21,32(sp)
1000fc30:	dfc00c15 	stw	ra,48(sp)
1000fc34:	ddc00a15 	stw	r23,40(sp)
1000fc38:	dd800915 	stw	r22,36(sp)
1000fc3c:	dd000715 	stw	r20,28(sp)
1000fc40:	dcc00615 	stw	r19,24(sp)
1000fc44:	dc800515 	stw	r18,20(sp)
1000fc48:	dc400415 	stw	r17,16(sp)
1000fc4c:	dc000315 	stw	r16,12(sp)
1000fc50:	d9000115 	stw	r4,4(sp)
1000fc54:	2839883a 	mov	fp,r5
1000fc58:	d8800215 	stw	r2,8(sp)
1000fc5c:	057fffc4 	movi	r21,-1
1000fc60:	d8800017 	ldw	r2,0(sp)
1000fc64:	ddc00217 	ldw	r23,8(sp)
1000fc68:	14805217 	ldw	r18,328(r2)
1000fc6c:	90001726 	beq	r18,zero,1000fccc <__call_exitprocs+0xbc>
1000fc70:	94400117 	ldw	r17,4(r18)
1000fc74:	8c3fffc4 	addi	r16,r17,-1
1000fc78:	80001116 	blt	r16,zero,1000fcc0 <__call_exitprocs+0xb0>
1000fc7c:	8c400044 	addi	r17,r17,1
1000fc80:	8427883a 	add	r19,r16,r16
1000fc84:	8c63883a 	add	r17,r17,r17
1000fc88:	95802204 	addi	r22,r18,136
1000fc8c:	9ce7883a 	add	r19,r19,r19
1000fc90:	8c63883a 	add	r17,r17,r17
1000fc94:	b4e7883a 	add	r19,r22,r19
1000fc98:	9463883a 	add	r17,r18,r17
1000fc9c:	e0001726 	beq	fp,zero,1000fcfc <__call_exitprocs+0xec>
1000fca0:	8c87c83a 	sub	r3,r17,r18
1000fca4:	b0c7883a 	add	r3,r22,r3
1000fca8:	18c01e17 	ldw	r3,120(r3)
1000fcac:	1f001326 	beq	r3,fp,1000fcfc <__call_exitprocs+0xec>
1000fcb0:	843fffc4 	addi	r16,r16,-1
1000fcb4:	9cffff04 	addi	r19,r19,-4
1000fcb8:	8c7fff04 	addi	r17,r17,-4
1000fcbc:	857ff71e 	bne	r16,r21,1000fc9c <__alt_data_end+0xf800fc9c>
1000fcc0:	00800034 	movhi	r2,0
1000fcc4:	10800004 	addi	r2,r2,0
1000fcc8:	10002a1e 	bne	r2,zero,1000fd74 <__call_exitprocs+0x164>
1000fccc:	dfc00c17 	ldw	ra,48(sp)
1000fcd0:	df000b17 	ldw	fp,44(sp)
1000fcd4:	ddc00a17 	ldw	r23,40(sp)
1000fcd8:	dd800917 	ldw	r22,36(sp)
1000fcdc:	dd400817 	ldw	r21,32(sp)
1000fce0:	dd000717 	ldw	r20,28(sp)
1000fce4:	dcc00617 	ldw	r19,24(sp)
1000fce8:	dc800517 	ldw	r18,20(sp)
1000fcec:	dc400417 	ldw	r17,16(sp)
1000fcf0:	dc000317 	ldw	r16,12(sp)
1000fcf4:	dec00d04 	addi	sp,sp,52
1000fcf8:	f800283a 	ret
1000fcfc:	91000117 	ldw	r4,4(r18)
1000fd00:	88c00017 	ldw	r3,0(r17)
1000fd04:	213fffc4 	addi	r4,r4,-1
1000fd08:	24001526 	beq	r4,r16,1000fd60 <__call_exitprocs+0x150>
1000fd0c:	88000015 	stw	zero,0(r17)
1000fd10:	183fe726 	beq	r3,zero,1000fcb0 <__alt_data_end+0xf800fcb0>
1000fd14:	00800044 	movi	r2,1
1000fd18:	1408983a 	sll	r4,r2,r16
1000fd1c:	91406217 	ldw	r5,392(r18)
1000fd20:	95000117 	ldw	r20,4(r18)
1000fd24:	214a703a 	and	r5,r4,r5
1000fd28:	28000b26 	beq	r5,zero,1000fd58 <__call_exitprocs+0x148>
1000fd2c:	91406317 	ldw	r5,396(r18)
1000fd30:	2148703a 	and	r4,r4,r5
1000fd34:	20000c1e 	bne	r4,zero,1000fd68 <__call_exitprocs+0x158>
1000fd38:	99400017 	ldw	r5,0(r19)
1000fd3c:	d9000117 	ldw	r4,4(sp)
1000fd40:	183ee83a 	callr	r3
1000fd44:	90c00117 	ldw	r3,4(r18)
1000fd48:	1d3fc51e 	bne	r3,r20,1000fc60 <__alt_data_end+0xf800fc60>
1000fd4c:	b8c00017 	ldw	r3,0(r23)
1000fd50:	1cbfd726 	beq	r3,r18,1000fcb0 <__alt_data_end+0xf800fcb0>
1000fd54:	003fc206 	br	1000fc60 <__alt_data_end+0xf800fc60>
1000fd58:	183ee83a 	callr	r3
1000fd5c:	003ff906 	br	1000fd44 <__alt_data_end+0xf800fd44>
1000fd60:	94000115 	stw	r16,4(r18)
1000fd64:	003fea06 	br	1000fd10 <__alt_data_end+0xf800fd10>
1000fd68:	99000017 	ldw	r4,0(r19)
1000fd6c:	183ee83a 	callr	r3
1000fd70:	003ff406 	br	1000fd44 <__alt_data_end+0xf800fd44>
1000fd74:	90c00117 	ldw	r3,4(r18)
1000fd78:	1800071e 	bne	r3,zero,1000fd98 <__call_exitprocs+0x188>
1000fd7c:	90c00017 	ldw	r3,0(r18)
1000fd80:	18000926 	beq	r3,zero,1000fda8 <__call_exitprocs+0x198>
1000fd84:	9009883a 	mov	r4,r18
1000fd88:	b8c00015 	stw	r3,0(r23)
1000fd8c:	00000000 	call	10000000 <__alt_mem_sdram>
1000fd90:	bc800017 	ldw	r18,0(r23)
1000fd94:	003fb506 	br	1000fc6c <__alt_data_end+0xf800fc6c>
1000fd98:	90c00017 	ldw	r3,0(r18)
1000fd9c:	902f883a 	mov	r23,r18
1000fda0:	1825883a 	mov	r18,r3
1000fda4:	003fb106 	br	1000fc6c <__alt_data_end+0xf800fc6c>
1000fda8:	0007883a 	mov	r3,zero
1000fdac:	003ffb06 	br	1000fd9c <__alt_data_end+0xf800fd9c>

1000fdb0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000fdb0:	defffc04 	addi	sp,sp,-16
1000fdb4:	df000315 	stw	fp,12(sp)
1000fdb8:	df000304 	addi	fp,sp,12
1000fdbc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000fdc0:	0001883a 	nop
1000fdc4:	e0bfff17 	ldw	r2,-4(fp)
1000fdc8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
1000fdcc:	e0bffd17 	ldw	r2,-12(fp)
1000fdd0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000fdd4:	e0bffe17 	ldw	r2,-8(fp)
1000fdd8:	10000226 	beq	r2,zero,1000fde4 <_exit+0x34>
    ALT_SIM_FAIL();
1000fddc:	002af070 	cmpltui	zero,zero,43969
1000fde0:	00000106 	br	1000fde8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
1000fde4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000fde8:	003fff06 	br	1000fde8 <__alt_data_end+0xf800fde8>
