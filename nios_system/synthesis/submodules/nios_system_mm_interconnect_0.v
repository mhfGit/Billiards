// nios_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2015.12.05.22:36:12

`timescale 1 ps / 1 ps
module nios_system_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                    //                                  clk_0_clk.clk
		input  wire        sdram_pll_c0_clk,                                 //                               sdram_pll_c0.clk
		input  wire        jtag_uart_0_reset_reset_bridge_in_reset_reset,    //    jtag_uart_0_reset_reset_bridge_in_reset.reset
		input  wire        nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, // nios2_qsys_0_reset_n_reset_bridge_in_reset.reset
		input  wire        sdram_reset_reset_bridge_in_reset_reset,          //          sdram_reset_reset_bridge_in_reset.reset
		input  wire [28:0] nios2_qsys_0_data_master_address,                 //                   nios2_qsys_0_data_master.address
		output wire        nios2_qsys_0_data_master_waitrequest,             //                                           .waitrequest
		input  wire [3:0]  nios2_qsys_0_data_master_byteenable,              //                                           .byteenable
		input  wire        nios2_qsys_0_data_master_read,                    //                                           .read
		output wire [31:0] nios2_qsys_0_data_master_readdata,                //                                           .readdata
		input  wire        nios2_qsys_0_data_master_write,                   //                                           .write
		input  wire [31:0] nios2_qsys_0_data_master_writedata,               //                                           .writedata
		input  wire        nios2_qsys_0_data_master_debugaccess,             //                                           .debugaccess
		input  wire [28:0] nios2_qsys_0_instruction_master_address,          //            nios2_qsys_0_instruction_master.address
		output wire        nios2_qsys_0_instruction_master_waitrequest,      //                                           .waitrequest
		input  wire        nios2_qsys_0_instruction_master_read,             //                                           .read
		output wire [31:0] nios2_qsys_0_instruction_master_readdata,         //                                           .readdata
		output wire [1:0]  cueBall_s1_address,                               //                                 cueBall_s1.address
		output wire        cueBall_s1_write,                                 //                                           .write
		input  wire [31:0] cueBall_s1_readdata,                              //                                           .readdata
		output wire [31:0] cueBall_s1_writedata,                             //                                           .writedata
		output wire        cueBall_s1_chipselect,                            //                                           .chipselect
		output wire [1:0]  EightBall_s1_address,                             //                               EightBall_s1.address
		output wire        EightBall_s1_write,                               //                                           .write
		input  wire [31:0] EightBall_s1_readdata,                            //                                           .readdata
		output wire [31:0] EightBall_s1_writedata,                           //                                           .writedata
		output wire        EightBall_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  ElevenBall_s1_address,                            //                              ElevenBall_s1.address
		output wire        ElevenBall_s1_write,                              //                                           .write
		input  wire [31:0] ElevenBall_s1_readdata,                           //                                           .readdata
		output wire [31:0] ElevenBall_s1_writedata,                          //                                           .writedata
		output wire        ElevenBall_s1_chipselect,                         //                                           .chipselect
		output wire [1:0]  FifteenBall_s1_address,                           //                             FifteenBall_s1.address
		output wire        FifteenBall_s1_write,                             //                                           .write
		input  wire [31:0] FifteenBall_s1_readdata,                          //                                           .readdata
		output wire [31:0] FifteenBall_s1_writedata,                         //                                           .writedata
		output wire        FifteenBall_s1_chipselect,                        //                                           .chipselect
		output wire [1:0]  FiveBall_s1_address,                              //                                FiveBall_s1.address
		output wire        FiveBall_s1_write,                                //                                           .write
		input  wire [31:0] FiveBall_s1_readdata,                             //                                           .readdata
		output wire [31:0] FiveBall_s1_writedata,                            //                                           .writedata
		output wire        FiveBall_s1_chipselect,                           //                                           .chipselect
		output wire [1:0]  FourBall_s1_address,                              //                                FourBall_s1.address
		output wire        FourBall_s1_write,                                //                                           .write
		input  wire [31:0] FourBall_s1_readdata,                             //                                           .readdata
		output wire [31:0] FourBall_s1_writedata,                            //                                           .writedata
		output wire        FourBall_s1_chipselect,                           //                                           .chipselect
		output wire [1:0]  FourteenBall_s1_address,                          //                            FourteenBall_s1.address
		output wire        FourteenBall_s1_write,                            //                                           .write
		input  wire [31:0] FourteenBall_s1_readdata,                         //                                           .readdata
		output wire [31:0] FourteenBall_s1_writedata,                        //                                           .writedata
		output wire        FourteenBall_s1_chipselect,                       //                                           .chipselect
		output wire [1:0]  hw_sig_s1_address,                                //                                  hw_sig_s1.address
		input  wire [31:0] hw_sig_s1_readdata,                               //                                           .readdata
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,            //              jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,              //                                           .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,               //                                           .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,           //                                           .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,          //                                           .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,        //                                           .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,         //                                           .chipselect
		output wire [1:0]  keycode_s1_address,                               //                                 keycode_s1.address
		output wire        keycode_s1_write,                                 //                                           .write
		input  wire [31:0] keycode_s1_readdata,                              //                                           .readdata
		output wire [31:0] keycode_s1_writedata,                             //                                           .writedata
		output wire        keycode_s1_chipselect,                            //                                           .chipselect
		output wire [1:0]  NineBall_s1_address,                              //                                NineBall_s1.address
		output wire        NineBall_s1_write,                                //                                           .write
		input  wire [31:0] NineBall_s1_readdata,                             //                                           .readdata
		output wire [31:0] NineBall_s1_writedata,                            //                                           .writedata
		output wire        NineBall_s1_chipselect,                           //                                           .chipselect
		output wire [8:0]  nios2_qsys_0_jtag_debug_module_address,           //             nios2_qsys_0_jtag_debug_module.address
		output wire        nios2_qsys_0_jtag_debug_module_write,             //                                           .write
		output wire        nios2_qsys_0_jtag_debug_module_read,              //                                           .read
		input  wire [31:0] nios2_qsys_0_jtag_debug_module_readdata,          //                                           .readdata
		output wire [31:0] nios2_qsys_0_jtag_debug_module_writedata,         //                                           .writedata
		output wire [3:0]  nios2_qsys_0_jtag_debug_module_byteenable,        //                                           .byteenable
		input  wire        nios2_qsys_0_jtag_debug_module_waitrequest,       //                                           .waitrequest
		output wire        nios2_qsys_0_jtag_debug_module_debugaccess,       //                                           .debugaccess
		output wire [1:0]  onchip_memory2_0_s1_address,                      //                        onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                        //                                           .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                     //                                           .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                    //                                           .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                   //                                           .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                   //                                           .chipselect
		output wire        onchip_memory2_0_s1_clken,                        //                                           .clken
		output wire [1:0]  OneBall_s1_address,                               //                                 OneBall_s1.address
		output wire        OneBall_s1_write,                                 //                                           .write
		input  wire [31:0] OneBall_s1_readdata,                              //                                           .readdata
		output wire [31:0] OneBall_s1_writedata,                             //                                           .writedata
		output wire        OneBall_s1_chipselect,                            //                                           .chipselect
		output wire [1:0]  otg_hpi_address_s1_address,                       //                         otg_hpi_address_s1.address
		output wire        otg_hpi_address_s1_write,                         //                                           .write
		input  wire [31:0] otg_hpi_address_s1_readdata,                      //                                           .readdata
		output wire [31:0] otg_hpi_address_s1_writedata,                     //                                           .writedata
		output wire        otg_hpi_address_s1_chipselect,                    //                                           .chipselect
		output wire [1:0]  otg_hpi_cs_s1_address,                            //                              otg_hpi_cs_s1.address
		output wire        otg_hpi_cs_s1_write,                              //                                           .write
		input  wire [31:0] otg_hpi_cs_s1_readdata,                           //                                           .readdata
		output wire [31:0] otg_hpi_cs_s1_writedata,                          //                                           .writedata
		output wire        otg_hpi_cs_s1_chipselect,                         //                                           .chipselect
		output wire [1:0]  otg_hpi_data_s1_address,                          //                            otg_hpi_data_s1.address
		output wire        otg_hpi_data_s1_write,                            //                                           .write
		input  wire [31:0] otg_hpi_data_s1_readdata,                         //                                           .readdata
		output wire [31:0] otg_hpi_data_s1_writedata,                        //                                           .writedata
		output wire        otg_hpi_data_s1_chipselect,                       //                                           .chipselect
		output wire [1:0]  otg_hpi_r_s1_address,                             //                               otg_hpi_r_s1.address
		output wire        otg_hpi_r_s1_write,                               //                                           .write
		input  wire [31:0] otg_hpi_r_s1_readdata,                            //                                           .readdata
		output wire [31:0] otg_hpi_r_s1_writedata,                           //                                           .writedata
		output wire        otg_hpi_r_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  otg_hpi_w_s1_address,                             //                               otg_hpi_w_s1.address
		output wire        otg_hpi_w_s1_write,                               //                                           .write
		input  wire [31:0] otg_hpi_w_s1_readdata,                            //                                           .readdata
		output wire [31:0] otg_hpi_w_s1_writedata,                           //                                           .writedata
		output wire        otg_hpi_w_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  poolcue_s1_address,                               //                                 poolcue_s1.address
		output wire        poolcue_s1_write,                                 //                                           .write
		input  wire [31:0] poolcue_s1_readdata,                              //                                           .readdata
		output wire [31:0] poolcue_s1_writedata,                             //                                           .writedata
		output wire        poolcue_s1_chipselect,                            //                                           .chipselect
		output wire [1:0]  reset_s1_address,                                 //                                   reset_s1.address
		input  wire [31:0] reset_s1_readdata,                                //                                           .readdata
		output wire [24:0] sdram_s1_address,                                 //                                   sdram_s1.address
		output wire        sdram_s1_write,                                   //                                           .write
		output wire        sdram_s1_read,                                    //                                           .read
		input  wire [31:0] sdram_s1_readdata,                                //                                           .readdata
		output wire [31:0] sdram_s1_writedata,                               //                                           .writedata
		output wire [3:0]  sdram_s1_byteenable,                              //                                           .byteenable
		input  wire        sdram_s1_readdatavalid,                           //                                           .readdatavalid
		input  wire        sdram_s1_waitrequest,                             //                                           .waitrequest
		output wire        sdram_s1_chipselect,                              //                                           .chipselect
		output wire [1:0]  sdram_pll_pll_slave_address,                      //                        sdram_pll_pll_slave.address
		output wire        sdram_pll_pll_slave_write,                        //                                           .write
		output wire        sdram_pll_pll_slave_read,                         //                                           .read
		input  wire [31:0] sdram_pll_pll_slave_readdata,                     //                                           .readdata
		output wire [31:0] sdram_pll_pll_slave_writedata,                    //                                           .writedata
		output wire [1:0]  SevenBall_s1_address,                             //                               SevenBall_s1.address
		output wire        SevenBall_s1_write,                               //                                           .write
		input  wire [31:0] SevenBall_s1_readdata,                            //                                           .readdata
		output wire [31:0] SevenBall_s1_writedata,                           //                                           .writedata
		output wire        SevenBall_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  SixBall_s1_address,                               //                                 SixBall_s1.address
		output wire        SixBall_s1_write,                                 //                                           .write
		input  wire [31:0] SixBall_s1_readdata,                              //                                           .readdata
		output wire [31:0] SixBall_s1_writedata,                             //                                           .writedata
		output wire        SixBall_s1_chipselect,                            //                                           .chipselect
		output wire [1:0]  stick_direction_s1_address,                       //                         stick_direction_s1.address
		output wire        stick_direction_s1_write,                         //                                           .write
		input  wire [31:0] stick_direction_s1_readdata,                      //                                           .readdata
		output wire [31:0] stick_direction_s1_writedata,                     //                                           .writedata
		output wire        stick_direction_s1_chipselect,                    //                                           .chipselect
		output wire [0:0]  sysid_qsys_0_control_slave_address,               //                 sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,              //                                           .readdata
		output wire [1:0]  TenBall_s1_address,                               //                                 TenBall_s1.address
		output wire        TenBall_s1_write,                                 //                                           .write
		input  wire [31:0] TenBall_s1_readdata,                              //                                           .readdata
		output wire [31:0] TenBall_s1_writedata,                             //                                           .writedata
		output wire        TenBall_s1_chipselect,                            //                                           .chipselect
		output wire [1:0]  ThirteenBall_s1_address,                          //                            ThirteenBall_s1.address
		output wire        ThirteenBall_s1_write,                            //                                           .write
		input  wire [31:0] ThirteenBall_s1_readdata,                         //                                           .readdata
		output wire [31:0] ThirteenBall_s1_writedata,                        //                                           .writedata
		output wire        ThirteenBall_s1_chipselect,                       //                                           .chipselect
		output wire [1:0]  ThreeBall_s1_address,                             //                               ThreeBall_s1.address
		output wire        ThreeBall_s1_write,                               //                                           .write
		input  wire [31:0] ThreeBall_s1_readdata,                            //                                           .readdata
		output wire [31:0] ThreeBall_s1_writedata,                           //                                           .writedata
		output wire        ThreeBall_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  TwelveBall_s1_address,                            //                              TwelveBall_s1.address
		output wire        TwelveBall_s1_write,                              //                                           .write
		input  wire [31:0] TwelveBall_s1_readdata,                           //                                           .readdata
		output wire [31:0] TwelveBall_s1_writedata,                          //                                           .writedata
		output wire        TwelveBall_s1_chipselect,                         //                                           .chipselect
		output wire [1:0]  TwoBall_s1_address,                               //                                 TwoBall_s1.address
		output wire        TwoBall_s1_write,                                 //                                           .write
		input  wire [31:0] TwoBall_s1_readdata,                              //                                           .readdata
		output wire [31:0] TwoBall_s1_writedata,                             //                                           .writedata
		output wire        TwoBall_s1_chipselect                             //                                           .chipselect
	);

	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_qsys_0_data_master_agent:av_waitrequest -> nios2_qsys_0_data_master_translator:uav_waitrequest
	wire    [2:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_qsys_0_data_master_translator:uav_burstcount -> nios2_qsys_0_data_master_agent:av_burstcount
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_qsys_0_data_master_translator:uav_writedata -> nios2_qsys_0_data_master_agent:av_writedata
	wire   [28:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_address;              // nios2_qsys_0_data_master_translator:uav_address -> nios2_qsys_0_data_master_agent:av_address
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_qsys_0_data_master_translator:uav_lock -> nios2_qsys_0_data_master_agent:av_lock
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_write;                // nios2_qsys_0_data_master_translator:uav_write -> nios2_qsys_0_data_master_agent:av_write
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_qsys_0_data_master_translator:uav_read -> nios2_qsys_0_data_master_agent:av_read
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_qsys_0_data_master_agent:av_readdata -> nios2_qsys_0_data_master_translator:uav_readdata
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_qsys_0_data_master_translator:uav_debugaccess -> nios2_qsys_0_data_master_agent:av_debugaccess
	wire    [3:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_qsys_0_data_master_translator:uav_byteenable -> nios2_qsys_0_data_master_agent:av_byteenable
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_qsys_0_data_master_agent:av_readdatavalid -> nios2_qsys_0_data_master_translator:uav_readdatavalid
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_qsys_0_data_master_agent:rp_endofpacket
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_qsys_0_data_master_agent:rp_valid
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_qsys_0_data_master_agent:rp_startofpacket
	wire  [108:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_qsys_0_data_master_agent:rp_data
	wire   [31:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_qsys_0_data_master_agent:rp_channel
	wire          rsp_mux_src_ready;                                                                  // nios2_qsys_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_qsys_0_instruction_master_agent:av_waitrequest -> nios2_qsys_0_instruction_master_translator:uav_waitrequest
	wire    [2:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_qsys_0_instruction_master_translator:uav_burstcount -> nios2_qsys_0_instruction_master_agent:av_burstcount
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_qsys_0_instruction_master_translator:uav_writedata -> nios2_qsys_0_instruction_master_agent:av_writedata
	wire   [28:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_qsys_0_instruction_master_translator:uav_address -> nios2_qsys_0_instruction_master_agent:av_address
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_qsys_0_instruction_master_translator:uav_lock -> nios2_qsys_0_instruction_master_agent:av_lock
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_qsys_0_instruction_master_translator:uav_write -> nios2_qsys_0_instruction_master_agent:av_write
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_qsys_0_instruction_master_translator:uav_read -> nios2_qsys_0_instruction_master_agent:av_read
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_qsys_0_instruction_master_agent:av_readdata -> nios2_qsys_0_instruction_master_translator:uav_readdata
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_qsys_0_instruction_master_translator:uav_debugaccess -> nios2_qsys_0_instruction_master_agent:av_debugaccess
	wire    [3:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_qsys_0_instruction_master_translator:uav_byteenable -> nios2_qsys_0_instruction_master_agent:av_byteenable
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_qsys_0_instruction_master_agent:av_readdatavalid -> nios2_qsys_0_instruction_master_translator:uav_readdatavalid
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_qsys_0_instruction_master_agent:rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_qsys_0_instruction_master_agent:rp_valid
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_qsys_0_instruction_master_agent:rp_startofpacket
	wire  [108:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_qsys_0_instruction_master_agent:rp_data
	wire   [31:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_qsys_0_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_ready;                                                              // nios2_qsys_0_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire   [28:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire  [109:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire  [109:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire  [108:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire   [31:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_ready;                                                                  // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                                    // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                                     // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                                      // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire   [28:0] sysid_qsys_0_control_slave_agent_m0_address;                                        // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire          sysid_qsys_0_control_slave_agent_m0_write;                                          // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                                           // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire          sysid_qsys_0_control_slave_agent_m0_read;                                           // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                       // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                                  // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                                    // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                                     // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                             // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                                   // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                           // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire  [109:0] sysid_qsys_0_control_slave_agent_rf_source_data;                                    // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                                   // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                                // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                        // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire  [109:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                                 // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                                // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                              // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                               // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                              // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire  [108:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire   [31:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_ready;                                                              // sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest;                                // nios2_qsys_0_jtag_debug_module_translator:uav_waitrequest -> nios2_qsys_0_jtag_debug_module_agent:m0_waitrequest
	wire    [2:0] nios2_qsys_0_jtag_debug_module_agent_m0_burstcount;                                 // nios2_qsys_0_jtag_debug_module_agent:m0_burstcount -> nios2_qsys_0_jtag_debug_module_translator:uav_burstcount
	wire   [31:0] nios2_qsys_0_jtag_debug_module_agent_m0_writedata;                                  // nios2_qsys_0_jtag_debug_module_agent:m0_writedata -> nios2_qsys_0_jtag_debug_module_translator:uav_writedata
	wire   [28:0] nios2_qsys_0_jtag_debug_module_agent_m0_address;                                    // nios2_qsys_0_jtag_debug_module_agent:m0_address -> nios2_qsys_0_jtag_debug_module_translator:uav_address
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_write;                                      // nios2_qsys_0_jtag_debug_module_agent:m0_write -> nios2_qsys_0_jtag_debug_module_translator:uav_write
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_lock;                                       // nios2_qsys_0_jtag_debug_module_agent:m0_lock -> nios2_qsys_0_jtag_debug_module_translator:uav_lock
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_read;                                       // nios2_qsys_0_jtag_debug_module_agent:m0_read -> nios2_qsys_0_jtag_debug_module_translator:uav_read
	wire   [31:0] nios2_qsys_0_jtag_debug_module_agent_m0_readdata;                                   // nios2_qsys_0_jtag_debug_module_translator:uav_readdata -> nios2_qsys_0_jtag_debug_module_agent:m0_readdata
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid;                              // nios2_qsys_0_jtag_debug_module_translator:uav_readdatavalid -> nios2_qsys_0_jtag_debug_module_agent:m0_readdatavalid
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess;                                // nios2_qsys_0_jtag_debug_module_agent:m0_debugaccess -> nios2_qsys_0_jtag_debug_module_translator:uav_debugaccess
	wire    [3:0] nios2_qsys_0_jtag_debug_module_agent_m0_byteenable;                                 // nios2_qsys_0_jtag_debug_module_agent:m0_byteenable -> nios2_qsys_0_jtag_debug_module_translator:uav_byteenable
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket;                         // nios2_qsys_0_jtag_debug_module_agent:rf_source_endofpacket -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_valid;                               // nios2_qsys_0_jtag_debug_module_agent:rf_source_valid -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_valid
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket;                       // nios2_qsys_0_jtag_debug_module_agent:rf_source_startofpacket -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire  [109:0] nios2_qsys_0_jtag_debug_module_agent_rf_source_data;                                // nios2_qsys_0_jtag_debug_module_agent:rf_source_data -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_ready;                               // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_ready -> nios2_qsys_0_jtag_debug_module_agent:rf_source_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_endofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid;                            // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_valid -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_valid
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_startofpacket
	wire  [109:0] nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data;                             // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_data -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready;                            // nios2_qsys_0_jtag_debug_module_agent:rf_sink_ready -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid;                          // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_valid -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data;                           // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_data -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready;                          // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_ready -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> nios2_qsys_0_jtag_debug_module_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> nios2_qsys_0_jtag_debug_module_agent:cp_valid
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> nios2_qsys_0_jtag_debug_module_agent:cp_startofpacket
	wire  [108:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> nios2_qsys_0_jtag_debug_module_agent:cp_data
	wire   [31:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> nios2_qsys_0_jtag_debug_module_agent:cp_channel
	wire          cmd_mux_002_src_ready;                                                              // nios2_qsys_0_jtag_debug_module_agent:cp_ready -> cmd_mux_002:src_ready
	wire          sdram_pll_pll_slave_agent_m0_waitrequest;                                           // sdram_pll_pll_slave_translator:uav_waitrequest -> sdram_pll_pll_slave_agent:m0_waitrequest
	wire    [2:0] sdram_pll_pll_slave_agent_m0_burstcount;                                            // sdram_pll_pll_slave_agent:m0_burstcount -> sdram_pll_pll_slave_translator:uav_burstcount
	wire   [31:0] sdram_pll_pll_slave_agent_m0_writedata;                                             // sdram_pll_pll_slave_agent:m0_writedata -> sdram_pll_pll_slave_translator:uav_writedata
	wire   [28:0] sdram_pll_pll_slave_agent_m0_address;                                               // sdram_pll_pll_slave_agent:m0_address -> sdram_pll_pll_slave_translator:uav_address
	wire          sdram_pll_pll_slave_agent_m0_write;                                                 // sdram_pll_pll_slave_agent:m0_write -> sdram_pll_pll_slave_translator:uav_write
	wire          sdram_pll_pll_slave_agent_m0_lock;                                                  // sdram_pll_pll_slave_agent:m0_lock -> sdram_pll_pll_slave_translator:uav_lock
	wire          sdram_pll_pll_slave_agent_m0_read;                                                  // sdram_pll_pll_slave_agent:m0_read -> sdram_pll_pll_slave_translator:uav_read
	wire   [31:0] sdram_pll_pll_slave_agent_m0_readdata;                                              // sdram_pll_pll_slave_translator:uav_readdata -> sdram_pll_pll_slave_agent:m0_readdata
	wire          sdram_pll_pll_slave_agent_m0_readdatavalid;                                         // sdram_pll_pll_slave_translator:uav_readdatavalid -> sdram_pll_pll_slave_agent:m0_readdatavalid
	wire          sdram_pll_pll_slave_agent_m0_debugaccess;                                           // sdram_pll_pll_slave_agent:m0_debugaccess -> sdram_pll_pll_slave_translator:uav_debugaccess
	wire    [3:0] sdram_pll_pll_slave_agent_m0_byteenable;                                            // sdram_pll_pll_slave_agent:m0_byteenable -> sdram_pll_pll_slave_translator:uav_byteenable
	wire          sdram_pll_pll_slave_agent_rf_source_endofpacket;                                    // sdram_pll_pll_slave_agent:rf_source_endofpacket -> sdram_pll_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          sdram_pll_pll_slave_agent_rf_source_valid;                                          // sdram_pll_pll_slave_agent:rf_source_valid -> sdram_pll_pll_slave_agent_rsp_fifo:in_valid
	wire          sdram_pll_pll_slave_agent_rf_source_startofpacket;                                  // sdram_pll_pll_slave_agent:rf_source_startofpacket -> sdram_pll_pll_slave_agent_rsp_fifo:in_startofpacket
	wire  [109:0] sdram_pll_pll_slave_agent_rf_source_data;                                           // sdram_pll_pll_slave_agent:rf_source_data -> sdram_pll_pll_slave_agent_rsp_fifo:in_data
	wire          sdram_pll_pll_slave_agent_rf_source_ready;                                          // sdram_pll_pll_slave_agent_rsp_fifo:in_ready -> sdram_pll_pll_slave_agent:rf_source_ready
	wire          sdram_pll_pll_slave_agent_rsp_fifo_out_endofpacket;                                 // sdram_pll_pll_slave_agent_rsp_fifo:out_endofpacket -> sdram_pll_pll_slave_agent:rf_sink_endofpacket
	wire          sdram_pll_pll_slave_agent_rsp_fifo_out_valid;                                       // sdram_pll_pll_slave_agent_rsp_fifo:out_valid -> sdram_pll_pll_slave_agent:rf_sink_valid
	wire          sdram_pll_pll_slave_agent_rsp_fifo_out_startofpacket;                               // sdram_pll_pll_slave_agent_rsp_fifo:out_startofpacket -> sdram_pll_pll_slave_agent:rf_sink_startofpacket
	wire  [109:0] sdram_pll_pll_slave_agent_rsp_fifo_out_data;                                        // sdram_pll_pll_slave_agent_rsp_fifo:out_data -> sdram_pll_pll_slave_agent:rf_sink_data
	wire          sdram_pll_pll_slave_agent_rsp_fifo_out_ready;                                       // sdram_pll_pll_slave_agent:rf_sink_ready -> sdram_pll_pll_slave_agent_rsp_fifo:out_ready
	wire          sdram_pll_pll_slave_agent_rdata_fifo_src_valid;                                     // sdram_pll_pll_slave_agent:rdata_fifo_src_valid -> sdram_pll_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] sdram_pll_pll_slave_agent_rdata_fifo_src_data;                                      // sdram_pll_pll_slave_agent:rdata_fifo_src_data -> sdram_pll_pll_slave_agent:rdata_fifo_sink_data
	wire          sdram_pll_pll_slave_agent_rdata_fifo_src_ready;                                     // sdram_pll_pll_slave_agent:rdata_fifo_sink_ready -> sdram_pll_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> sdram_pll_pll_slave_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> sdram_pll_pll_slave_agent:cp_valid
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> sdram_pll_pll_slave_agent:cp_startofpacket
	wire  [108:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> sdram_pll_pll_slave_agent:cp_data
	wire   [31:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> sdram_pll_pll_slave_agent:cp_channel
	wire          cmd_mux_003_src_ready;                                                              // sdram_pll_pll_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                           // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire    [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                            // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire   [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                             // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire   [28:0] onchip_memory2_0_s1_agent_m0_address;                                               // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire          onchip_memory2_0_s1_agent_m0_write;                                                 // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                  // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire          onchip_memory2_0_s1_agent_m0_read;                                                  // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire   [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                              // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                         // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                           // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire    [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                            // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                          // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] onchip_memory2_0_s1_agent_rf_source_data;                                           // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                          // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire  [109:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                     // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire   [31:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          cmd_mux_004_src_ready;                                                              // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire          sdram_s1_agent_m0_waitrequest;                                                      // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire    [2:0] sdram_s1_agent_m0_burstcount;                                                       // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire   [31:0] sdram_s1_agent_m0_writedata;                                                        // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire   [28:0] sdram_s1_agent_m0_address;                                                          // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire          sdram_s1_agent_m0_write;                                                            // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire          sdram_s1_agent_m0_lock;                                                             // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire          sdram_s1_agent_m0_read;                                                             // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire   [31:0] sdram_s1_agent_m0_readdata;                                                         // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_readdatavalid;                                                    // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_debugaccess;                                                      // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire    [3:0] sdram_s1_agent_m0_byteenable;                                                       // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_rf_source_endofpacket;                                               // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rf_source_valid;                                                     // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire          sdram_s1_agent_rf_source_startofpacket;                                             // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] sdram_s1_agent_rf_source_data;                                                      // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                     // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                            // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                  // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                          // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire  [109:0] sdram_s1_agent_rsp_fifo_out_data;                                                   // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                  // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_src_data;                                                 // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                // sdram_s1_agent_rdata_fifo:out_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_out_data;                                                 // sdram_s1_agent_rdata_fifo:out_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                // sdram_s1_agent:rdata_fifo_sink_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> sdram_s1_agent:cp_valid
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> sdram_s1_agent:cp_data
	wire   [31:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> sdram_s1_agent:cp_channel
	wire          cmd_mux_005_src_ready;                                                              // sdram_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire          keycode_s1_agent_m0_waitrequest;                                                    // keycode_s1_translator:uav_waitrequest -> keycode_s1_agent:m0_waitrequest
	wire    [2:0] keycode_s1_agent_m0_burstcount;                                                     // keycode_s1_agent:m0_burstcount -> keycode_s1_translator:uav_burstcount
	wire   [31:0] keycode_s1_agent_m0_writedata;                                                      // keycode_s1_agent:m0_writedata -> keycode_s1_translator:uav_writedata
	wire   [28:0] keycode_s1_agent_m0_address;                                                        // keycode_s1_agent:m0_address -> keycode_s1_translator:uav_address
	wire          keycode_s1_agent_m0_write;                                                          // keycode_s1_agent:m0_write -> keycode_s1_translator:uav_write
	wire          keycode_s1_agent_m0_lock;                                                           // keycode_s1_agent:m0_lock -> keycode_s1_translator:uav_lock
	wire          keycode_s1_agent_m0_read;                                                           // keycode_s1_agent:m0_read -> keycode_s1_translator:uav_read
	wire   [31:0] keycode_s1_agent_m0_readdata;                                                       // keycode_s1_translator:uav_readdata -> keycode_s1_agent:m0_readdata
	wire          keycode_s1_agent_m0_readdatavalid;                                                  // keycode_s1_translator:uav_readdatavalid -> keycode_s1_agent:m0_readdatavalid
	wire          keycode_s1_agent_m0_debugaccess;                                                    // keycode_s1_agent:m0_debugaccess -> keycode_s1_translator:uav_debugaccess
	wire    [3:0] keycode_s1_agent_m0_byteenable;                                                     // keycode_s1_agent:m0_byteenable -> keycode_s1_translator:uav_byteenable
	wire          keycode_s1_agent_rf_source_endofpacket;                                             // keycode_s1_agent:rf_source_endofpacket -> keycode_s1_agent_rsp_fifo:in_endofpacket
	wire          keycode_s1_agent_rf_source_valid;                                                   // keycode_s1_agent:rf_source_valid -> keycode_s1_agent_rsp_fifo:in_valid
	wire          keycode_s1_agent_rf_source_startofpacket;                                           // keycode_s1_agent:rf_source_startofpacket -> keycode_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] keycode_s1_agent_rf_source_data;                                                    // keycode_s1_agent:rf_source_data -> keycode_s1_agent_rsp_fifo:in_data
	wire          keycode_s1_agent_rf_source_ready;                                                   // keycode_s1_agent_rsp_fifo:in_ready -> keycode_s1_agent:rf_source_ready
	wire          keycode_s1_agent_rsp_fifo_out_endofpacket;                                          // keycode_s1_agent_rsp_fifo:out_endofpacket -> keycode_s1_agent:rf_sink_endofpacket
	wire          keycode_s1_agent_rsp_fifo_out_valid;                                                // keycode_s1_agent_rsp_fifo:out_valid -> keycode_s1_agent:rf_sink_valid
	wire          keycode_s1_agent_rsp_fifo_out_startofpacket;                                        // keycode_s1_agent_rsp_fifo:out_startofpacket -> keycode_s1_agent:rf_sink_startofpacket
	wire  [109:0] keycode_s1_agent_rsp_fifo_out_data;                                                 // keycode_s1_agent_rsp_fifo:out_data -> keycode_s1_agent:rf_sink_data
	wire          keycode_s1_agent_rsp_fifo_out_ready;                                                // keycode_s1_agent:rf_sink_ready -> keycode_s1_agent_rsp_fifo:out_ready
	wire          keycode_s1_agent_rdata_fifo_src_valid;                                              // keycode_s1_agent:rdata_fifo_src_valid -> keycode_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] keycode_s1_agent_rdata_fifo_src_data;                                               // keycode_s1_agent:rdata_fifo_src_data -> keycode_s1_agent:rdata_fifo_sink_data
	wire          keycode_s1_agent_rdata_fifo_src_ready;                                              // keycode_s1_agent:rdata_fifo_sink_ready -> keycode_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> keycode_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> keycode_s1_agent:cp_valid
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> keycode_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> keycode_s1_agent:cp_data
	wire   [31:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> keycode_s1_agent:cp_channel
	wire          cmd_mux_006_src_ready;                                                              // keycode_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire          otg_hpi_cs_s1_agent_m0_waitrequest;                                                 // otg_hpi_cs_s1_translator:uav_waitrequest -> otg_hpi_cs_s1_agent:m0_waitrequest
	wire    [2:0] otg_hpi_cs_s1_agent_m0_burstcount;                                                  // otg_hpi_cs_s1_agent:m0_burstcount -> otg_hpi_cs_s1_translator:uav_burstcount
	wire   [31:0] otg_hpi_cs_s1_agent_m0_writedata;                                                   // otg_hpi_cs_s1_agent:m0_writedata -> otg_hpi_cs_s1_translator:uav_writedata
	wire   [28:0] otg_hpi_cs_s1_agent_m0_address;                                                     // otg_hpi_cs_s1_agent:m0_address -> otg_hpi_cs_s1_translator:uav_address
	wire          otg_hpi_cs_s1_agent_m0_write;                                                       // otg_hpi_cs_s1_agent:m0_write -> otg_hpi_cs_s1_translator:uav_write
	wire          otg_hpi_cs_s1_agent_m0_lock;                                                        // otg_hpi_cs_s1_agent:m0_lock -> otg_hpi_cs_s1_translator:uav_lock
	wire          otg_hpi_cs_s1_agent_m0_read;                                                        // otg_hpi_cs_s1_agent:m0_read -> otg_hpi_cs_s1_translator:uav_read
	wire   [31:0] otg_hpi_cs_s1_agent_m0_readdata;                                                    // otg_hpi_cs_s1_translator:uav_readdata -> otg_hpi_cs_s1_agent:m0_readdata
	wire          otg_hpi_cs_s1_agent_m0_readdatavalid;                                               // otg_hpi_cs_s1_translator:uav_readdatavalid -> otg_hpi_cs_s1_agent:m0_readdatavalid
	wire          otg_hpi_cs_s1_agent_m0_debugaccess;                                                 // otg_hpi_cs_s1_agent:m0_debugaccess -> otg_hpi_cs_s1_translator:uav_debugaccess
	wire    [3:0] otg_hpi_cs_s1_agent_m0_byteenable;                                                  // otg_hpi_cs_s1_agent:m0_byteenable -> otg_hpi_cs_s1_translator:uav_byteenable
	wire          otg_hpi_cs_s1_agent_rf_source_endofpacket;                                          // otg_hpi_cs_s1_agent:rf_source_endofpacket -> otg_hpi_cs_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_cs_s1_agent_rf_source_valid;                                                // otg_hpi_cs_s1_agent:rf_source_valid -> otg_hpi_cs_s1_agent_rsp_fifo:in_valid
	wire          otg_hpi_cs_s1_agent_rf_source_startofpacket;                                        // otg_hpi_cs_s1_agent:rf_source_startofpacket -> otg_hpi_cs_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] otg_hpi_cs_s1_agent_rf_source_data;                                                 // otg_hpi_cs_s1_agent:rf_source_data -> otg_hpi_cs_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_cs_s1_agent_rf_source_ready;                                                // otg_hpi_cs_s1_agent_rsp_fifo:in_ready -> otg_hpi_cs_s1_agent:rf_source_ready
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_endofpacket;                                       // otg_hpi_cs_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_cs_s1_agent:rf_sink_endofpacket
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_valid;                                             // otg_hpi_cs_s1_agent_rsp_fifo:out_valid -> otg_hpi_cs_s1_agent:rf_sink_valid
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_startofpacket;                                     // otg_hpi_cs_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_cs_s1_agent:rf_sink_startofpacket
	wire  [109:0] otg_hpi_cs_s1_agent_rsp_fifo_out_data;                                              // otg_hpi_cs_s1_agent_rsp_fifo:out_data -> otg_hpi_cs_s1_agent:rf_sink_data
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_ready;                                             // otg_hpi_cs_s1_agent:rf_sink_ready -> otg_hpi_cs_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_cs_s1_agent_rdata_fifo_src_valid;                                           // otg_hpi_cs_s1_agent:rdata_fifo_src_valid -> otg_hpi_cs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] otg_hpi_cs_s1_agent_rdata_fifo_src_data;                                            // otg_hpi_cs_s1_agent:rdata_fifo_src_data -> otg_hpi_cs_s1_agent:rdata_fifo_sink_data
	wire          otg_hpi_cs_s1_agent_rdata_fifo_src_ready;                                           // otg_hpi_cs_s1_agent:rdata_fifo_sink_ready -> otg_hpi_cs_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> otg_hpi_cs_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> otg_hpi_cs_s1_agent:cp_valid
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> otg_hpi_cs_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> otg_hpi_cs_s1_agent:cp_data
	wire   [31:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> otg_hpi_cs_s1_agent:cp_channel
	wire          cmd_mux_007_src_ready;                                                              // otg_hpi_cs_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire          otg_hpi_address_s1_agent_m0_waitrequest;                                            // otg_hpi_address_s1_translator:uav_waitrequest -> otg_hpi_address_s1_agent:m0_waitrequest
	wire    [2:0] otg_hpi_address_s1_agent_m0_burstcount;                                             // otg_hpi_address_s1_agent:m0_burstcount -> otg_hpi_address_s1_translator:uav_burstcount
	wire   [31:0] otg_hpi_address_s1_agent_m0_writedata;                                              // otg_hpi_address_s1_agent:m0_writedata -> otg_hpi_address_s1_translator:uav_writedata
	wire   [28:0] otg_hpi_address_s1_agent_m0_address;                                                // otg_hpi_address_s1_agent:m0_address -> otg_hpi_address_s1_translator:uav_address
	wire          otg_hpi_address_s1_agent_m0_write;                                                  // otg_hpi_address_s1_agent:m0_write -> otg_hpi_address_s1_translator:uav_write
	wire          otg_hpi_address_s1_agent_m0_lock;                                                   // otg_hpi_address_s1_agent:m0_lock -> otg_hpi_address_s1_translator:uav_lock
	wire          otg_hpi_address_s1_agent_m0_read;                                                   // otg_hpi_address_s1_agent:m0_read -> otg_hpi_address_s1_translator:uav_read
	wire   [31:0] otg_hpi_address_s1_agent_m0_readdata;                                               // otg_hpi_address_s1_translator:uav_readdata -> otg_hpi_address_s1_agent:m0_readdata
	wire          otg_hpi_address_s1_agent_m0_readdatavalid;                                          // otg_hpi_address_s1_translator:uav_readdatavalid -> otg_hpi_address_s1_agent:m0_readdatavalid
	wire          otg_hpi_address_s1_agent_m0_debugaccess;                                            // otg_hpi_address_s1_agent:m0_debugaccess -> otg_hpi_address_s1_translator:uav_debugaccess
	wire    [3:0] otg_hpi_address_s1_agent_m0_byteenable;                                             // otg_hpi_address_s1_agent:m0_byteenable -> otg_hpi_address_s1_translator:uav_byteenable
	wire          otg_hpi_address_s1_agent_rf_source_endofpacket;                                     // otg_hpi_address_s1_agent:rf_source_endofpacket -> otg_hpi_address_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_address_s1_agent_rf_source_valid;                                           // otg_hpi_address_s1_agent:rf_source_valid -> otg_hpi_address_s1_agent_rsp_fifo:in_valid
	wire          otg_hpi_address_s1_agent_rf_source_startofpacket;                                   // otg_hpi_address_s1_agent:rf_source_startofpacket -> otg_hpi_address_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] otg_hpi_address_s1_agent_rf_source_data;                                            // otg_hpi_address_s1_agent:rf_source_data -> otg_hpi_address_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_address_s1_agent_rf_source_ready;                                           // otg_hpi_address_s1_agent_rsp_fifo:in_ready -> otg_hpi_address_s1_agent:rf_source_ready
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_endofpacket;                                  // otg_hpi_address_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_address_s1_agent:rf_sink_endofpacket
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_valid;                                        // otg_hpi_address_s1_agent_rsp_fifo:out_valid -> otg_hpi_address_s1_agent:rf_sink_valid
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_startofpacket;                                // otg_hpi_address_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_address_s1_agent:rf_sink_startofpacket
	wire  [109:0] otg_hpi_address_s1_agent_rsp_fifo_out_data;                                         // otg_hpi_address_s1_agent_rsp_fifo:out_data -> otg_hpi_address_s1_agent:rf_sink_data
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_ready;                                        // otg_hpi_address_s1_agent:rf_sink_ready -> otg_hpi_address_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_address_s1_agent_rdata_fifo_src_valid;                                      // otg_hpi_address_s1_agent:rdata_fifo_src_valid -> otg_hpi_address_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] otg_hpi_address_s1_agent_rdata_fifo_src_data;                                       // otg_hpi_address_s1_agent:rdata_fifo_src_data -> otg_hpi_address_s1_agent:rdata_fifo_sink_data
	wire          otg_hpi_address_s1_agent_rdata_fifo_src_ready;                                      // otg_hpi_address_s1_agent:rdata_fifo_sink_ready -> otg_hpi_address_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> otg_hpi_address_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> otg_hpi_address_s1_agent:cp_valid
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> otg_hpi_address_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> otg_hpi_address_s1_agent:cp_data
	wire   [31:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> otg_hpi_address_s1_agent:cp_channel
	wire          cmd_mux_008_src_ready;                                                              // otg_hpi_address_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire          otg_hpi_data_s1_agent_m0_waitrequest;                                               // otg_hpi_data_s1_translator:uav_waitrequest -> otg_hpi_data_s1_agent:m0_waitrequest
	wire    [2:0] otg_hpi_data_s1_agent_m0_burstcount;                                                // otg_hpi_data_s1_agent:m0_burstcount -> otg_hpi_data_s1_translator:uav_burstcount
	wire   [31:0] otg_hpi_data_s1_agent_m0_writedata;                                                 // otg_hpi_data_s1_agent:m0_writedata -> otg_hpi_data_s1_translator:uav_writedata
	wire   [28:0] otg_hpi_data_s1_agent_m0_address;                                                   // otg_hpi_data_s1_agent:m0_address -> otg_hpi_data_s1_translator:uav_address
	wire          otg_hpi_data_s1_agent_m0_write;                                                     // otg_hpi_data_s1_agent:m0_write -> otg_hpi_data_s1_translator:uav_write
	wire          otg_hpi_data_s1_agent_m0_lock;                                                      // otg_hpi_data_s1_agent:m0_lock -> otg_hpi_data_s1_translator:uav_lock
	wire          otg_hpi_data_s1_agent_m0_read;                                                      // otg_hpi_data_s1_agent:m0_read -> otg_hpi_data_s1_translator:uav_read
	wire   [31:0] otg_hpi_data_s1_agent_m0_readdata;                                                  // otg_hpi_data_s1_translator:uav_readdata -> otg_hpi_data_s1_agent:m0_readdata
	wire          otg_hpi_data_s1_agent_m0_readdatavalid;                                             // otg_hpi_data_s1_translator:uav_readdatavalid -> otg_hpi_data_s1_agent:m0_readdatavalid
	wire          otg_hpi_data_s1_agent_m0_debugaccess;                                               // otg_hpi_data_s1_agent:m0_debugaccess -> otg_hpi_data_s1_translator:uav_debugaccess
	wire    [3:0] otg_hpi_data_s1_agent_m0_byteenable;                                                // otg_hpi_data_s1_agent:m0_byteenable -> otg_hpi_data_s1_translator:uav_byteenable
	wire          otg_hpi_data_s1_agent_rf_source_endofpacket;                                        // otg_hpi_data_s1_agent:rf_source_endofpacket -> otg_hpi_data_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_data_s1_agent_rf_source_valid;                                              // otg_hpi_data_s1_agent:rf_source_valid -> otg_hpi_data_s1_agent_rsp_fifo:in_valid
	wire          otg_hpi_data_s1_agent_rf_source_startofpacket;                                      // otg_hpi_data_s1_agent:rf_source_startofpacket -> otg_hpi_data_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] otg_hpi_data_s1_agent_rf_source_data;                                               // otg_hpi_data_s1_agent:rf_source_data -> otg_hpi_data_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_data_s1_agent_rf_source_ready;                                              // otg_hpi_data_s1_agent_rsp_fifo:in_ready -> otg_hpi_data_s1_agent:rf_source_ready
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_endofpacket;                                     // otg_hpi_data_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_data_s1_agent:rf_sink_endofpacket
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_valid;                                           // otg_hpi_data_s1_agent_rsp_fifo:out_valid -> otg_hpi_data_s1_agent:rf_sink_valid
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_startofpacket;                                   // otg_hpi_data_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_data_s1_agent:rf_sink_startofpacket
	wire  [109:0] otg_hpi_data_s1_agent_rsp_fifo_out_data;                                            // otg_hpi_data_s1_agent_rsp_fifo:out_data -> otg_hpi_data_s1_agent:rf_sink_data
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_ready;                                           // otg_hpi_data_s1_agent:rf_sink_ready -> otg_hpi_data_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_data_s1_agent_rdata_fifo_src_valid;                                         // otg_hpi_data_s1_agent:rdata_fifo_src_valid -> otg_hpi_data_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] otg_hpi_data_s1_agent_rdata_fifo_src_data;                                          // otg_hpi_data_s1_agent:rdata_fifo_src_data -> otg_hpi_data_s1_agent:rdata_fifo_sink_data
	wire          otg_hpi_data_s1_agent_rdata_fifo_src_ready;                                         // otg_hpi_data_s1_agent:rdata_fifo_sink_ready -> otg_hpi_data_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> otg_hpi_data_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> otg_hpi_data_s1_agent:cp_valid
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> otg_hpi_data_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> otg_hpi_data_s1_agent:cp_data
	wire   [31:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> otg_hpi_data_s1_agent:cp_channel
	wire          cmd_mux_009_src_ready;                                                              // otg_hpi_data_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire          otg_hpi_r_s1_agent_m0_waitrequest;                                                  // otg_hpi_r_s1_translator:uav_waitrequest -> otg_hpi_r_s1_agent:m0_waitrequest
	wire    [2:0] otg_hpi_r_s1_agent_m0_burstcount;                                                   // otg_hpi_r_s1_agent:m0_burstcount -> otg_hpi_r_s1_translator:uav_burstcount
	wire   [31:0] otg_hpi_r_s1_agent_m0_writedata;                                                    // otg_hpi_r_s1_agent:m0_writedata -> otg_hpi_r_s1_translator:uav_writedata
	wire   [28:0] otg_hpi_r_s1_agent_m0_address;                                                      // otg_hpi_r_s1_agent:m0_address -> otg_hpi_r_s1_translator:uav_address
	wire          otg_hpi_r_s1_agent_m0_write;                                                        // otg_hpi_r_s1_agent:m0_write -> otg_hpi_r_s1_translator:uav_write
	wire          otg_hpi_r_s1_agent_m0_lock;                                                         // otg_hpi_r_s1_agent:m0_lock -> otg_hpi_r_s1_translator:uav_lock
	wire          otg_hpi_r_s1_agent_m0_read;                                                         // otg_hpi_r_s1_agent:m0_read -> otg_hpi_r_s1_translator:uav_read
	wire   [31:0] otg_hpi_r_s1_agent_m0_readdata;                                                     // otg_hpi_r_s1_translator:uav_readdata -> otg_hpi_r_s1_agent:m0_readdata
	wire          otg_hpi_r_s1_agent_m0_readdatavalid;                                                // otg_hpi_r_s1_translator:uav_readdatavalid -> otg_hpi_r_s1_agent:m0_readdatavalid
	wire          otg_hpi_r_s1_agent_m0_debugaccess;                                                  // otg_hpi_r_s1_agent:m0_debugaccess -> otg_hpi_r_s1_translator:uav_debugaccess
	wire    [3:0] otg_hpi_r_s1_agent_m0_byteenable;                                                   // otg_hpi_r_s1_agent:m0_byteenable -> otg_hpi_r_s1_translator:uav_byteenable
	wire          otg_hpi_r_s1_agent_rf_source_endofpacket;                                           // otg_hpi_r_s1_agent:rf_source_endofpacket -> otg_hpi_r_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_r_s1_agent_rf_source_valid;                                                 // otg_hpi_r_s1_agent:rf_source_valid -> otg_hpi_r_s1_agent_rsp_fifo:in_valid
	wire          otg_hpi_r_s1_agent_rf_source_startofpacket;                                         // otg_hpi_r_s1_agent:rf_source_startofpacket -> otg_hpi_r_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] otg_hpi_r_s1_agent_rf_source_data;                                                  // otg_hpi_r_s1_agent:rf_source_data -> otg_hpi_r_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_r_s1_agent_rf_source_ready;                                                 // otg_hpi_r_s1_agent_rsp_fifo:in_ready -> otg_hpi_r_s1_agent:rf_source_ready
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_endofpacket;                                        // otg_hpi_r_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_r_s1_agent:rf_sink_endofpacket
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_valid;                                              // otg_hpi_r_s1_agent_rsp_fifo:out_valid -> otg_hpi_r_s1_agent:rf_sink_valid
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_startofpacket;                                      // otg_hpi_r_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_r_s1_agent:rf_sink_startofpacket
	wire  [109:0] otg_hpi_r_s1_agent_rsp_fifo_out_data;                                               // otg_hpi_r_s1_agent_rsp_fifo:out_data -> otg_hpi_r_s1_agent:rf_sink_data
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_ready;                                              // otg_hpi_r_s1_agent:rf_sink_ready -> otg_hpi_r_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_r_s1_agent_rdata_fifo_src_valid;                                            // otg_hpi_r_s1_agent:rdata_fifo_src_valid -> otg_hpi_r_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] otg_hpi_r_s1_agent_rdata_fifo_src_data;                                             // otg_hpi_r_s1_agent:rdata_fifo_src_data -> otg_hpi_r_s1_agent:rdata_fifo_sink_data
	wire          otg_hpi_r_s1_agent_rdata_fifo_src_ready;                                            // otg_hpi_r_s1_agent:rdata_fifo_sink_ready -> otg_hpi_r_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> otg_hpi_r_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> otg_hpi_r_s1_agent:cp_valid
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> otg_hpi_r_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> otg_hpi_r_s1_agent:cp_data
	wire   [31:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> otg_hpi_r_s1_agent:cp_channel
	wire          cmd_mux_010_src_ready;                                                              // otg_hpi_r_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire          otg_hpi_w_s1_agent_m0_waitrequest;                                                  // otg_hpi_w_s1_translator:uav_waitrequest -> otg_hpi_w_s1_agent:m0_waitrequest
	wire    [2:0] otg_hpi_w_s1_agent_m0_burstcount;                                                   // otg_hpi_w_s1_agent:m0_burstcount -> otg_hpi_w_s1_translator:uav_burstcount
	wire   [31:0] otg_hpi_w_s1_agent_m0_writedata;                                                    // otg_hpi_w_s1_agent:m0_writedata -> otg_hpi_w_s1_translator:uav_writedata
	wire   [28:0] otg_hpi_w_s1_agent_m0_address;                                                      // otg_hpi_w_s1_agent:m0_address -> otg_hpi_w_s1_translator:uav_address
	wire          otg_hpi_w_s1_agent_m0_write;                                                        // otg_hpi_w_s1_agent:m0_write -> otg_hpi_w_s1_translator:uav_write
	wire          otg_hpi_w_s1_agent_m0_lock;                                                         // otg_hpi_w_s1_agent:m0_lock -> otg_hpi_w_s1_translator:uav_lock
	wire          otg_hpi_w_s1_agent_m0_read;                                                         // otg_hpi_w_s1_agent:m0_read -> otg_hpi_w_s1_translator:uav_read
	wire   [31:0] otg_hpi_w_s1_agent_m0_readdata;                                                     // otg_hpi_w_s1_translator:uav_readdata -> otg_hpi_w_s1_agent:m0_readdata
	wire          otg_hpi_w_s1_agent_m0_readdatavalid;                                                // otg_hpi_w_s1_translator:uav_readdatavalid -> otg_hpi_w_s1_agent:m0_readdatavalid
	wire          otg_hpi_w_s1_agent_m0_debugaccess;                                                  // otg_hpi_w_s1_agent:m0_debugaccess -> otg_hpi_w_s1_translator:uav_debugaccess
	wire    [3:0] otg_hpi_w_s1_agent_m0_byteenable;                                                   // otg_hpi_w_s1_agent:m0_byteenable -> otg_hpi_w_s1_translator:uav_byteenable
	wire          otg_hpi_w_s1_agent_rf_source_endofpacket;                                           // otg_hpi_w_s1_agent:rf_source_endofpacket -> otg_hpi_w_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_w_s1_agent_rf_source_valid;                                                 // otg_hpi_w_s1_agent:rf_source_valid -> otg_hpi_w_s1_agent_rsp_fifo:in_valid
	wire          otg_hpi_w_s1_agent_rf_source_startofpacket;                                         // otg_hpi_w_s1_agent:rf_source_startofpacket -> otg_hpi_w_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] otg_hpi_w_s1_agent_rf_source_data;                                                  // otg_hpi_w_s1_agent:rf_source_data -> otg_hpi_w_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_w_s1_agent_rf_source_ready;                                                 // otg_hpi_w_s1_agent_rsp_fifo:in_ready -> otg_hpi_w_s1_agent:rf_source_ready
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_endofpacket;                                        // otg_hpi_w_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_w_s1_agent:rf_sink_endofpacket
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_valid;                                              // otg_hpi_w_s1_agent_rsp_fifo:out_valid -> otg_hpi_w_s1_agent:rf_sink_valid
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_startofpacket;                                      // otg_hpi_w_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_w_s1_agent:rf_sink_startofpacket
	wire  [109:0] otg_hpi_w_s1_agent_rsp_fifo_out_data;                                               // otg_hpi_w_s1_agent_rsp_fifo:out_data -> otg_hpi_w_s1_agent:rf_sink_data
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_ready;                                              // otg_hpi_w_s1_agent:rf_sink_ready -> otg_hpi_w_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_w_s1_agent_rdata_fifo_src_valid;                                            // otg_hpi_w_s1_agent:rdata_fifo_src_valid -> otg_hpi_w_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] otg_hpi_w_s1_agent_rdata_fifo_src_data;                                             // otg_hpi_w_s1_agent:rdata_fifo_src_data -> otg_hpi_w_s1_agent:rdata_fifo_sink_data
	wire          otg_hpi_w_s1_agent_rdata_fifo_src_ready;                                            // otg_hpi_w_s1_agent:rdata_fifo_sink_ready -> otg_hpi_w_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> otg_hpi_w_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> otg_hpi_w_s1_agent:cp_valid
	wire          cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> otg_hpi_w_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> otg_hpi_w_s1_agent:cp_data
	wire   [31:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> otg_hpi_w_s1_agent:cp_channel
	wire          cmd_mux_011_src_ready;                                                              // otg_hpi_w_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire          oneball_s1_agent_m0_waitrequest;                                                    // OneBall_s1_translator:uav_waitrequest -> OneBall_s1_agent:m0_waitrequest
	wire    [2:0] oneball_s1_agent_m0_burstcount;                                                     // OneBall_s1_agent:m0_burstcount -> OneBall_s1_translator:uav_burstcount
	wire   [31:0] oneball_s1_agent_m0_writedata;                                                      // OneBall_s1_agent:m0_writedata -> OneBall_s1_translator:uav_writedata
	wire   [28:0] oneball_s1_agent_m0_address;                                                        // OneBall_s1_agent:m0_address -> OneBall_s1_translator:uav_address
	wire          oneball_s1_agent_m0_write;                                                          // OneBall_s1_agent:m0_write -> OneBall_s1_translator:uav_write
	wire          oneball_s1_agent_m0_lock;                                                           // OneBall_s1_agent:m0_lock -> OneBall_s1_translator:uav_lock
	wire          oneball_s1_agent_m0_read;                                                           // OneBall_s1_agent:m0_read -> OneBall_s1_translator:uav_read
	wire   [31:0] oneball_s1_agent_m0_readdata;                                                       // OneBall_s1_translator:uav_readdata -> OneBall_s1_agent:m0_readdata
	wire          oneball_s1_agent_m0_readdatavalid;                                                  // OneBall_s1_translator:uav_readdatavalid -> OneBall_s1_agent:m0_readdatavalid
	wire          oneball_s1_agent_m0_debugaccess;                                                    // OneBall_s1_agent:m0_debugaccess -> OneBall_s1_translator:uav_debugaccess
	wire    [3:0] oneball_s1_agent_m0_byteenable;                                                     // OneBall_s1_agent:m0_byteenable -> OneBall_s1_translator:uav_byteenable
	wire          oneball_s1_agent_rf_source_endofpacket;                                             // OneBall_s1_agent:rf_source_endofpacket -> OneBall_s1_agent_rsp_fifo:in_endofpacket
	wire          oneball_s1_agent_rf_source_valid;                                                   // OneBall_s1_agent:rf_source_valid -> OneBall_s1_agent_rsp_fifo:in_valid
	wire          oneball_s1_agent_rf_source_startofpacket;                                           // OneBall_s1_agent:rf_source_startofpacket -> OneBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] oneball_s1_agent_rf_source_data;                                                    // OneBall_s1_agent:rf_source_data -> OneBall_s1_agent_rsp_fifo:in_data
	wire          oneball_s1_agent_rf_source_ready;                                                   // OneBall_s1_agent_rsp_fifo:in_ready -> OneBall_s1_agent:rf_source_ready
	wire          oneball_s1_agent_rsp_fifo_out_endofpacket;                                          // OneBall_s1_agent_rsp_fifo:out_endofpacket -> OneBall_s1_agent:rf_sink_endofpacket
	wire          oneball_s1_agent_rsp_fifo_out_valid;                                                // OneBall_s1_agent_rsp_fifo:out_valid -> OneBall_s1_agent:rf_sink_valid
	wire          oneball_s1_agent_rsp_fifo_out_startofpacket;                                        // OneBall_s1_agent_rsp_fifo:out_startofpacket -> OneBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] oneball_s1_agent_rsp_fifo_out_data;                                                 // OneBall_s1_agent_rsp_fifo:out_data -> OneBall_s1_agent:rf_sink_data
	wire          oneball_s1_agent_rsp_fifo_out_ready;                                                // OneBall_s1_agent:rf_sink_ready -> OneBall_s1_agent_rsp_fifo:out_ready
	wire          oneball_s1_agent_rdata_fifo_src_valid;                                              // OneBall_s1_agent:rdata_fifo_src_valid -> OneBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] oneball_s1_agent_rdata_fifo_src_data;                                               // OneBall_s1_agent:rdata_fifo_src_data -> OneBall_s1_agent:rdata_fifo_sink_data
	wire          oneball_s1_agent_rdata_fifo_src_ready;                                              // OneBall_s1_agent:rdata_fifo_sink_ready -> OneBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> OneBall_s1_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> OneBall_s1_agent:cp_valid
	wire          cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> OneBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> OneBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> OneBall_s1_agent:cp_channel
	wire          cmd_mux_012_src_ready;                                                              // OneBall_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire          twoball_s1_agent_m0_waitrequest;                                                    // TwoBall_s1_translator:uav_waitrequest -> TwoBall_s1_agent:m0_waitrequest
	wire    [2:0] twoball_s1_agent_m0_burstcount;                                                     // TwoBall_s1_agent:m0_burstcount -> TwoBall_s1_translator:uav_burstcount
	wire   [31:0] twoball_s1_agent_m0_writedata;                                                      // TwoBall_s1_agent:m0_writedata -> TwoBall_s1_translator:uav_writedata
	wire   [28:0] twoball_s1_agent_m0_address;                                                        // TwoBall_s1_agent:m0_address -> TwoBall_s1_translator:uav_address
	wire          twoball_s1_agent_m0_write;                                                          // TwoBall_s1_agent:m0_write -> TwoBall_s1_translator:uav_write
	wire          twoball_s1_agent_m0_lock;                                                           // TwoBall_s1_agent:m0_lock -> TwoBall_s1_translator:uav_lock
	wire          twoball_s1_agent_m0_read;                                                           // TwoBall_s1_agent:m0_read -> TwoBall_s1_translator:uav_read
	wire   [31:0] twoball_s1_agent_m0_readdata;                                                       // TwoBall_s1_translator:uav_readdata -> TwoBall_s1_agent:m0_readdata
	wire          twoball_s1_agent_m0_readdatavalid;                                                  // TwoBall_s1_translator:uav_readdatavalid -> TwoBall_s1_agent:m0_readdatavalid
	wire          twoball_s1_agent_m0_debugaccess;                                                    // TwoBall_s1_agent:m0_debugaccess -> TwoBall_s1_translator:uav_debugaccess
	wire    [3:0] twoball_s1_agent_m0_byteenable;                                                     // TwoBall_s1_agent:m0_byteenable -> TwoBall_s1_translator:uav_byteenable
	wire          twoball_s1_agent_rf_source_endofpacket;                                             // TwoBall_s1_agent:rf_source_endofpacket -> TwoBall_s1_agent_rsp_fifo:in_endofpacket
	wire          twoball_s1_agent_rf_source_valid;                                                   // TwoBall_s1_agent:rf_source_valid -> TwoBall_s1_agent_rsp_fifo:in_valid
	wire          twoball_s1_agent_rf_source_startofpacket;                                           // TwoBall_s1_agent:rf_source_startofpacket -> TwoBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] twoball_s1_agent_rf_source_data;                                                    // TwoBall_s1_agent:rf_source_data -> TwoBall_s1_agent_rsp_fifo:in_data
	wire          twoball_s1_agent_rf_source_ready;                                                   // TwoBall_s1_agent_rsp_fifo:in_ready -> TwoBall_s1_agent:rf_source_ready
	wire          twoball_s1_agent_rsp_fifo_out_endofpacket;                                          // TwoBall_s1_agent_rsp_fifo:out_endofpacket -> TwoBall_s1_agent:rf_sink_endofpacket
	wire          twoball_s1_agent_rsp_fifo_out_valid;                                                // TwoBall_s1_agent_rsp_fifo:out_valid -> TwoBall_s1_agent:rf_sink_valid
	wire          twoball_s1_agent_rsp_fifo_out_startofpacket;                                        // TwoBall_s1_agent_rsp_fifo:out_startofpacket -> TwoBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] twoball_s1_agent_rsp_fifo_out_data;                                                 // TwoBall_s1_agent_rsp_fifo:out_data -> TwoBall_s1_agent:rf_sink_data
	wire          twoball_s1_agent_rsp_fifo_out_ready;                                                // TwoBall_s1_agent:rf_sink_ready -> TwoBall_s1_agent_rsp_fifo:out_ready
	wire          twoball_s1_agent_rdata_fifo_src_valid;                                              // TwoBall_s1_agent:rdata_fifo_src_valid -> TwoBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] twoball_s1_agent_rdata_fifo_src_data;                                               // TwoBall_s1_agent:rdata_fifo_src_data -> TwoBall_s1_agent:rdata_fifo_sink_data
	wire          twoball_s1_agent_rdata_fifo_src_ready;                                              // TwoBall_s1_agent:rdata_fifo_sink_ready -> TwoBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> TwoBall_s1_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> TwoBall_s1_agent:cp_valid
	wire          cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> TwoBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> TwoBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> TwoBall_s1_agent:cp_channel
	wire          cmd_mux_013_src_ready;                                                              // TwoBall_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire          threeball_s1_agent_m0_waitrequest;                                                  // ThreeBall_s1_translator:uav_waitrequest -> ThreeBall_s1_agent:m0_waitrequest
	wire    [2:0] threeball_s1_agent_m0_burstcount;                                                   // ThreeBall_s1_agent:m0_burstcount -> ThreeBall_s1_translator:uav_burstcount
	wire   [31:0] threeball_s1_agent_m0_writedata;                                                    // ThreeBall_s1_agent:m0_writedata -> ThreeBall_s1_translator:uav_writedata
	wire   [28:0] threeball_s1_agent_m0_address;                                                      // ThreeBall_s1_agent:m0_address -> ThreeBall_s1_translator:uav_address
	wire          threeball_s1_agent_m0_write;                                                        // ThreeBall_s1_agent:m0_write -> ThreeBall_s1_translator:uav_write
	wire          threeball_s1_agent_m0_lock;                                                         // ThreeBall_s1_agent:m0_lock -> ThreeBall_s1_translator:uav_lock
	wire          threeball_s1_agent_m0_read;                                                         // ThreeBall_s1_agent:m0_read -> ThreeBall_s1_translator:uav_read
	wire   [31:0] threeball_s1_agent_m0_readdata;                                                     // ThreeBall_s1_translator:uav_readdata -> ThreeBall_s1_agent:m0_readdata
	wire          threeball_s1_agent_m0_readdatavalid;                                                // ThreeBall_s1_translator:uav_readdatavalid -> ThreeBall_s1_agent:m0_readdatavalid
	wire          threeball_s1_agent_m0_debugaccess;                                                  // ThreeBall_s1_agent:m0_debugaccess -> ThreeBall_s1_translator:uav_debugaccess
	wire    [3:0] threeball_s1_agent_m0_byteenable;                                                   // ThreeBall_s1_agent:m0_byteenable -> ThreeBall_s1_translator:uav_byteenable
	wire          threeball_s1_agent_rf_source_endofpacket;                                           // ThreeBall_s1_agent:rf_source_endofpacket -> ThreeBall_s1_agent_rsp_fifo:in_endofpacket
	wire          threeball_s1_agent_rf_source_valid;                                                 // ThreeBall_s1_agent:rf_source_valid -> ThreeBall_s1_agent_rsp_fifo:in_valid
	wire          threeball_s1_agent_rf_source_startofpacket;                                         // ThreeBall_s1_agent:rf_source_startofpacket -> ThreeBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] threeball_s1_agent_rf_source_data;                                                  // ThreeBall_s1_agent:rf_source_data -> ThreeBall_s1_agent_rsp_fifo:in_data
	wire          threeball_s1_agent_rf_source_ready;                                                 // ThreeBall_s1_agent_rsp_fifo:in_ready -> ThreeBall_s1_agent:rf_source_ready
	wire          threeball_s1_agent_rsp_fifo_out_endofpacket;                                        // ThreeBall_s1_agent_rsp_fifo:out_endofpacket -> ThreeBall_s1_agent:rf_sink_endofpacket
	wire          threeball_s1_agent_rsp_fifo_out_valid;                                              // ThreeBall_s1_agent_rsp_fifo:out_valid -> ThreeBall_s1_agent:rf_sink_valid
	wire          threeball_s1_agent_rsp_fifo_out_startofpacket;                                      // ThreeBall_s1_agent_rsp_fifo:out_startofpacket -> ThreeBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] threeball_s1_agent_rsp_fifo_out_data;                                               // ThreeBall_s1_agent_rsp_fifo:out_data -> ThreeBall_s1_agent:rf_sink_data
	wire          threeball_s1_agent_rsp_fifo_out_ready;                                              // ThreeBall_s1_agent:rf_sink_ready -> ThreeBall_s1_agent_rsp_fifo:out_ready
	wire          threeball_s1_agent_rdata_fifo_src_valid;                                            // ThreeBall_s1_agent:rdata_fifo_src_valid -> ThreeBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] threeball_s1_agent_rdata_fifo_src_data;                                             // ThreeBall_s1_agent:rdata_fifo_src_data -> ThreeBall_s1_agent:rdata_fifo_sink_data
	wire          threeball_s1_agent_rdata_fifo_src_ready;                                            // ThreeBall_s1_agent:rdata_fifo_sink_ready -> ThreeBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> ThreeBall_s1_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> ThreeBall_s1_agent:cp_valid
	wire          cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> ThreeBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> ThreeBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> ThreeBall_s1_agent:cp_channel
	wire          cmd_mux_014_src_ready;                                                              // ThreeBall_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire          fourball_s1_agent_m0_waitrequest;                                                   // FourBall_s1_translator:uav_waitrequest -> FourBall_s1_agent:m0_waitrequest
	wire    [2:0] fourball_s1_agent_m0_burstcount;                                                    // FourBall_s1_agent:m0_burstcount -> FourBall_s1_translator:uav_burstcount
	wire   [31:0] fourball_s1_agent_m0_writedata;                                                     // FourBall_s1_agent:m0_writedata -> FourBall_s1_translator:uav_writedata
	wire   [28:0] fourball_s1_agent_m0_address;                                                       // FourBall_s1_agent:m0_address -> FourBall_s1_translator:uav_address
	wire          fourball_s1_agent_m0_write;                                                         // FourBall_s1_agent:m0_write -> FourBall_s1_translator:uav_write
	wire          fourball_s1_agent_m0_lock;                                                          // FourBall_s1_agent:m0_lock -> FourBall_s1_translator:uav_lock
	wire          fourball_s1_agent_m0_read;                                                          // FourBall_s1_agent:m0_read -> FourBall_s1_translator:uav_read
	wire   [31:0] fourball_s1_agent_m0_readdata;                                                      // FourBall_s1_translator:uav_readdata -> FourBall_s1_agent:m0_readdata
	wire          fourball_s1_agent_m0_readdatavalid;                                                 // FourBall_s1_translator:uav_readdatavalid -> FourBall_s1_agent:m0_readdatavalid
	wire          fourball_s1_agent_m0_debugaccess;                                                   // FourBall_s1_agent:m0_debugaccess -> FourBall_s1_translator:uav_debugaccess
	wire    [3:0] fourball_s1_agent_m0_byteenable;                                                    // FourBall_s1_agent:m0_byteenable -> FourBall_s1_translator:uav_byteenable
	wire          fourball_s1_agent_rf_source_endofpacket;                                            // FourBall_s1_agent:rf_source_endofpacket -> FourBall_s1_agent_rsp_fifo:in_endofpacket
	wire          fourball_s1_agent_rf_source_valid;                                                  // FourBall_s1_agent:rf_source_valid -> FourBall_s1_agent_rsp_fifo:in_valid
	wire          fourball_s1_agent_rf_source_startofpacket;                                          // FourBall_s1_agent:rf_source_startofpacket -> FourBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] fourball_s1_agent_rf_source_data;                                                   // FourBall_s1_agent:rf_source_data -> FourBall_s1_agent_rsp_fifo:in_data
	wire          fourball_s1_agent_rf_source_ready;                                                  // FourBall_s1_agent_rsp_fifo:in_ready -> FourBall_s1_agent:rf_source_ready
	wire          fourball_s1_agent_rsp_fifo_out_endofpacket;                                         // FourBall_s1_agent_rsp_fifo:out_endofpacket -> FourBall_s1_agent:rf_sink_endofpacket
	wire          fourball_s1_agent_rsp_fifo_out_valid;                                               // FourBall_s1_agent_rsp_fifo:out_valid -> FourBall_s1_agent:rf_sink_valid
	wire          fourball_s1_agent_rsp_fifo_out_startofpacket;                                       // FourBall_s1_agent_rsp_fifo:out_startofpacket -> FourBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] fourball_s1_agent_rsp_fifo_out_data;                                                // FourBall_s1_agent_rsp_fifo:out_data -> FourBall_s1_agent:rf_sink_data
	wire          fourball_s1_agent_rsp_fifo_out_ready;                                               // FourBall_s1_agent:rf_sink_ready -> FourBall_s1_agent_rsp_fifo:out_ready
	wire          fourball_s1_agent_rdata_fifo_src_valid;                                             // FourBall_s1_agent:rdata_fifo_src_valid -> FourBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] fourball_s1_agent_rdata_fifo_src_data;                                              // FourBall_s1_agent:rdata_fifo_src_data -> FourBall_s1_agent:rdata_fifo_sink_data
	wire          fourball_s1_agent_rdata_fifo_src_ready;                                             // FourBall_s1_agent:rdata_fifo_sink_ready -> FourBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> FourBall_s1_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> FourBall_s1_agent:cp_valid
	wire          cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> FourBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> FourBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> FourBall_s1_agent:cp_channel
	wire          cmd_mux_015_src_ready;                                                              // FourBall_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire          fiveball_s1_agent_m0_waitrequest;                                                   // FiveBall_s1_translator:uav_waitrequest -> FiveBall_s1_agent:m0_waitrequest
	wire    [2:0] fiveball_s1_agent_m0_burstcount;                                                    // FiveBall_s1_agent:m0_burstcount -> FiveBall_s1_translator:uav_burstcount
	wire   [31:0] fiveball_s1_agent_m0_writedata;                                                     // FiveBall_s1_agent:m0_writedata -> FiveBall_s1_translator:uav_writedata
	wire   [28:0] fiveball_s1_agent_m0_address;                                                       // FiveBall_s1_agent:m0_address -> FiveBall_s1_translator:uav_address
	wire          fiveball_s1_agent_m0_write;                                                         // FiveBall_s1_agent:m0_write -> FiveBall_s1_translator:uav_write
	wire          fiveball_s1_agent_m0_lock;                                                          // FiveBall_s1_agent:m0_lock -> FiveBall_s1_translator:uav_lock
	wire          fiveball_s1_agent_m0_read;                                                          // FiveBall_s1_agent:m0_read -> FiveBall_s1_translator:uav_read
	wire   [31:0] fiveball_s1_agent_m0_readdata;                                                      // FiveBall_s1_translator:uav_readdata -> FiveBall_s1_agent:m0_readdata
	wire          fiveball_s1_agent_m0_readdatavalid;                                                 // FiveBall_s1_translator:uav_readdatavalid -> FiveBall_s1_agent:m0_readdatavalid
	wire          fiveball_s1_agent_m0_debugaccess;                                                   // FiveBall_s1_agent:m0_debugaccess -> FiveBall_s1_translator:uav_debugaccess
	wire    [3:0] fiveball_s1_agent_m0_byteenable;                                                    // FiveBall_s1_agent:m0_byteenable -> FiveBall_s1_translator:uav_byteenable
	wire          fiveball_s1_agent_rf_source_endofpacket;                                            // FiveBall_s1_agent:rf_source_endofpacket -> FiveBall_s1_agent_rsp_fifo:in_endofpacket
	wire          fiveball_s1_agent_rf_source_valid;                                                  // FiveBall_s1_agent:rf_source_valid -> FiveBall_s1_agent_rsp_fifo:in_valid
	wire          fiveball_s1_agent_rf_source_startofpacket;                                          // FiveBall_s1_agent:rf_source_startofpacket -> FiveBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] fiveball_s1_agent_rf_source_data;                                                   // FiveBall_s1_agent:rf_source_data -> FiveBall_s1_agent_rsp_fifo:in_data
	wire          fiveball_s1_agent_rf_source_ready;                                                  // FiveBall_s1_agent_rsp_fifo:in_ready -> FiveBall_s1_agent:rf_source_ready
	wire          fiveball_s1_agent_rsp_fifo_out_endofpacket;                                         // FiveBall_s1_agent_rsp_fifo:out_endofpacket -> FiveBall_s1_agent:rf_sink_endofpacket
	wire          fiveball_s1_agent_rsp_fifo_out_valid;                                               // FiveBall_s1_agent_rsp_fifo:out_valid -> FiveBall_s1_agent:rf_sink_valid
	wire          fiveball_s1_agent_rsp_fifo_out_startofpacket;                                       // FiveBall_s1_agent_rsp_fifo:out_startofpacket -> FiveBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] fiveball_s1_agent_rsp_fifo_out_data;                                                // FiveBall_s1_agent_rsp_fifo:out_data -> FiveBall_s1_agent:rf_sink_data
	wire          fiveball_s1_agent_rsp_fifo_out_ready;                                               // FiveBall_s1_agent:rf_sink_ready -> FiveBall_s1_agent_rsp_fifo:out_ready
	wire          fiveball_s1_agent_rdata_fifo_src_valid;                                             // FiveBall_s1_agent:rdata_fifo_src_valid -> FiveBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] fiveball_s1_agent_rdata_fifo_src_data;                                              // FiveBall_s1_agent:rdata_fifo_src_data -> FiveBall_s1_agent:rdata_fifo_sink_data
	wire          fiveball_s1_agent_rdata_fifo_src_ready;                                             // FiveBall_s1_agent:rdata_fifo_sink_ready -> FiveBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_016_src_endofpacket;                                                        // cmd_mux_016:src_endofpacket -> FiveBall_s1_agent:cp_endofpacket
	wire          cmd_mux_016_src_valid;                                                              // cmd_mux_016:src_valid -> FiveBall_s1_agent:cp_valid
	wire          cmd_mux_016_src_startofpacket;                                                      // cmd_mux_016:src_startofpacket -> FiveBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_016_src_data;                                                               // cmd_mux_016:src_data -> FiveBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_016_src_channel;                                                            // cmd_mux_016:src_channel -> FiveBall_s1_agent:cp_channel
	wire          cmd_mux_016_src_ready;                                                              // FiveBall_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire          sixball_s1_agent_m0_waitrequest;                                                    // SixBall_s1_translator:uav_waitrequest -> SixBall_s1_agent:m0_waitrequest
	wire    [2:0] sixball_s1_agent_m0_burstcount;                                                     // SixBall_s1_agent:m0_burstcount -> SixBall_s1_translator:uav_burstcount
	wire   [31:0] sixball_s1_agent_m0_writedata;                                                      // SixBall_s1_agent:m0_writedata -> SixBall_s1_translator:uav_writedata
	wire   [28:0] sixball_s1_agent_m0_address;                                                        // SixBall_s1_agent:m0_address -> SixBall_s1_translator:uav_address
	wire          sixball_s1_agent_m0_write;                                                          // SixBall_s1_agent:m0_write -> SixBall_s1_translator:uav_write
	wire          sixball_s1_agent_m0_lock;                                                           // SixBall_s1_agent:m0_lock -> SixBall_s1_translator:uav_lock
	wire          sixball_s1_agent_m0_read;                                                           // SixBall_s1_agent:m0_read -> SixBall_s1_translator:uav_read
	wire   [31:0] sixball_s1_agent_m0_readdata;                                                       // SixBall_s1_translator:uav_readdata -> SixBall_s1_agent:m0_readdata
	wire          sixball_s1_agent_m0_readdatavalid;                                                  // SixBall_s1_translator:uav_readdatavalid -> SixBall_s1_agent:m0_readdatavalid
	wire          sixball_s1_agent_m0_debugaccess;                                                    // SixBall_s1_agent:m0_debugaccess -> SixBall_s1_translator:uav_debugaccess
	wire    [3:0] sixball_s1_agent_m0_byteenable;                                                     // SixBall_s1_agent:m0_byteenable -> SixBall_s1_translator:uav_byteenable
	wire          sixball_s1_agent_rf_source_endofpacket;                                             // SixBall_s1_agent:rf_source_endofpacket -> SixBall_s1_agent_rsp_fifo:in_endofpacket
	wire          sixball_s1_agent_rf_source_valid;                                                   // SixBall_s1_agent:rf_source_valid -> SixBall_s1_agent_rsp_fifo:in_valid
	wire          sixball_s1_agent_rf_source_startofpacket;                                           // SixBall_s1_agent:rf_source_startofpacket -> SixBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] sixball_s1_agent_rf_source_data;                                                    // SixBall_s1_agent:rf_source_data -> SixBall_s1_agent_rsp_fifo:in_data
	wire          sixball_s1_agent_rf_source_ready;                                                   // SixBall_s1_agent_rsp_fifo:in_ready -> SixBall_s1_agent:rf_source_ready
	wire          sixball_s1_agent_rsp_fifo_out_endofpacket;                                          // SixBall_s1_agent_rsp_fifo:out_endofpacket -> SixBall_s1_agent:rf_sink_endofpacket
	wire          sixball_s1_agent_rsp_fifo_out_valid;                                                // SixBall_s1_agent_rsp_fifo:out_valid -> SixBall_s1_agent:rf_sink_valid
	wire          sixball_s1_agent_rsp_fifo_out_startofpacket;                                        // SixBall_s1_agent_rsp_fifo:out_startofpacket -> SixBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] sixball_s1_agent_rsp_fifo_out_data;                                                 // SixBall_s1_agent_rsp_fifo:out_data -> SixBall_s1_agent:rf_sink_data
	wire          sixball_s1_agent_rsp_fifo_out_ready;                                                // SixBall_s1_agent:rf_sink_ready -> SixBall_s1_agent_rsp_fifo:out_ready
	wire          sixball_s1_agent_rdata_fifo_src_valid;                                              // SixBall_s1_agent:rdata_fifo_src_valid -> SixBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sixball_s1_agent_rdata_fifo_src_data;                                               // SixBall_s1_agent:rdata_fifo_src_data -> SixBall_s1_agent:rdata_fifo_sink_data
	wire          sixball_s1_agent_rdata_fifo_src_ready;                                              // SixBall_s1_agent:rdata_fifo_sink_ready -> SixBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_017_src_endofpacket;                                                        // cmd_mux_017:src_endofpacket -> SixBall_s1_agent:cp_endofpacket
	wire          cmd_mux_017_src_valid;                                                              // cmd_mux_017:src_valid -> SixBall_s1_agent:cp_valid
	wire          cmd_mux_017_src_startofpacket;                                                      // cmd_mux_017:src_startofpacket -> SixBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_017_src_data;                                                               // cmd_mux_017:src_data -> SixBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_017_src_channel;                                                            // cmd_mux_017:src_channel -> SixBall_s1_agent:cp_channel
	wire          cmd_mux_017_src_ready;                                                              // SixBall_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire          sevenball_s1_agent_m0_waitrequest;                                                  // SevenBall_s1_translator:uav_waitrequest -> SevenBall_s1_agent:m0_waitrequest
	wire    [2:0] sevenball_s1_agent_m0_burstcount;                                                   // SevenBall_s1_agent:m0_burstcount -> SevenBall_s1_translator:uav_burstcount
	wire   [31:0] sevenball_s1_agent_m0_writedata;                                                    // SevenBall_s1_agent:m0_writedata -> SevenBall_s1_translator:uav_writedata
	wire   [28:0] sevenball_s1_agent_m0_address;                                                      // SevenBall_s1_agent:m0_address -> SevenBall_s1_translator:uav_address
	wire          sevenball_s1_agent_m0_write;                                                        // SevenBall_s1_agent:m0_write -> SevenBall_s1_translator:uav_write
	wire          sevenball_s1_agent_m0_lock;                                                         // SevenBall_s1_agent:m0_lock -> SevenBall_s1_translator:uav_lock
	wire          sevenball_s1_agent_m0_read;                                                         // SevenBall_s1_agent:m0_read -> SevenBall_s1_translator:uav_read
	wire   [31:0] sevenball_s1_agent_m0_readdata;                                                     // SevenBall_s1_translator:uav_readdata -> SevenBall_s1_agent:m0_readdata
	wire          sevenball_s1_agent_m0_readdatavalid;                                                // SevenBall_s1_translator:uav_readdatavalid -> SevenBall_s1_agent:m0_readdatavalid
	wire          sevenball_s1_agent_m0_debugaccess;                                                  // SevenBall_s1_agent:m0_debugaccess -> SevenBall_s1_translator:uav_debugaccess
	wire    [3:0] sevenball_s1_agent_m0_byteenable;                                                   // SevenBall_s1_agent:m0_byteenable -> SevenBall_s1_translator:uav_byteenable
	wire          sevenball_s1_agent_rf_source_endofpacket;                                           // SevenBall_s1_agent:rf_source_endofpacket -> SevenBall_s1_agent_rsp_fifo:in_endofpacket
	wire          sevenball_s1_agent_rf_source_valid;                                                 // SevenBall_s1_agent:rf_source_valid -> SevenBall_s1_agent_rsp_fifo:in_valid
	wire          sevenball_s1_agent_rf_source_startofpacket;                                         // SevenBall_s1_agent:rf_source_startofpacket -> SevenBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] sevenball_s1_agent_rf_source_data;                                                  // SevenBall_s1_agent:rf_source_data -> SevenBall_s1_agent_rsp_fifo:in_data
	wire          sevenball_s1_agent_rf_source_ready;                                                 // SevenBall_s1_agent_rsp_fifo:in_ready -> SevenBall_s1_agent:rf_source_ready
	wire          sevenball_s1_agent_rsp_fifo_out_endofpacket;                                        // SevenBall_s1_agent_rsp_fifo:out_endofpacket -> SevenBall_s1_agent:rf_sink_endofpacket
	wire          sevenball_s1_agent_rsp_fifo_out_valid;                                              // SevenBall_s1_agent_rsp_fifo:out_valid -> SevenBall_s1_agent:rf_sink_valid
	wire          sevenball_s1_agent_rsp_fifo_out_startofpacket;                                      // SevenBall_s1_agent_rsp_fifo:out_startofpacket -> SevenBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] sevenball_s1_agent_rsp_fifo_out_data;                                               // SevenBall_s1_agent_rsp_fifo:out_data -> SevenBall_s1_agent:rf_sink_data
	wire          sevenball_s1_agent_rsp_fifo_out_ready;                                              // SevenBall_s1_agent:rf_sink_ready -> SevenBall_s1_agent_rsp_fifo:out_ready
	wire          sevenball_s1_agent_rdata_fifo_src_valid;                                            // SevenBall_s1_agent:rdata_fifo_src_valid -> SevenBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sevenball_s1_agent_rdata_fifo_src_data;                                             // SevenBall_s1_agent:rdata_fifo_src_data -> SevenBall_s1_agent:rdata_fifo_sink_data
	wire          sevenball_s1_agent_rdata_fifo_src_ready;                                            // SevenBall_s1_agent:rdata_fifo_sink_ready -> SevenBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_018_src_endofpacket;                                                        // cmd_mux_018:src_endofpacket -> SevenBall_s1_agent:cp_endofpacket
	wire          cmd_mux_018_src_valid;                                                              // cmd_mux_018:src_valid -> SevenBall_s1_agent:cp_valid
	wire          cmd_mux_018_src_startofpacket;                                                      // cmd_mux_018:src_startofpacket -> SevenBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_018_src_data;                                                               // cmd_mux_018:src_data -> SevenBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_018_src_channel;                                                            // cmd_mux_018:src_channel -> SevenBall_s1_agent:cp_channel
	wire          cmd_mux_018_src_ready;                                                              // SevenBall_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire          eightball_s1_agent_m0_waitrequest;                                                  // EightBall_s1_translator:uav_waitrequest -> EightBall_s1_agent:m0_waitrequest
	wire    [2:0] eightball_s1_agent_m0_burstcount;                                                   // EightBall_s1_agent:m0_burstcount -> EightBall_s1_translator:uav_burstcount
	wire   [31:0] eightball_s1_agent_m0_writedata;                                                    // EightBall_s1_agent:m0_writedata -> EightBall_s1_translator:uav_writedata
	wire   [28:0] eightball_s1_agent_m0_address;                                                      // EightBall_s1_agent:m0_address -> EightBall_s1_translator:uav_address
	wire          eightball_s1_agent_m0_write;                                                        // EightBall_s1_agent:m0_write -> EightBall_s1_translator:uav_write
	wire          eightball_s1_agent_m0_lock;                                                         // EightBall_s1_agent:m0_lock -> EightBall_s1_translator:uav_lock
	wire          eightball_s1_agent_m0_read;                                                         // EightBall_s1_agent:m0_read -> EightBall_s1_translator:uav_read
	wire   [31:0] eightball_s1_agent_m0_readdata;                                                     // EightBall_s1_translator:uav_readdata -> EightBall_s1_agent:m0_readdata
	wire          eightball_s1_agent_m0_readdatavalid;                                                // EightBall_s1_translator:uav_readdatavalid -> EightBall_s1_agent:m0_readdatavalid
	wire          eightball_s1_agent_m0_debugaccess;                                                  // EightBall_s1_agent:m0_debugaccess -> EightBall_s1_translator:uav_debugaccess
	wire    [3:0] eightball_s1_agent_m0_byteenable;                                                   // EightBall_s1_agent:m0_byteenable -> EightBall_s1_translator:uav_byteenable
	wire          eightball_s1_agent_rf_source_endofpacket;                                           // EightBall_s1_agent:rf_source_endofpacket -> EightBall_s1_agent_rsp_fifo:in_endofpacket
	wire          eightball_s1_agent_rf_source_valid;                                                 // EightBall_s1_agent:rf_source_valid -> EightBall_s1_agent_rsp_fifo:in_valid
	wire          eightball_s1_agent_rf_source_startofpacket;                                         // EightBall_s1_agent:rf_source_startofpacket -> EightBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] eightball_s1_agent_rf_source_data;                                                  // EightBall_s1_agent:rf_source_data -> EightBall_s1_agent_rsp_fifo:in_data
	wire          eightball_s1_agent_rf_source_ready;                                                 // EightBall_s1_agent_rsp_fifo:in_ready -> EightBall_s1_agent:rf_source_ready
	wire          eightball_s1_agent_rsp_fifo_out_endofpacket;                                        // EightBall_s1_agent_rsp_fifo:out_endofpacket -> EightBall_s1_agent:rf_sink_endofpacket
	wire          eightball_s1_agent_rsp_fifo_out_valid;                                              // EightBall_s1_agent_rsp_fifo:out_valid -> EightBall_s1_agent:rf_sink_valid
	wire          eightball_s1_agent_rsp_fifo_out_startofpacket;                                      // EightBall_s1_agent_rsp_fifo:out_startofpacket -> EightBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] eightball_s1_agent_rsp_fifo_out_data;                                               // EightBall_s1_agent_rsp_fifo:out_data -> EightBall_s1_agent:rf_sink_data
	wire          eightball_s1_agent_rsp_fifo_out_ready;                                              // EightBall_s1_agent:rf_sink_ready -> EightBall_s1_agent_rsp_fifo:out_ready
	wire          eightball_s1_agent_rdata_fifo_src_valid;                                            // EightBall_s1_agent:rdata_fifo_src_valid -> EightBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] eightball_s1_agent_rdata_fifo_src_data;                                             // EightBall_s1_agent:rdata_fifo_src_data -> EightBall_s1_agent:rdata_fifo_sink_data
	wire          eightball_s1_agent_rdata_fifo_src_ready;                                            // EightBall_s1_agent:rdata_fifo_sink_ready -> EightBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_019_src_endofpacket;                                                        // cmd_mux_019:src_endofpacket -> EightBall_s1_agent:cp_endofpacket
	wire          cmd_mux_019_src_valid;                                                              // cmd_mux_019:src_valid -> EightBall_s1_agent:cp_valid
	wire          cmd_mux_019_src_startofpacket;                                                      // cmd_mux_019:src_startofpacket -> EightBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_019_src_data;                                                               // cmd_mux_019:src_data -> EightBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_019_src_channel;                                                            // cmd_mux_019:src_channel -> EightBall_s1_agent:cp_channel
	wire          cmd_mux_019_src_ready;                                                              // EightBall_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire          nineball_s1_agent_m0_waitrequest;                                                   // NineBall_s1_translator:uav_waitrequest -> NineBall_s1_agent:m0_waitrequest
	wire    [2:0] nineball_s1_agent_m0_burstcount;                                                    // NineBall_s1_agent:m0_burstcount -> NineBall_s1_translator:uav_burstcount
	wire   [31:0] nineball_s1_agent_m0_writedata;                                                     // NineBall_s1_agent:m0_writedata -> NineBall_s1_translator:uav_writedata
	wire   [28:0] nineball_s1_agent_m0_address;                                                       // NineBall_s1_agent:m0_address -> NineBall_s1_translator:uav_address
	wire          nineball_s1_agent_m0_write;                                                         // NineBall_s1_agent:m0_write -> NineBall_s1_translator:uav_write
	wire          nineball_s1_agent_m0_lock;                                                          // NineBall_s1_agent:m0_lock -> NineBall_s1_translator:uav_lock
	wire          nineball_s1_agent_m0_read;                                                          // NineBall_s1_agent:m0_read -> NineBall_s1_translator:uav_read
	wire   [31:0] nineball_s1_agent_m0_readdata;                                                      // NineBall_s1_translator:uav_readdata -> NineBall_s1_agent:m0_readdata
	wire          nineball_s1_agent_m0_readdatavalid;                                                 // NineBall_s1_translator:uav_readdatavalid -> NineBall_s1_agent:m0_readdatavalid
	wire          nineball_s1_agent_m0_debugaccess;                                                   // NineBall_s1_agent:m0_debugaccess -> NineBall_s1_translator:uav_debugaccess
	wire    [3:0] nineball_s1_agent_m0_byteenable;                                                    // NineBall_s1_agent:m0_byteenable -> NineBall_s1_translator:uav_byteenable
	wire          nineball_s1_agent_rf_source_endofpacket;                                            // NineBall_s1_agent:rf_source_endofpacket -> NineBall_s1_agent_rsp_fifo:in_endofpacket
	wire          nineball_s1_agent_rf_source_valid;                                                  // NineBall_s1_agent:rf_source_valid -> NineBall_s1_agent_rsp_fifo:in_valid
	wire          nineball_s1_agent_rf_source_startofpacket;                                          // NineBall_s1_agent:rf_source_startofpacket -> NineBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] nineball_s1_agent_rf_source_data;                                                   // NineBall_s1_agent:rf_source_data -> NineBall_s1_agent_rsp_fifo:in_data
	wire          nineball_s1_agent_rf_source_ready;                                                  // NineBall_s1_agent_rsp_fifo:in_ready -> NineBall_s1_agent:rf_source_ready
	wire          nineball_s1_agent_rsp_fifo_out_endofpacket;                                         // NineBall_s1_agent_rsp_fifo:out_endofpacket -> NineBall_s1_agent:rf_sink_endofpacket
	wire          nineball_s1_agent_rsp_fifo_out_valid;                                               // NineBall_s1_agent_rsp_fifo:out_valid -> NineBall_s1_agent:rf_sink_valid
	wire          nineball_s1_agent_rsp_fifo_out_startofpacket;                                       // NineBall_s1_agent_rsp_fifo:out_startofpacket -> NineBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] nineball_s1_agent_rsp_fifo_out_data;                                                // NineBall_s1_agent_rsp_fifo:out_data -> NineBall_s1_agent:rf_sink_data
	wire          nineball_s1_agent_rsp_fifo_out_ready;                                               // NineBall_s1_agent:rf_sink_ready -> NineBall_s1_agent_rsp_fifo:out_ready
	wire          nineball_s1_agent_rdata_fifo_src_valid;                                             // NineBall_s1_agent:rdata_fifo_src_valid -> NineBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] nineball_s1_agent_rdata_fifo_src_data;                                              // NineBall_s1_agent:rdata_fifo_src_data -> NineBall_s1_agent:rdata_fifo_sink_data
	wire          nineball_s1_agent_rdata_fifo_src_ready;                                             // NineBall_s1_agent:rdata_fifo_sink_ready -> NineBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_020_src_endofpacket;                                                        // cmd_mux_020:src_endofpacket -> NineBall_s1_agent:cp_endofpacket
	wire          cmd_mux_020_src_valid;                                                              // cmd_mux_020:src_valid -> NineBall_s1_agent:cp_valid
	wire          cmd_mux_020_src_startofpacket;                                                      // cmd_mux_020:src_startofpacket -> NineBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_020_src_data;                                                               // cmd_mux_020:src_data -> NineBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_020_src_channel;                                                            // cmd_mux_020:src_channel -> NineBall_s1_agent:cp_channel
	wire          cmd_mux_020_src_ready;                                                              // NineBall_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire          tenball_s1_agent_m0_waitrequest;                                                    // TenBall_s1_translator:uav_waitrequest -> TenBall_s1_agent:m0_waitrequest
	wire    [2:0] tenball_s1_agent_m0_burstcount;                                                     // TenBall_s1_agent:m0_burstcount -> TenBall_s1_translator:uav_burstcount
	wire   [31:0] tenball_s1_agent_m0_writedata;                                                      // TenBall_s1_agent:m0_writedata -> TenBall_s1_translator:uav_writedata
	wire   [28:0] tenball_s1_agent_m0_address;                                                        // TenBall_s1_agent:m0_address -> TenBall_s1_translator:uav_address
	wire          tenball_s1_agent_m0_write;                                                          // TenBall_s1_agent:m0_write -> TenBall_s1_translator:uav_write
	wire          tenball_s1_agent_m0_lock;                                                           // TenBall_s1_agent:m0_lock -> TenBall_s1_translator:uav_lock
	wire          tenball_s1_agent_m0_read;                                                           // TenBall_s1_agent:m0_read -> TenBall_s1_translator:uav_read
	wire   [31:0] tenball_s1_agent_m0_readdata;                                                       // TenBall_s1_translator:uav_readdata -> TenBall_s1_agent:m0_readdata
	wire          tenball_s1_agent_m0_readdatavalid;                                                  // TenBall_s1_translator:uav_readdatavalid -> TenBall_s1_agent:m0_readdatavalid
	wire          tenball_s1_agent_m0_debugaccess;                                                    // TenBall_s1_agent:m0_debugaccess -> TenBall_s1_translator:uav_debugaccess
	wire    [3:0] tenball_s1_agent_m0_byteenable;                                                     // TenBall_s1_agent:m0_byteenable -> TenBall_s1_translator:uav_byteenable
	wire          tenball_s1_agent_rf_source_endofpacket;                                             // TenBall_s1_agent:rf_source_endofpacket -> TenBall_s1_agent_rsp_fifo:in_endofpacket
	wire          tenball_s1_agent_rf_source_valid;                                                   // TenBall_s1_agent:rf_source_valid -> TenBall_s1_agent_rsp_fifo:in_valid
	wire          tenball_s1_agent_rf_source_startofpacket;                                           // TenBall_s1_agent:rf_source_startofpacket -> TenBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] tenball_s1_agent_rf_source_data;                                                    // TenBall_s1_agent:rf_source_data -> TenBall_s1_agent_rsp_fifo:in_data
	wire          tenball_s1_agent_rf_source_ready;                                                   // TenBall_s1_agent_rsp_fifo:in_ready -> TenBall_s1_agent:rf_source_ready
	wire          tenball_s1_agent_rsp_fifo_out_endofpacket;                                          // TenBall_s1_agent_rsp_fifo:out_endofpacket -> TenBall_s1_agent:rf_sink_endofpacket
	wire          tenball_s1_agent_rsp_fifo_out_valid;                                                // TenBall_s1_agent_rsp_fifo:out_valid -> TenBall_s1_agent:rf_sink_valid
	wire          tenball_s1_agent_rsp_fifo_out_startofpacket;                                        // TenBall_s1_agent_rsp_fifo:out_startofpacket -> TenBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] tenball_s1_agent_rsp_fifo_out_data;                                                 // TenBall_s1_agent_rsp_fifo:out_data -> TenBall_s1_agent:rf_sink_data
	wire          tenball_s1_agent_rsp_fifo_out_ready;                                                // TenBall_s1_agent:rf_sink_ready -> TenBall_s1_agent_rsp_fifo:out_ready
	wire          tenball_s1_agent_rdata_fifo_src_valid;                                              // TenBall_s1_agent:rdata_fifo_src_valid -> TenBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tenball_s1_agent_rdata_fifo_src_data;                                               // TenBall_s1_agent:rdata_fifo_src_data -> TenBall_s1_agent:rdata_fifo_sink_data
	wire          tenball_s1_agent_rdata_fifo_src_ready;                                              // TenBall_s1_agent:rdata_fifo_sink_ready -> TenBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_021_src_endofpacket;                                                        // cmd_mux_021:src_endofpacket -> TenBall_s1_agent:cp_endofpacket
	wire          cmd_mux_021_src_valid;                                                              // cmd_mux_021:src_valid -> TenBall_s1_agent:cp_valid
	wire          cmd_mux_021_src_startofpacket;                                                      // cmd_mux_021:src_startofpacket -> TenBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_021_src_data;                                                               // cmd_mux_021:src_data -> TenBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_021_src_channel;                                                            // cmd_mux_021:src_channel -> TenBall_s1_agent:cp_channel
	wire          cmd_mux_021_src_ready;                                                              // TenBall_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire          elevenball_s1_agent_m0_waitrequest;                                                 // ElevenBall_s1_translator:uav_waitrequest -> ElevenBall_s1_agent:m0_waitrequest
	wire    [2:0] elevenball_s1_agent_m0_burstcount;                                                  // ElevenBall_s1_agent:m0_burstcount -> ElevenBall_s1_translator:uav_burstcount
	wire   [31:0] elevenball_s1_agent_m0_writedata;                                                   // ElevenBall_s1_agent:m0_writedata -> ElevenBall_s1_translator:uav_writedata
	wire   [28:0] elevenball_s1_agent_m0_address;                                                     // ElevenBall_s1_agent:m0_address -> ElevenBall_s1_translator:uav_address
	wire          elevenball_s1_agent_m0_write;                                                       // ElevenBall_s1_agent:m0_write -> ElevenBall_s1_translator:uav_write
	wire          elevenball_s1_agent_m0_lock;                                                        // ElevenBall_s1_agent:m0_lock -> ElevenBall_s1_translator:uav_lock
	wire          elevenball_s1_agent_m0_read;                                                        // ElevenBall_s1_agent:m0_read -> ElevenBall_s1_translator:uav_read
	wire   [31:0] elevenball_s1_agent_m0_readdata;                                                    // ElevenBall_s1_translator:uav_readdata -> ElevenBall_s1_agent:m0_readdata
	wire          elevenball_s1_agent_m0_readdatavalid;                                               // ElevenBall_s1_translator:uav_readdatavalid -> ElevenBall_s1_agent:m0_readdatavalid
	wire          elevenball_s1_agent_m0_debugaccess;                                                 // ElevenBall_s1_agent:m0_debugaccess -> ElevenBall_s1_translator:uav_debugaccess
	wire    [3:0] elevenball_s1_agent_m0_byteenable;                                                  // ElevenBall_s1_agent:m0_byteenable -> ElevenBall_s1_translator:uav_byteenable
	wire          elevenball_s1_agent_rf_source_endofpacket;                                          // ElevenBall_s1_agent:rf_source_endofpacket -> ElevenBall_s1_agent_rsp_fifo:in_endofpacket
	wire          elevenball_s1_agent_rf_source_valid;                                                // ElevenBall_s1_agent:rf_source_valid -> ElevenBall_s1_agent_rsp_fifo:in_valid
	wire          elevenball_s1_agent_rf_source_startofpacket;                                        // ElevenBall_s1_agent:rf_source_startofpacket -> ElevenBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] elevenball_s1_agent_rf_source_data;                                                 // ElevenBall_s1_agent:rf_source_data -> ElevenBall_s1_agent_rsp_fifo:in_data
	wire          elevenball_s1_agent_rf_source_ready;                                                // ElevenBall_s1_agent_rsp_fifo:in_ready -> ElevenBall_s1_agent:rf_source_ready
	wire          elevenball_s1_agent_rsp_fifo_out_endofpacket;                                       // ElevenBall_s1_agent_rsp_fifo:out_endofpacket -> ElevenBall_s1_agent:rf_sink_endofpacket
	wire          elevenball_s1_agent_rsp_fifo_out_valid;                                             // ElevenBall_s1_agent_rsp_fifo:out_valid -> ElevenBall_s1_agent:rf_sink_valid
	wire          elevenball_s1_agent_rsp_fifo_out_startofpacket;                                     // ElevenBall_s1_agent_rsp_fifo:out_startofpacket -> ElevenBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] elevenball_s1_agent_rsp_fifo_out_data;                                              // ElevenBall_s1_agent_rsp_fifo:out_data -> ElevenBall_s1_agent:rf_sink_data
	wire          elevenball_s1_agent_rsp_fifo_out_ready;                                             // ElevenBall_s1_agent:rf_sink_ready -> ElevenBall_s1_agent_rsp_fifo:out_ready
	wire          elevenball_s1_agent_rdata_fifo_src_valid;                                           // ElevenBall_s1_agent:rdata_fifo_src_valid -> ElevenBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] elevenball_s1_agent_rdata_fifo_src_data;                                            // ElevenBall_s1_agent:rdata_fifo_src_data -> ElevenBall_s1_agent:rdata_fifo_sink_data
	wire          elevenball_s1_agent_rdata_fifo_src_ready;                                           // ElevenBall_s1_agent:rdata_fifo_sink_ready -> ElevenBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_022_src_endofpacket;                                                        // cmd_mux_022:src_endofpacket -> ElevenBall_s1_agent:cp_endofpacket
	wire          cmd_mux_022_src_valid;                                                              // cmd_mux_022:src_valid -> ElevenBall_s1_agent:cp_valid
	wire          cmd_mux_022_src_startofpacket;                                                      // cmd_mux_022:src_startofpacket -> ElevenBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_022_src_data;                                                               // cmd_mux_022:src_data -> ElevenBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_022_src_channel;                                                            // cmd_mux_022:src_channel -> ElevenBall_s1_agent:cp_channel
	wire          cmd_mux_022_src_ready;                                                              // ElevenBall_s1_agent:cp_ready -> cmd_mux_022:src_ready
	wire          twelveball_s1_agent_m0_waitrequest;                                                 // TwelveBall_s1_translator:uav_waitrequest -> TwelveBall_s1_agent:m0_waitrequest
	wire    [2:0] twelveball_s1_agent_m0_burstcount;                                                  // TwelveBall_s1_agent:m0_burstcount -> TwelveBall_s1_translator:uav_burstcount
	wire   [31:0] twelveball_s1_agent_m0_writedata;                                                   // TwelveBall_s1_agent:m0_writedata -> TwelveBall_s1_translator:uav_writedata
	wire   [28:0] twelveball_s1_agent_m0_address;                                                     // TwelveBall_s1_agent:m0_address -> TwelveBall_s1_translator:uav_address
	wire          twelveball_s1_agent_m0_write;                                                       // TwelveBall_s1_agent:m0_write -> TwelveBall_s1_translator:uav_write
	wire          twelveball_s1_agent_m0_lock;                                                        // TwelveBall_s1_agent:m0_lock -> TwelveBall_s1_translator:uav_lock
	wire          twelveball_s1_agent_m0_read;                                                        // TwelveBall_s1_agent:m0_read -> TwelveBall_s1_translator:uav_read
	wire   [31:0] twelveball_s1_agent_m0_readdata;                                                    // TwelveBall_s1_translator:uav_readdata -> TwelveBall_s1_agent:m0_readdata
	wire          twelveball_s1_agent_m0_readdatavalid;                                               // TwelveBall_s1_translator:uav_readdatavalid -> TwelveBall_s1_agent:m0_readdatavalid
	wire          twelveball_s1_agent_m0_debugaccess;                                                 // TwelveBall_s1_agent:m0_debugaccess -> TwelveBall_s1_translator:uav_debugaccess
	wire    [3:0] twelveball_s1_agent_m0_byteenable;                                                  // TwelveBall_s1_agent:m0_byteenable -> TwelveBall_s1_translator:uav_byteenable
	wire          twelveball_s1_agent_rf_source_endofpacket;                                          // TwelveBall_s1_agent:rf_source_endofpacket -> TwelveBall_s1_agent_rsp_fifo:in_endofpacket
	wire          twelveball_s1_agent_rf_source_valid;                                                // TwelveBall_s1_agent:rf_source_valid -> TwelveBall_s1_agent_rsp_fifo:in_valid
	wire          twelveball_s1_agent_rf_source_startofpacket;                                        // TwelveBall_s1_agent:rf_source_startofpacket -> TwelveBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] twelveball_s1_agent_rf_source_data;                                                 // TwelveBall_s1_agent:rf_source_data -> TwelveBall_s1_agent_rsp_fifo:in_data
	wire          twelveball_s1_agent_rf_source_ready;                                                // TwelveBall_s1_agent_rsp_fifo:in_ready -> TwelveBall_s1_agent:rf_source_ready
	wire          twelveball_s1_agent_rsp_fifo_out_endofpacket;                                       // TwelveBall_s1_agent_rsp_fifo:out_endofpacket -> TwelveBall_s1_agent:rf_sink_endofpacket
	wire          twelveball_s1_agent_rsp_fifo_out_valid;                                             // TwelveBall_s1_agent_rsp_fifo:out_valid -> TwelveBall_s1_agent:rf_sink_valid
	wire          twelveball_s1_agent_rsp_fifo_out_startofpacket;                                     // TwelveBall_s1_agent_rsp_fifo:out_startofpacket -> TwelveBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] twelveball_s1_agent_rsp_fifo_out_data;                                              // TwelveBall_s1_agent_rsp_fifo:out_data -> TwelveBall_s1_agent:rf_sink_data
	wire          twelveball_s1_agent_rsp_fifo_out_ready;                                             // TwelveBall_s1_agent:rf_sink_ready -> TwelveBall_s1_agent_rsp_fifo:out_ready
	wire          twelveball_s1_agent_rdata_fifo_src_valid;                                           // TwelveBall_s1_agent:rdata_fifo_src_valid -> TwelveBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] twelveball_s1_agent_rdata_fifo_src_data;                                            // TwelveBall_s1_agent:rdata_fifo_src_data -> TwelveBall_s1_agent:rdata_fifo_sink_data
	wire          twelveball_s1_agent_rdata_fifo_src_ready;                                           // TwelveBall_s1_agent:rdata_fifo_sink_ready -> TwelveBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_023_src_endofpacket;                                                        // cmd_mux_023:src_endofpacket -> TwelveBall_s1_agent:cp_endofpacket
	wire          cmd_mux_023_src_valid;                                                              // cmd_mux_023:src_valid -> TwelveBall_s1_agent:cp_valid
	wire          cmd_mux_023_src_startofpacket;                                                      // cmd_mux_023:src_startofpacket -> TwelveBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_023_src_data;                                                               // cmd_mux_023:src_data -> TwelveBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_023_src_channel;                                                            // cmd_mux_023:src_channel -> TwelveBall_s1_agent:cp_channel
	wire          cmd_mux_023_src_ready;                                                              // TwelveBall_s1_agent:cp_ready -> cmd_mux_023:src_ready
	wire          thirteenball_s1_agent_m0_waitrequest;                                               // ThirteenBall_s1_translator:uav_waitrequest -> ThirteenBall_s1_agent:m0_waitrequest
	wire    [2:0] thirteenball_s1_agent_m0_burstcount;                                                // ThirteenBall_s1_agent:m0_burstcount -> ThirteenBall_s1_translator:uav_burstcount
	wire   [31:0] thirteenball_s1_agent_m0_writedata;                                                 // ThirteenBall_s1_agent:m0_writedata -> ThirteenBall_s1_translator:uav_writedata
	wire   [28:0] thirteenball_s1_agent_m0_address;                                                   // ThirteenBall_s1_agent:m0_address -> ThirteenBall_s1_translator:uav_address
	wire          thirteenball_s1_agent_m0_write;                                                     // ThirteenBall_s1_agent:m0_write -> ThirteenBall_s1_translator:uav_write
	wire          thirteenball_s1_agent_m0_lock;                                                      // ThirteenBall_s1_agent:m0_lock -> ThirteenBall_s1_translator:uav_lock
	wire          thirteenball_s1_agent_m0_read;                                                      // ThirteenBall_s1_agent:m0_read -> ThirteenBall_s1_translator:uav_read
	wire   [31:0] thirteenball_s1_agent_m0_readdata;                                                  // ThirteenBall_s1_translator:uav_readdata -> ThirteenBall_s1_agent:m0_readdata
	wire          thirteenball_s1_agent_m0_readdatavalid;                                             // ThirteenBall_s1_translator:uav_readdatavalid -> ThirteenBall_s1_agent:m0_readdatavalid
	wire          thirteenball_s1_agent_m0_debugaccess;                                               // ThirteenBall_s1_agent:m0_debugaccess -> ThirteenBall_s1_translator:uav_debugaccess
	wire    [3:0] thirteenball_s1_agent_m0_byteenable;                                                // ThirteenBall_s1_agent:m0_byteenable -> ThirteenBall_s1_translator:uav_byteenable
	wire          thirteenball_s1_agent_rf_source_endofpacket;                                        // ThirteenBall_s1_agent:rf_source_endofpacket -> ThirteenBall_s1_agent_rsp_fifo:in_endofpacket
	wire          thirteenball_s1_agent_rf_source_valid;                                              // ThirteenBall_s1_agent:rf_source_valid -> ThirteenBall_s1_agent_rsp_fifo:in_valid
	wire          thirteenball_s1_agent_rf_source_startofpacket;                                      // ThirteenBall_s1_agent:rf_source_startofpacket -> ThirteenBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] thirteenball_s1_agent_rf_source_data;                                               // ThirteenBall_s1_agent:rf_source_data -> ThirteenBall_s1_agent_rsp_fifo:in_data
	wire          thirteenball_s1_agent_rf_source_ready;                                              // ThirteenBall_s1_agent_rsp_fifo:in_ready -> ThirteenBall_s1_agent:rf_source_ready
	wire          thirteenball_s1_agent_rsp_fifo_out_endofpacket;                                     // ThirteenBall_s1_agent_rsp_fifo:out_endofpacket -> ThirteenBall_s1_agent:rf_sink_endofpacket
	wire          thirteenball_s1_agent_rsp_fifo_out_valid;                                           // ThirteenBall_s1_agent_rsp_fifo:out_valid -> ThirteenBall_s1_agent:rf_sink_valid
	wire          thirteenball_s1_agent_rsp_fifo_out_startofpacket;                                   // ThirteenBall_s1_agent_rsp_fifo:out_startofpacket -> ThirteenBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] thirteenball_s1_agent_rsp_fifo_out_data;                                            // ThirteenBall_s1_agent_rsp_fifo:out_data -> ThirteenBall_s1_agent:rf_sink_data
	wire          thirteenball_s1_agent_rsp_fifo_out_ready;                                           // ThirteenBall_s1_agent:rf_sink_ready -> ThirteenBall_s1_agent_rsp_fifo:out_ready
	wire          thirteenball_s1_agent_rdata_fifo_src_valid;                                         // ThirteenBall_s1_agent:rdata_fifo_src_valid -> ThirteenBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] thirteenball_s1_agent_rdata_fifo_src_data;                                          // ThirteenBall_s1_agent:rdata_fifo_src_data -> ThirteenBall_s1_agent:rdata_fifo_sink_data
	wire          thirteenball_s1_agent_rdata_fifo_src_ready;                                         // ThirteenBall_s1_agent:rdata_fifo_sink_ready -> ThirteenBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_024_src_endofpacket;                                                        // cmd_mux_024:src_endofpacket -> ThirteenBall_s1_agent:cp_endofpacket
	wire          cmd_mux_024_src_valid;                                                              // cmd_mux_024:src_valid -> ThirteenBall_s1_agent:cp_valid
	wire          cmd_mux_024_src_startofpacket;                                                      // cmd_mux_024:src_startofpacket -> ThirteenBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_024_src_data;                                                               // cmd_mux_024:src_data -> ThirteenBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_024_src_channel;                                                            // cmd_mux_024:src_channel -> ThirteenBall_s1_agent:cp_channel
	wire          cmd_mux_024_src_ready;                                                              // ThirteenBall_s1_agent:cp_ready -> cmd_mux_024:src_ready
	wire          fourteenball_s1_agent_m0_waitrequest;                                               // FourteenBall_s1_translator:uav_waitrequest -> FourteenBall_s1_agent:m0_waitrequest
	wire    [2:0] fourteenball_s1_agent_m0_burstcount;                                                // FourteenBall_s1_agent:m0_burstcount -> FourteenBall_s1_translator:uav_burstcount
	wire   [31:0] fourteenball_s1_agent_m0_writedata;                                                 // FourteenBall_s1_agent:m0_writedata -> FourteenBall_s1_translator:uav_writedata
	wire   [28:0] fourteenball_s1_agent_m0_address;                                                   // FourteenBall_s1_agent:m0_address -> FourteenBall_s1_translator:uav_address
	wire          fourteenball_s1_agent_m0_write;                                                     // FourteenBall_s1_agent:m0_write -> FourteenBall_s1_translator:uav_write
	wire          fourteenball_s1_agent_m0_lock;                                                      // FourteenBall_s1_agent:m0_lock -> FourteenBall_s1_translator:uav_lock
	wire          fourteenball_s1_agent_m0_read;                                                      // FourteenBall_s1_agent:m0_read -> FourteenBall_s1_translator:uav_read
	wire   [31:0] fourteenball_s1_agent_m0_readdata;                                                  // FourteenBall_s1_translator:uav_readdata -> FourteenBall_s1_agent:m0_readdata
	wire          fourteenball_s1_agent_m0_readdatavalid;                                             // FourteenBall_s1_translator:uav_readdatavalid -> FourteenBall_s1_agent:m0_readdatavalid
	wire          fourteenball_s1_agent_m0_debugaccess;                                               // FourteenBall_s1_agent:m0_debugaccess -> FourteenBall_s1_translator:uav_debugaccess
	wire    [3:0] fourteenball_s1_agent_m0_byteenable;                                                // FourteenBall_s1_agent:m0_byteenable -> FourteenBall_s1_translator:uav_byteenable
	wire          fourteenball_s1_agent_rf_source_endofpacket;                                        // FourteenBall_s1_agent:rf_source_endofpacket -> FourteenBall_s1_agent_rsp_fifo:in_endofpacket
	wire          fourteenball_s1_agent_rf_source_valid;                                              // FourteenBall_s1_agent:rf_source_valid -> FourteenBall_s1_agent_rsp_fifo:in_valid
	wire          fourteenball_s1_agent_rf_source_startofpacket;                                      // FourteenBall_s1_agent:rf_source_startofpacket -> FourteenBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] fourteenball_s1_agent_rf_source_data;                                               // FourteenBall_s1_agent:rf_source_data -> FourteenBall_s1_agent_rsp_fifo:in_data
	wire          fourteenball_s1_agent_rf_source_ready;                                              // FourteenBall_s1_agent_rsp_fifo:in_ready -> FourteenBall_s1_agent:rf_source_ready
	wire          fourteenball_s1_agent_rsp_fifo_out_endofpacket;                                     // FourteenBall_s1_agent_rsp_fifo:out_endofpacket -> FourteenBall_s1_agent:rf_sink_endofpacket
	wire          fourteenball_s1_agent_rsp_fifo_out_valid;                                           // FourteenBall_s1_agent_rsp_fifo:out_valid -> FourteenBall_s1_agent:rf_sink_valid
	wire          fourteenball_s1_agent_rsp_fifo_out_startofpacket;                                   // FourteenBall_s1_agent_rsp_fifo:out_startofpacket -> FourteenBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] fourteenball_s1_agent_rsp_fifo_out_data;                                            // FourteenBall_s1_agent_rsp_fifo:out_data -> FourteenBall_s1_agent:rf_sink_data
	wire          fourteenball_s1_agent_rsp_fifo_out_ready;                                           // FourteenBall_s1_agent:rf_sink_ready -> FourteenBall_s1_agent_rsp_fifo:out_ready
	wire          fourteenball_s1_agent_rdata_fifo_src_valid;                                         // FourteenBall_s1_agent:rdata_fifo_src_valid -> FourteenBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] fourteenball_s1_agent_rdata_fifo_src_data;                                          // FourteenBall_s1_agent:rdata_fifo_src_data -> FourteenBall_s1_agent:rdata_fifo_sink_data
	wire          fourteenball_s1_agent_rdata_fifo_src_ready;                                         // FourteenBall_s1_agent:rdata_fifo_sink_ready -> FourteenBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_025_src_endofpacket;                                                        // cmd_mux_025:src_endofpacket -> FourteenBall_s1_agent:cp_endofpacket
	wire          cmd_mux_025_src_valid;                                                              // cmd_mux_025:src_valid -> FourteenBall_s1_agent:cp_valid
	wire          cmd_mux_025_src_startofpacket;                                                      // cmd_mux_025:src_startofpacket -> FourteenBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_025_src_data;                                                               // cmd_mux_025:src_data -> FourteenBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_025_src_channel;                                                            // cmd_mux_025:src_channel -> FourteenBall_s1_agent:cp_channel
	wire          cmd_mux_025_src_ready;                                                              // FourteenBall_s1_agent:cp_ready -> cmd_mux_025:src_ready
	wire          fifteenball_s1_agent_m0_waitrequest;                                                // FifteenBall_s1_translator:uav_waitrequest -> FifteenBall_s1_agent:m0_waitrequest
	wire    [2:0] fifteenball_s1_agent_m0_burstcount;                                                 // FifteenBall_s1_agent:m0_burstcount -> FifteenBall_s1_translator:uav_burstcount
	wire   [31:0] fifteenball_s1_agent_m0_writedata;                                                  // FifteenBall_s1_agent:m0_writedata -> FifteenBall_s1_translator:uav_writedata
	wire   [28:0] fifteenball_s1_agent_m0_address;                                                    // FifteenBall_s1_agent:m0_address -> FifteenBall_s1_translator:uav_address
	wire          fifteenball_s1_agent_m0_write;                                                      // FifteenBall_s1_agent:m0_write -> FifteenBall_s1_translator:uav_write
	wire          fifteenball_s1_agent_m0_lock;                                                       // FifteenBall_s1_agent:m0_lock -> FifteenBall_s1_translator:uav_lock
	wire          fifteenball_s1_agent_m0_read;                                                       // FifteenBall_s1_agent:m0_read -> FifteenBall_s1_translator:uav_read
	wire   [31:0] fifteenball_s1_agent_m0_readdata;                                                   // FifteenBall_s1_translator:uav_readdata -> FifteenBall_s1_agent:m0_readdata
	wire          fifteenball_s1_agent_m0_readdatavalid;                                              // FifteenBall_s1_translator:uav_readdatavalid -> FifteenBall_s1_agent:m0_readdatavalid
	wire          fifteenball_s1_agent_m0_debugaccess;                                                // FifteenBall_s1_agent:m0_debugaccess -> FifteenBall_s1_translator:uav_debugaccess
	wire    [3:0] fifteenball_s1_agent_m0_byteenable;                                                 // FifteenBall_s1_agent:m0_byteenable -> FifteenBall_s1_translator:uav_byteenable
	wire          fifteenball_s1_agent_rf_source_endofpacket;                                         // FifteenBall_s1_agent:rf_source_endofpacket -> FifteenBall_s1_agent_rsp_fifo:in_endofpacket
	wire          fifteenball_s1_agent_rf_source_valid;                                               // FifteenBall_s1_agent:rf_source_valid -> FifteenBall_s1_agent_rsp_fifo:in_valid
	wire          fifteenball_s1_agent_rf_source_startofpacket;                                       // FifteenBall_s1_agent:rf_source_startofpacket -> FifteenBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] fifteenball_s1_agent_rf_source_data;                                                // FifteenBall_s1_agent:rf_source_data -> FifteenBall_s1_agent_rsp_fifo:in_data
	wire          fifteenball_s1_agent_rf_source_ready;                                               // FifteenBall_s1_agent_rsp_fifo:in_ready -> FifteenBall_s1_agent:rf_source_ready
	wire          fifteenball_s1_agent_rsp_fifo_out_endofpacket;                                      // FifteenBall_s1_agent_rsp_fifo:out_endofpacket -> FifteenBall_s1_agent:rf_sink_endofpacket
	wire          fifteenball_s1_agent_rsp_fifo_out_valid;                                            // FifteenBall_s1_agent_rsp_fifo:out_valid -> FifteenBall_s1_agent:rf_sink_valid
	wire          fifteenball_s1_agent_rsp_fifo_out_startofpacket;                                    // FifteenBall_s1_agent_rsp_fifo:out_startofpacket -> FifteenBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] fifteenball_s1_agent_rsp_fifo_out_data;                                             // FifteenBall_s1_agent_rsp_fifo:out_data -> FifteenBall_s1_agent:rf_sink_data
	wire          fifteenball_s1_agent_rsp_fifo_out_ready;                                            // FifteenBall_s1_agent:rf_sink_ready -> FifteenBall_s1_agent_rsp_fifo:out_ready
	wire          fifteenball_s1_agent_rdata_fifo_src_valid;                                          // FifteenBall_s1_agent:rdata_fifo_src_valid -> FifteenBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] fifteenball_s1_agent_rdata_fifo_src_data;                                           // FifteenBall_s1_agent:rdata_fifo_src_data -> FifteenBall_s1_agent:rdata_fifo_sink_data
	wire          fifteenball_s1_agent_rdata_fifo_src_ready;                                          // FifteenBall_s1_agent:rdata_fifo_sink_ready -> FifteenBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_026_src_endofpacket;                                                        // cmd_mux_026:src_endofpacket -> FifteenBall_s1_agent:cp_endofpacket
	wire          cmd_mux_026_src_valid;                                                              // cmd_mux_026:src_valid -> FifteenBall_s1_agent:cp_valid
	wire          cmd_mux_026_src_startofpacket;                                                      // cmd_mux_026:src_startofpacket -> FifteenBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_026_src_data;                                                               // cmd_mux_026:src_data -> FifteenBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_026_src_channel;                                                            // cmd_mux_026:src_channel -> FifteenBall_s1_agent:cp_channel
	wire          cmd_mux_026_src_ready;                                                              // FifteenBall_s1_agent:cp_ready -> cmd_mux_026:src_ready
	wire          cueball_s1_agent_m0_waitrequest;                                                    // cueBall_s1_translator:uav_waitrequest -> cueBall_s1_agent:m0_waitrequest
	wire    [2:0] cueball_s1_agent_m0_burstcount;                                                     // cueBall_s1_agent:m0_burstcount -> cueBall_s1_translator:uav_burstcount
	wire   [31:0] cueball_s1_agent_m0_writedata;                                                      // cueBall_s1_agent:m0_writedata -> cueBall_s1_translator:uav_writedata
	wire   [28:0] cueball_s1_agent_m0_address;                                                        // cueBall_s1_agent:m0_address -> cueBall_s1_translator:uav_address
	wire          cueball_s1_agent_m0_write;                                                          // cueBall_s1_agent:m0_write -> cueBall_s1_translator:uav_write
	wire          cueball_s1_agent_m0_lock;                                                           // cueBall_s1_agent:m0_lock -> cueBall_s1_translator:uav_lock
	wire          cueball_s1_agent_m0_read;                                                           // cueBall_s1_agent:m0_read -> cueBall_s1_translator:uav_read
	wire   [31:0] cueball_s1_agent_m0_readdata;                                                       // cueBall_s1_translator:uav_readdata -> cueBall_s1_agent:m0_readdata
	wire          cueball_s1_agent_m0_readdatavalid;                                                  // cueBall_s1_translator:uav_readdatavalid -> cueBall_s1_agent:m0_readdatavalid
	wire          cueball_s1_agent_m0_debugaccess;                                                    // cueBall_s1_agent:m0_debugaccess -> cueBall_s1_translator:uav_debugaccess
	wire    [3:0] cueball_s1_agent_m0_byteenable;                                                     // cueBall_s1_agent:m0_byteenable -> cueBall_s1_translator:uav_byteenable
	wire          cueball_s1_agent_rf_source_endofpacket;                                             // cueBall_s1_agent:rf_source_endofpacket -> cueBall_s1_agent_rsp_fifo:in_endofpacket
	wire          cueball_s1_agent_rf_source_valid;                                                   // cueBall_s1_agent:rf_source_valid -> cueBall_s1_agent_rsp_fifo:in_valid
	wire          cueball_s1_agent_rf_source_startofpacket;                                           // cueBall_s1_agent:rf_source_startofpacket -> cueBall_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] cueball_s1_agent_rf_source_data;                                                    // cueBall_s1_agent:rf_source_data -> cueBall_s1_agent_rsp_fifo:in_data
	wire          cueball_s1_agent_rf_source_ready;                                                   // cueBall_s1_agent_rsp_fifo:in_ready -> cueBall_s1_agent:rf_source_ready
	wire          cueball_s1_agent_rsp_fifo_out_endofpacket;                                          // cueBall_s1_agent_rsp_fifo:out_endofpacket -> cueBall_s1_agent:rf_sink_endofpacket
	wire          cueball_s1_agent_rsp_fifo_out_valid;                                                // cueBall_s1_agent_rsp_fifo:out_valid -> cueBall_s1_agent:rf_sink_valid
	wire          cueball_s1_agent_rsp_fifo_out_startofpacket;                                        // cueBall_s1_agent_rsp_fifo:out_startofpacket -> cueBall_s1_agent:rf_sink_startofpacket
	wire  [109:0] cueball_s1_agent_rsp_fifo_out_data;                                                 // cueBall_s1_agent_rsp_fifo:out_data -> cueBall_s1_agent:rf_sink_data
	wire          cueball_s1_agent_rsp_fifo_out_ready;                                                // cueBall_s1_agent:rf_sink_ready -> cueBall_s1_agent_rsp_fifo:out_ready
	wire          cueball_s1_agent_rdata_fifo_src_valid;                                              // cueBall_s1_agent:rdata_fifo_src_valid -> cueBall_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] cueball_s1_agent_rdata_fifo_src_data;                                               // cueBall_s1_agent:rdata_fifo_src_data -> cueBall_s1_agent:rdata_fifo_sink_data
	wire          cueball_s1_agent_rdata_fifo_src_ready;                                              // cueBall_s1_agent:rdata_fifo_sink_ready -> cueBall_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_027_src_endofpacket;                                                        // cmd_mux_027:src_endofpacket -> cueBall_s1_agent:cp_endofpacket
	wire          cmd_mux_027_src_valid;                                                              // cmd_mux_027:src_valid -> cueBall_s1_agent:cp_valid
	wire          cmd_mux_027_src_startofpacket;                                                      // cmd_mux_027:src_startofpacket -> cueBall_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_027_src_data;                                                               // cmd_mux_027:src_data -> cueBall_s1_agent:cp_data
	wire   [31:0] cmd_mux_027_src_channel;                                                            // cmd_mux_027:src_channel -> cueBall_s1_agent:cp_channel
	wire          cmd_mux_027_src_ready;                                                              // cueBall_s1_agent:cp_ready -> cmd_mux_027:src_ready
	wire          poolcue_s1_agent_m0_waitrequest;                                                    // poolcue_s1_translator:uav_waitrequest -> poolcue_s1_agent:m0_waitrequest
	wire    [2:0] poolcue_s1_agent_m0_burstcount;                                                     // poolcue_s1_agent:m0_burstcount -> poolcue_s1_translator:uav_burstcount
	wire   [31:0] poolcue_s1_agent_m0_writedata;                                                      // poolcue_s1_agent:m0_writedata -> poolcue_s1_translator:uav_writedata
	wire   [28:0] poolcue_s1_agent_m0_address;                                                        // poolcue_s1_agent:m0_address -> poolcue_s1_translator:uav_address
	wire          poolcue_s1_agent_m0_write;                                                          // poolcue_s1_agent:m0_write -> poolcue_s1_translator:uav_write
	wire          poolcue_s1_agent_m0_lock;                                                           // poolcue_s1_agent:m0_lock -> poolcue_s1_translator:uav_lock
	wire          poolcue_s1_agent_m0_read;                                                           // poolcue_s1_agent:m0_read -> poolcue_s1_translator:uav_read
	wire   [31:0] poolcue_s1_agent_m0_readdata;                                                       // poolcue_s1_translator:uav_readdata -> poolcue_s1_agent:m0_readdata
	wire          poolcue_s1_agent_m0_readdatavalid;                                                  // poolcue_s1_translator:uav_readdatavalid -> poolcue_s1_agent:m0_readdatavalid
	wire          poolcue_s1_agent_m0_debugaccess;                                                    // poolcue_s1_agent:m0_debugaccess -> poolcue_s1_translator:uav_debugaccess
	wire    [3:0] poolcue_s1_agent_m0_byteenable;                                                     // poolcue_s1_agent:m0_byteenable -> poolcue_s1_translator:uav_byteenable
	wire          poolcue_s1_agent_rf_source_endofpacket;                                             // poolcue_s1_agent:rf_source_endofpacket -> poolcue_s1_agent_rsp_fifo:in_endofpacket
	wire          poolcue_s1_agent_rf_source_valid;                                                   // poolcue_s1_agent:rf_source_valid -> poolcue_s1_agent_rsp_fifo:in_valid
	wire          poolcue_s1_agent_rf_source_startofpacket;                                           // poolcue_s1_agent:rf_source_startofpacket -> poolcue_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] poolcue_s1_agent_rf_source_data;                                                    // poolcue_s1_agent:rf_source_data -> poolcue_s1_agent_rsp_fifo:in_data
	wire          poolcue_s1_agent_rf_source_ready;                                                   // poolcue_s1_agent_rsp_fifo:in_ready -> poolcue_s1_agent:rf_source_ready
	wire          poolcue_s1_agent_rsp_fifo_out_endofpacket;                                          // poolcue_s1_agent_rsp_fifo:out_endofpacket -> poolcue_s1_agent:rf_sink_endofpacket
	wire          poolcue_s1_agent_rsp_fifo_out_valid;                                                // poolcue_s1_agent_rsp_fifo:out_valid -> poolcue_s1_agent:rf_sink_valid
	wire          poolcue_s1_agent_rsp_fifo_out_startofpacket;                                        // poolcue_s1_agent_rsp_fifo:out_startofpacket -> poolcue_s1_agent:rf_sink_startofpacket
	wire  [109:0] poolcue_s1_agent_rsp_fifo_out_data;                                                 // poolcue_s1_agent_rsp_fifo:out_data -> poolcue_s1_agent:rf_sink_data
	wire          poolcue_s1_agent_rsp_fifo_out_ready;                                                // poolcue_s1_agent:rf_sink_ready -> poolcue_s1_agent_rsp_fifo:out_ready
	wire          poolcue_s1_agent_rdata_fifo_src_valid;                                              // poolcue_s1_agent:rdata_fifo_src_valid -> poolcue_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] poolcue_s1_agent_rdata_fifo_src_data;                                               // poolcue_s1_agent:rdata_fifo_src_data -> poolcue_s1_agent:rdata_fifo_sink_data
	wire          poolcue_s1_agent_rdata_fifo_src_ready;                                              // poolcue_s1_agent:rdata_fifo_sink_ready -> poolcue_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_028_src_endofpacket;                                                        // cmd_mux_028:src_endofpacket -> poolcue_s1_agent:cp_endofpacket
	wire          cmd_mux_028_src_valid;                                                              // cmd_mux_028:src_valid -> poolcue_s1_agent:cp_valid
	wire          cmd_mux_028_src_startofpacket;                                                      // cmd_mux_028:src_startofpacket -> poolcue_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_028_src_data;                                                               // cmd_mux_028:src_data -> poolcue_s1_agent:cp_data
	wire   [31:0] cmd_mux_028_src_channel;                                                            // cmd_mux_028:src_channel -> poolcue_s1_agent:cp_channel
	wire          cmd_mux_028_src_ready;                                                              // poolcue_s1_agent:cp_ready -> cmd_mux_028:src_ready
	wire          reset_s1_agent_m0_waitrequest;                                                      // reset_s1_translator:uav_waitrequest -> reset_s1_agent:m0_waitrequest
	wire    [2:0] reset_s1_agent_m0_burstcount;                                                       // reset_s1_agent:m0_burstcount -> reset_s1_translator:uav_burstcount
	wire   [31:0] reset_s1_agent_m0_writedata;                                                        // reset_s1_agent:m0_writedata -> reset_s1_translator:uav_writedata
	wire   [28:0] reset_s1_agent_m0_address;                                                          // reset_s1_agent:m0_address -> reset_s1_translator:uav_address
	wire          reset_s1_agent_m0_write;                                                            // reset_s1_agent:m0_write -> reset_s1_translator:uav_write
	wire          reset_s1_agent_m0_lock;                                                             // reset_s1_agent:m0_lock -> reset_s1_translator:uav_lock
	wire          reset_s1_agent_m0_read;                                                             // reset_s1_agent:m0_read -> reset_s1_translator:uav_read
	wire   [31:0] reset_s1_agent_m0_readdata;                                                         // reset_s1_translator:uav_readdata -> reset_s1_agent:m0_readdata
	wire          reset_s1_agent_m0_readdatavalid;                                                    // reset_s1_translator:uav_readdatavalid -> reset_s1_agent:m0_readdatavalid
	wire          reset_s1_agent_m0_debugaccess;                                                      // reset_s1_agent:m0_debugaccess -> reset_s1_translator:uav_debugaccess
	wire    [3:0] reset_s1_agent_m0_byteenable;                                                       // reset_s1_agent:m0_byteenable -> reset_s1_translator:uav_byteenable
	wire          reset_s1_agent_rf_source_endofpacket;                                               // reset_s1_agent:rf_source_endofpacket -> reset_s1_agent_rsp_fifo:in_endofpacket
	wire          reset_s1_agent_rf_source_valid;                                                     // reset_s1_agent:rf_source_valid -> reset_s1_agent_rsp_fifo:in_valid
	wire          reset_s1_agent_rf_source_startofpacket;                                             // reset_s1_agent:rf_source_startofpacket -> reset_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] reset_s1_agent_rf_source_data;                                                      // reset_s1_agent:rf_source_data -> reset_s1_agent_rsp_fifo:in_data
	wire          reset_s1_agent_rf_source_ready;                                                     // reset_s1_agent_rsp_fifo:in_ready -> reset_s1_agent:rf_source_ready
	wire          reset_s1_agent_rsp_fifo_out_endofpacket;                                            // reset_s1_agent_rsp_fifo:out_endofpacket -> reset_s1_agent:rf_sink_endofpacket
	wire          reset_s1_agent_rsp_fifo_out_valid;                                                  // reset_s1_agent_rsp_fifo:out_valid -> reset_s1_agent:rf_sink_valid
	wire          reset_s1_agent_rsp_fifo_out_startofpacket;                                          // reset_s1_agent_rsp_fifo:out_startofpacket -> reset_s1_agent:rf_sink_startofpacket
	wire  [109:0] reset_s1_agent_rsp_fifo_out_data;                                                   // reset_s1_agent_rsp_fifo:out_data -> reset_s1_agent:rf_sink_data
	wire          reset_s1_agent_rsp_fifo_out_ready;                                                  // reset_s1_agent:rf_sink_ready -> reset_s1_agent_rsp_fifo:out_ready
	wire          reset_s1_agent_rdata_fifo_src_valid;                                                // reset_s1_agent:rdata_fifo_src_valid -> reset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] reset_s1_agent_rdata_fifo_src_data;                                                 // reset_s1_agent:rdata_fifo_src_data -> reset_s1_agent:rdata_fifo_sink_data
	wire          reset_s1_agent_rdata_fifo_src_ready;                                                // reset_s1_agent:rdata_fifo_sink_ready -> reset_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_029_src_endofpacket;                                                        // cmd_mux_029:src_endofpacket -> reset_s1_agent:cp_endofpacket
	wire          cmd_mux_029_src_valid;                                                              // cmd_mux_029:src_valid -> reset_s1_agent:cp_valid
	wire          cmd_mux_029_src_startofpacket;                                                      // cmd_mux_029:src_startofpacket -> reset_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_029_src_data;                                                               // cmd_mux_029:src_data -> reset_s1_agent:cp_data
	wire   [31:0] cmd_mux_029_src_channel;                                                            // cmd_mux_029:src_channel -> reset_s1_agent:cp_channel
	wire          cmd_mux_029_src_ready;                                                              // reset_s1_agent:cp_ready -> cmd_mux_029:src_ready
	wire          hw_sig_s1_agent_m0_waitrequest;                                                     // hw_sig_s1_translator:uav_waitrequest -> hw_sig_s1_agent:m0_waitrequest
	wire    [2:0] hw_sig_s1_agent_m0_burstcount;                                                      // hw_sig_s1_agent:m0_burstcount -> hw_sig_s1_translator:uav_burstcount
	wire   [31:0] hw_sig_s1_agent_m0_writedata;                                                       // hw_sig_s1_agent:m0_writedata -> hw_sig_s1_translator:uav_writedata
	wire   [28:0] hw_sig_s1_agent_m0_address;                                                         // hw_sig_s1_agent:m0_address -> hw_sig_s1_translator:uav_address
	wire          hw_sig_s1_agent_m0_write;                                                           // hw_sig_s1_agent:m0_write -> hw_sig_s1_translator:uav_write
	wire          hw_sig_s1_agent_m0_lock;                                                            // hw_sig_s1_agent:m0_lock -> hw_sig_s1_translator:uav_lock
	wire          hw_sig_s1_agent_m0_read;                                                            // hw_sig_s1_agent:m0_read -> hw_sig_s1_translator:uav_read
	wire   [31:0] hw_sig_s1_agent_m0_readdata;                                                        // hw_sig_s1_translator:uav_readdata -> hw_sig_s1_agent:m0_readdata
	wire          hw_sig_s1_agent_m0_readdatavalid;                                                   // hw_sig_s1_translator:uav_readdatavalid -> hw_sig_s1_agent:m0_readdatavalid
	wire          hw_sig_s1_agent_m0_debugaccess;                                                     // hw_sig_s1_agent:m0_debugaccess -> hw_sig_s1_translator:uav_debugaccess
	wire    [3:0] hw_sig_s1_agent_m0_byteenable;                                                      // hw_sig_s1_agent:m0_byteenable -> hw_sig_s1_translator:uav_byteenable
	wire          hw_sig_s1_agent_rf_source_endofpacket;                                              // hw_sig_s1_agent:rf_source_endofpacket -> hw_sig_s1_agent_rsp_fifo:in_endofpacket
	wire          hw_sig_s1_agent_rf_source_valid;                                                    // hw_sig_s1_agent:rf_source_valid -> hw_sig_s1_agent_rsp_fifo:in_valid
	wire          hw_sig_s1_agent_rf_source_startofpacket;                                            // hw_sig_s1_agent:rf_source_startofpacket -> hw_sig_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] hw_sig_s1_agent_rf_source_data;                                                     // hw_sig_s1_agent:rf_source_data -> hw_sig_s1_agent_rsp_fifo:in_data
	wire          hw_sig_s1_agent_rf_source_ready;                                                    // hw_sig_s1_agent_rsp_fifo:in_ready -> hw_sig_s1_agent:rf_source_ready
	wire          hw_sig_s1_agent_rsp_fifo_out_endofpacket;                                           // hw_sig_s1_agent_rsp_fifo:out_endofpacket -> hw_sig_s1_agent:rf_sink_endofpacket
	wire          hw_sig_s1_agent_rsp_fifo_out_valid;                                                 // hw_sig_s1_agent_rsp_fifo:out_valid -> hw_sig_s1_agent:rf_sink_valid
	wire          hw_sig_s1_agent_rsp_fifo_out_startofpacket;                                         // hw_sig_s1_agent_rsp_fifo:out_startofpacket -> hw_sig_s1_agent:rf_sink_startofpacket
	wire  [109:0] hw_sig_s1_agent_rsp_fifo_out_data;                                                  // hw_sig_s1_agent_rsp_fifo:out_data -> hw_sig_s1_agent:rf_sink_data
	wire          hw_sig_s1_agent_rsp_fifo_out_ready;                                                 // hw_sig_s1_agent:rf_sink_ready -> hw_sig_s1_agent_rsp_fifo:out_ready
	wire          hw_sig_s1_agent_rdata_fifo_src_valid;                                               // hw_sig_s1_agent:rdata_fifo_src_valid -> hw_sig_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] hw_sig_s1_agent_rdata_fifo_src_data;                                                // hw_sig_s1_agent:rdata_fifo_src_data -> hw_sig_s1_agent:rdata_fifo_sink_data
	wire          hw_sig_s1_agent_rdata_fifo_src_ready;                                               // hw_sig_s1_agent:rdata_fifo_sink_ready -> hw_sig_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_030_src_endofpacket;                                                        // cmd_mux_030:src_endofpacket -> hw_sig_s1_agent:cp_endofpacket
	wire          cmd_mux_030_src_valid;                                                              // cmd_mux_030:src_valid -> hw_sig_s1_agent:cp_valid
	wire          cmd_mux_030_src_startofpacket;                                                      // cmd_mux_030:src_startofpacket -> hw_sig_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_030_src_data;                                                               // cmd_mux_030:src_data -> hw_sig_s1_agent:cp_data
	wire   [31:0] cmd_mux_030_src_channel;                                                            // cmd_mux_030:src_channel -> hw_sig_s1_agent:cp_channel
	wire          cmd_mux_030_src_ready;                                                              // hw_sig_s1_agent:cp_ready -> cmd_mux_030:src_ready
	wire          stick_direction_s1_agent_m0_waitrequest;                                            // stick_direction_s1_translator:uav_waitrequest -> stick_direction_s1_agent:m0_waitrequest
	wire    [2:0] stick_direction_s1_agent_m0_burstcount;                                             // stick_direction_s1_agent:m0_burstcount -> stick_direction_s1_translator:uav_burstcount
	wire   [31:0] stick_direction_s1_agent_m0_writedata;                                              // stick_direction_s1_agent:m0_writedata -> stick_direction_s1_translator:uav_writedata
	wire   [28:0] stick_direction_s1_agent_m0_address;                                                // stick_direction_s1_agent:m0_address -> stick_direction_s1_translator:uav_address
	wire          stick_direction_s1_agent_m0_write;                                                  // stick_direction_s1_agent:m0_write -> stick_direction_s1_translator:uav_write
	wire          stick_direction_s1_agent_m0_lock;                                                   // stick_direction_s1_agent:m0_lock -> stick_direction_s1_translator:uav_lock
	wire          stick_direction_s1_agent_m0_read;                                                   // stick_direction_s1_agent:m0_read -> stick_direction_s1_translator:uav_read
	wire   [31:0] stick_direction_s1_agent_m0_readdata;                                               // stick_direction_s1_translator:uav_readdata -> stick_direction_s1_agent:m0_readdata
	wire          stick_direction_s1_agent_m0_readdatavalid;                                          // stick_direction_s1_translator:uav_readdatavalid -> stick_direction_s1_agent:m0_readdatavalid
	wire          stick_direction_s1_agent_m0_debugaccess;                                            // stick_direction_s1_agent:m0_debugaccess -> stick_direction_s1_translator:uav_debugaccess
	wire    [3:0] stick_direction_s1_agent_m0_byteenable;                                             // stick_direction_s1_agent:m0_byteenable -> stick_direction_s1_translator:uav_byteenable
	wire          stick_direction_s1_agent_rf_source_endofpacket;                                     // stick_direction_s1_agent:rf_source_endofpacket -> stick_direction_s1_agent_rsp_fifo:in_endofpacket
	wire          stick_direction_s1_agent_rf_source_valid;                                           // stick_direction_s1_agent:rf_source_valid -> stick_direction_s1_agent_rsp_fifo:in_valid
	wire          stick_direction_s1_agent_rf_source_startofpacket;                                   // stick_direction_s1_agent:rf_source_startofpacket -> stick_direction_s1_agent_rsp_fifo:in_startofpacket
	wire  [109:0] stick_direction_s1_agent_rf_source_data;                                            // stick_direction_s1_agent:rf_source_data -> stick_direction_s1_agent_rsp_fifo:in_data
	wire          stick_direction_s1_agent_rf_source_ready;                                           // stick_direction_s1_agent_rsp_fifo:in_ready -> stick_direction_s1_agent:rf_source_ready
	wire          stick_direction_s1_agent_rsp_fifo_out_endofpacket;                                  // stick_direction_s1_agent_rsp_fifo:out_endofpacket -> stick_direction_s1_agent:rf_sink_endofpacket
	wire          stick_direction_s1_agent_rsp_fifo_out_valid;                                        // stick_direction_s1_agent_rsp_fifo:out_valid -> stick_direction_s1_agent:rf_sink_valid
	wire          stick_direction_s1_agent_rsp_fifo_out_startofpacket;                                // stick_direction_s1_agent_rsp_fifo:out_startofpacket -> stick_direction_s1_agent:rf_sink_startofpacket
	wire  [109:0] stick_direction_s1_agent_rsp_fifo_out_data;                                         // stick_direction_s1_agent_rsp_fifo:out_data -> stick_direction_s1_agent:rf_sink_data
	wire          stick_direction_s1_agent_rsp_fifo_out_ready;                                        // stick_direction_s1_agent:rf_sink_ready -> stick_direction_s1_agent_rsp_fifo:out_ready
	wire          stick_direction_s1_agent_rdata_fifo_src_valid;                                      // stick_direction_s1_agent:rdata_fifo_src_valid -> stick_direction_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] stick_direction_s1_agent_rdata_fifo_src_data;                                       // stick_direction_s1_agent:rdata_fifo_src_data -> stick_direction_s1_agent:rdata_fifo_sink_data
	wire          stick_direction_s1_agent_rdata_fifo_src_ready;                                      // stick_direction_s1_agent:rdata_fifo_sink_ready -> stick_direction_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_031_src_endofpacket;                                                        // cmd_mux_031:src_endofpacket -> stick_direction_s1_agent:cp_endofpacket
	wire          cmd_mux_031_src_valid;                                                              // cmd_mux_031:src_valid -> stick_direction_s1_agent:cp_valid
	wire          cmd_mux_031_src_startofpacket;                                                      // cmd_mux_031:src_startofpacket -> stick_direction_s1_agent:cp_startofpacket
	wire  [108:0] cmd_mux_031_src_data;                                                               // cmd_mux_031:src_data -> stick_direction_s1_agent:cp_data
	wire   [31:0] cmd_mux_031_src_channel;                                                            // cmd_mux_031:src_channel -> stick_direction_s1_agent:cp_channel
	wire          cmd_mux_031_src_ready;                                                              // stick_direction_s1_agent:cp_ready -> cmd_mux_031:src_ready
	wire          nios2_qsys_0_data_master_agent_cp_endofpacket;                                      // nios2_qsys_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          nios2_qsys_0_data_master_agent_cp_valid;                                            // nios2_qsys_0_data_master_agent:cp_valid -> router:sink_valid
	wire          nios2_qsys_0_data_master_agent_cp_startofpacket;                                    // nios2_qsys_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [108:0] nios2_qsys_0_data_master_agent_cp_data;                                             // nios2_qsys_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_qsys_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_qsys_0_data_master_agent:cp_ready
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [108:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire   [31:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire          nios2_qsys_0_instruction_master_agent_cp_endofpacket;                               // nios2_qsys_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          nios2_qsys_0_instruction_master_agent_cp_valid;                                     // nios2_qsys_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire          nios2_qsys_0_instruction_master_agent_cp_startofpacket;                             // nios2_qsys_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [108:0] nios2_qsys_0_instruction_master_agent_cp_data;                                      // nios2_qsys_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_qsys_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_qsys_0_instruction_master_agent:cp_ready
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [108:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire   [31:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [108:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                       // router_002:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [108:0] router_002_src_data;                                                                // router_002:src_data -> rsp_demux:sink_data
	wire   [31:0] router_002_src_channel;                                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_ready;                                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                                    // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                                          // sysid_qsys_0_control_slave_agent:rp_valid -> router_003:sink_valid
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                                  // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [108:0] sysid_qsys_0_control_slave_agent_rp_data;                                           // sysid_qsys_0_control_slave_agent:rp_data -> router_003:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                                          // router_003:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [108:0] router_003_src_data;                                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire   [31:0] router_003_src_channel;                                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_ready;                                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket;                                // nios2_qsys_0_jtag_debug_module_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_valid;                                      // nios2_qsys_0_jtag_debug_module_agent:rp_valid -> router_004:sink_valid
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket;                              // nios2_qsys_0_jtag_debug_module_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [108:0] nios2_qsys_0_jtag_debug_module_agent_rp_data;                                       // nios2_qsys_0_jtag_debug_module_agent:rp_data -> router_004:sink_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_ready;                                      // router_004:sink_ready -> nios2_qsys_0_jtag_debug_module_agent:rp_ready
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [108:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire   [31:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_ready;                                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire          sdram_pll_pll_slave_agent_rp_endofpacket;                                           // sdram_pll_pll_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          sdram_pll_pll_slave_agent_rp_valid;                                                 // sdram_pll_pll_slave_agent:rp_valid -> router_005:sink_valid
	wire          sdram_pll_pll_slave_agent_rp_startofpacket;                                         // sdram_pll_pll_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [108:0] sdram_pll_pll_slave_agent_rp_data;                                                  // sdram_pll_pll_slave_agent:rp_data -> router_005:sink_data
	wire          sdram_pll_pll_slave_agent_rp_ready;                                                 // router_005:sink_ready -> sdram_pll_pll_slave_agent:rp_ready
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_003:sink_valid
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [108:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_003:sink_data
	wire   [31:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_ready;                                                               // rsp_demux_003:sink_ready -> router_005:src_ready
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                           // onchip_memory2_0_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                                 // onchip_memory2_0_s1_agent:rp_valid -> router_006:sink_valid
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                         // onchip_memory2_0_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [108:0] onchip_memory2_0_s1_agent_rp_data;                                                  // onchip_memory2_0_s1_agent:rp_data -> router_006:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                                 // router_006:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_004:sink_valid
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [108:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_004:sink_data
	wire   [31:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_ready;                                                               // rsp_demux_004:sink_ready -> router_006:src_ready
	wire          sdram_s1_agent_rp_endofpacket;                                                      // sdram_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                            // sdram_s1_agent:rp_valid -> router_007:sink_valid
	wire          sdram_s1_agent_rp_startofpacket;                                                    // sdram_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [108:0] sdram_s1_agent_rp_data;                                                             // sdram_s1_agent:rp_data -> router_007:sink_data
	wire          sdram_s1_agent_rp_ready;                                                            // router_007:sink_ready -> sdram_s1_agent:rp_ready
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [108:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire   [31:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_ready;                                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire          keycode_s1_agent_rp_endofpacket;                                                    // keycode_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          keycode_s1_agent_rp_valid;                                                          // keycode_s1_agent:rp_valid -> router_008:sink_valid
	wire          keycode_s1_agent_rp_startofpacket;                                                  // keycode_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire  [108:0] keycode_s1_agent_rp_data;                                                           // keycode_s1_agent:rp_data -> router_008:sink_data
	wire          keycode_s1_agent_rp_ready;                                                          // router_008:sink_ready -> keycode_s1_agent:rp_ready
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_006:sink_valid
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire  [108:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_006:sink_data
	wire   [31:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_ready;                                                               // rsp_demux_006:sink_ready -> router_008:src_ready
	wire          otg_hpi_cs_s1_agent_rp_endofpacket;                                                 // otg_hpi_cs_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          otg_hpi_cs_s1_agent_rp_valid;                                                       // otg_hpi_cs_s1_agent:rp_valid -> router_009:sink_valid
	wire          otg_hpi_cs_s1_agent_rp_startofpacket;                                               // otg_hpi_cs_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire  [108:0] otg_hpi_cs_s1_agent_rp_data;                                                        // otg_hpi_cs_s1_agent:rp_data -> router_009:sink_data
	wire          otg_hpi_cs_s1_agent_rp_ready;                                                       // router_009:sink_ready -> otg_hpi_cs_s1_agent:rp_ready
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_007:sink_valid
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire  [108:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_007:sink_data
	wire   [31:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_ready;                                                               // rsp_demux_007:sink_ready -> router_009:src_ready
	wire          otg_hpi_address_s1_agent_rp_endofpacket;                                            // otg_hpi_address_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          otg_hpi_address_s1_agent_rp_valid;                                                  // otg_hpi_address_s1_agent:rp_valid -> router_010:sink_valid
	wire          otg_hpi_address_s1_agent_rp_startofpacket;                                          // otg_hpi_address_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire  [108:0] otg_hpi_address_s1_agent_rp_data;                                                   // otg_hpi_address_s1_agent:rp_data -> router_010:sink_data
	wire          otg_hpi_address_s1_agent_rp_ready;                                                  // router_010:sink_ready -> otg_hpi_address_s1_agent:rp_ready
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_008:sink_valid
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire  [108:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_008:sink_data
	wire   [31:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_ready;                                                               // rsp_demux_008:sink_ready -> router_010:src_ready
	wire          otg_hpi_data_s1_agent_rp_endofpacket;                                               // otg_hpi_data_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          otg_hpi_data_s1_agent_rp_valid;                                                     // otg_hpi_data_s1_agent:rp_valid -> router_011:sink_valid
	wire          otg_hpi_data_s1_agent_rp_startofpacket;                                             // otg_hpi_data_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire  [108:0] otg_hpi_data_s1_agent_rp_data;                                                      // otg_hpi_data_s1_agent:rp_data -> router_011:sink_data
	wire          otg_hpi_data_s1_agent_rp_ready;                                                     // router_011:sink_ready -> otg_hpi_data_s1_agent:rp_ready
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_009:sink_valid
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire  [108:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_009:sink_data
	wire   [31:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_ready;                                                               // rsp_demux_009:sink_ready -> router_011:src_ready
	wire          otg_hpi_r_s1_agent_rp_endofpacket;                                                  // otg_hpi_r_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          otg_hpi_r_s1_agent_rp_valid;                                                        // otg_hpi_r_s1_agent:rp_valid -> router_012:sink_valid
	wire          otg_hpi_r_s1_agent_rp_startofpacket;                                                // otg_hpi_r_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire  [108:0] otg_hpi_r_s1_agent_rp_data;                                                         // otg_hpi_r_s1_agent:rp_data -> router_012:sink_data
	wire          otg_hpi_r_s1_agent_rp_ready;                                                        // router_012:sink_ready -> otg_hpi_r_s1_agent:rp_ready
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_010:sink_valid
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire  [108:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_010:sink_data
	wire   [31:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_ready;                                                               // rsp_demux_010:sink_ready -> router_012:src_ready
	wire          otg_hpi_w_s1_agent_rp_endofpacket;                                                  // otg_hpi_w_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          otg_hpi_w_s1_agent_rp_valid;                                                        // otg_hpi_w_s1_agent:rp_valid -> router_013:sink_valid
	wire          otg_hpi_w_s1_agent_rp_startofpacket;                                                // otg_hpi_w_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire  [108:0] otg_hpi_w_s1_agent_rp_data;                                                         // otg_hpi_w_s1_agent:rp_data -> router_013:sink_data
	wire          otg_hpi_w_s1_agent_rp_ready;                                                        // router_013:sink_ready -> otg_hpi_w_s1_agent:rp_ready
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_011:sink_valid
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire  [108:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_011:sink_data
	wire   [31:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_ready;                                                               // rsp_demux_011:sink_ready -> router_013:src_ready
	wire          oneball_s1_agent_rp_endofpacket;                                                    // OneBall_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          oneball_s1_agent_rp_valid;                                                          // OneBall_s1_agent:rp_valid -> router_014:sink_valid
	wire          oneball_s1_agent_rp_startofpacket;                                                  // OneBall_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire  [108:0] oneball_s1_agent_rp_data;                                                           // OneBall_s1_agent:rp_data -> router_014:sink_data
	wire          oneball_s1_agent_rp_ready;                                                          // router_014:sink_ready -> OneBall_s1_agent:rp_ready
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_012:sink_valid
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire  [108:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_012:sink_data
	wire   [31:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_ready;                                                               // rsp_demux_012:sink_ready -> router_014:src_ready
	wire          twoball_s1_agent_rp_endofpacket;                                                    // TwoBall_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          twoball_s1_agent_rp_valid;                                                          // TwoBall_s1_agent:rp_valid -> router_015:sink_valid
	wire          twoball_s1_agent_rp_startofpacket;                                                  // TwoBall_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire  [108:0] twoball_s1_agent_rp_data;                                                           // TwoBall_s1_agent:rp_data -> router_015:sink_data
	wire          twoball_s1_agent_rp_ready;                                                          // router_015:sink_ready -> TwoBall_s1_agent:rp_ready
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_013:sink_valid
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire  [108:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_013:sink_data
	wire   [31:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_ready;                                                               // rsp_demux_013:sink_ready -> router_015:src_ready
	wire          threeball_s1_agent_rp_endofpacket;                                                  // ThreeBall_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          threeball_s1_agent_rp_valid;                                                        // ThreeBall_s1_agent:rp_valid -> router_016:sink_valid
	wire          threeball_s1_agent_rp_startofpacket;                                                // ThreeBall_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire  [108:0] threeball_s1_agent_rp_data;                                                         // ThreeBall_s1_agent:rp_data -> router_016:sink_data
	wire          threeball_s1_agent_rp_ready;                                                        // router_016:sink_ready -> ThreeBall_s1_agent:rp_ready
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> rsp_demux_014:sink_valid
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire  [108:0] router_016_src_data;                                                                // router_016:src_data -> rsp_demux_014:sink_data
	wire   [31:0] router_016_src_channel;                                                             // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_ready;                                                               // rsp_demux_014:sink_ready -> router_016:src_ready
	wire          fourball_s1_agent_rp_endofpacket;                                                   // FourBall_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          fourball_s1_agent_rp_valid;                                                         // FourBall_s1_agent:rp_valid -> router_017:sink_valid
	wire          fourball_s1_agent_rp_startofpacket;                                                 // FourBall_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire  [108:0] fourball_s1_agent_rp_data;                                                          // FourBall_s1_agent:rp_data -> router_017:sink_data
	wire          fourball_s1_agent_rp_ready;                                                         // router_017:sink_ready -> FourBall_s1_agent:rp_ready
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_015:sink_valid
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire  [108:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_015:sink_data
	wire   [31:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_ready;                                                               // rsp_demux_015:sink_ready -> router_017:src_ready
	wire          fiveball_s1_agent_rp_endofpacket;                                                   // FiveBall_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          fiveball_s1_agent_rp_valid;                                                         // FiveBall_s1_agent:rp_valid -> router_018:sink_valid
	wire          fiveball_s1_agent_rp_startofpacket;                                                 // FiveBall_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire  [108:0] fiveball_s1_agent_rp_data;                                                          // FiveBall_s1_agent:rp_data -> router_018:sink_data
	wire          fiveball_s1_agent_rp_ready;                                                         // router_018:sink_ready -> FiveBall_s1_agent:rp_ready
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_016:sink_valid
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire  [108:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_016:sink_data
	wire   [31:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_ready;                                                               // rsp_demux_016:sink_ready -> router_018:src_ready
	wire          sixball_s1_agent_rp_endofpacket;                                                    // SixBall_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          sixball_s1_agent_rp_valid;                                                          // SixBall_s1_agent:rp_valid -> router_019:sink_valid
	wire          sixball_s1_agent_rp_startofpacket;                                                  // SixBall_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire  [108:0] sixball_s1_agent_rp_data;                                                           // SixBall_s1_agent:rp_data -> router_019:sink_data
	wire          sixball_s1_agent_rp_ready;                                                          // router_019:sink_ready -> SixBall_s1_agent:rp_ready
	wire          router_019_src_endofpacket;                                                         // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_019_src_valid;                                                               // router_019:src_valid -> rsp_demux_017:sink_valid
	wire          router_019_src_startofpacket;                                                       // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire  [108:0] router_019_src_data;                                                                // router_019:src_data -> rsp_demux_017:sink_data
	wire   [31:0] router_019_src_channel;                                                             // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_ready;                                                               // rsp_demux_017:sink_ready -> router_019:src_ready
	wire          sevenball_s1_agent_rp_endofpacket;                                                  // SevenBall_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          sevenball_s1_agent_rp_valid;                                                        // SevenBall_s1_agent:rp_valid -> router_020:sink_valid
	wire          sevenball_s1_agent_rp_startofpacket;                                                // SevenBall_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire  [108:0] sevenball_s1_agent_rp_data;                                                         // SevenBall_s1_agent:rp_data -> router_020:sink_data
	wire          sevenball_s1_agent_rp_ready;                                                        // router_020:sink_ready -> SevenBall_s1_agent:rp_ready
	wire          router_020_src_endofpacket;                                                         // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_020_src_valid;                                                               // router_020:src_valid -> rsp_demux_018:sink_valid
	wire          router_020_src_startofpacket;                                                       // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire  [108:0] router_020_src_data;                                                                // router_020:src_data -> rsp_demux_018:sink_data
	wire   [31:0] router_020_src_channel;                                                             // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_ready;                                                               // rsp_demux_018:sink_ready -> router_020:src_ready
	wire          eightball_s1_agent_rp_endofpacket;                                                  // EightBall_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          eightball_s1_agent_rp_valid;                                                        // EightBall_s1_agent:rp_valid -> router_021:sink_valid
	wire          eightball_s1_agent_rp_startofpacket;                                                // EightBall_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire  [108:0] eightball_s1_agent_rp_data;                                                         // EightBall_s1_agent:rp_data -> router_021:sink_data
	wire          eightball_s1_agent_rp_ready;                                                        // router_021:sink_ready -> EightBall_s1_agent:rp_ready
	wire          router_021_src_endofpacket;                                                         // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          router_021_src_valid;                                                               // router_021:src_valid -> rsp_demux_019:sink_valid
	wire          router_021_src_startofpacket;                                                       // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire  [108:0] router_021_src_data;                                                                // router_021:src_data -> rsp_demux_019:sink_data
	wire   [31:0] router_021_src_channel;                                                             // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_ready;                                                               // rsp_demux_019:sink_ready -> router_021:src_ready
	wire          nineball_s1_agent_rp_endofpacket;                                                   // NineBall_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          nineball_s1_agent_rp_valid;                                                         // NineBall_s1_agent:rp_valid -> router_022:sink_valid
	wire          nineball_s1_agent_rp_startofpacket;                                                 // NineBall_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire  [108:0] nineball_s1_agent_rp_data;                                                          // NineBall_s1_agent:rp_data -> router_022:sink_data
	wire          nineball_s1_agent_rp_ready;                                                         // router_022:sink_ready -> NineBall_s1_agent:rp_ready
	wire          router_022_src_endofpacket;                                                         // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          router_022_src_valid;                                                               // router_022:src_valid -> rsp_demux_020:sink_valid
	wire          router_022_src_startofpacket;                                                       // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire  [108:0] router_022_src_data;                                                                // router_022:src_data -> rsp_demux_020:sink_data
	wire   [31:0] router_022_src_channel;                                                             // router_022:src_channel -> rsp_demux_020:sink_channel
	wire          router_022_src_ready;                                                               // rsp_demux_020:sink_ready -> router_022:src_ready
	wire          tenball_s1_agent_rp_endofpacket;                                                    // TenBall_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          tenball_s1_agent_rp_valid;                                                          // TenBall_s1_agent:rp_valid -> router_023:sink_valid
	wire          tenball_s1_agent_rp_startofpacket;                                                  // TenBall_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire  [108:0] tenball_s1_agent_rp_data;                                                           // TenBall_s1_agent:rp_data -> router_023:sink_data
	wire          tenball_s1_agent_rp_ready;                                                          // router_023:sink_ready -> TenBall_s1_agent:rp_ready
	wire          router_023_src_endofpacket;                                                         // router_023:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          router_023_src_valid;                                                               // router_023:src_valid -> rsp_demux_021:sink_valid
	wire          router_023_src_startofpacket;                                                       // router_023:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire  [108:0] router_023_src_data;                                                                // router_023:src_data -> rsp_demux_021:sink_data
	wire   [31:0] router_023_src_channel;                                                             // router_023:src_channel -> rsp_demux_021:sink_channel
	wire          router_023_src_ready;                                                               // rsp_demux_021:sink_ready -> router_023:src_ready
	wire          elevenball_s1_agent_rp_endofpacket;                                                 // ElevenBall_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          elevenball_s1_agent_rp_valid;                                                       // ElevenBall_s1_agent:rp_valid -> router_024:sink_valid
	wire          elevenball_s1_agent_rp_startofpacket;                                               // ElevenBall_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire  [108:0] elevenball_s1_agent_rp_data;                                                        // ElevenBall_s1_agent:rp_data -> router_024:sink_data
	wire          elevenball_s1_agent_rp_ready;                                                       // router_024:sink_ready -> ElevenBall_s1_agent:rp_ready
	wire          router_024_src_endofpacket;                                                         // router_024:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          router_024_src_valid;                                                               // router_024:src_valid -> rsp_demux_022:sink_valid
	wire          router_024_src_startofpacket;                                                       // router_024:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire  [108:0] router_024_src_data;                                                                // router_024:src_data -> rsp_demux_022:sink_data
	wire   [31:0] router_024_src_channel;                                                             // router_024:src_channel -> rsp_demux_022:sink_channel
	wire          router_024_src_ready;                                                               // rsp_demux_022:sink_ready -> router_024:src_ready
	wire          twelveball_s1_agent_rp_endofpacket;                                                 // TwelveBall_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          twelveball_s1_agent_rp_valid;                                                       // TwelveBall_s1_agent:rp_valid -> router_025:sink_valid
	wire          twelveball_s1_agent_rp_startofpacket;                                               // TwelveBall_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire  [108:0] twelveball_s1_agent_rp_data;                                                        // TwelveBall_s1_agent:rp_data -> router_025:sink_data
	wire          twelveball_s1_agent_rp_ready;                                                       // router_025:sink_ready -> TwelveBall_s1_agent:rp_ready
	wire          router_025_src_endofpacket;                                                         // router_025:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          router_025_src_valid;                                                               // router_025:src_valid -> rsp_demux_023:sink_valid
	wire          router_025_src_startofpacket;                                                       // router_025:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire  [108:0] router_025_src_data;                                                                // router_025:src_data -> rsp_demux_023:sink_data
	wire   [31:0] router_025_src_channel;                                                             // router_025:src_channel -> rsp_demux_023:sink_channel
	wire          router_025_src_ready;                                                               // rsp_demux_023:sink_ready -> router_025:src_ready
	wire          thirteenball_s1_agent_rp_endofpacket;                                               // ThirteenBall_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          thirteenball_s1_agent_rp_valid;                                                     // ThirteenBall_s1_agent:rp_valid -> router_026:sink_valid
	wire          thirteenball_s1_agent_rp_startofpacket;                                             // ThirteenBall_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire  [108:0] thirteenball_s1_agent_rp_data;                                                      // ThirteenBall_s1_agent:rp_data -> router_026:sink_data
	wire          thirteenball_s1_agent_rp_ready;                                                     // router_026:sink_ready -> ThirteenBall_s1_agent:rp_ready
	wire          router_026_src_endofpacket;                                                         // router_026:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          router_026_src_valid;                                                               // router_026:src_valid -> rsp_demux_024:sink_valid
	wire          router_026_src_startofpacket;                                                       // router_026:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire  [108:0] router_026_src_data;                                                                // router_026:src_data -> rsp_demux_024:sink_data
	wire   [31:0] router_026_src_channel;                                                             // router_026:src_channel -> rsp_demux_024:sink_channel
	wire          router_026_src_ready;                                                               // rsp_demux_024:sink_ready -> router_026:src_ready
	wire          fourteenball_s1_agent_rp_endofpacket;                                               // FourteenBall_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          fourteenball_s1_agent_rp_valid;                                                     // FourteenBall_s1_agent:rp_valid -> router_027:sink_valid
	wire          fourteenball_s1_agent_rp_startofpacket;                                             // FourteenBall_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire  [108:0] fourteenball_s1_agent_rp_data;                                                      // FourteenBall_s1_agent:rp_data -> router_027:sink_data
	wire          fourteenball_s1_agent_rp_ready;                                                     // router_027:sink_ready -> FourteenBall_s1_agent:rp_ready
	wire          router_027_src_endofpacket;                                                         // router_027:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          router_027_src_valid;                                                               // router_027:src_valid -> rsp_demux_025:sink_valid
	wire          router_027_src_startofpacket;                                                       // router_027:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire  [108:0] router_027_src_data;                                                                // router_027:src_data -> rsp_demux_025:sink_data
	wire   [31:0] router_027_src_channel;                                                             // router_027:src_channel -> rsp_demux_025:sink_channel
	wire          router_027_src_ready;                                                               // rsp_demux_025:sink_ready -> router_027:src_ready
	wire          fifteenball_s1_agent_rp_endofpacket;                                                // FifteenBall_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          fifteenball_s1_agent_rp_valid;                                                      // FifteenBall_s1_agent:rp_valid -> router_028:sink_valid
	wire          fifteenball_s1_agent_rp_startofpacket;                                              // FifteenBall_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire  [108:0] fifteenball_s1_agent_rp_data;                                                       // FifteenBall_s1_agent:rp_data -> router_028:sink_data
	wire          fifteenball_s1_agent_rp_ready;                                                      // router_028:sink_ready -> FifteenBall_s1_agent:rp_ready
	wire          router_028_src_endofpacket;                                                         // router_028:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          router_028_src_valid;                                                               // router_028:src_valid -> rsp_demux_026:sink_valid
	wire          router_028_src_startofpacket;                                                       // router_028:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire  [108:0] router_028_src_data;                                                                // router_028:src_data -> rsp_demux_026:sink_data
	wire   [31:0] router_028_src_channel;                                                             // router_028:src_channel -> rsp_demux_026:sink_channel
	wire          router_028_src_ready;                                                               // rsp_demux_026:sink_ready -> router_028:src_ready
	wire          cueball_s1_agent_rp_endofpacket;                                                    // cueBall_s1_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          cueball_s1_agent_rp_valid;                                                          // cueBall_s1_agent:rp_valid -> router_029:sink_valid
	wire          cueball_s1_agent_rp_startofpacket;                                                  // cueBall_s1_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire  [108:0] cueball_s1_agent_rp_data;                                                           // cueBall_s1_agent:rp_data -> router_029:sink_data
	wire          cueball_s1_agent_rp_ready;                                                          // router_029:sink_ready -> cueBall_s1_agent:rp_ready
	wire          router_029_src_endofpacket;                                                         // router_029:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          router_029_src_valid;                                                               // router_029:src_valid -> rsp_demux_027:sink_valid
	wire          router_029_src_startofpacket;                                                       // router_029:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire  [108:0] router_029_src_data;                                                                // router_029:src_data -> rsp_demux_027:sink_data
	wire   [31:0] router_029_src_channel;                                                             // router_029:src_channel -> rsp_demux_027:sink_channel
	wire          router_029_src_ready;                                                               // rsp_demux_027:sink_ready -> router_029:src_ready
	wire          poolcue_s1_agent_rp_endofpacket;                                                    // poolcue_s1_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          poolcue_s1_agent_rp_valid;                                                          // poolcue_s1_agent:rp_valid -> router_030:sink_valid
	wire          poolcue_s1_agent_rp_startofpacket;                                                  // poolcue_s1_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire  [108:0] poolcue_s1_agent_rp_data;                                                           // poolcue_s1_agent:rp_data -> router_030:sink_data
	wire          poolcue_s1_agent_rp_ready;                                                          // router_030:sink_ready -> poolcue_s1_agent:rp_ready
	wire          router_030_src_endofpacket;                                                         // router_030:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          router_030_src_valid;                                                               // router_030:src_valid -> rsp_demux_028:sink_valid
	wire          router_030_src_startofpacket;                                                       // router_030:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire  [108:0] router_030_src_data;                                                                // router_030:src_data -> rsp_demux_028:sink_data
	wire   [31:0] router_030_src_channel;                                                             // router_030:src_channel -> rsp_demux_028:sink_channel
	wire          router_030_src_ready;                                                               // rsp_demux_028:sink_ready -> router_030:src_ready
	wire          reset_s1_agent_rp_endofpacket;                                                      // reset_s1_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          reset_s1_agent_rp_valid;                                                            // reset_s1_agent:rp_valid -> router_031:sink_valid
	wire          reset_s1_agent_rp_startofpacket;                                                    // reset_s1_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire  [108:0] reset_s1_agent_rp_data;                                                             // reset_s1_agent:rp_data -> router_031:sink_data
	wire          reset_s1_agent_rp_ready;                                                            // router_031:sink_ready -> reset_s1_agent:rp_ready
	wire          router_031_src_endofpacket;                                                         // router_031:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          router_031_src_valid;                                                               // router_031:src_valid -> rsp_demux_029:sink_valid
	wire          router_031_src_startofpacket;                                                       // router_031:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire  [108:0] router_031_src_data;                                                                // router_031:src_data -> rsp_demux_029:sink_data
	wire   [31:0] router_031_src_channel;                                                             // router_031:src_channel -> rsp_demux_029:sink_channel
	wire          router_031_src_ready;                                                               // rsp_demux_029:sink_ready -> router_031:src_ready
	wire          hw_sig_s1_agent_rp_endofpacket;                                                     // hw_sig_s1_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          hw_sig_s1_agent_rp_valid;                                                           // hw_sig_s1_agent:rp_valid -> router_032:sink_valid
	wire          hw_sig_s1_agent_rp_startofpacket;                                                   // hw_sig_s1_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire  [108:0] hw_sig_s1_agent_rp_data;                                                            // hw_sig_s1_agent:rp_data -> router_032:sink_data
	wire          hw_sig_s1_agent_rp_ready;                                                           // router_032:sink_ready -> hw_sig_s1_agent:rp_ready
	wire          router_032_src_endofpacket;                                                         // router_032:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          router_032_src_valid;                                                               // router_032:src_valid -> rsp_demux_030:sink_valid
	wire          router_032_src_startofpacket;                                                       // router_032:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire  [108:0] router_032_src_data;                                                                // router_032:src_data -> rsp_demux_030:sink_data
	wire   [31:0] router_032_src_channel;                                                             // router_032:src_channel -> rsp_demux_030:sink_channel
	wire          router_032_src_ready;                                                               // rsp_demux_030:sink_ready -> router_032:src_ready
	wire          stick_direction_s1_agent_rp_endofpacket;                                            // stick_direction_s1_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          stick_direction_s1_agent_rp_valid;                                                  // stick_direction_s1_agent:rp_valid -> router_033:sink_valid
	wire          stick_direction_s1_agent_rp_startofpacket;                                          // stick_direction_s1_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire  [108:0] stick_direction_s1_agent_rp_data;                                                   // stick_direction_s1_agent:rp_data -> router_033:sink_data
	wire          stick_direction_s1_agent_rp_ready;                                                  // router_033:sink_ready -> stick_direction_s1_agent:rp_ready
	wire          router_033_src_endofpacket;                                                         // router_033:src_endofpacket -> rsp_demux_031:sink_endofpacket
	wire          router_033_src_valid;                                                               // router_033:src_valid -> rsp_demux_031:sink_valid
	wire          router_033_src_startofpacket;                                                       // router_033:src_startofpacket -> rsp_demux_031:sink_startofpacket
	wire  [108:0] router_033_src_data;                                                                // router_033:src_data -> rsp_demux_031:sink_data
	wire   [31:0] router_033_src_channel;                                                             // router_033:src_channel -> rsp_demux_031:sink_channel
	wire          router_033_src_ready;                                                               // rsp_demux_031:sink_ready -> router_033:src_ready
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [108:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire   [31:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [108:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire   [31:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_ready;                                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [108:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire   [31:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [108:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire   [31:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [108:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire   [31:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_ready;                                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire  [108:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire   [31:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_ready;                                                               // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire  [108:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire   [31:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_ready;                                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire  [108:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire   [31:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_ready;                                                               // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire          cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire          cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire  [108:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire   [31:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_ready;                                                               // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire          cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire          cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire  [108:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire   [31:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_ready;                                                              // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire          cmd_demux_src11_endofpacket;                                                        // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                              // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire          cmd_demux_src11_startofpacket;                                                      // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire  [108:0] cmd_demux_src11_data;                                                               // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire   [31:0] cmd_demux_src11_channel;                                                            // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_ready;                                                              // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire          cmd_demux_src12_endofpacket;                                                        // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                              // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire          cmd_demux_src12_startofpacket;                                                      // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire  [108:0] cmd_demux_src12_data;                                                               // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire   [31:0] cmd_demux_src12_channel;                                                            // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_ready;                                                              // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire          cmd_demux_src13_endofpacket;                                                        // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                              // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire          cmd_demux_src13_startofpacket;                                                      // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire  [108:0] cmd_demux_src13_data;                                                               // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire   [31:0] cmd_demux_src13_channel;                                                            // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_ready;                                                              // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire          cmd_demux_src14_endofpacket;                                                        // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                              // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire          cmd_demux_src14_startofpacket;                                                      // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire  [108:0] cmd_demux_src14_data;                                                               // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire   [31:0] cmd_demux_src14_channel;                                                            // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_ready;                                                              // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire          cmd_demux_src15_endofpacket;                                                        // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                              // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire          cmd_demux_src15_startofpacket;                                                      // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire  [108:0] cmd_demux_src15_data;                                                               // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire   [31:0] cmd_demux_src15_channel;                                                            // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_ready;                                                              // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire          cmd_demux_src16_endofpacket;                                                        // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                              // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire          cmd_demux_src16_startofpacket;                                                      // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire  [108:0] cmd_demux_src16_data;                                                               // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire   [31:0] cmd_demux_src16_channel;                                                            // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_ready;                                                              // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire          cmd_demux_src17_endofpacket;                                                        // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                              // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire          cmd_demux_src17_startofpacket;                                                      // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire  [108:0] cmd_demux_src17_data;                                                               // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire   [31:0] cmd_demux_src17_channel;                                                            // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_ready;                                                              // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire          cmd_demux_src18_endofpacket;                                                        // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                              // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire          cmd_demux_src18_startofpacket;                                                      // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire  [108:0] cmd_demux_src18_data;                                                               // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire   [31:0] cmd_demux_src18_channel;                                                            // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_ready;                                                              // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire          cmd_demux_src19_endofpacket;                                                        // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                              // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire          cmd_demux_src19_startofpacket;                                                      // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire  [108:0] cmd_demux_src19_data;                                                               // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire   [31:0] cmd_demux_src19_channel;                                                            // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_ready;                                                              // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire          cmd_demux_src20_endofpacket;                                                        // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                              // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire          cmd_demux_src20_startofpacket;                                                      // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire  [108:0] cmd_demux_src20_data;                                                               // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire   [31:0] cmd_demux_src20_channel;                                                            // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_ready;                                                              // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire          cmd_demux_src21_endofpacket;                                                        // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                              // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire          cmd_demux_src21_startofpacket;                                                      // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire  [108:0] cmd_demux_src21_data;                                                               // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire   [31:0] cmd_demux_src21_channel;                                                            // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_ready;                                                              // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire          cmd_demux_src22_endofpacket;                                                        // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                              // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire          cmd_demux_src22_startofpacket;                                                      // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire  [108:0] cmd_demux_src22_data;                                                               // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire   [31:0] cmd_demux_src22_channel;                                                            // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_src22_ready;                                                              // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire          cmd_demux_src23_endofpacket;                                                        // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                              // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire          cmd_demux_src23_startofpacket;                                                      // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire  [108:0] cmd_demux_src23_data;                                                               // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire   [31:0] cmd_demux_src23_channel;                                                            // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_src23_ready;                                                              // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire          cmd_demux_src24_endofpacket;                                                        // cmd_demux:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                              // cmd_demux:src24_valid -> cmd_mux_024:sink0_valid
	wire          cmd_demux_src24_startofpacket;                                                      // cmd_demux:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire  [108:0] cmd_demux_src24_data;                                                               // cmd_demux:src24_data -> cmd_mux_024:sink0_data
	wire   [31:0] cmd_demux_src24_channel;                                                            // cmd_demux:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_src24_ready;                                                              // cmd_mux_024:sink0_ready -> cmd_demux:src24_ready
	wire          cmd_demux_src25_endofpacket;                                                        // cmd_demux:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_src25_valid;                                                              // cmd_demux:src25_valid -> cmd_mux_025:sink0_valid
	wire          cmd_demux_src25_startofpacket;                                                      // cmd_demux:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire  [108:0] cmd_demux_src25_data;                                                               // cmd_demux:src25_data -> cmd_mux_025:sink0_data
	wire   [31:0] cmd_demux_src25_channel;                                                            // cmd_demux:src25_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_src25_ready;                                                              // cmd_mux_025:sink0_ready -> cmd_demux:src25_ready
	wire          cmd_demux_src26_endofpacket;                                                        // cmd_demux:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_src26_valid;                                                              // cmd_demux:src26_valid -> cmd_mux_026:sink0_valid
	wire          cmd_demux_src26_startofpacket;                                                      // cmd_demux:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire  [108:0] cmd_demux_src26_data;                                                               // cmd_demux:src26_data -> cmd_mux_026:sink0_data
	wire   [31:0] cmd_demux_src26_channel;                                                            // cmd_demux:src26_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_src26_ready;                                                              // cmd_mux_026:sink0_ready -> cmd_demux:src26_ready
	wire          cmd_demux_src27_endofpacket;                                                        // cmd_demux:src27_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_src27_valid;                                                              // cmd_demux:src27_valid -> cmd_mux_027:sink0_valid
	wire          cmd_demux_src27_startofpacket;                                                      // cmd_demux:src27_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire  [108:0] cmd_demux_src27_data;                                                               // cmd_demux:src27_data -> cmd_mux_027:sink0_data
	wire   [31:0] cmd_demux_src27_channel;                                                            // cmd_demux:src27_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_src27_ready;                                                              // cmd_mux_027:sink0_ready -> cmd_demux:src27_ready
	wire          cmd_demux_src28_endofpacket;                                                        // cmd_demux:src28_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_src28_valid;                                                              // cmd_demux:src28_valid -> cmd_mux_028:sink0_valid
	wire          cmd_demux_src28_startofpacket;                                                      // cmd_demux:src28_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire  [108:0] cmd_demux_src28_data;                                                               // cmd_demux:src28_data -> cmd_mux_028:sink0_data
	wire   [31:0] cmd_demux_src28_channel;                                                            // cmd_demux:src28_channel -> cmd_mux_028:sink0_channel
	wire          cmd_demux_src28_ready;                                                              // cmd_mux_028:sink0_ready -> cmd_demux:src28_ready
	wire          cmd_demux_src29_endofpacket;                                                        // cmd_demux:src29_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_src29_valid;                                                              // cmd_demux:src29_valid -> cmd_mux_029:sink0_valid
	wire          cmd_demux_src29_startofpacket;                                                      // cmd_demux:src29_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire  [108:0] cmd_demux_src29_data;                                                               // cmd_demux:src29_data -> cmd_mux_029:sink0_data
	wire   [31:0] cmd_demux_src29_channel;                                                            // cmd_demux:src29_channel -> cmd_mux_029:sink0_channel
	wire          cmd_demux_src29_ready;                                                              // cmd_mux_029:sink0_ready -> cmd_demux:src29_ready
	wire          cmd_demux_src30_endofpacket;                                                        // cmd_demux:src30_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          cmd_demux_src30_valid;                                                              // cmd_demux:src30_valid -> cmd_mux_030:sink0_valid
	wire          cmd_demux_src30_startofpacket;                                                      // cmd_demux:src30_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire  [108:0] cmd_demux_src30_data;                                                               // cmd_demux:src30_data -> cmd_mux_030:sink0_data
	wire   [31:0] cmd_demux_src30_channel;                                                            // cmd_demux:src30_channel -> cmd_mux_030:sink0_channel
	wire          cmd_demux_src30_ready;                                                              // cmd_mux_030:sink0_ready -> cmd_demux:src30_ready
	wire          cmd_demux_src31_endofpacket;                                                        // cmd_demux:src31_endofpacket -> cmd_mux_031:sink0_endofpacket
	wire          cmd_demux_src31_valid;                                                              // cmd_demux:src31_valid -> cmd_mux_031:sink0_valid
	wire          cmd_demux_src31_startofpacket;                                                      // cmd_demux:src31_startofpacket -> cmd_mux_031:sink0_startofpacket
	wire  [108:0] cmd_demux_src31_data;                                                               // cmd_demux:src31_data -> cmd_mux_031:sink0_data
	wire   [31:0] cmd_demux_src31_channel;                                                            // cmd_demux:src31_channel -> cmd_mux_031:sink0_channel
	wire          cmd_demux_src31_ready;                                                              // cmd_mux_031:sink0_ready -> cmd_demux:src31_ready
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux_001:sink1_valid
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire  [108:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux_001:sink1_data
	wire   [31:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux_001:sink1_ready -> cmd_demux_001:src0_ready
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_002:sink1_valid
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire  [108:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_002:sink1_data
	wire   [31:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src1_ready;                                                           // cmd_mux_002:sink1_ready -> cmd_demux_001:src1_ready
	wire          cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> cmd_mux_003:sink1_valid
	wire          cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire  [108:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> cmd_mux_003:sink1_data
	wire   [31:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src2_ready;                                                           // cmd_mux_003:sink1_ready -> cmd_demux_001:src2_ready
	wire          cmd_demux_001_src3_endofpacket;                                                     // cmd_demux_001:src3_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                           // cmd_demux_001:src3_valid -> cmd_mux_004:sink1_valid
	wire          cmd_demux_001_src3_startofpacket;                                                   // cmd_demux_001:src3_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire  [108:0] cmd_demux_001_src3_data;                                                            // cmd_demux_001:src3_data -> cmd_mux_004:sink1_data
	wire   [31:0] cmd_demux_001_src3_channel;                                                         // cmd_demux_001:src3_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src3_ready;                                                           // cmd_mux_004:sink1_ready -> cmd_demux_001:src3_ready
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [108:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire   [31:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [108:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire   [31:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_ready;                                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire          rsp_demux_001_src1_endofpacket;                                                     // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                           // rsp_demux_001:src1_valid -> rsp_mux_001:sink0_valid
	wire          rsp_demux_001_src1_startofpacket;                                                   // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [108:0] rsp_demux_001_src1_data;                                                            // rsp_demux_001:src1_data -> rsp_mux_001:sink0_data
	wire   [31:0] rsp_demux_001_src1_channel;                                                         // rsp_demux_001:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux_001:src1_ready
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire  [108:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire   [31:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire          rsp_demux_002_src1_endofpacket;                                                     // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                                           // rsp_demux_002:src1_valid -> rsp_mux_001:sink1_valid
	wire          rsp_demux_002_src1_startofpacket;                                                   // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [108:0] rsp_demux_002_src1_data;                                                            // rsp_demux_002:src1_data -> rsp_mux_001:sink1_data
	wire   [31:0] rsp_demux_002_src1_channel;                                                         // rsp_demux_002:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_002_src1_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_002:src1_ready
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire  [108:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire   [31:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire          rsp_demux_003_src1_endofpacket;                                                     // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src1_valid;                                                           // rsp_demux_003:src1_valid -> rsp_mux_001:sink2_valid
	wire          rsp_demux_003_src1_startofpacket;                                                   // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire  [108:0] rsp_demux_003_src1_data;                                                            // rsp_demux_003:src1_data -> rsp_mux_001:sink2_data
	wire   [31:0] rsp_demux_003_src1_channel;                                                         // rsp_demux_003:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_003_src1_ready;                                                           // rsp_mux_001:sink2_ready -> rsp_demux_003:src1_ready
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire  [108:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire   [31:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_ready;                                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire          rsp_demux_004_src1_endofpacket;                                                     // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src1_valid;                                                           // rsp_demux_004:src1_valid -> rsp_mux_001:sink3_valid
	wire          rsp_demux_004_src1_startofpacket;                                                   // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire  [108:0] rsp_demux_004_src1_data;                                                            // rsp_demux_004:src1_data -> rsp_mux_001:sink3_data
	wire   [31:0] rsp_demux_004_src1_channel;                                                         // rsp_demux_004:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_004_src1_ready;                                                           // rsp_mux_001:sink3_ready -> rsp_demux_004:src1_ready
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire  [108:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire   [31:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_ready;                                                           // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire  [108:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire   [31:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_ready;                                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire  [108:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire   [31:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_ready;                                                           // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire  [108:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire   [31:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_ready;                                                           // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire  [108:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire   [31:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_ready;                                                           // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire          rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire          rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire  [108:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire   [31:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_ready;                                                           // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire          rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire          rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire  [108:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire   [31:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_ready;                                                           // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire          rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire          rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire  [108:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire   [31:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_ready;                                                           // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire          rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire          rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire  [108:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire   [31:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_ready;                                                           // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire          rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire          rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire  [108:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire   [31:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_ready;                                                           // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire          rsp_demux_016_src0_endofpacket;                                                     // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_016_src0_valid;                                                           // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire          rsp_demux_016_src0_startofpacket;                                                   // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire  [108:0] rsp_demux_016_src0_data;                                                            // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire   [31:0] rsp_demux_016_src0_channel;                                                         // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_ready;                                                           // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire          rsp_demux_017_src0_endofpacket;                                                     // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_017_src0_valid;                                                           // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire          rsp_demux_017_src0_startofpacket;                                                   // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire  [108:0] rsp_demux_017_src0_data;                                                            // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire   [31:0] rsp_demux_017_src0_channel;                                                         // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_ready;                                                           // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire          rsp_demux_018_src0_endofpacket;                                                     // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_018_src0_valid;                                                           // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire          rsp_demux_018_src0_startofpacket;                                                   // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire  [108:0] rsp_demux_018_src0_data;                                                            // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire   [31:0] rsp_demux_018_src0_channel;                                                         // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_ready;                                                           // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire          rsp_demux_019_src0_endofpacket;                                                     // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src0_valid;                                                           // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire          rsp_demux_019_src0_startofpacket;                                                   // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire  [108:0] rsp_demux_019_src0_data;                                                            // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire   [31:0] rsp_demux_019_src0_channel;                                                         // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_ready;                                                           // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire          rsp_demux_020_src0_endofpacket;                                                     // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_020_src0_valid;                                                           // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire          rsp_demux_020_src0_startofpacket;                                                   // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire  [108:0] rsp_demux_020_src0_data;                                                            // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire   [31:0] rsp_demux_020_src0_channel;                                                         // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_ready;                                                           // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire          rsp_demux_021_src0_endofpacket;                                                     // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_021_src0_valid;                                                           // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire          rsp_demux_021_src0_startofpacket;                                                   // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire  [108:0] rsp_demux_021_src0_data;                                                            // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire   [31:0] rsp_demux_021_src0_channel;                                                         // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_ready;                                                           // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire          rsp_demux_022_src0_endofpacket;                                                     // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_022_src0_valid;                                                           // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire          rsp_demux_022_src0_startofpacket;                                                   // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire  [108:0] rsp_demux_022_src0_data;                                                            // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire   [31:0] rsp_demux_022_src0_channel;                                                         // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire          rsp_demux_022_src0_ready;                                                           // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire          rsp_demux_023_src0_endofpacket;                                                     // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_023_src0_valid;                                                           // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire          rsp_demux_023_src0_startofpacket;                                                   // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire  [108:0] rsp_demux_023_src0_data;                                                            // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire   [31:0] rsp_demux_023_src0_channel;                                                         // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire          rsp_demux_023_src0_ready;                                                           // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire          rsp_demux_024_src0_endofpacket;                                                     // rsp_demux_024:src0_endofpacket -> rsp_mux:sink24_endofpacket
	wire          rsp_demux_024_src0_valid;                                                           // rsp_demux_024:src0_valid -> rsp_mux:sink24_valid
	wire          rsp_demux_024_src0_startofpacket;                                                   // rsp_demux_024:src0_startofpacket -> rsp_mux:sink24_startofpacket
	wire  [108:0] rsp_demux_024_src0_data;                                                            // rsp_demux_024:src0_data -> rsp_mux:sink24_data
	wire   [31:0] rsp_demux_024_src0_channel;                                                         // rsp_demux_024:src0_channel -> rsp_mux:sink24_channel
	wire          rsp_demux_024_src0_ready;                                                           // rsp_mux:sink24_ready -> rsp_demux_024:src0_ready
	wire          rsp_demux_025_src0_endofpacket;                                                     // rsp_demux_025:src0_endofpacket -> rsp_mux:sink25_endofpacket
	wire          rsp_demux_025_src0_valid;                                                           // rsp_demux_025:src0_valid -> rsp_mux:sink25_valid
	wire          rsp_demux_025_src0_startofpacket;                                                   // rsp_demux_025:src0_startofpacket -> rsp_mux:sink25_startofpacket
	wire  [108:0] rsp_demux_025_src0_data;                                                            // rsp_demux_025:src0_data -> rsp_mux:sink25_data
	wire   [31:0] rsp_demux_025_src0_channel;                                                         // rsp_demux_025:src0_channel -> rsp_mux:sink25_channel
	wire          rsp_demux_025_src0_ready;                                                           // rsp_mux:sink25_ready -> rsp_demux_025:src0_ready
	wire          rsp_demux_026_src0_endofpacket;                                                     // rsp_demux_026:src0_endofpacket -> rsp_mux:sink26_endofpacket
	wire          rsp_demux_026_src0_valid;                                                           // rsp_demux_026:src0_valid -> rsp_mux:sink26_valid
	wire          rsp_demux_026_src0_startofpacket;                                                   // rsp_demux_026:src0_startofpacket -> rsp_mux:sink26_startofpacket
	wire  [108:0] rsp_demux_026_src0_data;                                                            // rsp_demux_026:src0_data -> rsp_mux:sink26_data
	wire   [31:0] rsp_demux_026_src0_channel;                                                         // rsp_demux_026:src0_channel -> rsp_mux:sink26_channel
	wire          rsp_demux_026_src0_ready;                                                           // rsp_mux:sink26_ready -> rsp_demux_026:src0_ready
	wire          rsp_demux_027_src0_endofpacket;                                                     // rsp_demux_027:src0_endofpacket -> rsp_mux:sink27_endofpacket
	wire          rsp_demux_027_src0_valid;                                                           // rsp_demux_027:src0_valid -> rsp_mux:sink27_valid
	wire          rsp_demux_027_src0_startofpacket;                                                   // rsp_demux_027:src0_startofpacket -> rsp_mux:sink27_startofpacket
	wire  [108:0] rsp_demux_027_src0_data;                                                            // rsp_demux_027:src0_data -> rsp_mux:sink27_data
	wire   [31:0] rsp_demux_027_src0_channel;                                                         // rsp_demux_027:src0_channel -> rsp_mux:sink27_channel
	wire          rsp_demux_027_src0_ready;                                                           // rsp_mux:sink27_ready -> rsp_demux_027:src0_ready
	wire          rsp_demux_028_src0_endofpacket;                                                     // rsp_demux_028:src0_endofpacket -> rsp_mux:sink28_endofpacket
	wire          rsp_demux_028_src0_valid;                                                           // rsp_demux_028:src0_valid -> rsp_mux:sink28_valid
	wire          rsp_demux_028_src0_startofpacket;                                                   // rsp_demux_028:src0_startofpacket -> rsp_mux:sink28_startofpacket
	wire  [108:0] rsp_demux_028_src0_data;                                                            // rsp_demux_028:src0_data -> rsp_mux:sink28_data
	wire   [31:0] rsp_demux_028_src0_channel;                                                         // rsp_demux_028:src0_channel -> rsp_mux:sink28_channel
	wire          rsp_demux_028_src0_ready;                                                           // rsp_mux:sink28_ready -> rsp_demux_028:src0_ready
	wire          rsp_demux_029_src0_endofpacket;                                                     // rsp_demux_029:src0_endofpacket -> rsp_mux:sink29_endofpacket
	wire          rsp_demux_029_src0_valid;                                                           // rsp_demux_029:src0_valid -> rsp_mux:sink29_valid
	wire          rsp_demux_029_src0_startofpacket;                                                   // rsp_demux_029:src0_startofpacket -> rsp_mux:sink29_startofpacket
	wire  [108:0] rsp_demux_029_src0_data;                                                            // rsp_demux_029:src0_data -> rsp_mux:sink29_data
	wire   [31:0] rsp_demux_029_src0_channel;                                                         // rsp_demux_029:src0_channel -> rsp_mux:sink29_channel
	wire          rsp_demux_029_src0_ready;                                                           // rsp_mux:sink29_ready -> rsp_demux_029:src0_ready
	wire          rsp_demux_030_src0_endofpacket;                                                     // rsp_demux_030:src0_endofpacket -> rsp_mux:sink30_endofpacket
	wire          rsp_demux_030_src0_valid;                                                           // rsp_demux_030:src0_valid -> rsp_mux:sink30_valid
	wire          rsp_demux_030_src0_startofpacket;                                                   // rsp_demux_030:src0_startofpacket -> rsp_mux:sink30_startofpacket
	wire  [108:0] rsp_demux_030_src0_data;                                                            // rsp_demux_030:src0_data -> rsp_mux:sink30_data
	wire   [31:0] rsp_demux_030_src0_channel;                                                         // rsp_demux_030:src0_channel -> rsp_mux:sink30_channel
	wire          rsp_demux_030_src0_ready;                                                           // rsp_mux:sink30_ready -> rsp_demux_030:src0_ready
	wire          rsp_demux_031_src0_endofpacket;                                                     // rsp_demux_031:src0_endofpacket -> rsp_mux:sink31_endofpacket
	wire          rsp_demux_031_src0_valid;                                                           // rsp_demux_031:src0_valid -> rsp_mux:sink31_valid
	wire          rsp_demux_031_src0_startofpacket;                                                   // rsp_demux_031:src0_startofpacket -> rsp_mux:sink31_startofpacket
	wire  [108:0] rsp_demux_031_src0_data;                                                            // rsp_demux_031:src0_data -> rsp_mux:sink31_data
	wire   [31:0] rsp_demux_031_src0_channel;                                                         // rsp_demux_031:src0_channel -> rsp_mux:sink31_channel
	wire          rsp_demux_031_src0_ready;                                                           // rsp_mux:sink31_ready -> rsp_demux_031:src0_ready
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> crosser:in_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> crosser:in_valid
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> crosser:in_startofpacket
	wire  [108:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> crosser:in_data
	wire   [31:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> crosser:in_channel
	wire          cmd_demux_src5_ready;                                                               // crosser:in_ready -> cmd_demux:src5_ready
	wire          crosser_out_endofpacket;                                                            // crosser:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          crosser_out_valid;                                                                  // crosser:out_valid -> cmd_mux_005:sink0_valid
	wire          crosser_out_startofpacket;                                                          // crosser:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [108:0] crosser_out_data;                                                                   // crosser:out_data -> cmd_mux_005:sink0_data
	wire   [31:0] crosser_out_channel;                                                                // crosser:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_out_ready;                                                                  // cmd_mux_005:sink0_ready -> crosser:out_ready
	wire          cmd_demux_001_src4_endofpacket;                                                     // cmd_demux_001:src4_endofpacket -> crosser_001:in_endofpacket
	wire          cmd_demux_001_src4_valid;                                                           // cmd_demux_001:src4_valid -> crosser_001:in_valid
	wire          cmd_demux_001_src4_startofpacket;                                                   // cmd_demux_001:src4_startofpacket -> crosser_001:in_startofpacket
	wire  [108:0] cmd_demux_001_src4_data;                                                            // cmd_demux_001:src4_data -> crosser_001:in_data
	wire   [31:0] cmd_demux_001_src4_channel;                                                         // cmd_demux_001:src4_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src4_ready;                                                           // crosser_001:in_ready -> cmd_demux_001:src4_ready
	wire          crosser_001_out_endofpacket;                                                        // crosser_001:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          crosser_001_out_valid;                                                              // crosser_001:out_valid -> cmd_mux_005:sink1_valid
	wire          crosser_001_out_startofpacket;                                                      // crosser_001:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire  [108:0] crosser_001_out_data;                                                               // crosser_001:out_data -> cmd_mux_005:sink1_data
	wire   [31:0] crosser_001_out_channel;                                                            // crosser_001:out_channel -> cmd_mux_005:sink1_channel
	wire          crosser_001_out_ready;                                                              // cmd_mux_005:sink1_ready -> crosser_001:out_ready
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> crosser_002:in_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> crosser_002:in_valid
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> crosser_002:in_startofpacket
	wire  [108:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> crosser_002:in_data
	wire   [31:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_005_src0_ready;                                                           // crosser_002:in_ready -> rsp_demux_005:src0_ready
	wire          crosser_002_out_endofpacket;                                                        // crosser_002:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          crosser_002_out_valid;                                                              // crosser_002:out_valid -> rsp_mux:sink5_valid
	wire          crosser_002_out_startofpacket;                                                      // crosser_002:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire  [108:0] crosser_002_out_data;                                                               // crosser_002:out_data -> rsp_mux:sink5_data
	wire   [31:0] crosser_002_out_channel;                                                            // crosser_002:out_channel -> rsp_mux:sink5_channel
	wire          crosser_002_out_ready;                                                              // rsp_mux:sink5_ready -> crosser_002:out_ready
	wire          rsp_demux_005_src1_endofpacket;                                                     // rsp_demux_005:src1_endofpacket -> crosser_003:in_endofpacket
	wire          rsp_demux_005_src1_valid;                                                           // rsp_demux_005:src1_valid -> crosser_003:in_valid
	wire          rsp_demux_005_src1_startofpacket;                                                   // rsp_demux_005:src1_startofpacket -> crosser_003:in_startofpacket
	wire  [108:0] rsp_demux_005_src1_data;                                                            // rsp_demux_005:src1_data -> crosser_003:in_data
	wire   [31:0] rsp_demux_005_src1_channel;                                                         // rsp_demux_005:src1_channel -> crosser_003:in_channel
	wire          rsp_demux_005_src1_ready;                                                           // crosser_003:in_ready -> rsp_demux_005:src1_ready
	wire          crosser_003_out_endofpacket;                                                        // crosser_003:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          crosser_003_out_valid;                                                              // crosser_003:out_valid -> rsp_mux_001:sink4_valid
	wire          crosser_003_out_startofpacket;                                                      // crosser_003:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire  [108:0] crosser_003_out_data;                                                               // crosser_003:out_data -> rsp_mux_001:sink4_data
	wire   [31:0] crosser_003_out_channel;                                                            // crosser_003:out_channel -> rsp_mux_001:sink4_channel
	wire          crosser_003_out_ready;                                                              // rsp_mux_001:sink4_ready -> crosser_003:out_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_qsys_0_data_master_translator (
		.clk                      (clk_0_clk_clk),                                                               //                       clk.clk
		.reset                    (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_qsys_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_qsys_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (nios2_qsys_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (nios2_qsys_0_data_master_read),                                               //                          .read
		.av_readdata              (nios2_qsys_0_data_master_readdata),                                           //                          .readdata
		.av_write                 (nios2_qsys_0_data_master_write),                                              //                          .write
		.av_writedata             (nios2_qsys_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (nios2_qsys_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                        //               (terminated)
		.av_begintransfer         (1'b0),                                                                        //               (terminated)
		.av_chipselect            (1'b0),                                                                        //               (terminated)
		.av_readdatavalid         (),                                                                            //               (terminated)
		.av_lock                  (1'b0),                                                                        //               (terminated)
		.uav_clken                (),                                                                            //               (terminated)
		.av_clken                 (1'b1),                                                                        //               (terminated)
		.uav_response             (2'b00),                                                                       //               (terminated)
		.av_response              (),                                                                            //               (terminated)
		.uav_writeresponserequest (),                                                                            //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                        //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid    ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_qsys_0_instruction_master_translator (
		.clk                      (clk_0_clk_clk),                                                                      //                       clk.clk
		.reset                    (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_qsys_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_qsys_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (nios2_qsys_0_instruction_master_read),                                               //                          .read
		.av_readdata              (nios2_qsys_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount            (1'b1),                                                                               //               (terminated)
		.av_byteenable            (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                                               //               (terminated)
		.av_readdatavalid         (),                                                                                   //               (terminated)
		.av_write                 (1'b0),                                                                               //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                  (1'b0),                                                                               //               (terminated)
		.av_debugaccess           (1'b0),                                                                               //               (terminated)
		.uav_clken                (),                                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                                               //               (terminated)
		.uav_response             (2'b00),                                                                              //               (terminated)
		.av_response              (),                                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                      (clk_0_clk_clk),                                        //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                  (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata              (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata             (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest           (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect            (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                     //              (terminated)
		.av_burstcount            (),                                                     //              (terminated)
		.av_byteenable            (),                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                 //              (terminated)
		.av_writebyteenable       (),                                                     //              (terminated)
		.av_lock                  (),                                                     //              (terminated)
		.av_clken                 (),                                                     //              (terminated)
		.uav_clken                (1'b0),                                                 //              (terminated)
		.av_debugaccess           (),                                                     //              (terminated)
		.av_outputenable          (),                                                     //              (terminated)
		.uav_response             (),                                                     //              (terminated)
		.av_response              (2'b00),                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                     //              (terminated)
		.av_writeresponserequest  (),                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                      (clk_0_clk_clk),                                     //                      clk.clk
		.reset                    (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address              (sysid_qsys_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sysid_qsys_0_control_slave_agent_m0_read),          //                         .read
		.uav_write                (sysid_qsys_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sysid_qsys_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata              (sysid_qsys_0_control_slave_readdata),               //                         .readdata
		.av_write                 (),                                                  //              (terminated)
		.av_read                  (),                                                  //              (terminated)
		.av_writedata             (),                                                  //              (terminated)
		.av_begintransfer         (),                                                  //              (terminated)
		.av_beginbursttransfer    (),                                                  //              (terminated)
		.av_burstcount            (),                                                  //              (terminated)
		.av_byteenable            (),                                                  //              (terminated)
		.av_readdatavalid         (1'b0),                                              //              (terminated)
		.av_waitrequest           (1'b0),                                              //              (terminated)
		.av_writebyteenable       (),                                                  //              (terminated)
		.av_lock                  (),                                                  //              (terminated)
		.av_chipselect            (),                                                  //              (terminated)
		.av_clken                 (),                                                  //              (terminated)
		.uav_clken                (1'b0),                                              //              (terminated)
		.av_debugaccess           (),                                                  //              (terminated)
		.av_outputenable          (),                                                  //              (terminated)
		.uav_response             (),                                                  //              (terminated)
		.av_response              (2'b00),                                             //              (terminated)
		.uav_writeresponserequest (1'b0),                                              //              (terminated)
		.uav_writeresponsevalid   (),                                                  //              (terminated)
		.av_writeresponserequest  (),                                                  //              (terminated)
		.av_writeresponsevalid    (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_qsys_0_jtag_debug_module_translator (
		.clk                      (clk_0_clk_clk),                                         //                      clk.clk
		.reset                    (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address              (nios2_qsys_0_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (nios2_qsys_0_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (nios2_qsys_0_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write                (nios2_qsys_0_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest          (nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (nios2_qsys_0_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (nios2_qsys_0_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (nios2_qsys_0_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (nios2_qsys_0_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (nios2_qsys_0_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write                 (nios2_qsys_0_jtag_debug_module_write),                  //                         .write
		.av_read                  (nios2_qsys_0_jtag_debug_module_read),                   //                         .read
		.av_readdata              (nios2_qsys_0_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata             (nios2_qsys_0_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable            (nios2_qsys_0_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest           (nios2_qsys_0_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess           (nios2_qsys_0_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer         (),                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                      //              (terminated)
		.av_burstcount            (),                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                  //              (terminated)
		.av_writebyteenable       (),                                                      //              (terminated)
		.av_lock                  (),                                                      //              (terminated)
		.av_chipselect            (),                                                      //              (terminated)
		.av_clken                 (),                                                      //              (terminated)
		.uav_clken                (1'b0),                                                  //              (terminated)
		.av_outputenable          (),                                                      //              (terminated)
		.uav_response             (),                                                      //              (terminated)
		.av_response              (2'b00),                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                      //              (terminated)
		.av_writeresponserequest  (),                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_pll_pll_slave_translator (
		.clk                      (clk_0_clk_clk),                                    //                      clk.clk
		.reset                    (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sdram_pll_pll_slave_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_pll_pll_slave_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (sdram_pll_pll_slave_agent_m0_read),                //                         .read
		.uav_write                (sdram_pll_pll_slave_agent_m0_write),               //                         .write
		.uav_waitrequest          (sdram_pll_pll_slave_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (sdram_pll_pll_slave_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (sdram_pll_pll_slave_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (sdram_pll_pll_slave_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (sdram_pll_pll_slave_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (sdram_pll_pll_slave_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (sdram_pll_pll_slave_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (sdram_pll_pll_slave_address),                      //      avalon_anti_slave_0.address
		.av_write                 (sdram_pll_pll_slave_write),                        //                         .write
		.av_read                  (sdram_pll_pll_slave_read),                         //                         .read
		.av_readdata              (sdram_pll_pll_slave_readdata),                     //                         .readdata
		.av_writedata             (sdram_pll_pll_slave_writedata),                    //                         .writedata
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_byteenable            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.av_chipselect            (),                                                 //              (terminated)
		.av_clken                 (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                      (clk_0_clk_clk),                                    //                      clk.clk
		.reset                    (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (onchip_memory2_0_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (onchip_memory2_0_s1_agent_m0_read),                //                         .read
		.uav_write                (onchip_memory2_0_s1_agent_m0_write),               //                         .write
		.uav_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (onchip_memory2_0_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (onchip_memory2_0_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (onchip_memory2_0_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (onchip_memory2_0_s1_address),                      //      avalon_anti_slave_0.address
		.av_write                 (onchip_memory2_0_s1_write),                        //                         .write
		.av_readdata              (onchip_memory2_0_s1_readdata),                     //                         .readdata
		.av_writedata             (onchip_memory2_0_s1_writedata),                    //                         .writedata
		.av_byteenable            (onchip_memory2_0_s1_byteenable),                   //                         .byteenable
		.av_chipselect            (onchip_memory2_0_s1_chipselect),                   //                         .chipselect
		.av_clken                 (onchip_memory2_0_s1_clken),                        //                         .clken
		.av_read                  (),                                                 //              (terminated)
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                      (sdram_pll_c0_clk),                        //                      clk.clk
		.reset                    (sdram_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sdram_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (sdram_s1_agent_m0_read),                  //                         .read
		.uav_write                (sdram_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest          (sdram_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (sdram_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (sdram_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (sdram_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (sdram_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (sdram_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (sdram_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (sdram_s1_address),                        //      avalon_anti_slave_0.address
		.av_write                 (sdram_s1_write),                          //                         .write
		.av_read                  (sdram_s1_read),                           //                         .read
		.av_readdata              (sdram_s1_readdata),                       //                         .readdata
		.av_writedata             (sdram_s1_writedata),                      //                         .writedata
		.av_byteenable            (sdram_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid         (sdram_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest           (sdram_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect            (sdram_s1_chipselect),                     //                         .chipselect
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) keycode_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (keycode_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (keycode_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (keycode_s1_agent_m0_read),                      //                         .read
		.uav_write                (keycode_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest          (keycode_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (keycode_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (keycode_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (keycode_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (keycode_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (keycode_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (keycode_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (keycode_s1_address),                            //      avalon_anti_slave_0.address
		.av_write                 (keycode_s1_write),                              //                         .write
		.av_readdata              (keycode_s1_readdata),                           //                         .readdata
		.av_writedata             (keycode_s1_writedata),                          //                         .writedata
		.av_chipselect            (keycode_s1_chipselect),                         //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_cs_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (otg_hpi_cs_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (otg_hpi_cs_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (otg_hpi_cs_s1_agent_m0_read),                   //                         .read
		.uav_write                (otg_hpi_cs_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest          (otg_hpi_cs_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (otg_hpi_cs_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (otg_hpi_cs_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (otg_hpi_cs_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (otg_hpi_cs_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (otg_hpi_cs_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (otg_hpi_cs_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (otg_hpi_cs_s1_address),                         //      avalon_anti_slave_0.address
		.av_write                 (otg_hpi_cs_s1_write),                           //                         .write
		.av_readdata              (otg_hpi_cs_s1_readdata),                        //                         .readdata
		.av_writedata             (otg_hpi_cs_s1_writedata),                       //                         .writedata
		.av_chipselect            (otg_hpi_cs_s1_chipselect),                      //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_address_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (otg_hpi_address_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount           (otg_hpi_address_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read                 (otg_hpi_address_s1_agent_m0_read),              //                         .read
		.uav_write                (otg_hpi_address_s1_agent_m0_write),             //                         .write
		.uav_waitrequest          (otg_hpi_address_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid        (otg_hpi_address_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable           (otg_hpi_address_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata             (otg_hpi_address_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata            (otg_hpi_address_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock                 (otg_hpi_address_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess          (otg_hpi_address_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address               (otg_hpi_address_s1_address),                    //      avalon_anti_slave_0.address
		.av_write                 (otg_hpi_address_s1_write),                      //                         .write
		.av_readdata              (otg_hpi_address_s1_readdata),                   //                         .readdata
		.av_writedata             (otg_hpi_address_s1_writedata),                  //                         .writedata
		.av_chipselect            (otg_hpi_address_s1_chipselect),                 //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_data_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (otg_hpi_data_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (otg_hpi_data_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (otg_hpi_data_s1_agent_m0_read),                 //                         .read
		.uav_write                (otg_hpi_data_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (otg_hpi_data_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (otg_hpi_data_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (otg_hpi_data_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (otg_hpi_data_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (otg_hpi_data_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (otg_hpi_data_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (otg_hpi_data_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (otg_hpi_data_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (otg_hpi_data_s1_write),                         //                         .write
		.av_readdata              (otg_hpi_data_s1_readdata),                      //                         .readdata
		.av_writedata             (otg_hpi_data_s1_writedata),                     //                         .writedata
		.av_chipselect            (otg_hpi_data_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_r_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (otg_hpi_r_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (otg_hpi_r_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (otg_hpi_r_s1_agent_m0_read),                    //                         .read
		.uav_write                (otg_hpi_r_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest          (otg_hpi_r_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (otg_hpi_r_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (otg_hpi_r_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (otg_hpi_r_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (otg_hpi_r_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (otg_hpi_r_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (otg_hpi_r_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (otg_hpi_r_s1_address),                          //      avalon_anti_slave_0.address
		.av_write                 (otg_hpi_r_s1_write),                            //                         .write
		.av_readdata              (otg_hpi_r_s1_readdata),                         //                         .readdata
		.av_writedata             (otg_hpi_r_s1_writedata),                        //                         .writedata
		.av_chipselect            (otg_hpi_r_s1_chipselect),                       //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_w_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (otg_hpi_w_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (otg_hpi_w_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (otg_hpi_w_s1_agent_m0_read),                    //                         .read
		.uav_write                (otg_hpi_w_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest          (otg_hpi_w_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (otg_hpi_w_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (otg_hpi_w_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (otg_hpi_w_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (otg_hpi_w_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (otg_hpi_w_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (otg_hpi_w_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (otg_hpi_w_s1_address),                          //      avalon_anti_slave_0.address
		.av_write                 (otg_hpi_w_s1_write),                            //                         .write
		.av_readdata              (otg_hpi_w_s1_readdata),                         //                         .readdata
		.av_writedata             (otg_hpi_w_s1_writedata),                        //                         .writedata
		.av_chipselect            (otg_hpi_w_s1_chipselect),                       //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) oneball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (oneball_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (oneball_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (oneball_s1_agent_m0_read),                      //                         .read
		.uav_write                (oneball_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest          (oneball_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (oneball_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (oneball_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (oneball_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (oneball_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (oneball_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (oneball_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (OneBall_s1_address),                            //      avalon_anti_slave_0.address
		.av_write                 (OneBall_s1_write),                              //                         .write
		.av_readdata              (OneBall_s1_readdata),                           //                         .readdata
		.av_writedata             (OneBall_s1_writedata),                          //                         .writedata
		.av_chipselect            (OneBall_s1_chipselect),                         //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) twoball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (twoball_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (twoball_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (twoball_s1_agent_m0_read),                      //                         .read
		.uav_write                (twoball_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest          (twoball_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (twoball_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (twoball_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (twoball_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (twoball_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (twoball_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (twoball_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (TwoBall_s1_address),                            //      avalon_anti_slave_0.address
		.av_write                 (TwoBall_s1_write),                              //                         .write
		.av_readdata              (TwoBall_s1_readdata),                           //                         .readdata
		.av_writedata             (TwoBall_s1_writedata),                          //                         .writedata
		.av_chipselect            (TwoBall_s1_chipselect),                         //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) threeball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (threeball_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (threeball_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (threeball_s1_agent_m0_read),                    //                         .read
		.uav_write                (threeball_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest          (threeball_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (threeball_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (threeball_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (threeball_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (threeball_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (threeball_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (threeball_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (ThreeBall_s1_address),                          //      avalon_anti_slave_0.address
		.av_write                 (ThreeBall_s1_write),                            //                         .write
		.av_readdata              (ThreeBall_s1_readdata),                         //                         .readdata
		.av_writedata             (ThreeBall_s1_writedata),                        //                         .writedata
		.av_chipselect            (ThreeBall_s1_chipselect),                       //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fourball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (fourball_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount           (fourball_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read                 (fourball_s1_agent_m0_read),                     //                         .read
		.uav_write                (fourball_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest          (fourball_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid        (fourball_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable           (fourball_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata             (fourball_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata            (fourball_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock                 (fourball_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess          (fourball_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address               (FourBall_s1_address),                           //      avalon_anti_slave_0.address
		.av_write                 (FourBall_s1_write),                             //                         .write
		.av_readdata              (FourBall_s1_readdata),                          //                         .readdata
		.av_writedata             (FourBall_s1_writedata),                         //                         .writedata
		.av_chipselect            (FourBall_s1_chipselect),                        //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fiveball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (fiveball_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount           (fiveball_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read                 (fiveball_s1_agent_m0_read),                     //                         .read
		.uav_write                (fiveball_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest          (fiveball_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid        (fiveball_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable           (fiveball_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata             (fiveball_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata            (fiveball_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock                 (fiveball_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess          (fiveball_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address               (FiveBall_s1_address),                           //      avalon_anti_slave_0.address
		.av_write                 (FiveBall_s1_write),                             //                         .write
		.av_readdata              (FiveBall_s1_readdata),                          //                         .readdata
		.av_writedata             (FiveBall_s1_writedata),                         //                         .writedata
		.av_chipselect            (FiveBall_s1_chipselect),                        //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sixball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sixball_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (sixball_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (sixball_s1_agent_m0_read),                      //                         .read
		.uav_write                (sixball_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest          (sixball_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (sixball_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (sixball_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (sixball_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (sixball_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (sixball_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (sixball_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (SixBall_s1_address),                            //      avalon_anti_slave_0.address
		.av_write                 (SixBall_s1_write),                              //                         .write
		.av_readdata              (SixBall_s1_readdata),                           //                         .readdata
		.av_writedata             (SixBall_s1_writedata),                          //                         .writedata
		.av_chipselect            (SixBall_s1_chipselect),                         //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sevenball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sevenball_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (sevenball_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (sevenball_s1_agent_m0_read),                    //                         .read
		.uav_write                (sevenball_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest          (sevenball_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (sevenball_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (sevenball_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (sevenball_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (sevenball_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (sevenball_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (sevenball_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (SevenBall_s1_address),                          //      avalon_anti_slave_0.address
		.av_write                 (SevenBall_s1_write),                            //                         .write
		.av_readdata              (SevenBall_s1_readdata),                         //                         .readdata
		.av_writedata             (SevenBall_s1_writedata),                        //                         .writedata
		.av_chipselect            (SevenBall_s1_chipselect),                       //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eightball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (eightball_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (eightball_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (eightball_s1_agent_m0_read),                    //                         .read
		.uav_write                (eightball_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest          (eightball_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (eightball_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (eightball_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (eightball_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (eightball_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (eightball_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (eightball_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (EightBall_s1_address),                          //      avalon_anti_slave_0.address
		.av_write                 (EightBall_s1_write),                            //                         .write
		.av_readdata              (EightBall_s1_readdata),                         //                         .readdata
		.av_writedata             (EightBall_s1_writedata),                        //                         .writedata
		.av_chipselect            (EightBall_s1_chipselect),                       //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nineball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (nineball_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount           (nineball_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read                 (nineball_s1_agent_m0_read),                     //                         .read
		.uav_write                (nineball_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest          (nineball_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid        (nineball_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable           (nineball_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata             (nineball_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata            (nineball_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock                 (nineball_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess          (nineball_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address               (NineBall_s1_address),                           //      avalon_anti_slave_0.address
		.av_write                 (NineBall_s1_write),                             //                         .write
		.av_readdata              (NineBall_s1_readdata),                          //                         .readdata
		.av_writedata             (NineBall_s1_writedata),                         //                         .writedata
		.av_chipselect            (NineBall_s1_chipselect),                        //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tenball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (tenball_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (tenball_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (tenball_s1_agent_m0_read),                      //                         .read
		.uav_write                (tenball_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest          (tenball_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (tenball_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (tenball_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (tenball_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (tenball_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (tenball_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (tenball_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (TenBall_s1_address),                            //      avalon_anti_slave_0.address
		.av_write                 (TenBall_s1_write),                              //                         .write
		.av_readdata              (TenBall_s1_readdata),                           //                         .readdata
		.av_writedata             (TenBall_s1_writedata),                          //                         .writedata
		.av_chipselect            (TenBall_s1_chipselect),                         //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) elevenball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (elevenball_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (elevenball_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (elevenball_s1_agent_m0_read),                   //                         .read
		.uav_write                (elevenball_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest          (elevenball_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (elevenball_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (elevenball_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (elevenball_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (elevenball_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (elevenball_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (elevenball_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (ElevenBall_s1_address),                         //      avalon_anti_slave_0.address
		.av_write                 (ElevenBall_s1_write),                           //                         .write
		.av_readdata              (ElevenBall_s1_readdata),                        //                         .readdata
		.av_writedata             (ElevenBall_s1_writedata),                       //                         .writedata
		.av_chipselect            (ElevenBall_s1_chipselect),                      //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) twelveball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (twelveball_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (twelveball_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (twelveball_s1_agent_m0_read),                   //                         .read
		.uav_write                (twelveball_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest          (twelveball_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (twelveball_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (twelveball_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (twelveball_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (twelveball_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (twelveball_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (twelveball_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (TwelveBall_s1_address),                         //      avalon_anti_slave_0.address
		.av_write                 (TwelveBall_s1_write),                           //                         .write
		.av_readdata              (TwelveBall_s1_readdata),                        //                         .readdata
		.av_writedata             (TwelveBall_s1_writedata),                       //                         .writedata
		.av_chipselect            (TwelveBall_s1_chipselect),                      //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) thirteenball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (thirteenball_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (thirteenball_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (thirteenball_s1_agent_m0_read),                 //                         .read
		.uav_write                (thirteenball_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (thirteenball_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (thirteenball_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (thirteenball_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (thirteenball_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (thirteenball_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (thirteenball_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (thirteenball_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (ThirteenBall_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (ThirteenBall_s1_write),                         //                         .write
		.av_readdata              (ThirteenBall_s1_readdata),                      //                         .readdata
		.av_writedata             (ThirteenBall_s1_writedata),                     //                         .writedata
		.av_chipselect            (ThirteenBall_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fourteenball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (fourteenball_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (fourteenball_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (fourteenball_s1_agent_m0_read),                 //                         .read
		.uav_write                (fourteenball_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (fourteenball_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (fourteenball_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (fourteenball_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (fourteenball_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (fourteenball_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (fourteenball_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (fourteenball_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (FourteenBall_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (FourteenBall_s1_write),                         //                         .write
		.av_readdata              (FourteenBall_s1_readdata),                      //                         .readdata
		.av_writedata             (FourteenBall_s1_writedata),                     //                         .writedata
		.av_chipselect            (FourteenBall_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifteenball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (fifteenball_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (fifteenball_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (fifteenball_s1_agent_m0_read),                  //                         .read
		.uav_write                (fifteenball_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest          (fifteenball_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (fifteenball_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (fifteenball_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (fifteenball_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (fifteenball_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (fifteenball_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (fifteenball_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (FifteenBall_s1_address),                        //      avalon_anti_slave_0.address
		.av_write                 (FifteenBall_s1_write),                          //                         .write
		.av_readdata              (FifteenBall_s1_readdata),                       //                         .readdata
		.av_writedata             (FifteenBall_s1_writedata),                      //                         .writedata
		.av_chipselect            (FifteenBall_s1_chipselect),                     //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cueball_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (cueball_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (cueball_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (cueball_s1_agent_m0_read),                      //                         .read
		.uav_write                (cueball_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest          (cueball_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (cueball_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (cueball_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (cueball_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (cueball_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (cueball_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (cueball_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (cueBall_s1_address),                            //      avalon_anti_slave_0.address
		.av_write                 (cueBall_s1_write),                              //                         .write
		.av_readdata              (cueBall_s1_readdata),                           //                         .readdata
		.av_writedata             (cueBall_s1_writedata),                          //                         .writedata
		.av_chipselect            (cueBall_s1_chipselect),                         //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) poolcue_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (poolcue_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (poolcue_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (poolcue_s1_agent_m0_read),                      //                         .read
		.uav_write                (poolcue_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest          (poolcue_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (poolcue_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (poolcue_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (poolcue_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (poolcue_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (poolcue_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (poolcue_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (poolcue_s1_address),                            //      avalon_anti_slave_0.address
		.av_write                 (poolcue_s1_write),                              //                         .write
		.av_readdata              (poolcue_s1_readdata),                           //                         .readdata
		.av_writedata             (poolcue_s1_writedata),                          //                         .writedata
		.av_chipselect            (poolcue_s1_chipselect),                         //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) reset_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (reset_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount           (reset_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read                 (reset_s1_agent_m0_read),                        //                         .read
		.uav_write                (reset_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest          (reset_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid        (reset_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable           (reset_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata             (reset_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata            (reset_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock                 (reset_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess          (reset_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address               (reset_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata              (reset_s1_readdata),                             //                         .readdata
		.av_write                 (),                                              //              (terminated)
		.av_read                  (),                                              //              (terminated)
		.av_writedata             (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_chipselect            (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hw_sig_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (hw_sig_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount           (hw_sig_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read                 (hw_sig_s1_agent_m0_read),                       //                         .read
		.uav_write                (hw_sig_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest          (hw_sig_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid        (hw_sig_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable           (hw_sig_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata             (hw_sig_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata            (hw_sig_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock                 (hw_sig_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess          (hw_sig_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address               (hw_sig_s1_address),                             //      avalon_anti_slave_0.address
		.av_readdata              (hw_sig_s1_readdata),                            //                         .readdata
		.av_write                 (),                                              //              (terminated)
		.av_read                  (),                                              //              (terminated)
		.av_writedata             (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_chipselect            (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) stick_direction_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (stick_direction_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount           (stick_direction_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read                 (stick_direction_s1_agent_m0_read),              //                         .read
		.uav_write                (stick_direction_s1_agent_m0_write),             //                         .write
		.uav_waitrequest          (stick_direction_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid        (stick_direction_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable           (stick_direction_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata             (stick_direction_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata            (stick_direction_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock                 (stick_direction_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess          (stick_direction_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address               (stick_direction_s1_address),                    //      avalon_anti_slave_0.address
		.av_write                 (stick_direction_s1_write),                      //                         .write
		.av_readdata              (stick_direction_s1_readdata),                   //                         .readdata
		.av_writedata             (stick_direction_s1_writedata),                  //                         .writedata
		.av_chipselect            (stick_direction_s1_chipselect),                 //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BEGIN_BURST           (84),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (96),
		.PKT_THREAD_ID_L           (96),
		.PKT_CACHE_H               (103),
		.PKT_CACHE_L               (100),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_data_master_agent (
		.clk                     (clk_0_clk_clk),                                                               //       clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (nios2_qsys_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (nios2_qsys_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (nios2_qsys_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (nios2_qsys_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (nios2_qsys_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data                 (rsp_mux_src_data),                                                            //          .data
		.rp_channel              (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket        (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket          (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready                (rsp_mux_src_ready),                                                           //          .ready
		.av_response             (),                                                                            // (terminated)
		.av_writeresponserequest (1'b0),                                                                        // (terminated)
		.av_writeresponsevalid   ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BEGIN_BURST           (84),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (96),
		.PKT_THREAD_ID_L           (96),
		.PKT_CACHE_H               (103),
		.PKT_CACHE_L               (100),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_instruction_master_agent (
		.clk                     (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (nios2_qsys_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (nios2_qsys_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (nios2_qsys_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (nios2_qsys_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (nios2_qsys_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_001_src_valid),                                                              //        rp.valid
		.rp_data                 (rsp_mux_001_src_data),                                                               //          .data
		.rp_channel              (rsp_mux_001_src_channel),                                                            //          .channel
		.rp_startofpacket        (rsp_mux_001_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket          (rsp_mux_001_src_endofpacket),                                                        //          .endofpacket
		.rp_ready                (rsp_mux_001_src_ready),                                                              //          .ready
		.av_response             (),                                                                                   // (terminated)
		.av_writeresponserequest (1'b0),                                                                               // (terminated)
		.av_writeresponsevalid   ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponserequest (),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                     //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponserequest (),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_jtag_debug_module_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_qsys_0_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_qsys_0_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_qsys_0_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_qsys_0_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_qsys_0_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_qsys_0_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_qsys_0_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_qsys_0_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_qsys_0_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_qsys_0_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_qsys_0_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                         //                .channel
		.rf_sink_ready           (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_qsys_0_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_qsys_0_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_qsys_0_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_qsys_0_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_qsys_0_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_qsys_0_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_qsys_0_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_pll_pll_slave_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (sdram_pll_pll_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_pll_pll_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_pll_pll_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_pll_pll_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_pll_pll_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_pll_pll_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_pll_pll_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_pll_pll_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_pll_pll_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_pll_pll_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_pll_pll_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_pll_pll_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_pll_pll_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_pll_pll_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_pll_pll_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_pll_pll_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                              //                .channel
		.rf_sink_ready           (sdram_pll_pll_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_pll_pll_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_pll_pll_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_pll_pll_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_pll_pll_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_pll_pll_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_pll_pll_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_pll_pll_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_pll_pll_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_pll_pll_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdram_pll_pll_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_pll_pll_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sdram_pll_pll_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sdram_pll_pll_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_pll_pll_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_pll_pll_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_pll_pll_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (sdram_pll_pll_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_pll_pll_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_pll_pll_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_pll_pll_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_pll_pll_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_pll_pll_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_pll_pll_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_pll_pll_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_pll_pll_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_pll_pll_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_s1_agent (
		.clk                     (sdram_pll_c0_clk),                          //             clk.clk
		.reset                   (sdram_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_005_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                   //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdram_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sdram_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponserequest (),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (sdram_pll_c0_clk),                          //       clk.clk
		.reset             (sdram_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (sdram_pll_c0_clk),                        //       clk.clk
		.reset             (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) keycode_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (keycode_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (keycode_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (keycode_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (keycode_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (keycode_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (keycode_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (keycode_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (keycode_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (keycode_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (keycode_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (keycode_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (keycode_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (keycode_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (keycode_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (keycode_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (keycode_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_006_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                       //                .channel
		.rf_sink_ready           (keycode_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (keycode_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (keycode_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (keycode_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (keycode_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (keycode_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (keycode_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (keycode_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (keycode_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (keycode_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (keycode_s1_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (keycode_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (keycode_s1_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (keycode_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (keycode_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (keycode_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keycode_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (keycode_s1_agent_rf_source_data),               //        in.data
		.in_valid          (keycode_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (keycode_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (keycode_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (keycode_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (keycode_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (keycode_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (keycode_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (keycode_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (keycode_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) otg_hpi_cs_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (otg_hpi_cs_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (otg_hpi_cs_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (otg_hpi_cs_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (otg_hpi_cs_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (otg_hpi_cs_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (otg_hpi_cs_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (otg_hpi_cs_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (otg_hpi_cs_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (otg_hpi_cs_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (otg_hpi_cs_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (otg_hpi_cs_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (otg_hpi_cs_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (otg_hpi_cs_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (otg_hpi_cs_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (otg_hpi_cs_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (otg_hpi_cs_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (otg_hpi_cs_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_cs_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (otg_hpi_cs_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_cs_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (otg_hpi_cs_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (otg_hpi_cs_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (otg_hpi_cs_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (otg_hpi_cs_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_cs_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (otg_hpi_cs_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (otg_hpi_cs_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (otg_hpi_cs_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (otg_hpi_cs_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (otg_hpi_cs_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_cs_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (otg_hpi_cs_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_cs_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (otg_hpi_cs_s1_agent_rf_source_data),             //        in.data
		.in_valid          (otg_hpi_cs_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (otg_hpi_cs_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (otg_hpi_cs_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (otg_hpi_cs_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (otg_hpi_cs_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (otg_hpi_cs_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (otg_hpi_cs_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (otg_hpi_cs_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (otg_hpi_cs_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) otg_hpi_address_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (otg_hpi_address_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (otg_hpi_address_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (otg_hpi_address_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (otg_hpi_address_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (otg_hpi_address_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (otg_hpi_address_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (otg_hpi_address_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (otg_hpi_address_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (otg_hpi_address_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (otg_hpi_address_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (otg_hpi_address_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (otg_hpi_address_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (otg_hpi_address_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (otg_hpi_address_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (otg_hpi_address_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (otg_hpi_address_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                             //                .channel
		.rf_sink_ready           (otg_hpi_address_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_address_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (otg_hpi_address_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_address_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (otg_hpi_address_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (otg_hpi_address_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (otg_hpi_address_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (otg_hpi_address_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_address_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (otg_hpi_address_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (otg_hpi_address_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (otg_hpi_address_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (otg_hpi_address_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (otg_hpi_address_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_address_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (otg_hpi_address_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_address_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (otg_hpi_address_s1_agent_rf_source_data),             //        in.data
		.in_valid          (otg_hpi_address_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (otg_hpi_address_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (otg_hpi_address_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (otg_hpi_address_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (otg_hpi_address_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (otg_hpi_address_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (otg_hpi_address_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (otg_hpi_address_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (otg_hpi_address_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) otg_hpi_data_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (otg_hpi_data_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (otg_hpi_data_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (otg_hpi_data_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (otg_hpi_data_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (otg_hpi_data_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (otg_hpi_data_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (otg_hpi_data_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (otg_hpi_data_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (otg_hpi_data_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (otg_hpi_data_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (otg_hpi_data_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (otg_hpi_data_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (otg_hpi_data_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (otg_hpi_data_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (otg_hpi_data_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (otg_hpi_data_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_009_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                          //                .channel
		.rf_sink_ready           (otg_hpi_data_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_data_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (otg_hpi_data_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_data_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (otg_hpi_data_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (otg_hpi_data_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (otg_hpi_data_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (otg_hpi_data_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_data_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (otg_hpi_data_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (otg_hpi_data_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (otg_hpi_data_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (otg_hpi_data_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (otg_hpi_data_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_data_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (otg_hpi_data_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_data_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (otg_hpi_data_s1_agent_rf_source_data),             //        in.data
		.in_valid          (otg_hpi_data_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (otg_hpi_data_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (otg_hpi_data_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (otg_hpi_data_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (otg_hpi_data_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (otg_hpi_data_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (otg_hpi_data_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (otg_hpi_data_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (otg_hpi_data_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) otg_hpi_r_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_r_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (otg_hpi_r_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (otg_hpi_r_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (otg_hpi_r_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (otg_hpi_r_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (otg_hpi_r_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (otg_hpi_r_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (otg_hpi_r_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (otg_hpi_r_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (otg_hpi_r_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (otg_hpi_r_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (otg_hpi_r_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (otg_hpi_r_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (otg_hpi_r_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (otg_hpi_r_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (otg_hpi_r_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_010_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                       //                .channel
		.rf_sink_ready           (otg_hpi_r_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_r_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (otg_hpi_r_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_r_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (otg_hpi_r_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (otg_hpi_r_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (otg_hpi_r_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (otg_hpi_r_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_r_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (otg_hpi_r_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (otg_hpi_r_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (otg_hpi_r_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (otg_hpi_r_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (otg_hpi_r_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_r_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (otg_hpi_r_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_r_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_r_s1_agent_rf_source_data),             //        in.data
		.in_valid          (otg_hpi_r_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (otg_hpi_r_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (otg_hpi_r_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (otg_hpi_r_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (otg_hpi_r_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (otg_hpi_r_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (otg_hpi_r_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (otg_hpi_r_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (otg_hpi_r_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) otg_hpi_w_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_w_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (otg_hpi_w_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (otg_hpi_w_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (otg_hpi_w_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (otg_hpi_w_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (otg_hpi_w_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (otg_hpi_w_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (otg_hpi_w_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (otg_hpi_w_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (otg_hpi_w_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (otg_hpi_w_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (otg_hpi_w_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (otg_hpi_w_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (otg_hpi_w_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (otg_hpi_w_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (otg_hpi_w_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_011_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                       //                .channel
		.rf_sink_ready           (otg_hpi_w_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_w_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (otg_hpi_w_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_w_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (otg_hpi_w_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (otg_hpi_w_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (otg_hpi_w_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (otg_hpi_w_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_w_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (otg_hpi_w_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (otg_hpi_w_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (otg_hpi_w_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (otg_hpi_w_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (otg_hpi_w_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_w_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (otg_hpi_w_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_w_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_w_s1_agent_rf_source_data),             //        in.data
		.in_valid          (otg_hpi_w_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (otg_hpi_w_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (otg_hpi_w_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (otg_hpi_w_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (otg_hpi_w_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (otg_hpi_w_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (otg_hpi_w_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (otg_hpi_w_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (otg_hpi_w_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) oneball_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (oneball_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (oneball_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (oneball_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (oneball_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (oneball_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (oneball_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (oneball_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (oneball_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (oneball_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (oneball_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (oneball_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (oneball_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (oneball_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (oneball_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (oneball_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (oneball_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_012_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                       //                .channel
		.rf_sink_ready           (oneball_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (oneball_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (oneball_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (oneball_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (oneball_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (oneball_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (oneball_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (oneball_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (oneball_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (oneball_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (oneball_s1_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (oneball_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (oneball_s1_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (oneball_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (oneball_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (oneball_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) oneball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (oneball_s1_agent_rf_source_data),               //        in.data
		.in_valid          (oneball_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (oneball_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (oneball_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (oneball_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (oneball_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (oneball_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (oneball_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (oneball_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (oneball_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) twoball_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (twoball_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (twoball_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (twoball_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (twoball_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (twoball_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (twoball_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (twoball_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (twoball_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (twoball_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (twoball_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (twoball_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (twoball_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (twoball_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (twoball_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (twoball_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (twoball_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_013_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                       //                .channel
		.rf_sink_ready           (twoball_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (twoball_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (twoball_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (twoball_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (twoball_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (twoball_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (twoball_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (twoball_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (twoball_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (twoball_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (twoball_s1_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (twoball_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (twoball_s1_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (twoball_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (twoball_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (twoball_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) twoball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (twoball_s1_agent_rf_source_data),               //        in.data
		.in_valid          (twoball_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (twoball_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (twoball_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (twoball_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (twoball_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (twoball_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (twoball_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (twoball_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (twoball_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) threeball_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (threeball_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (threeball_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (threeball_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (threeball_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (threeball_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (threeball_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (threeball_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (threeball_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (threeball_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (threeball_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (threeball_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (threeball_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (threeball_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (threeball_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (threeball_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (threeball_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_014_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                       //                .channel
		.rf_sink_ready           (threeball_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (threeball_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (threeball_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (threeball_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (threeball_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (threeball_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (threeball_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (threeball_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (threeball_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (threeball_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (threeball_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (threeball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (threeball_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (threeball_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (threeball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (threeball_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) threeball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (threeball_s1_agent_rf_source_data),             //        in.data
		.in_valid          (threeball_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (threeball_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (threeball_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (threeball_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (threeball_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (threeball_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (threeball_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (threeball_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (threeball_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fourball_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (fourball_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (fourball_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (fourball_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (fourball_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (fourball_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (fourball_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (fourball_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (fourball_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (fourball_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (fourball_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (fourball_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (fourball_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (fourball_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (fourball_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (fourball_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (fourball_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_015_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                       //                .channel
		.rf_sink_ready           (fourball_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (fourball_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (fourball_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (fourball_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (fourball_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (fourball_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (fourball_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (fourball_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (fourball_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (fourball_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (fourball_s1_agent_rdata_fifo_src_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (fourball_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_sink_data    (fourball_s1_agent_rdata_fifo_src_data),         //                .data
		.rdata_fifo_src_ready    (fourball_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fourball_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (fourball_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fourball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fourball_s1_agent_rf_source_data),              //        in.data
		.in_valid          (fourball_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (fourball_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (fourball_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (fourball_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (fourball_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (fourball_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (fourball_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (fourball_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (fourball_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fiveball_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (fiveball_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (fiveball_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (fiveball_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (fiveball_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (fiveball_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (fiveball_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (fiveball_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (fiveball_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (fiveball_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (fiveball_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (fiveball_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (fiveball_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (fiveball_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (fiveball_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (fiveball_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (fiveball_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_016_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                       //                .channel
		.rf_sink_ready           (fiveball_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (fiveball_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (fiveball_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (fiveball_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (fiveball_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (fiveball_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (fiveball_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (fiveball_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (fiveball_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (fiveball_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (fiveball_s1_agent_rdata_fifo_src_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (fiveball_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_sink_data    (fiveball_s1_agent_rdata_fifo_src_data),         //                .data
		.rdata_fifo_src_ready    (fiveball_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fiveball_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (fiveball_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fiveball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fiveball_s1_agent_rf_source_data),              //        in.data
		.in_valid          (fiveball_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (fiveball_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (fiveball_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (fiveball_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (fiveball_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (fiveball_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (fiveball_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (fiveball_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (fiveball_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sixball_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sixball_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (sixball_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (sixball_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (sixball_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (sixball_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (sixball_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (sixball_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (sixball_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (sixball_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (sixball_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (sixball_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (sixball_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (sixball_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (sixball_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (sixball_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (sixball_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_017_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                       //                .channel
		.rf_sink_ready           (sixball_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (sixball_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (sixball_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (sixball_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (sixball_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (sixball_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (sixball_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (sixball_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (sixball_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (sixball_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (sixball_s1_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sixball_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (sixball_s1_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (sixball_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sixball_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (sixball_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sixball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sixball_s1_agent_rf_source_data),               //        in.data
		.in_valid          (sixball_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (sixball_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sixball_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sixball_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sixball_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sixball_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sixball_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sixball_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sixball_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sevenball_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sevenball_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sevenball_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sevenball_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sevenball_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sevenball_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sevenball_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sevenball_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sevenball_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sevenball_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sevenball_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sevenball_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sevenball_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sevenball_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sevenball_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sevenball_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sevenball_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_018_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                       //                .channel
		.rf_sink_ready           (sevenball_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sevenball_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sevenball_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sevenball_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sevenball_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sevenball_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sevenball_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sevenball_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sevenball_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sevenball_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sevenball_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sevenball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sevenball_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sevenball_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sevenball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sevenball_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sevenball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sevenball_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sevenball_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sevenball_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sevenball_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sevenball_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sevenball_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sevenball_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sevenball_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sevenball_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sevenball_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) eightball_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (eightball_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (eightball_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (eightball_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (eightball_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (eightball_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (eightball_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (eightball_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (eightball_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (eightball_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (eightball_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (eightball_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (eightball_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (eightball_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (eightball_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (eightball_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (eightball_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_019_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                       //                .channel
		.rf_sink_ready           (eightball_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (eightball_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (eightball_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (eightball_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (eightball_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (eightball_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (eightball_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (eightball_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (eightball_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (eightball_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (eightball_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eightball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (eightball_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (eightball_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eightball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (eightball_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eightball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (eightball_s1_agent_rf_source_data),             //        in.data
		.in_valid          (eightball_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (eightball_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (eightball_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (eightball_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (eightball_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (eightball_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (eightball_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (eightball_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (eightball_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nineball_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (nineball_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (nineball_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (nineball_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (nineball_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (nineball_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (nineball_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (nineball_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (nineball_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (nineball_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (nineball_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (nineball_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (nineball_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (nineball_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (nineball_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (nineball_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (nineball_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_020_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                       //                .channel
		.rf_sink_ready           (nineball_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (nineball_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (nineball_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (nineball_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (nineball_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (nineball_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (nineball_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (nineball_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (nineball_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (nineball_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (nineball_s1_agent_rdata_fifo_src_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (nineball_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_sink_data    (nineball_s1_agent_rdata_fifo_src_data),         //                .data
		.rdata_fifo_src_ready    (nineball_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nineball_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (nineball_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nineball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nineball_s1_agent_rf_source_data),              //        in.data
		.in_valid          (nineball_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (nineball_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (nineball_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (nineball_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (nineball_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (nineball_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (nineball_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (nineball_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (nineball_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) tenball_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (tenball_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (tenball_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (tenball_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (tenball_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (tenball_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (tenball_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (tenball_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (tenball_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (tenball_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (tenball_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (tenball_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (tenball_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (tenball_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (tenball_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (tenball_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (tenball_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_021_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                       //                .channel
		.rf_sink_ready           (tenball_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (tenball_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (tenball_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (tenball_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (tenball_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (tenball_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (tenball_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (tenball_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (tenball_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (tenball_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (tenball_s1_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tenball_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (tenball_s1_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (tenball_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tenball_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (tenball_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tenball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tenball_s1_agent_rf_source_data),               //        in.data
		.in_valid          (tenball_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (tenball_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (tenball_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (tenball_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (tenball_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (tenball_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (tenball_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (tenball_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (tenball_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) elevenball_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (elevenball_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (elevenball_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (elevenball_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (elevenball_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (elevenball_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (elevenball_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (elevenball_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (elevenball_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (elevenball_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (elevenball_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (elevenball_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (elevenball_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (elevenball_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (elevenball_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (elevenball_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (elevenball_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_022_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                        //                .channel
		.rf_sink_ready           (elevenball_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (elevenball_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (elevenball_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (elevenball_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (elevenball_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (elevenball_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (elevenball_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (elevenball_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (elevenball_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (elevenball_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (elevenball_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (elevenball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (elevenball_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (elevenball_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (elevenball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (elevenball_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) elevenball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (elevenball_s1_agent_rf_source_data),             //        in.data
		.in_valid          (elevenball_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (elevenball_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (elevenball_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (elevenball_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (elevenball_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (elevenball_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (elevenball_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (elevenball_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (elevenball_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) twelveball_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (twelveball_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (twelveball_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (twelveball_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (twelveball_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (twelveball_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (twelveball_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (twelveball_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (twelveball_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (twelveball_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (twelveball_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (twelveball_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (twelveball_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (twelveball_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (twelveball_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (twelveball_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (twelveball_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_023_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                        //                .channel
		.rf_sink_ready           (twelveball_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (twelveball_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (twelveball_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (twelveball_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (twelveball_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (twelveball_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (twelveball_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (twelveball_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (twelveball_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (twelveball_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (twelveball_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (twelveball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (twelveball_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (twelveball_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (twelveball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (twelveball_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) twelveball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (twelveball_s1_agent_rf_source_data),             //        in.data
		.in_valid          (twelveball_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (twelveball_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (twelveball_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (twelveball_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (twelveball_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (twelveball_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (twelveball_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (twelveball_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (twelveball_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) thirteenball_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (thirteenball_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (thirteenball_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (thirteenball_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (thirteenball_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (thirteenball_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (thirteenball_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (thirteenball_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (thirteenball_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (thirteenball_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (thirteenball_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (thirteenball_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (thirteenball_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (thirteenball_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (thirteenball_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (thirteenball_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (thirteenball_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_024_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                          //                .channel
		.rf_sink_ready           (thirteenball_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (thirteenball_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (thirteenball_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (thirteenball_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (thirteenball_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (thirteenball_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (thirteenball_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (thirteenball_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (thirteenball_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (thirteenball_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (thirteenball_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (thirteenball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (thirteenball_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (thirteenball_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (thirteenball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (thirteenball_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) thirteenball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (thirteenball_s1_agent_rf_source_data),             //        in.data
		.in_valid          (thirteenball_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (thirteenball_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (thirteenball_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (thirteenball_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (thirteenball_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (thirteenball_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (thirteenball_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (thirteenball_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (thirteenball_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fourteenball_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (fourteenball_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fourteenball_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fourteenball_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fourteenball_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fourteenball_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (fourteenball_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fourteenball_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fourteenball_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (fourteenball_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fourteenball_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (fourteenball_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (fourteenball_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fourteenball_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (fourteenball_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (fourteenball_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (fourteenball_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_025_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                          //                .channel
		.rf_sink_ready           (fourteenball_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fourteenball_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fourteenball_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fourteenball_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fourteenball_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fourteenball_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fourteenball_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fourteenball_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fourteenball_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fourteenball_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (fourteenball_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (fourteenball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (fourteenball_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (fourteenball_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fourteenball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fourteenball_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fourteenball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (fourteenball_s1_agent_rf_source_data),             //        in.data
		.in_valid          (fourteenball_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (fourteenball_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fourteenball_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fourteenball_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fourteenball_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fourteenball_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fourteenball_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fourteenball_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fourteenball_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fifteenball_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (fifteenball_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifteenball_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifteenball_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifteenball_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifteenball_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifteenball_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifteenball_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifteenball_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifteenball_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifteenball_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (fifteenball_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifteenball_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifteenball_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (fifteenball_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (fifteenball_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifteenball_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_026_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                         //                .channel
		.rf_sink_ready           (fifteenball_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifteenball_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifteenball_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifteenball_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifteenball_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifteenball_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifteenball_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifteenball_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifteenball_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifteenball_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (fifteenball_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (fifteenball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (fifteenball_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (fifteenball_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifteenball_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifteenball_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponserequest (),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifteenball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (fifteenball_s1_agent_rf_source_data),             //        in.data
		.in_valid          (fifteenball_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (fifteenball_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifteenball_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifteenball_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifteenball_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifteenball_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifteenball_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifteenball_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifteenball_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cueball_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (cueball_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (cueball_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (cueball_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (cueball_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (cueball_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (cueball_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (cueball_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (cueball_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (cueball_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (cueball_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (cueball_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (cueball_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (cueball_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (cueball_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (cueball_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (cueball_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_027_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_027_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_027_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_027_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_027_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_027_src_channel),                       //                .channel
		.rf_sink_ready           (cueball_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (cueball_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (cueball_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (cueball_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (cueball_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (cueball_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (cueball_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (cueball_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (cueball_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (cueball_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (cueball_s1_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cueball_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (cueball_s1_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (cueball_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cueball_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (cueball_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cueball_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (cueball_s1_agent_rf_source_data),               //        in.data
		.in_valid          (cueball_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (cueball_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (cueball_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (cueball_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (cueball_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (cueball_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (cueball_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (cueball_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (cueball_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) poolcue_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (poolcue_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (poolcue_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (poolcue_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (poolcue_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (poolcue_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (poolcue_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (poolcue_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (poolcue_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (poolcue_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (poolcue_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (poolcue_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (poolcue_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (poolcue_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (poolcue_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (poolcue_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (poolcue_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_028_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_028_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_028_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_028_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_028_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_028_src_channel),                       //                .channel
		.rf_sink_ready           (poolcue_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (poolcue_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (poolcue_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (poolcue_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (poolcue_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (poolcue_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (poolcue_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (poolcue_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (poolcue_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (poolcue_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (poolcue_s1_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (poolcue_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (poolcue_s1_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (poolcue_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (poolcue_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (poolcue_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) poolcue_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (poolcue_s1_agent_rf_source_data),               //        in.data
		.in_valid          (poolcue_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (poolcue_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (poolcue_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (poolcue_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (poolcue_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (poolcue_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (poolcue_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (poolcue_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (poolcue_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) reset_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (reset_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (reset_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (reset_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (reset_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (reset_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (reset_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (reset_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (reset_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (reset_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (reset_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (reset_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (reset_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (reset_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (reset_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (reset_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (reset_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_029_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_029_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_029_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_029_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_029_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_029_src_channel),                       //                .channel
		.rf_sink_ready           (reset_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (reset_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (reset_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (reset_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (reset_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (reset_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (reset_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (reset_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (reset_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (reset_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (reset_s1_agent_rdata_fifo_src_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (reset_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_sink_data    (reset_s1_agent_rdata_fifo_src_data),            //                .data
		.rdata_fifo_src_ready    (reset_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (reset_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (reset_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reset_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (reset_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (reset_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (reset_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (reset_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (reset_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (reset_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (reset_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (reset_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (reset_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (reset_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hw_sig_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hw_sig_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (hw_sig_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (hw_sig_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (hw_sig_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (hw_sig_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (hw_sig_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (hw_sig_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (hw_sig_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (hw_sig_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (hw_sig_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (hw_sig_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (hw_sig_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (hw_sig_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (hw_sig_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (hw_sig_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (hw_sig_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_030_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_030_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_030_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_030_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_030_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_030_src_channel),                       //                .channel
		.rf_sink_ready           (hw_sig_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (hw_sig_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (hw_sig_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (hw_sig_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (hw_sig_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (hw_sig_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (hw_sig_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (hw_sig_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (hw_sig_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (hw_sig_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (hw_sig_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hw_sig_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (hw_sig_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (hw_sig_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hw_sig_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (hw_sig_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hw_sig_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hw_sig_s1_agent_rf_source_data),                //        in.data
		.in_valid          (hw_sig_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (hw_sig_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (hw_sig_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (hw_sig_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (hw_sig_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (hw_sig_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (hw_sig_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (hw_sig_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (hw_sig_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_TRANS_LOCK            (69),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) stick_direction_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (stick_direction_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (stick_direction_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (stick_direction_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (stick_direction_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (stick_direction_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (stick_direction_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (stick_direction_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (stick_direction_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (stick_direction_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (stick_direction_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (stick_direction_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (stick_direction_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (stick_direction_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (stick_direction_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (stick_direction_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (stick_direction_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_031_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_031_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_031_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_031_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_031_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_031_src_channel),                             //                .channel
		.rf_sink_ready           (stick_direction_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (stick_direction_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (stick_direction_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (stick_direction_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (stick_direction_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (stick_direction_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (stick_direction_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (stick_direction_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (stick_direction_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (stick_direction_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (stick_direction_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (stick_direction_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (stick_direction_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (stick_direction_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (stick_direction_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (stick_direction_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) stick_direction_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (stick_direction_s1_agent_rf_source_data),             //        in.data
		.in_valid          (stick_direction_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (stick_direction_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (stick_direction_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (stick_direction_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (stick_direction_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (stick_direction_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (stick_direction_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (stick_direction_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (stick_direction_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	nios_system_mm_interconnect_0_router router (
		.sink_ready         (nios2_qsys_0_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (nios2_qsys_0_data_master_agent_cp_valid),          //          .valid
		.sink_data          (nios2_qsys_0_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (nios2_qsys_0_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                 //       src.ready
		.src_valid          (router_src_valid),                                 //          .valid
		.src_data           (router_src_data),                                  //          .data
		.src_channel        (router_src_channel),                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_qsys_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (nios2_qsys_0_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                                  //       src.ready
		.src_valid          (router_004_src_valid),                                  //          .valid
		.src_data           (router_004_src_data),                                   //          .data
		.src_channel        (router_004_src_channel),                                //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                             //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (sdram_pll_pll_slave_agent_rp_ready),               //      sink.ready
		.sink_valid         (sdram_pll_pll_slave_agent_rp_valid),               //          .valid
		.sink_data          (sdram_pll_pll_slave_agent_rp_data),                //          .data
		.sink_startofpacket (sdram_pll_pll_slave_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (sdram_pll_pll_slave_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                             //       src.ready
		.src_valid          (router_005_src_valid),                             //          .valid
		.src_data           (router_005_src_data),                              //          .data
		.src_channel        (router_005_src_channel),                           //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_003 router_006 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),               //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),                //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_003 router_007 (
		.sink_ready         (sdram_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (sdram_pll_c0_clk),                        //       clk.clk
		.reset              (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                    //       src.ready
		.src_valid          (router_007_src_valid),                    //          .valid
		.src_data           (router_007_src_data),                     //          .data
		.src_channel        (router_007_src_channel),                  //          .channel
		.src_startofpacket  (router_007_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (keycode_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (keycode_s1_agent_rp_valid),                     //          .valid
		.sink_data          (keycode_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (keycode_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (keycode_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                          //       src.ready
		.src_valid          (router_008_src_valid),                          //          .valid
		.src_data           (router_008_src_data),                           //          .data
		.src_channel        (router_008_src_channel),                        //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (otg_hpi_cs_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (otg_hpi_cs_s1_agent_rp_valid),                  //          .valid
		.sink_data          (otg_hpi_cs_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (otg_hpi_cs_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (otg_hpi_cs_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                          //       src.ready
		.src_valid          (router_009_src_valid),                          //          .valid
		.src_data           (router_009_src_data),                           //          .data
		.src_channel        (router_009_src_channel),                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (otg_hpi_address_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (otg_hpi_address_s1_agent_rp_valid),             //          .valid
		.sink_data          (otg_hpi_address_s1_agent_rp_data),              //          .data
		.sink_startofpacket (otg_hpi_address_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (otg_hpi_address_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                          //       src.ready
		.src_valid          (router_010_src_valid),                          //          .valid
		.src_data           (router_010_src_data),                           //          .data
		.src_channel        (router_010_src_channel),                        //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (otg_hpi_data_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (otg_hpi_data_s1_agent_rp_valid),                //          .valid
		.sink_data          (otg_hpi_data_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (otg_hpi_data_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (otg_hpi_data_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                          //       src.ready
		.src_valid          (router_011_src_valid),                          //          .valid
		.src_data           (router_011_src_data),                           //          .data
		.src_channel        (router_011_src_channel),                        //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (otg_hpi_r_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (otg_hpi_r_s1_agent_rp_valid),                   //          .valid
		.sink_data          (otg_hpi_r_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (otg_hpi_r_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (otg_hpi_r_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                          //       src.ready
		.src_valid          (router_012_src_valid),                          //          .valid
		.src_data           (router_012_src_data),                           //          .data
		.src_channel        (router_012_src_channel),                        //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (otg_hpi_w_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (otg_hpi_w_s1_agent_rp_valid),                   //          .valid
		.sink_data          (otg_hpi_w_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (otg_hpi_w_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (otg_hpi_w_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                          //       src.ready
		.src_valid          (router_013_src_valid),                          //          .valid
		.src_data           (router_013_src_data),                           //          .data
		.src_channel        (router_013_src_channel),                        //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (oneball_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (oneball_s1_agent_rp_valid),                     //          .valid
		.sink_data          (oneball_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (oneball_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (oneball_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                          //       src.ready
		.src_valid          (router_014_src_valid),                          //          .valid
		.src_data           (router_014_src_data),                           //          .data
		.src_channel        (router_014_src_channel),                        //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (twoball_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (twoball_s1_agent_rp_valid),                     //          .valid
		.sink_data          (twoball_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (twoball_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (twoball_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                          //       src.ready
		.src_valid          (router_015_src_valid),                          //          .valid
		.src_data           (router_015_src_data),                           //          .data
		.src_channel        (router_015_src_channel),                        //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (threeball_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (threeball_s1_agent_rp_valid),                   //          .valid
		.sink_data          (threeball_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (threeball_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (threeball_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                          //       src.ready
		.src_valid          (router_016_src_valid),                          //          .valid
		.src_data           (router_016_src_data),                           //          .data
		.src_channel        (router_016_src_channel),                        //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (fourball_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (fourball_s1_agent_rp_valid),                    //          .valid
		.sink_data          (fourball_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (fourball_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (fourball_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                          //       src.ready
		.src_valid          (router_017_src_valid),                          //          .valid
		.src_data           (router_017_src_data),                           //          .data
		.src_channel        (router_017_src_channel),                        //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (fiveball_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (fiveball_s1_agent_rp_valid),                    //          .valid
		.sink_data          (fiveball_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (fiveball_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (fiveball_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                          //       src.ready
		.src_valid          (router_018_src_valid),                          //          .valid
		.src_data           (router_018_src_data),                           //          .data
		.src_channel        (router_018_src_channel),                        //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (sixball_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sixball_s1_agent_rp_valid),                     //          .valid
		.sink_data          (sixball_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (sixball_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sixball_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                          //       src.ready
		.src_valid          (router_019_src_valid),                          //          .valid
		.src_data           (router_019_src_data),                           //          .data
		.src_channel        (router_019_src_channel),                        //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_020 (
		.sink_ready         (sevenball_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (sevenball_s1_agent_rp_valid),                   //          .valid
		.sink_data          (sevenball_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (sevenball_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (sevenball_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                          //       src.ready
		.src_valid          (router_020_src_valid),                          //          .valid
		.src_data           (router_020_src_data),                           //          .data
		.src_channel        (router_020_src_channel),                        //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_021 (
		.sink_ready         (eightball_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (eightball_s1_agent_rp_valid),                   //          .valid
		.sink_data          (eightball_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (eightball_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (eightball_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                          //       src.ready
		.src_valid          (router_021_src_valid),                          //          .valid
		.src_data           (router_021_src_data),                           //          .data
		.src_channel        (router_021_src_channel),                        //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_022 (
		.sink_ready         (nineball_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (nineball_s1_agent_rp_valid),                    //          .valid
		.sink_data          (nineball_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (nineball_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (nineball_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                          //       src.ready
		.src_valid          (router_022_src_valid),                          //          .valid
		.src_data           (router_022_src_data),                           //          .data
		.src_channel        (router_022_src_channel),                        //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_023 (
		.sink_ready         (tenball_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (tenball_s1_agent_rp_valid),                     //          .valid
		.sink_data          (tenball_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (tenball_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (tenball_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                          //       src.ready
		.src_valid          (router_023_src_valid),                          //          .valid
		.src_data           (router_023_src_data),                           //          .data
		.src_channel        (router_023_src_channel),                        //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_024 (
		.sink_ready         (elevenball_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (elevenball_s1_agent_rp_valid),                  //          .valid
		.sink_data          (elevenball_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (elevenball_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (elevenball_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                          //       src.ready
		.src_valid          (router_024_src_valid),                          //          .valid
		.src_data           (router_024_src_data),                           //          .data
		.src_channel        (router_024_src_channel),                        //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_025 (
		.sink_ready         (twelveball_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (twelveball_s1_agent_rp_valid),                  //          .valid
		.sink_data          (twelveball_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (twelveball_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (twelveball_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                          //       src.ready
		.src_valid          (router_025_src_valid),                          //          .valid
		.src_data           (router_025_src_data),                           //          .data
		.src_channel        (router_025_src_channel),                        //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_026 (
		.sink_ready         (thirteenball_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (thirteenball_s1_agent_rp_valid),                //          .valid
		.sink_data          (thirteenball_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (thirteenball_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (thirteenball_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                          //       src.ready
		.src_valid          (router_026_src_valid),                          //          .valid
		.src_data           (router_026_src_data),                           //          .data
		.src_channel        (router_026_src_channel),                        //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_027 (
		.sink_ready         (fourteenball_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (fourteenball_s1_agent_rp_valid),                //          .valid
		.sink_data          (fourteenball_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (fourteenball_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (fourteenball_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                          //       src.ready
		.src_valid          (router_027_src_valid),                          //          .valid
		.src_data           (router_027_src_data),                           //          .data
		.src_channel        (router_027_src_channel),                        //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_028 (
		.sink_ready         (fifteenball_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (fifteenball_s1_agent_rp_valid),                 //          .valid
		.sink_data          (fifteenball_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (fifteenball_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (fifteenball_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                          //       src.ready
		.src_valid          (router_028_src_valid),                          //          .valid
		.src_data           (router_028_src_data),                           //          .data
		.src_channel        (router_028_src_channel),                        //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_029 (
		.sink_ready         (cueball_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (cueball_s1_agent_rp_valid),                     //          .valid
		.sink_data          (cueball_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (cueball_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (cueball_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                          //       src.ready
		.src_valid          (router_029_src_valid),                          //          .valid
		.src_data           (router_029_src_data),                           //          .data
		.src_channel        (router_029_src_channel),                        //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_030 (
		.sink_ready         (poolcue_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (poolcue_s1_agent_rp_valid),                     //          .valid
		.sink_data          (poolcue_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (poolcue_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (poolcue_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_030_src_ready),                          //       src.ready
		.src_valid          (router_030_src_valid),                          //          .valid
		.src_data           (router_030_src_data),                           //          .data
		.src_channel        (router_030_src_channel),                        //          .channel
		.src_startofpacket  (router_030_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_031 (
		.sink_ready         (reset_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (reset_s1_agent_rp_valid),                       //          .valid
		.sink_data          (reset_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (reset_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (reset_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_031_src_ready),                          //       src.ready
		.src_valid          (router_031_src_valid),                          //          .valid
		.src_data           (router_031_src_data),                           //          .data
		.src_channel        (router_031_src_channel),                        //          .channel
		.src_startofpacket  (router_031_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_032 (
		.sink_ready         (hw_sig_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (hw_sig_s1_agent_rp_valid),                      //          .valid
		.sink_data          (hw_sig_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (hw_sig_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (hw_sig_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_032_src_ready),                          //       src.ready
		.src_valid          (router_032_src_valid),                          //          .valid
		.src_data           (router_032_src_data),                           //          .data
		.src_channel        (router_032_src_channel),                        //          .channel
		.src_startofpacket  (router_032_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_033 (
		.sink_ready         (stick_direction_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (stick_direction_s1_agent_rp_valid),             //          .valid
		.sink_data          (stick_direction_s1_agent_rp_data),              //          .data
		.sink_startofpacket (stick_direction_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (stick_direction_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_033_src_ready),                          //       src.ready
		.src_valid          (router_033_src_valid),                          //          .valid
		.src_data           (router_033_src_data),                           //          .data
		.src_channel        (router_033_src_channel),                        //          .channel
		.src_startofpacket  (router_033_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                                 //      sink.ready
		.sink_channel        (router_src_channel),                               //          .channel
		.sink_data           (router_src_data),                                  //          .data
		.sink_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                           //          .endofpacket
		.sink_valid          (router_src_valid),                                 //          .valid
		.src0_ready          (cmd_demux_src0_ready),                             //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                             //          .valid
		.src0_data           (cmd_demux_src0_data),                              //          .data
		.src0_channel        (cmd_demux_src0_channel),                           //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                             //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                             //          .valid
		.src1_data           (cmd_demux_src1_data),                              //          .data
		.src1_channel        (cmd_demux_src1_channel),                           //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                             //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                             //          .valid
		.src2_data           (cmd_demux_src2_data),                              //          .data
		.src2_channel        (cmd_demux_src2_channel),                           //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                             //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                             //          .valid
		.src3_data           (cmd_demux_src3_data),                              //          .data
		.src3_channel        (cmd_demux_src3_channel),                           //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                             //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                             //          .valid
		.src4_data           (cmd_demux_src4_data),                              //          .data
		.src4_channel        (cmd_demux_src4_channel),                           //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                       //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                             //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                             //          .valid
		.src5_data           (cmd_demux_src5_data),                              //          .data
		.src5_channel        (cmd_demux_src5_channel),                           //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                       //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                             //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                             //          .valid
		.src6_data           (cmd_demux_src6_data),                              //          .data
		.src6_channel        (cmd_demux_src6_channel),                           //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                       //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                             //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                             //          .valid
		.src7_data           (cmd_demux_src7_data),                              //          .data
		.src7_channel        (cmd_demux_src7_channel),                           //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                       //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                             //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                             //          .valid
		.src8_data           (cmd_demux_src8_data),                              //          .data
		.src8_channel        (cmd_demux_src8_channel),                           //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                     //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                       //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                             //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                             //          .valid
		.src9_data           (cmd_demux_src9_data),                              //          .data
		.src9_channel        (cmd_demux_src9_channel),                           //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                     //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                       //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                            //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                            //          .valid
		.src10_data          (cmd_demux_src10_data),                             //          .data
		.src10_channel       (cmd_demux_src10_channel),                          //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                    //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                      //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                            //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                            //          .valid
		.src11_data          (cmd_demux_src11_data),                             //          .data
		.src11_channel       (cmd_demux_src11_channel),                          //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                    //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                      //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                            //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                            //          .valid
		.src12_data          (cmd_demux_src12_data),                             //          .data
		.src12_channel       (cmd_demux_src12_channel),                          //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                    //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                      //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                            //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                            //          .valid
		.src13_data          (cmd_demux_src13_data),                             //          .data
		.src13_channel       (cmd_demux_src13_channel),                          //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                    //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                      //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                            //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                            //          .valid
		.src14_data          (cmd_demux_src14_data),                             //          .data
		.src14_channel       (cmd_demux_src14_channel),                          //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                    //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                      //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                            //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                            //          .valid
		.src15_data          (cmd_demux_src15_data),                             //          .data
		.src15_channel       (cmd_demux_src15_channel),                          //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                    //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                      //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                            //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                            //          .valid
		.src16_data          (cmd_demux_src16_data),                             //          .data
		.src16_channel       (cmd_demux_src16_channel),                          //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                    //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                      //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                            //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                            //          .valid
		.src17_data          (cmd_demux_src17_data),                             //          .data
		.src17_channel       (cmd_demux_src17_channel),                          //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                    //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                      //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                            //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                            //          .valid
		.src18_data          (cmd_demux_src18_data),                             //          .data
		.src18_channel       (cmd_demux_src18_channel),                          //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                    //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                      //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                            //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                            //          .valid
		.src19_data          (cmd_demux_src19_data),                             //          .data
		.src19_channel       (cmd_demux_src19_channel),                          //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                    //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                      //          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                            //     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                            //          .valid
		.src20_data          (cmd_demux_src20_data),                             //          .data
		.src20_channel       (cmd_demux_src20_channel),                          //          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                    //          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                      //          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                            //     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                            //          .valid
		.src21_data          (cmd_demux_src21_data),                             //          .data
		.src21_channel       (cmd_demux_src21_channel),                          //          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                    //          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                      //          .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                            //     src22.ready
		.src22_valid         (cmd_demux_src22_valid),                            //          .valid
		.src22_data          (cmd_demux_src22_data),                             //          .data
		.src22_channel       (cmd_demux_src22_channel),                          //          .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),                    //          .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),                      //          .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                            //     src23.ready
		.src23_valid         (cmd_demux_src23_valid),                            //          .valid
		.src23_data          (cmd_demux_src23_data),                             //          .data
		.src23_channel       (cmd_demux_src23_channel),                          //          .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),                    //          .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),                      //          .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                            //     src24.ready
		.src24_valid         (cmd_demux_src24_valid),                            //          .valid
		.src24_data          (cmd_demux_src24_data),                             //          .data
		.src24_channel       (cmd_demux_src24_channel),                          //          .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),                    //          .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket),                      //          .endofpacket
		.src25_ready         (cmd_demux_src25_ready),                            //     src25.ready
		.src25_valid         (cmd_demux_src25_valid),                            //          .valid
		.src25_data          (cmd_demux_src25_data),                             //          .data
		.src25_channel       (cmd_demux_src25_channel),                          //          .channel
		.src25_startofpacket (cmd_demux_src25_startofpacket),                    //          .startofpacket
		.src25_endofpacket   (cmd_demux_src25_endofpacket),                      //          .endofpacket
		.src26_ready         (cmd_demux_src26_ready),                            //     src26.ready
		.src26_valid         (cmd_demux_src26_valid),                            //          .valid
		.src26_data          (cmd_demux_src26_data),                             //          .data
		.src26_channel       (cmd_demux_src26_channel),                          //          .channel
		.src26_startofpacket (cmd_demux_src26_startofpacket),                    //          .startofpacket
		.src26_endofpacket   (cmd_demux_src26_endofpacket),                      //          .endofpacket
		.src27_ready         (cmd_demux_src27_ready),                            //     src27.ready
		.src27_valid         (cmd_demux_src27_valid),                            //          .valid
		.src27_data          (cmd_demux_src27_data),                             //          .data
		.src27_channel       (cmd_demux_src27_channel),                          //          .channel
		.src27_startofpacket (cmd_demux_src27_startofpacket),                    //          .startofpacket
		.src27_endofpacket   (cmd_demux_src27_endofpacket),                      //          .endofpacket
		.src28_ready         (cmd_demux_src28_ready),                            //     src28.ready
		.src28_valid         (cmd_demux_src28_valid),                            //          .valid
		.src28_data          (cmd_demux_src28_data),                             //          .data
		.src28_channel       (cmd_demux_src28_channel),                          //          .channel
		.src28_startofpacket (cmd_demux_src28_startofpacket),                    //          .startofpacket
		.src28_endofpacket   (cmd_demux_src28_endofpacket),                      //          .endofpacket
		.src29_ready         (cmd_demux_src29_ready),                            //     src29.ready
		.src29_valid         (cmd_demux_src29_valid),                            //          .valid
		.src29_data          (cmd_demux_src29_data),                             //          .data
		.src29_channel       (cmd_demux_src29_channel),                          //          .channel
		.src29_startofpacket (cmd_demux_src29_startofpacket),                    //          .startofpacket
		.src29_endofpacket   (cmd_demux_src29_endofpacket),                      //          .endofpacket
		.src30_ready         (cmd_demux_src30_ready),                            //     src30.ready
		.src30_valid         (cmd_demux_src30_valid),                            //          .valid
		.src30_data          (cmd_demux_src30_data),                             //          .data
		.src30_channel       (cmd_demux_src30_channel),                          //          .channel
		.src30_startofpacket (cmd_demux_src30_startofpacket),                    //          .startofpacket
		.src30_endofpacket   (cmd_demux_src30_endofpacket),                      //          .endofpacket
		.src31_ready         (cmd_demux_src31_ready),                            //     src31.ready
		.src31_valid         (cmd_demux_src31_valid),                            //          .valid
		.src31_data          (cmd_demux_src31_data),                             //          .data
		.src31_channel       (cmd_demux_src31_channel),                          //          .channel
		.src31_startofpacket (cmd_demux_src31_startofpacket),                    //          .startofpacket
		.src31_endofpacket   (cmd_demux_src31_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                             //      sink.ready
		.sink_channel       (router_001_src_channel),                           //          .channel
		.sink_data          (router_001_src_data),                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                         //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.src1_data          (cmd_demux_001_src1_data),                          //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                         //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                         //          .valid
		.src2_data          (cmd_demux_001_src2_data),                          //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                       //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                   //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                         //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                         //          .valid
		.src3_data          (cmd_demux_001_src3_data),                          //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                       //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                   //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                         //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                         //          .valid
		.src4_data          (cmd_demux_001_src4_data),                          //          .data
		.src4_channel       (cmd_demux_001_src4_channel),                       //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                 //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                           //          .channel
		.sink0_data          (cmd_demux_src1_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                            //          .valid
		.src_data            (cmd_mux_002_src_data),                             //          .data
		.src_channel         (cmd_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                           //          .channel
		.sink0_data          (cmd_demux_src2_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                            //          .valid
		.src_data            (cmd_mux_003_src_data),                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                           //          .channel
		.sink0_data          (cmd_demux_src3_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                            //          .valid
		.src_data            (cmd_mux_004_src_data),                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                           //          .channel
		.sink0_data          (cmd_demux_src4_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (sdram_pll_c0_clk),                        //       clk.clk
		.reset               (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_out_valid),                       //          .valid
		.sink0_channel       (crosser_out_channel),                     //          .channel
		.sink0_data          (crosser_out_data),                        //          .data
		.sink0_startofpacket (crosser_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                 //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                   //          .valid
		.sink1_channel       (crosser_001_out_channel),                 //          .channel
		.sink1_data          (crosser_001_out_data),                    //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket)              //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                        //          .channel
		.sink0_data          (cmd_demux_src6_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                         //          .valid
		.src_data            (cmd_mux_007_src_data),                          //          .data
		.src_channel         (cmd_mux_007_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                        //          .channel
		.sink0_data          (cmd_demux_src7_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                         //          .valid
		.src_data            (cmd_mux_008_src_data),                          //          .data
		.src_channel         (cmd_mux_008_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                        //          .channel
		.sink0_data          (cmd_demux_src8_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                         //          .valid
		.src_data            (cmd_mux_009_src_data),                          //          .data
		.src_channel         (cmd_mux_009_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                        //          .channel
		.sink0_data          (cmd_demux_src9_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                         //          .valid
		.src_data            (cmd_mux_010_src_data),                          //          .data
		.src_channel         (cmd_mux_010_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                       //          .channel
		.sink0_data          (cmd_demux_src10_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                         //          .valid
		.src_data            (cmd_mux_011_src_data),                          //          .data
		.src_channel         (cmd_mux_011_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                       //          .channel
		.sink0_data          (cmd_demux_src11_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                         //          .valid
		.src_data            (cmd_mux_012_src_data),                          //          .data
		.src_channel         (cmd_mux_012_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                       //          .channel
		.sink0_data          (cmd_demux_src12_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                         //          .valid
		.src_data            (cmd_mux_013_src_data),                          //          .data
		.src_channel         (cmd_mux_013_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                       //          .channel
		.sink0_data          (cmd_demux_src13_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                         //          .valid
		.src_data            (cmd_mux_014_src_data),                          //          .data
		.src_channel         (cmd_mux_014_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                       //          .channel
		.sink0_data          (cmd_demux_src14_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                         //          .valid
		.src_data            (cmd_mux_015_src_data),                          //          .data
		.src_channel         (cmd_mux_015_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                       //          .channel
		.sink0_data          (cmd_demux_src15_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                         //          .valid
		.src_data            (cmd_mux_016_src_data),                          //          .data
		.src_channel         (cmd_mux_016_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                       //          .channel
		.sink0_data          (cmd_demux_src16_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                         //          .valid
		.src_data            (cmd_mux_017_src_data),                          //          .data
		.src_channel         (cmd_mux_017_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                       //          .channel
		.sink0_data          (cmd_demux_src17_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                         //          .valid
		.src_data            (cmd_mux_018_src_data),                          //          .data
		.src_channel         (cmd_mux_018_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                       //          .channel
		.sink0_data          (cmd_demux_src18_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                         //          .valid
		.src_data            (cmd_mux_019_src_data),                          //          .data
		.src_channel         (cmd_mux_019_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                       //          .channel
		.sink0_data          (cmd_demux_src19_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_020 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                         //          .valid
		.src_data            (cmd_mux_020_src_data),                          //          .data
		.src_channel         (cmd_mux_020_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                       //          .channel
		.sink0_data          (cmd_demux_src20_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_021 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                         //          .valid
		.src_data            (cmd_mux_021_src_data),                          //          .data
		.src_channel         (cmd_mux_021_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                       //          .channel
		.sink0_data          (cmd_demux_src21_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_022 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                         //          .valid
		.src_data            (cmd_mux_022_src_data),                          //          .data
		.src_channel         (cmd_mux_022_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src22_channel),                       //          .channel
		.sink0_data          (cmd_demux_src22_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_023 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                         //          .valid
		.src_data            (cmd_mux_023_src_data),                          //          .data
		.src_channel         (cmd_mux_023_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src23_channel),                       //          .channel
		.sink0_data          (cmd_demux_src23_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_024 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                         //          .valid
		.src_data            (cmd_mux_024_src_data),                          //          .data
		.src_channel         (cmd_mux_024_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src24_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src24_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src24_channel),                       //          .channel
		.sink0_data          (cmd_demux_src24_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src24_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src24_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_025 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                         //          .valid
		.src_data            (cmd_mux_025_src_data),                          //          .data
		.src_channel         (cmd_mux_025_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src25_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src25_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src25_channel),                       //          .channel
		.sink0_data          (cmd_demux_src25_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src25_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src25_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_026 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                         //          .valid
		.src_data            (cmd_mux_026_src_data),                          //          .data
		.src_channel         (cmd_mux_026_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src26_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src26_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src26_channel),                       //          .channel
		.sink0_data          (cmd_demux_src26_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src26_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src26_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_027 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                         //          .valid
		.src_data            (cmd_mux_027_src_data),                          //          .data
		.src_channel         (cmd_mux_027_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src27_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src27_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src27_channel),                       //          .channel
		.sink0_data          (cmd_demux_src27_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src27_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src27_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_028 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                         //          .valid
		.src_data            (cmd_mux_028_src_data),                          //          .data
		.src_channel         (cmd_mux_028_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src28_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src28_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src28_channel),                       //          .channel
		.sink0_data          (cmd_demux_src28_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src28_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src28_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_029 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                         //          .valid
		.src_data            (cmd_mux_029_src_data),                          //          .data
		.src_channel         (cmd_mux_029_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src29_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src29_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src29_channel),                       //          .channel
		.sink0_data          (cmd_demux_src29_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src29_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src29_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_030 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_030_src_valid),                         //          .valid
		.src_data            (cmd_mux_030_src_data),                          //          .data
		.src_channel         (cmd_mux_030_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src30_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src30_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src30_channel),                       //          .channel
		.sink0_data          (cmd_demux_src30_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src30_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src30_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_031 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_031_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_031_src_valid),                         //          .valid
		.src_data            (cmd_mux_031_src_data),                          //          .data
		.src_channel         (cmd_mux_031_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_031_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_031_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src31_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src31_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src31_channel),                       //          .channel
		.sink0_data          (cmd_demux_src31_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src31_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src31_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //      sink.ready
		.sink_channel       (router_002_src_channel),                        //          .channel
		.sink_data          (router_002_src_data),                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                             //      sink.ready
		.sink_channel       (router_003_src_channel),                           //          .channel
		.sink_data          (router_003_src_data),                              //          .data
		.sink_startofpacket (router_003_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_003_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_001_src1_data),                          //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //      sink.ready
		.sink_channel       (router_004_src_channel),                           //          .channel
		.sink_data          (router_004_src_data),                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_002_src1_data),                          //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_003_src1_data),                          //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                             //      sink.ready
		.sink_channel       (router_006_src_channel),                           //          .channel
		.sink_data          (router_006_src_data),                              //          .data
		.sink_startofpacket (router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_006_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_004_src1_data),                          //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_005 (
		.clk                (sdram_pll_c0_clk),                        //       clk.clk
		.reset              (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                //          .valid
		.src1_data          (rsp_demux_005_src1_data),                 //          .data
		.src1_channel       (rsp_demux_005_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                          //      sink.ready
		.sink_channel       (router_010_src_channel),                        //          .channel
		.sink_data          (router_010_src_data),                           //          .data
		.sink_startofpacket (router_010_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_010_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //      sink.ready
		.sink_channel       (router_011_src_channel),                        //          .channel
		.sink_data          (router_011_src_data),                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_009_src0_data),                       //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                          //      sink.ready
		.sink_channel       (router_012_src_channel),                        //          .channel
		.sink_data          (router_012_src_data),                           //          .data
		.sink_startofpacket (router_012_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_012_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_010_src0_data),                       //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                          //      sink.ready
		.sink_channel       (router_013_src_channel),                        //          .channel
		.sink_data          (router_013_src_data),                           //          .data
		.sink_startofpacket (router_013_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_013_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_011_src0_data),                       //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                          //      sink.ready
		.sink_channel       (router_014_src_channel),                        //          .channel
		.sink_data          (router_014_src_data),                           //          .data
		.sink_startofpacket (router_014_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_014_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_012_src0_data),                       //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                          //      sink.ready
		.sink_channel       (router_015_src_channel),                        //          .channel
		.sink_data          (router_015_src_data),                           //          .data
		.sink_startofpacket (router_015_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_015_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_013_src0_data),                       //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                          //      sink.ready
		.sink_channel       (router_016_src_channel),                        //          .channel
		.sink_data          (router_016_src_data),                           //          .data
		.sink_startofpacket (router_016_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_016_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_014_src0_data),                       //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                          //      sink.ready
		.sink_channel       (router_017_src_channel),                        //          .channel
		.sink_data          (router_017_src_data),                           //          .data
		.sink_startofpacket (router_017_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_017_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_015_src0_data),                       //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                          //      sink.ready
		.sink_channel       (router_018_src_channel),                        //          .channel
		.sink_data          (router_018_src_data),                           //          .data
		.sink_startofpacket (router_018_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_018_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_016_src0_data),                       //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                          //      sink.ready
		.sink_channel       (router_019_src_channel),                        //          .channel
		.sink_data          (router_019_src_data),                           //          .data
		.sink_startofpacket (router_019_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_019_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_017_src0_data),                       //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                          //      sink.ready
		.sink_channel       (router_020_src_channel),                        //          .channel
		.sink_data          (router_020_src_data),                           //          .data
		.sink_startofpacket (router_020_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_020_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_018_src0_data),                       //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                          //      sink.ready
		.sink_channel       (router_021_src_channel),                        //          .channel
		.sink_data          (router_021_src_data),                           //          .data
		.sink_startofpacket (router_021_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_021_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_019_src0_data),                       //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_020 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                          //      sink.ready
		.sink_channel       (router_022_src_channel),                        //          .channel
		.sink_data          (router_022_src_data),                           //          .data
		.sink_startofpacket (router_022_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_022_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_020_src0_data),                       //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_021 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                          //      sink.ready
		.sink_channel       (router_023_src_channel),                        //          .channel
		.sink_data          (router_023_src_data),                           //          .data
		.sink_startofpacket (router_023_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_023_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_021_src0_data),                       //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_022 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                          //      sink.ready
		.sink_channel       (router_024_src_channel),                        //          .channel
		.sink_data          (router_024_src_data),                           //          .data
		.sink_startofpacket (router_024_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_024_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_022_src0_data),                       //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_023 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                          //      sink.ready
		.sink_channel       (router_025_src_channel),                        //          .channel
		.sink_data          (router_025_src_data),                           //          .data
		.sink_startofpacket (router_025_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_025_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_023_src0_data),                       //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_024 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                          //      sink.ready
		.sink_channel       (router_026_src_channel),                        //          .channel
		.sink_data          (router_026_src_data),                           //          .data
		.sink_startofpacket (router_026_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_026_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_024_src0_data),                       //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_025 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                          //      sink.ready
		.sink_channel       (router_027_src_channel),                        //          .channel
		.sink_data          (router_027_src_data),                           //          .data
		.sink_startofpacket (router_027_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_027_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_025_src0_data),                       //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_026 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                          //      sink.ready
		.sink_channel       (router_028_src_channel),                        //          .channel
		.sink_data          (router_028_src_data),                           //          .data
		.sink_startofpacket (router_028_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_028_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_026_src0_data),                       //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_027 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                          //      sink.ready
		.sink_channel       (router_029_src_channel),                        //          .channel
		.sink_data          (router_029_src_data),                           //          .data
		.sink_startofpacket (router_029_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_029_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_027_src0_data),                       //          .data
		.src0_channel       (rsp_demux_027_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_028 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                          //      sink.ready
		.sink_channel       (router_030_src_channel),                        //          .channel
		.sink_data          (router_030_src_data),                           //          .data
		.sink_startofpacket (router_030_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_030_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_028_src0_data),                       //          .data
		.src0_channel       (rsp_demux_028_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_029 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                          //      sink.ready
		.sink_channel       (router_031_src_channel),                        //          .channel
		.sink_data          (router_031_src_data),                           //          .data
		.sink_startofpacket (router_031_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_031_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_029_src0_data),                       //          .data
		.src0_channel       (rsp_demux_029_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_030 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                          //      sink.ready
		.sink_channel       (router_032_src_channel),                        //          .channel
		.sink_data          (router_032_src_data),                           //          .data
		.sink_startofpacket (router_032_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_032_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_030_src0_data),                       //          .data
		.src0_channel       (rsp_demux_030_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_031 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_033_src_ready),                          //      sink.ready
		.sink_channel       (router_033_src_channel),                        //          .channel
		.sink_data          (router_033_src_data),                           //          .data
		.sink_startofpacket (router_033_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_033_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_031_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_031_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_031_src0_data),                       //          .data
		.src0_channel       (rsp_demux_031_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_031_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_031_src0_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                    //       clk.clk
		.reset                (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                //       src.ready
		.src_valid            (rsp_mux_src_valid),                                //          .valid
		.src_data             (rsp_mux_src_data),                                 //          .data
		.src_channel          (rsp_mux_src_channel),                              //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                             //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                             //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                           //          .channel
		.sink0_data           (rsp_demux_src0_data),                              //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                         //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                       //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                          //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                         //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                         //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                       //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                          //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                         //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                         //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                       //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                          //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                         //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                         //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                       //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                          //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                   //          .endofpacket
		.sink5_ready          (crosser_002_out_ready),                            //     sink5.ready
		.sink5_valid          (crosser_002_out_valid),                            //          .valid
		.sink5_channel        (crosser_002_out_channel),                          //          .channel
		.sink5_data           (crosser_002_out_data),                             //          .data
		.sink5_startofpacket  (crosser_002_out_startofpacket),                    //          .startofpacket
		.sink5_endofpacket    (crosser_002_out_endofpacket),                      //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                         //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                         //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                       //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                          //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                   //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                         //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                         //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                       //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                          //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                   //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                         //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                         //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                       //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                          //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                 //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                   //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                         //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                         //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                       //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                          //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                 //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                   //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                         //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                         //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                       //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                          //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                 //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                   //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                         //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                         //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                       //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                          //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                   //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                         //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                         //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                       //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                          //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                   //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                         //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                         //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                       //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                          //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                   //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                         //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                         //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                       //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                          //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                 //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                   //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                         //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                         //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                       //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                          //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                 //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                   //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                         //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                         //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                       //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                          //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                 //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                   //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                         //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                         //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                       //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                          //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                 //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                   //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                         //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                         //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                       //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                          //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                 //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                   //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                         //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                         //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                       //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                          //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                 //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                   //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                         //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                         //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                       //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                          //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                 //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                   //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                         //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                         //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                       //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                          //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),                 //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                   //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                         //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                         //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                       //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                          //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),                 //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                   //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                         //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                         //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                       //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                          //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),                 //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),                   //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                         //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                         //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                       //          .channel
		.sink24_data          (rsp_demux_024_src0_data),                          //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),                 //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),                   //          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),                         //    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),                         //          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),                       //          .channel
		.sink25_data          (rsp_demux_025_src0_data),                          //          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),                 //          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),                   //          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),                         //    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),                         //          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),                       //          .channel
		.sink26_data          (rsp_demux_026_src0_data),                          //          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),                 //          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket),                   //          .endofpacket
		.sink27_ready         (rsp_demux_027_src0_ready),                         //    sink27.ready
		.sink27_valid         (rsp_demux_027_src0_valid),                         //          .valid
		.sink27_channel       (rsp_demux_027_src0_channel),                       //          .channel
		.sink27_data          (rsp_demux_027_src0_data),                          //          .data
		.sink27_startofpacket (rsp_demux_027_src0_startofpacket),                 //          .startofpacket
		.sink27_endofpacket   (rsp_demux_027_src0_endofpacket),                   //          .endofpacket
		.sink28_ready         (rsp_demux_028_src0_ready),                         //    sink28.ready
		.sink28_valid         (rsp_demux_028_src0_valid),                         //          .valid
		.sink28_channel       (rsp_demux_028_src0_channel),                       //          .channel
		.sink28_data          (rsp_demux_028_src0_data),                          //          .data
		.sink28_startofpacket (rsp_demux_028_src0_startofpacket),                 //          .startofpacket
		.sink28_endofpacket   (rsp_demux_028_src0_endofpacket),                   //          .endofpacket
		.sink29_ready         (rsp_demux_029_src0_ready),                         //    sink29.ready
		.sink29_valid         (rsp_demux_029_src0_valid),                         //          .valid
		.sink29_channel       (rsp_demux_029_src0_channel),                       //          .channel
		.sink29_data          (rsp_demux_029_src0_data),                          //          .data
		.sink29_startofpacket (rsp_demux_029_src0_startofpacket),                 //          .startofpacket
		.sink29_endofpacket   (rsp_demux_029_src0_endofpacket),                   //          .endofpacket
		.sink30_ready         (rsp_demux_030_src0_ready),                         //    sink30.ready
		.sink30_valid         (rsp_demux_030_src0_valid),                         //          .valid
		.sink30_channel       (rsp_demux_030_src0_channel),                       //          .channel
		.sink30_data          (rsp_demux_030_src0_data),                          //          .data
		.sink30_startofpacket (rsp_demux_030_src0_startofpacket),                 //          .startofpacket
		.sink30_endofpacket   (rsp_demux_030_src0_endofpacket),                   //          .endofpacket
		.sink31_ready         (rsp_demux_031_src0_ready),                         //    sink31.ready
		.sink31_valid         (rsp_demux_031_src0_valid),                         //          .valid
		.sink31_channel       (rsp_demux_031_src0_channel),                       //          .channel
		.sink31_data          (rsp_demux_031_src0_data),                          //          .data
		.sink31_startofpacket (rsp_demux_031_src0_startofpacket),                 //          .startofpacket
		.sink31_endofpacket   (rsp_demux_031_src0_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                            //          .valid
		.src_data            (rsp_mux_001_src_data),                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_001_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_001_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_001_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_001_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_001_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                         //          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                       //          .channel
		.sink1_data          (rsp_demux_002_src1_data),                          //          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket),                   //          .endofpacket
		.sink2_ready         (rsp_demux_003_src1_ready),                         //     sink2.ready
		.sink2_valid         (rsp_demux_003_src1_valid),                         //          .valid
		.sink2_channel       (rsp_demux_003_src1_channel),                       //          .channel
		.sink2_data          (rsp_demux_003_src1_data),                          //          .data
		.sink2_startofpacket (rsp_demux_003_src1_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_003_src1_endofpacket),                   //          .endofpacket
		.sink3_ready         (rsp_demux_004_src1_ready),                         //     sink3.ready
		.sink3_valid         (rsp_demux_004_src1_valid),                         //          .valid
		.sink3_channel       (rsp_demux_004_src1_channel),                       //          .channel
		.sink3_data          (rsp_demux_004_src1_data),                          //          .data
		.sink3_startofpacket (rsp_demux_004_src1_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_004_src1_endofpacket),                   //          .endofpacket
		.sink4_ready         (crosser_003_out_ready),                            //     sink4.ready
		.sink4_valid         (crosser_003_out_valid),                            //          .valid
		.sink4_channel       (crosser_003_out_channel),                          //          .channel
		.sink4_data          (crosser_003_out_data),                             //          .data
		.sink4_startofpacket (crosser_003_out_startofpacket),                    //          .startofpacket
		.sink4_endofpacket   (crosser_003_out_endofpacket)                       //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (109),
		.BITS_PER_SYMBOL     (109),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                    //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sdram_pll_c0_clk),                                 //       out_clk.clk
		.out_reset         (sdram_reset_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                             //            in.ready
		.in_valid          (cmd_demux_src5_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                           //              .channel
		.in_data           (cmd_demux_src5_data),                              //              .data
		.out_ready         (crosser_out_ready),                                //           out.ready
		.out_valid         (crosser_out_valid),                                //              .valid
		.out_startofpacket (crosser_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_out_channel),                              //              .channel
		.out_data          (crosser_out_data),                                 //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (109),
		.BITS_PER_SYMBOL     (109),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                    //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sdram_pll_c0_clk),                                 //       out_clk.clk
		.out_reset         (sdram_reset_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                         //            in.ready
		.in_valid          (cmd_demux_001_src4_valid),                         //              .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),                   //              .endofpacket
		.in_channel        (cmd_demux_001_src4_channel),                       //              .channel
		.in_data           (cmd_demux_001_src4_data),                          //              .data
		.out_ready         (crosser_001_out_ready),                            //           out.ready
		.out_valid         (crosser_001_out_valid),                            //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_001_out_channel),                          //              .channel
		.out_data          (crosser_001_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (109),
		.BITS_PER_SYMBOL     (109),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (sdram_pll_c0_clk),                                 //        in_clk.clk
		.in_reset          (sdram_reset_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                    //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                       //              .channel
		.in_data           (rsp_demux_005_src0_data),                          //              .data
		.out_ready         (crosser_002_out_ready),                            //           out.ready
		.out_valid         (crosser_002_out_valid),                            //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_002_out_channel),                          //              .channel
		.out_data          (crosser_002_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (109),
		.BITS_PER_SYMBOL     (109),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (sdram_pll_c0_clk),                                 //        in_clk.clk
		.in_reset          (sdram_reset_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                    //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src1_ready),                         //            in.ready
		.in_valid          (rsp_demux_005_src1_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_005_src1_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src1_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_005_src1_channel),                       //              .channel
		.in_data           (rsp_demux_005_src1_data),                          //              .data
		.out_ready         (crosser_003_out_ready),                            //           out.ready
		.out_valid         (crosser_003_out_valid),                            //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_003_out_channel),                          //              .channel
		.out_data          (crosser_003_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

endmodule
